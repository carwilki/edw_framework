# Databricks notebook source
#Code converted on 2023-08-24 12:13:01
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from Datalake.utils.genericUtilities import *
from Datalake.utils.configs import *
from Datalake.utils.mergeUtils import *
from Datalake.utils.logger import *

# COMMAND ----------

# parser = argparse.ArgumentParser()
# parser.add_argument('env', type=str, help='Env Variable')
# args = parser.parse_args()
# env = args.env

spark = SparkSession.getActiveSession()
dbutils = DBUtils(spark)

dbutils.widgets.text(name='env', defaultValue='dev')
env = dbutils.widgets.get('env')

if env is None or env == '':
    raise ValueError('env is not set')

refine = getEnvPrefix(env) + 'refine'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'
empl_protected = getEnvPrefix(env) + 'empl_protected'


# COMMAND ----------

# Processing node LKP_EMPLOYEE_PROFILE_WK_SRC, type SOURCE Cached data from connected lookup object
# COLUMN COUNT: 1

_sql = f"""
SELECT EMP.PS_DEPT_CD as PS_DEPT_CD, EMP.EMPLOYEE_ID as EMPLOYEE_ID, D.START_DT as START_DT, EMP.END_WK as END_DT 
FROM (SELECT EMPLOYEE_ID
            ,PS_DEPT_CD
            ,MIN(WEEK_DT) AS START_WK
            ,MAX(WEEK_DT) AS END_WK 
            FROM {empl_protected}.LEGACY_EMPLOYEE_PROFILE_WK
            GROUP BY EMPLOYEE_ID,PS_DEPT_CD
            ) EMP
LEFT JOIN 
(SELECT WEEK_DT,MIN(DAY_DT) AS START_DT 
 FROM {legacy}.DAYS
 GROUP BY WEEK_DT) D
ON D.WEEK_DT=EMP.START_WK 
ORDER BY EMPLOYEE_ID,START_DT,END_DT
"""

LKP_EMPLOYEE_PROFILE_WK_SRC = spark.sql(_sql)

# COMMAND ----------

# Processing node LKP_INCIDENT_DATA_CONVERSION_SRC, type SOURCE Cached data from connected lookup object
# COLUMN COUNT: 1

_sql = f"""
select INCIDENT_DATA_LOOKUP_CD, INCIDENT_DATA_LOOKUP_DESC  FROM
(
SELECT INCIDENT_DATA_LOOKUP_CD as INCIDENT_DATA_LOOKUP_CD,
       upper(INCIDENT_DATA_LOOKUP_DESC) as INCIDENT_DATA_LOOKUP_DESC ,       
       row_number() over(partition by INCIDENT_DATA_LOOKUP_DESC order by INCIDENT_DATA_LOOKUP_CD) as rn
FROM {legacy}.INCIDENT_DATA_LOOKUP 
WHERE INCIDENT_DATA_LOOKUP_TYPE_ID = 1
) lkp where lkp.rn=1
"""

LKP_INCIDENT_DATA_CONVERSION_SRC = spark.sql(_sql)

# COMMAND ----------

# Processing node LKP_SITE_PROFILE_SRC, type SOURCE Cached data from connected lookup object
# COLUMN COUNT: 1

LKP_SITE_PROFILE_SRC = spark.sql(f"""SELECT
LOCATION_ID,
STORE_NBR
FROM {legacy}.SITE_PROFILE""")


# COMMAND ----------

# Processing node SQ_Shortcut_to_INCIDENT_CLAIMS_PRE, type SOURCE 
# COLUMN COUNT: 114

SQ_Shortcut_to_INCIDENT_CLAIMS_PRE = spark.sql(f"""SELECT
CLAIM_NUMBER,
ACADEMY_TRAINED,
ACCIDENT_DESCRIPTION,
ACCIDENT_TIME,
ACTIVITY_ENGAGED_IN,
ANIMAL_CARE_CUSTODY,
ANIMAL_INJ_TYPE,
ANIMAL_INVOLVED_IN_THE_INCIDENT,
ASSOCIATE_NAME,
BANFIELD_AMOUNT,
BRAND_RISK_DEPT,
BRAND_RISK_ESCALATION_FACTORS,
CASH_AMOUNT,
CAUSE,
CAUSE_GENERAL,
CAUSE_SRC,
CLAIM_SUBSTATUS,
CLAIMANT_LENGTH_SERVICE,
CLAIMANT_NAME,
COMPED_PRODUCTS,
COMPED_SERVICE_S,
COVERAGE_MAJOR,
DATE_CLOSED,
DATE_HIRED,
DATE_OF_LOSS,
DATE_OPENED,
DATE_PRODUCT_PURCH,
DATE_REPORTED_TO_CLIENT,
DATE_SAFETY_CERTIFIED,
DAY_CAMP_CAPACITY,
DEPARTMENT,
DID_ASSOCIATE_GO_TO_HOSPITAL,
EMPLOYEE_ID,
FLOWERS,
FULL_RECOVERY_EXPECTED,
GIFT_CARDS_S,
HAS_THE_PET_BEEN_NEUTERED_SPAYED,
HEADER_CODE,
HEALTH_CHART_COMPLETED_DURING_STAY,
HOW_DID_STORE_FIND_OUT,
HOW_MANY_PETS_IN_PLAYTIME,
HOW_MANY_PETS_IN_TRAINING_CLASS,
HUMAN_INJURY_ESCALATION,
INCIDENT_OCCUR_DURING_PETSMART_ACADEMY,
INJURY_ILLNESS_CONFIRMED_BY_VETERINARIAN,
LOST_TIME_INDICATOR,
MATTED_PET_RELEASE,
NATURE,
NATURE_GENERAL,
NET_INCURRED,
NODE_CODE,
OTHER,
OTHER_POLICY_VIOLATION,
P_CARD_AMOUNT,
PART,
PART_GENERAL,
PART_POSITION,
PET_AGE,
PET_BREED,
PET_BREED_TYPE,
PET_EXPENSE_TYPE,
PET_GENDER,
PET_INCIDENT_TYPE,
PET_ORIGIN,
PET_PARENT_VET_EXP,
PET_SAFETY_CAUSE,
PET_SAFETY_CAUSE_GENERAL,
PET_SAFETY_EQUIP,
PET_SAFETY_NATURE,
PET_SAFETY_NATURE_GENERAL,
PET_SAFETY_PART,
PET_SAFETY_PART_GENERAL,
PET_SAFETY_PRIORITY,
PET_SYMPTOMS,
PET_TAKEN_TO_VET,
PET_UPC,
PET_WEIGHT,
PETSMART_INCIDENT_TYPE,
POLICY_VIOLATION,
PRODUCT_BEST_BY_DATE,
PRODUCT_LOT_CODE,
PRODUCT_SKU_SHORT_PRODUCT_CODE,
PRODUCT_UPC_LONG_PRODUCT_CODE,
REASON_CODE,
SERVICE_PERFORMED,
SHAVE_AUTHORIZATION,
SPECIFIC_STORE_AREA,
SRVC_CARD_SIGNED,
STATUS,
STORE_DC_AREA,
TIME_EMPLOYEE_BEGAN_WORK,
TPA_CARRIER,
TPA_CLAIM_NUMBER,
TREATMENT_INTENT,
WAS_911_CALLED,
WAS_ASSOCIATE_ADMITTED_TO_HOSPITAL,
WAS_ASSOCIATE_TRANSPORTED_BY_AMBULANCE,
WHAT_POINT_DID_THE_INCIDENT_OCCUR,
WHAT_POINT_DURING_SERVICE_OCCUR_HOTEL,
WORK_RELATED,
TYPE_OF_INCIDENT_REPORTED,
SCORECARD_EXCEPTION_FLAG,
RESPONSIBLE_ASSOCIATE_ID,
CHECK_AMOUNT,
CLAIM_TYPE_SRC,
CAUSE_LEGACY,
REASON_LEGACY,
DATE_REPORTED_TO_TPA,
ADOPTION_GROUP,
CLOSED_ISSUE_DATE,
EMPLOYEE_JOB_TITLE,
RECEIVED_DATE,
RESPONDED_DATE,
RESPONSE_DUE_DATE
FROM {raw}.INCIDENT_CLAIMS_PRE""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------

# Processing node EXP_SRC_CD, type EXPRESSION 
# COLUMN COUNT: 116

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_INCIDENT_CLAIMS_PRE_temp = SQ_Shortcut_to_INCIDENT_CLAIMS_PRE.toDF(*["SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___" + col for col in SQ_Shortcut_to_INCIDENT_CLAIMS_PRE.columns])

EXP_SRC_CD = SQ_Shortcut_to_INCIDENT_CLAIMS_PRE_temp.withColumn(
    "V_ACCIDENT_TIME",
    expr("""
        CASE WHEN SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___ACCIDENT_TIME = '2400' OR SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___ACCIDENT_TIME IS NULL THEN '0000'
        ELSE CASE WHEN LENGTH(TRIM(SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___ACCIDENT_TIME)) = 4 THEN SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___ACCIDENT_TIME ELSE '0000' END
        END
    """)
).withColumn(
    "V_TIME_EMPLOYEE_BEGAN_WORK",
    expr("""
        IF(LENGTH(TRIM(SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___TIME_EMPLOYEE_BEGAN_WORK)) = 5, SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___TIME_EMPLOYEE_BEGAN_WORK, NULL)
    """)
).selectExpr(
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___sys_row_id as sys_row_id",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___CLAIM_NUMBER as CLAIM_NUMBER",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___DATE_OPENED as DATE_OPENED",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___DATE_REPORTED_TO_CLIENT as DATE_REPORTED_TO_CLIENT",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___DATE_CLOSED as DATE_CLOSED",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___PETSMART_INCIDENT_TYPE as PETSMART_INCIDENT_TYPE",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___STATUS as STATUS",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___CLAIM_SUBSTATUS as CLAIM_SUBSTATUS",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___STORE_DC_AREA as STORE_DC_AREA",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___SPECIFIC_STORE_AREA as SPECIFIC_STORE_AREA",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___ACCIDENT_DESCRIPTION as ACCIDENT_DESCRIPTION",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___CAUSE_GENERAL as CAUSE_GENERAL",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___CAUSE as CAUSE",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___CAUSE_SRC as CAUSE_SRC",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___NATURE_GENERAL as NATURE_GENERAL",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___NATURE as NATURE",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___PART_GENERAL as PART_GENERAL",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___PART as PART",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___PART_POSITION as PART_POSITION",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___COVERAGE_MAJOR as COVERAGE_MAJOR",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___CLAIMANT_NAME as CLAIMANT_NAME",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___EMPLOYEE_ID as EMPLOYEE_ID",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___DATE_HIRED as DATE_HIRED",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___CLAIMANT_LENGTH_SERVICE as CLAIMANT_LENGTH_SERVICE",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___TIME_EMPLOYEE_BEGAN_WORK as TIME_EMPLOYEE_BEGAN_WORK",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___DEPARTMENT as DEPARTMENT",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___ACADEMY_TRAINED as ACADEMY_TRAINED",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___WORK_RELATED as WORK_RELATED",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___ACTIVITY_ENGAGED_IN as ACTIVITY_ENGAGED_IN",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___HUMAN_INJURY_ESCALATION as HUMAN_INJURY_ESCALATION",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___LOST_TIME_INDICATOR as LOST_TIME_INDICATOR",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___TREATMENT_INTENT as TREATMENT_INTENT",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___WAS_911_CALLED as WAS_911_CALLED",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___DID_ASSOCIATE_GO_TO_HOSPITAL as DID_ASSOCIATE_GO_TO_HOSPITAL",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___WAS_ASSOCIATE_ADMITTED_TO_HOSPITAL as WAS_ASSOCIATE_ADMITTED_TO_HOSPITAL",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___WAS_ASSOCIATE_TRANSPORTED_BY_AMBULANCE as WAS_ASSOCIATE_TRANSPORTED_BY_AMBULANCE",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___TPA_CARRIER as TPA_CARRIER",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___TPA_CLAIM_NUMBER as TPA_CLAIM_NUMBER",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___ANIMAL_INVOLVED_IN_THE_INCIDENT as ANIMAL_INVOLVED_IN_THE_INCIDENT",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___RESPONSIBLE_ASSOCIATE_ID as RESPONSIBLE_ASSOCIATE_ID",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___ASSOCIATE_NAME as ASSOCIATE_NAME",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___ANIMAL_INJ_TYPE as ANIMAL_INJ_TYPE",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___ANIMAL_CARE_CUSTODY as ANIMAL_CARE_CUSTODY",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___PET_BREED_TYPE as PET_BREED_TYPE",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___PET_BREED as PET_BREED",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___NET_INCURRED as NET_INCURRED",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___PET_INCIDENT_TYPE as PET_INCIDENT_TYPE",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___HEADER_CODE as HEADER_CODE",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___REASON_CODE as REASON_CODE",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___PET_SYMPTOMS as PET_SYMPTOMS",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___HOW_DID_STORE_FIND_OUT as HOW_DID_STORE_FIND_OUT",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___BRAND_RISK_DEPT as BRAND_RISK_DEPT",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___BRAND_RISK_ESCALATION_FACTORS as BRAND_RISK_ESCALATION_FACTORS",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___DAY_CAMP_CAPACITY as DAY_CAMP_CAPACITY",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___HOW_MANY_PETS_IN_PLAYTIME as HOW_MANY_PETS_IN_PLAYTIME",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___HOW_MANY_PETS_IN_TRAINING_CLASS as HOW_MANY_PETS_IN_TRAINING_CLASS",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___INCIDENT_OCCUR_DURING_PETSMART_ACADEMY as INCIDENT_OCCUR_DURING_PETSMART_ACADEMY",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___POLICY_VIOLATION as POLICY_VIOLATION",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___OTHER_POLICY_VIOLATION as OTHER_POLICY_VIOLATION",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___SERVICE_PERFORMED as SERVICE_PERFORMED",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___WHAT_POINT_DID_THE_INCIDENT_OCCUR as WHAT_POINT_DID_THE_INCIDENT_OCCUR",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___WHAT_POINT_DURING_SERVICE_OCCUR_HOTEL as WHAT_POINT_DURING_SERVICE_OCCUR_HOTEL",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___PET_TAKEN_TO_VET as PET_TAKEN_TO_VET",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___INJURY_ILLNESS_CONFIRMED_BY_VETERINARIAN as INJURY_ILLNESS_CONFIRMED_BY_VETERINARIAN",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___FULL_RECOVERY_EXPECTED as FULL_RECOVERY_EXPECTED",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___MATTED_PET_RELEASE as MATTED_PET_RELEASE",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___SHAVE_AUTHORIZATION as SHAVE_AUTHORIZATION",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___SRVC_CARD_SIGNED as SRVC_CARD_SIGNED",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___HEALTH_CHART_COMPLETED_DURING_STAY as HEALTH_CHART_COMPLETED_DURING_STAY",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___DATE_SAFETY_CERTIFIED as DATE_SAFETY_CERTIFIED",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___PET_SAFETY_EQUIP as PET_SAFETY_EQUIP",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___PET_SAFETY_PRIORITY as PET_SAFETY_PRIORITY",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___PET_SAFETY_CAUSE_GENERAL as PET_SAFETY_CAUSE_GENERAL",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___PET_SAFETY_CAUSE as PET_SAFETY_CAUSE",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___PET_SAFETY_NATURE_GENERAL as PET_SAFETY_NATURE_GENERAL",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___PET_SAFETY_NATURE as PET_SAFETY_NATURE",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___PET_SAFETY_PART_GENERAL as PET_SAFETY_PART_GENERAL",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___PET_SAFETY_PART as PET_SAFETY_PART",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___PET_GENDER as PET_GENDER",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___PET_AGE as PET_AGE",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___PET_WEIGHT as PET_WEIGHT",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___HAS_THE_PET_BEEN_NEUTERED_SPAYED as HAS_THE_PET_BEEN_NEUTERED_SPAYED",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___PET_ORIGIN as PET_ORIGIN",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___PET_UPC as PET_UPC",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___PRODUCT_UPC_LONG_PRODUCT_CODE as PRODUCT_UPC_LONG_PRODUCT_CODE",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___PRODUCT_LOT_CODE as PRODUCT_LOT_CODE",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___PRODUCT_SKU_SHORT_PRODUCT_CODE as PRODUCT_SKU_SHORT_PRODUCT_CODE",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___DATE_PRODUCT_PURCH as DATE_PRODUCT_PURCH",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___PRODUCT_BEST_BY_DATE as PRODUCT_BEST_BY_DATE",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___PET_EXPENSE_TYPE as PET_EXPENSE_TYPE",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___BANFIELD_AMOUNT as BANFIELD_AMOUNT",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___P_CARD_AMOUNT as P_CARD_AMOUNT",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___CASH_AMOUNT as CASH_AMOUNT",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___PET_PARENT_VET_EXP as PET_PARENT_VET_EXP",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___GIFT_CARDS_S as GIFT_CARDS_S",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___FLOWERS as FLOWERS",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___COMPED_PRODUCTS as COMPED_PRODUCTS",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___COMPED_SERVICE_S as COMPED_SERVICE_S",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___OTHER as OTHER",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___TYPE_OF_INCIDENT_REPORTED as TYPE_OF_INCIDENT_REPORTED",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___SCORECARD_EXCEPTION_FLAG as SCORECARD_EXCEPTION_FLAG",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___CHECK_AMOUNT as CHECK_AMOUNT",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___CLAIM_TYPE_SRC as CLAIM_TYPE_SRC",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___CAUSE_LEGACY as CAUSE_LEGACY",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___REASON_LEGACY as REASON_LEGACY",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___DATE_REPORTED_TO_TPA as DATE_REPORTED_TO_TPA",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___ADOPTION_GROUP as ADOPTION_GROUP",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___CLOSED_ISSUE_DATE as CLOSED_ISSUE_DATE",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___EMPLOYEE_JOB_TITLE as EMPLOYEE_JOB_TITLE",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___RECEIVED_DATE as RECEIVED_DATE",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___RESPONDED_DATE as RESPONDED_DATE",
	"SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___RESPONSE_DUE_DATE as RESPONSE_DUE_DATE",
	"cast(SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___NODE_CODE as int) as NODE_CODE_INT",
	"to_utc_timestamp(from_unixtime(unix_timestamp(concat(SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___DATE_OF_LOSS, ' ', V_ACCIDENT_TIME),'MMddyyyy HHmm')),'UTC') as INCIDENT_TSTMP",
  "CASE WHEN V_TIME_EMPLOYEE_BEGAN_WORK IS NOT NULL THEN TO_DATE(concat(SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___DATE_OF_LOSS, ' ', V_TIME_EMPLOYEE_BEGAN_WORK), 'MMddyyyy HH24:mm') ELSE NULL END as EMPLOYEE_SHIFT_START_TSTMP",
	"'RSKC' as SRC_CD",
	"TRIM(UPPER(SQ_Shortcut_to_INCIDENT_CLAIMS_PRE___REASON_LEGACY)) as REASON_LEGACY_FMT"
) 

# COMMAND ----------

# Processing node SQ_Shortcut_to_INCIDENT_CLAIMS, type SOURCE 
# COLUMN COUNT: 3

SQ_Shortcut_to_INCIDENT_CLAIMS = spark.sql(f"""SELECT
SRC_CD,
CLAIM_NBR,
LOAD_TSTMP
FROM {legacy}.INCIDENT_CLAIMS
WHERE SRC_CD='RSKC'""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------

# Processing node JNR_SRC_TGT_CLAIM_NBR, type JOINER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 120

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_INCIDENT_CLAIMS_temp = SQ_Shortcut_to_INCIDENT_CLAIMS.toDF(*["SQ_Shortcut_to_INCIDENT_CLAIMS___" + col for col in SQ_Shortcut_to_INCIDENT_CLAIMS.columns])
EXP_SRC_CD_temp = EXP_SRC_CD.toDF(*["EXP_SRC_CD___" + col for col in EXP_SRC_CD.columns])

JNR_SRC_TGT_CLAIM_NBR = SQ_Shortcut_to_INCIDENT_CLAIMS_temp.join(EXP_SRC_CD_temp,[SQ_Shortcut_to_INCIDENT_CLAIMS_temp.SQ_Shortcut_to_INCIDENT_CLAIMS___CLAIM_NBR == EXP_SRC_CD_temp.EXP_SRC_CD___CLAIM_NUMBER, SQ_Shortcut_to_INCIDENT_CLAIMS_temp.SQ_Shortcut_to_INCIDENT_CLAIMS___SRC_CD == EXP_SRC_CD_temp.EXP_SRC_CD___SRC_CD],'right_outer').selectExpr(
	"EXP_SRC_CD___CLAIM_NUMBER as CLAIM_NUMBER",
	"EXP_SRC_CD___NODE_CODE_INT as NODE_CODE_INT",
	"EXP_SRC_CD___INCIDENT_TSTMP as INCIDENT_TSTMP",
	"EXP_SRC_CD___DATE_OPENED as DATE_OPENED",
	"EXP_SRC_CD___DATE_REPORTED_TO_CLIENT as DATE_REPORTED_TO_CLIENT",
	"EXP_SRC_CD___DATE_CLOSED as DATE_CLOSED",
	"EXP_SRC_CD___PETSMART_INCIDENT_TYPE as PETSMART_INCIDENT_TYPE",
	"EXP_SRC_CD___STATUS as STATUS",
	"EXP_SRC_CD___CLAIM_SUBSTATUS as CLAIM_SUBSTATUS",
	"EXP_SRC_CD___STORE_DC_AREA as STORE_DC_AREA",
	"EXP_SRC_CD___SPECIFIC_STORE_AREA as SPECIFIC_STORE_AREA",
	"EXP_SRC_CD___ACCIDENT_DESCRIPTION as ACCIDENT_DESCRIPTION",
	"EXP_SRC_CD___CAUSE_GENERAL as CAUSE_GENERAL",
	"EXP_SRC_CD___CAUSE as CAUSE",
	"EXP_SRC_CD___CAUSE_SRC as CAUSE_SRC",
	"EXP_SRC_CD___NATURE_GENERAL as NATURE_GENERAL",
	"EXP_SRC_CD___NATURE as NATURE",
	"EXP_SRC_CD___PART_GENERAL as PART_GENERAL",
	"EXP_SRC_CD___PART as PART",
	"EXP_SRC_CD___PART_POSITION as PART_POSITION",
	"EXP_SRC_CD___COVERAGE_MAJOR as COVERAGE_MAJOR",
	"EXP_SRC_CD___CLAIMANT_NAME as CLAIMANT_NAME",
	"EXP_SRC_CD___EMPLOYEE_ID as EMPLOYEE_ID",
	"EXP_SRC_CD___DATE_HIRED as DATE_HIRED",
	"EXP_SRC_CD___CLAIMANT_LENGTH_SERVICE as CLAIMANT_LENGTH_SERVICE",
	"EXP_SRC_CD___TIME_EMPLOYEE_BEGAN_WORK as TIME_EMPLOYEE_BEGAN_WORK",
	"EXP_SRC_CD___DEPARTMENT as DEPARTMENT",
	"EXP_SRC_CD___ACADEMY_TRAINED as ACADEMY_TRAINED",
	"EXP_SRC_CD___WORK_RELATED as WORK_RELATED",
	"EXP_SRC_CD___ACTIVITY_ENGAGED_IN as ACTIVITY_ENGAGED_IN",
	"EXP_SRC_CD___HUMAN_INJURY_ESCALATION as HUMAN_INJURY_ESCALATION",
	"EXP_SRC_CD___LOST_TIME_INDICATOR as LOST_TIME_INDICATOR",
	"EXP_SRC_CD___TREATMENT_INTENT as TREATMENT_INTENT",
	"EXP_SRC_CD___WAS_911_CALLED as WAS_911_CALLED",
	"EXP_SRC_CD___DID_ASSOCIATE_GO_TO_HOSPITAL as DID_ASSOCIATE_GO_TO_HOSPITAL",
	"EXP_SRC_CD___WAS_ASSOCIATE_ADMITTED_TO_HOSPITAL as WAS_ASSOCIATE_ADMITTED_TO_HOSPITAL",
	"EXP_SRC_CD___WAS_ASSOCIATE_TRANSPORTED_BY_AMBULANCE as WAS_ASSOCIATE_TRANSPORTED_BY_AMBULANCE",
	"EXP_SRC_CD___DATE_REPORTED_TO_TPA as DATE_REPORTED_TO_TPA",
	"EXP_SRC_CD___TPA_CARRIER as TPA_CARRIER",
	"EXP_SRC_CD___TPA_CLAIM_NUMBER as TPA_CLAIM_NUMBER",
	"EXP_SRC_CD___ANIMAL_INVOLVED_IN_THE_INCIDENT as ANIMAL_INVOLVED_IN_THE_INCIDENT",
	"EXP_SRC_CD___RESPONSIBLE_ASSOCIATE_ID as RESPONSIBLE_ASSOCIATE_ID",
	"EXP_SRC_CD___ASSOCIATE_NAME as ASSOCIATE_NAME",
	"EXP_SRC_CD___ANIMAL_INJ_TYPE as ANIMAL_INJ_TYPE",
	"EXP_SRC_CD___ANIMAL_CARE_CUSTODY as ANIMAL_CARE_CUSTODY",
	"EXP_SRC_CD___PET_BREED_TYPE as PET_BREED_TYPE",
	"EXP_SRC_CD___PET_BREED as PET_BREED",
	"EXP_SRC_CD___NET_INCURRED as NET_INCURRED",
	"EXP_SRC_CD___PET_INCIDENT_TYPE as PET_INCIDENT_TYPE",
	"EXP_SRC_CD___HEADER_CODE as HEADER_CODE",
	"EXP_SRC_CD___REASON_CODE as REASON_CODE",
	"EXP_SRC_CD___PET_SYMPTOMS as PET_SYMPTOMS",
	"EXP_SRC_CD___HOW_DID_STORE_FIND_OUT as HOW_DID_STORE_FIND_OUT",
	"EXP_SRC_CD___BRAND_RISK_DEPT as BRAND_RISK_DEPT",
	"EXP_SRC_CD___BRAND_RISK_ESCALATION_FACTORS as BRAND_RISK_ESCALATION_FACTORS",
	"EXP_SRC_CD___DAY_CAMP_CAPACITY as DAY_CAMP_CAPACITY",
	"EXP_SRC_CD___HOW_MANY_PETS_IN_PLAYTIME as HOW_MANY_PETS_IN_PLAYTIME",
	"EXP_SRC_CD___HOW_MANY_PETS_IN_TRAINING_CLASS as HOW_MANY_PETS_IN_TRAINING_CLASS",
	"EXP_SRC_CD___INCIDENT_OCCUR_DURING_PETSMART_ACADEMY as INCIDENT_OCCUR_DURING_PETSMART_ACADEMY",
	"EXP_SRC_CD___POLICY_VIOLATION as POLICY_VIOLATION",
	"EXP_SRC_CD___OTHER_POLICY_VIOLATION as OTHER_POLICY_VIOLATION",
	"EXP_SRC_CD___SERVICE_PERFORMED as SERVICE_PERFORMED",
	"EXP_SRC_CD___WHAT_POINT_DID_THE_INCIDENT_OCCUR as WHAT_POINT_DID_THE_INCIDENT_OCCUR",
	"EXP_SRC_CD___WHAT_POINT_DURING_SERVICE_OCCUR_HOTEL as WHAT_POINT_DURING_SERVICE_OCCUR_HOTEL",
	"EXP_SRC_CD___PET_TAKEN_TO_VET as PET_TAKEN_TO_VET",
	"EXP_SRC_CD___INJURY_ILLNESS_CONFIRMED_BY_VETERINARIAN as INJURY_ILLNESS_CONFIRMED_BY_VETERINARIAN",
	"EXP_SRC_CD___FULL_RECOVERY_EXPECTED as FULL_RECOVERY_EXPECTED",
	"EXP_SRC_CD___MATTED_PET_RELEASE as MATTED_PET_RELEASE",
	"EXP_SRC_CD___SHAVE_AUTHORIZATION as SHAVE_AUTHORIZATION",
	"EXP_SRC_CD___SRVC_CARD_SIGNED as SRVC_CARD_SIGNED",
	"EXP_SRC_CD___HEALTH_CHART_COMPLETED_DURING_STAY as HEALTH_CHART_COMPLETED_DURING_STAY",
	"EXP_SRC_CD___DATE_SAFETY_CERTIFIED as DATE_SAFETY_CERTIFIED",
	"EXP_SRC_CD___PET_SAFETY_EQUIP as PET_SAFETY_EQUIP",
	"EXP_SRC_CD___PET_SAFETY_PRIORITY as PET_SAFETY_PRIORITY",
	"EXP_SRC_CD___PET_SAFETY_CAUSE_GENERAL as PET_SAFETY_CAUSE_GENERAL",
	"EXP_SRC_CD___PET_SAFETY_CAUSE as PET_SAFETY_CAUSE",
	"EXP_SRC_CD___PET_SAFETY_NATURE_GENERAL as PET_SAFETY_NATURE_GENERAL",
	"EXP_SRC_CD___PET_SAFETY_NATURE as PET_SAFETY_NATURE",
	"EXP_SRC_CD___PET_SAFETY_PART_GENERAL as PET_SAFETY_PART_GENERAL",
	"EXP_SRC_CD___PET_SAFETY_PART as PET_SAFETY_PART",
	"EXP_SRC_CD___PET_GENDER as PET_GENDER",
	"EXP_SRC_CD___PET_AGE as PET_AGE",
	"EXP_SRC_CD___PET_WEIGHT as PET_WEIGHT",
	"EXP_SRC_CD___HAS_THE_PET_BEEN_NEUTERED_SPAYED as HAS_THE_PET_BEEN_NEUTERED_SPAYED",
	"EXP_SRC_CD___PET_ORIGIN as PET_ORIGIN",
	"EXP_SRC_CD___PET_UPC as PET_UPC",
	"EXP_SRC_CD___PRODUCT_UPC_LONG_PRODUCT_CODE as PRODUCT_UPC_LONG_PRODUCT_CODE",
	"EXP_SRC_CD___PRODUCT_LOT_CODE as PRODUCT_LOT_CODE",
	"EXP_SRC_CD___PRODUCT_SKU_SHORT_PRODUCT_CODE as PRODUCT_SKU_SHORT_PRODUCT_CODE",
	"EXP_SRC_CD___DATE_PRODUCT_PURCH as DATE_PRODUCT_PURCH",
	"EXP_SRC_CD___PRODUCT_BEST_BY_DATE as PRODUCT_BEST_BY_DATE",
	"EXP_SRC_CD___PET_EXPENSE_TYPE as PET_EXPENSE_TYPE",
	"EXP_SRC_CD___BANFIELD_AMOUNT as BANFIELD_AMOUNT",
	"EXP_SRC_CD___P_CARD_AMOUNT as P_CARD_AMOUNT",
	"EXP_SRC_CD___CASH_AMOUNT as CASH_AMOUNT",
	"EXP_SRC_CD___PET_PARENT_VET_EXP as PET_PARENT_VET_EXP",
	"EXP_SRC_CD___GIFT_CARDS_S as GIFT_CARDS_S",
	"EXP_SRC_CD___FLOWERS as FLOWERS",
	"EXP_SRC_CD___COMPED_PRODUCTS as COMPED_PRODUCTS",
	"EXP_SRC_CD___COMPED_SERVICE_S as COMPED_SERVICE_S",
	"EXP_SRC_CD___OTHER as OTHER",
	"EXP_SRC_CD___EMPLOYEE_SHIFT_START_TSTMP as EMPLOYEE_SHIFT_START_TSTMP",
	"EXP_SRC_CD___SRC_CD as SRC_CD",
	"EXP_SRC_CD___TYPE_OF_INCIDENT_REPORTED as TYPE_OF_INCIDENT_REPORTED",
	"EXP_SRC_CD___SCORECARD_EXCEPTION_FLAG as SCORECARD_EXCEPTION_FLAG",
	"EXP_SRC_CD___CHECK_AMOUNT as CHECK_AMOUNT",
	"EXP_SRC_CD___CLAIM_TYPE_SRC as CLAIM_TYPE_SRC",
	"EXP_SRC_CD___CAUSE_LEGACY as CAUSE_LEGACY",
	"EXP_SRC_CD___REASON_LEGACY as REASON_LEGACY",
	"EXP_SRC_CD___ADOPTION_GROUP as ADOPTION_GROUP",
	"EXP_SRC_CD___CLOSED_ISSUE_DATE as CLOSED_ISSUE_DATE",
	"EXP_SRC_CD___EMPLOYEE_JOB_TITLE as EMPLOYEE_JOB_TITLE",
	"EXP_SRC_CD___RECEIVED_DATE as RECEIVED_DATE",
	"EXP_SRC_CD___RESPONDED_DATE as RESPONDED_DATE",
	"EXP_SRC_CD___RESPONSE_DUE_DATE as RESPONSE_DUE_DATE",
	"EXP_SRC_CD___REASON_LEGACY_FMT as REASON_LEGACY_FMT",  
  "EXP_SRC_CD___sys_row_id as sys_row_id",
	"SQ_Shortcut_to_INCIDENT_CLAIMS___SRC_CD as TGT_SRC_CD",
	"SQ_Shortcut_to_INCIDENT_CLAIMS___CLAIM_NBR as TGT_CLAIM_NBR",
	"SQ_Shortcut_to_INCIDENT_CLAIMS___LOAD_TSTMP as TGT_LOAD_TSTMP")\
	.withColumn('DOES_INCIDENT_INVOLVE_THE_FOLLOWING', lit(None))

# COMMAND ----------

# Processing node LKP_EMPLOYEE_PROFILE_WK, type LOOKUP_FROM_PRECACHED_DATASET . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 6


LKP_EMPLOYEE_PROFILE_WK_lookup_result = JNR_SRC_TGT_CLAIM_NBR.selectExpr(
	"EMPLOYEE_ID as EMPLOYEE_ID1",
	"INCIDENT_TSTMP as INCIDENT_TSTMP",
  "sys_row_id").join(LKP_EMPLOYEE_PROFILE_WK_SRC, (col('EMPLOYEE_ID') == col('EMPLOYEE_ID1')) & (col('START_DT') <= col('INCIDENT_TSTMP')) & (col('END_DT') >= col('INCIDENT_TSTMP')), 'left') \
.withColumn('row_num_PS_DEPT_CD', row_number().over(Window.partitionBy("sys_row_id").orderBy("PS_DEPT_CD")))

LKP_EMPLOYEE_PROFILE_WK = LKP_EMPLOYEE_PROFILE_WK_lookup_result.filter(col("row_num_PS_DEPT_CD") == 1).select(
	LKP_EMPLOYEE_PROFILE_WK_lookup_result.sys_row_id,
	col('PS_DEPT_CD')
)

# COMMAND ----------

# Processing node LKP_INCIDENT_DATA_CONVERSION, type LOOKUP_FROM_PRECACHED_DATASET 
# COLUMN COUNT: 3


LKP_INCIDENT_DATA_CONVERSION_lookup_result = JNR_SRC_TGT_CLAIM_NBR.join(LKP_INCIDENT_DATA_CONVERSION_SRC, (col('INCIDENT_DATA_LOOKUP_DESC') == col('REASON_LEGACY_FMT')), 'left') 

LKP_INCIDENT_DATA_CONVERSION = LKP_INCIDENT_DATA_CONVERSION_lookup_result.select(
	LKP_INCIDENT_DATA_CONVERSION_lookup_result.sys_row_id,
	col('INCIDENT_DATA_LOOKUP_CD')
)

# COMMAND ----------

# Processing node LKP_SITE_PROFILE, type LOOKUP_FROM_PRECACHED_DATASET 
# COLUMN COUNT: 102


LKP_SITE_PROFILE_lookup_result = JNR_SRC_TGT_CLAIM_NBR.join(LKP_SITE_PROFILE_SRC, (col('STORE_NBR') == col('NODE_CODE_INT')), 'left') \
.withColumn('row_num_LOCATION_ID', row_number().over(Window.partitionBy("sys_row_id").orderBy("LOCATION_ID")))
LKP_SITE_PROFILE = LKP_SITE_PROFILE_lookup_result.filter(col("row_num_LOCATION_ID") == 1).select(
	LKP_SITE_PROFILE_lookup_result.sys_row_id,
	col('LOCATION_ID')
)

# COMMAND ----------

# Processing node EXP_TSTMP_FLAGS, type EXPRESSION 
# COLUMN COUNT: 137

# for each involved DataFrame, append the dataframe name to each column
LKP_EMPLOYEE_PROFILE_WK_temp = LKP_EMPLOYEE_PROFILE_WK.toDF(*["LKP_EMPLOYEE_PROFILE_WK___" + col for col in LKP_EMPLOYEE_PROFILE_WK.columns])
JNR_SRC_TGT_CLAIM_NBR_temp = JNR_SRC_TGT_CLAIM_NBR.toDF(*["JNR_SRC_TGT_CLAIM_NBR___" + col for col in JNR_SRC_TGT_CLAIM_NBR.columns])

LKP_INCIDENT_DATA_CONVERSION_temp = LKP_INCIDENT_DATA_CONVERSION.toDF(*["LKP_INCIDENT_DATA_CONVERSION___" + col for col in LKP_INCIDENT_DATA_CONVERSION.columns])

LKP_SITE_PROFILE = LKP_SITE_PROFILE.withColumnRenamed("sys_row_id", "LKP_SITE_PROFILE___sys_row_id")

# COMMAND ----------



# Joining dataframes JNR_SRC_TGT_CLAIM_NBR, LKP_EMPLOYEE_PROFILE_WK, LKP_INCIDENT_DATA_CONVERSION, LKP_SITE_PROFILE to form EXP_TSTMP_FLAGS
EXP_TSTMP_FLAGS_joined = (
    JNR_SRC_TGT_CLAIM_NBR_temp.join(
        LKP_EMPLOYEE_PROFILE_WK_temp, 
        col("JNR_SRC_TGT_CLAIM_NBR___sys_row_id") == col("LKP_EMPLOYEE_PROFILE_WK___sys_row_id"), 
        'inner'
    )
    .join(
        LKP_INCIDENT_DATA_CONVERSION_temp, 
        col("LKP_EMPLOYEE_PROFILE_WK___sys_row_id") == col("LKP_INCIDENT_DATA_CONVERSION___sys_row_id"), 
        'inner'
    )
    .join(
        LKP_SITE_PROFILE, 
        col("LKP_INCIDENT_DATA_CONVERSION___sys_row_id") == col("LKP_SITE_PROFILE___sys_row_id"), 
        'inner'
    )
)

# COMMAND ----------

  
EXP_TSTMP_FLAGS = EXP_TSTMP_FLAGS_joined.selectExpr(
	"LKP_SITE_PROFILE___sys_row_id as sys_row_id",
	"JNR_SRC_TGT_CLAIM_NBR___SRC_CD as SRC_CD",
	"JNR_SRC_TGT_CLAIM_NBR___CLAIM_NUMBER as CLAIM_NUMBER",
	"JNR_SRC_TGT_CLAIM_NBR___INCIDENT_TSTMP as INCIDENT_TSTMP",
	"JNR_SRC_TGT_CLAIM_NBR___PETSMART_INCIDENT_TYPE as PETSMART_INCIDENT_TYPE",
	"JNR_SRC_TGT_CLAIM_NBR___STATUS as STATUS",
	"JNR_SRC_TGT_CLAIM_NBR___CLAIM_SUBSTATUS as CLAIM_SUBSTATUS",
	"JNR_SRC_TGT_CLAIM_NBR___STORE_DC_AREA as STORE_DC_AREA",
	"JNR_SRC_TGT_CLAIM_NBR___SPECIFIC_STORE_AREA as SPECIFIC_STORE_AREA",
	"JNR_SRC_TGT_CLAIM_NBR___ACCIDENT_DESCRIPTION as ACCIDENT_DESCRIPTION",
	"JNR_SRC_TGT_CLAIM_NBR___CAUSE_GENERAL as CAUSE_GENERAL",
	"JNR_SRC_TGT_CLAIM_NBR___CAUSE as CAUSE",
	"JNR_SRC_TGT_CLAIM_NBR___CAUSE_SRC as CAUSE_SRC",
	"JNR_SRC_TGT_CLAIM_NBR___NATURE_GENERAL as NATURE_GENERAL",
	"JNR_SRC_TGT_CLAIM_NBR___NATURE as NATURE",
	"JNR_SRC_TGT_CLAIM_NBR___PART_GENERAL as PART_GENERAL",
	"JNR_SRC_TGT_CLAIM_NBR___PART as PART",
	"JNR_SRC_TGT_CLAIM_NBR___PART_POSITION as PART_POSITION",
	"JNR_SRC_TGT_CLAIM_NBR___COVERAGE_MAJOR as COVERAGE_MAJOR",
	"JNR_SRC_TGT_CLAIM_NBR___CLAIMANT_NAME as CLAIMANT_NAME",
	"JNR_SRC_TGT_CLAIM_NBR___EMPLOYEE_ID as EMPLOYEE_ID",
	"cast(JNR_SRC_TGT_CLAIM_NBR___EMPLOYEE_ID as int) as EMPLOYEE_ID_INT",
	"JNR_SRC_TGT_CLAIM_NBR___CLAIMANT_LENGTH_SERVICE as CLAIMANT_LENGTH_SERVICE",
	"JNR_SRC_TGT_CLAIM_NBR___TIME_EMPLOYEE_BEGAN_WORK as TIME_EMPLOYEE_BEGAN_WORK",
	"JNR_SRC_TGT_CLAIM_NBR___DEPARTMENT as DEPARTMENT",
	"JNR_SRC_TGT_CLAIM_NBR___ACADEMY_TRAINED as ACADEMY_TRAINED",
	"JNR_SRC_TGT_CLAIM_NBR___ACTIVITY_ENGAGED_IN as ACTIVITY_ENGAGED_IN",
	"JNR_SRC_TGT_CLAIM_NBR___HUMAN_INJURY_ESCALATION as HUMAN_INJURY_ESCALATION",
	"JNR_SRC_TGT_CLAIM_NBR___TPA_CARRIER as TPA_CARRIER",
	"JNR_SRC_TGT_CLAIM_NBR___TPA_CLAIM_NUMBER as TPA_CLAIM_NUMBER",
	"JNR_SRC_TGT_CLAIM_NBR___RESPONSIBLE_ASSOCIATE_ID as RESPONSIBLE_ASSOCIATE_ID",
	"JNR_SRC_TGT_CLAIM_NBR___ASSOCIATE_NAME as ASSOCIATE_NAME",
	"JNR_SRC_TGT_CLAIM_NBR___ANIMAL_INJ_TYPE as ANIMAL_INJ_TYPE",
	"JNR_SRC_TGT_CLAIM_NBR___ANIMAL_CARE_CUSTODY as ANIMAL_CARE_CUSTODY",
	"JNR_SRC_TGT_CLAIM_NBR___PET_BREED_TYPE as PET_BREED_TYPE",
	"JNR_SRC_TGT_CLAIM_NBR___PET_BREED as PET_BREED",
	"JNR_SRC_TGT_CLAIM_NBR___NET_INCURRED as NET_INCURRED",
	"NVL(CAST(JNR_SRC_TGT_CLAIM_NBR___NET_INCURRED AS DECIMAL(12, 2)), 0.00) as NET_INCURRED_AMT",
	"JNR_SRC_TGT_CLAIM_NBR___PET_INCIDENT_TYPE as PET_INCIDENT_TYPE",
	"JNR_SRC_TGT_CLAIM_NBR___HEADER_CODE as HEADER_CODE",
	"JNR_SRC_TGT_CLAIM_NBR___REASON_CODE as REASON_CODE",
	"JNR_SRC_TGT_CLAIM_NBR___PET_SYMPTOMS as PET_SYMPTOMS",
	"JNR_SRC_TGT_CLAIM_NBR___HOW_DID_STORE_FIND_OUT as HOW_DID_STORE_FIND_OUT",
	"JNR_SRC_TGT_CLAIM_NBR___BRAND_RISK_DEPT as BRAND_RISK_DEPT",
	"JNR_SRC_TGT_CLAIM_NBR___BRAND_RISK_ESCALATION_FACTORS as BRAND_RISK_ESCALATION_FACTORS",
	"JNR_SRC_TGT_CLAIM_NBR___DAY_CAMP_CAPACITY as DAY_CAMP_CAPACITY",
	"NVL(cast(JNR_SRC_TGT_CLAIM_NBR___DAY_CAMP_CAPACITY as int), 0) as DAY_CAMP_CAPACITY_CNT",
	"JNR_SRC_TGT_CLAIM_NBR___HOW_MANY_PETS_IN_PLAYTIME as HOW_MANY_PETS_IN_PLAYTIME",
	"NVL(cast(JNR_SRC_TGT_CLAIM_NBR___HOW_MANY_PETS_IN_PLAYTIME as int), 0) as PET_IN_PLAYTIME_CNT",
	"JNR_SRC_TGT_CLAIM_NBR___HOW_MANY_PETS_IN_TRAINING_CLASS as HOW_MANY_PETS_IN_TRAINING_CLASS",
	"NVL(cast(JNR_SRC_TGT_CLAIM_NBR___HOW_MANY_PETS_IN_TRAINING_CLASS as int), 0) as PET_IN_TRAINING_CLASS_CNT",
	"JNR_SRC_TGT_CLAIM_NBR___DOES_INCIDENT_INVOLVE_THE_FOLLOWING as DOES_INCIDENT_INVOLVE_THE_FOLLOWING",
	"JNR_SRC_TGT_CLAIM_NBR___POLICY_VIOLATION as POLICY_VIOLATION",
	"JNR_SRC_TGT_CLAIM_NBR___OTHER_POLICY_VIOLATION as OTHER_POLICY_VIOLATION",
	"JNR_SRC_TGT_CLAIM_NBR___SERVICE_PERFORMED as SERVICE_PERFORMED",
	"JNR_SRC_TGT_CLAIM_NBR___WHAT_POINT_DID_THE_INCIDENT_OCCUR as WHAT_POINT_DID_THE_INCIDENT_OCCUR",
	"JNR_SRC_TGT_CLAIM_NBR___WHAT_POINT_DURING_SERVICE_OCCUR_HOTEL as WHAT_POINT_DURING_SERVICE_OCCUR_HOTEL",
	"JNR_SRC_TGT_CLAIM_NBR___PET_TAKEN_TO_VET as PET_TAKEN_TO_VET",
	"JNR_SRC_TGT_CLAIM_NBR___PET_SAFETY_EQUIP as PET_SAFETY_EQUIP",
	"JNR_SRC_TGT_CLAIM_NBR___PET_SAFETY_PRIORITY as PET_SAFETY_PRIORITY",
	"JNR_SRC_TGT_CLAIM_NBR___PET_SAFETY_CAUSE_GENERAL as PET_SAFETY_CAUSE_GENERAL",
	"JNR_SRC_TGT_CLAIM_NBR___PET_SAFETY_CAUSE as PET_SAFETY_CAUSE",
	"JNR_SRC_TGT_CLAIM_NBR___PET_SAFETY_NATURE_GENERAL as PET_SAFETY_NATURE_GENERAL",
	"JNR_SRC_TGT_CLAIM_NBR___PET_SAFETY_NATURE as PET_SAFETY_NATURE",
	"JNR_SRC_TGT_CLAIM_NBR___PET_SAFETY_PART_GENERAL as PET_SAFETY_PART_GENERAL",
	"JNR_SRC_TGT_CLAIM_NBR___PET_SAFETY_PART as PET_SAFETY_PART",
	"JNR_SRC_TGT_CLAIM_NBR___PET_GENDER as PET_GENDER",
	"JNR_SRC_TGT_CLAIM_NBR___PET_AGE as PET_AGE",
	"JNR_SRC_TGT_CLAIM_NBR___PET_WEIGHT as PET_WEIGHT",
	"JNR_SRC_TGT_CLAIM_NBR___PET_ORIGIN as PET_ORIGIN",
	"JNR_SRC_TGT_CLAIM_NBR___PET_UPC as PET_UPC",
	"cast(JNR_SRC_TGT_CLAIM_NBR___PET_UPC as BIGINT) as PET_PRODUCT_UPC_ID",
	"JNR_SRC_TGT_CLAIM_NBR___PRODUCT_UPC_LONG_PRODUCT_CODE as PRODUCT_UPC_LONG_PRODUCT_CODE",
	"JNR_SRC_TGT_CLAIM_NBR___PRODUCT_LOT_CODE as PRODUCT_LOT_CODE",
	"JNR_SRC_TGT_CLAIM_NBR___PRODUCT_SKU_SHORT_PRODUCT_CODE as PRODUCT_SKU_SHORT_PRODUCT_CODE",
	"JNR_SRC_TGT_CLAIM_NBR___PET_EXPENSE_TYPE as PET_EXPENSE_TYPE",
	"JNR_SRC_TGT_CLAIM_NBR___BANFIELD_AMOUNT as BANFIELD_AMOUNT",
	"NVL(cast(JNR_SRC_TGT_CLAIM_NBR___BANFIELD_AMOUNT as DECIMAL(12,2)), 0) as BANFIELD_AMT",
	"JNR_SRC_TGT_CLAIM_NBR___P_CARD_AMOUNT as P_CARD_AMOUNT",
	"NVL(cast(JNR_SRC_TGT_CLAIM_NBR___P_CARD_AMOUNT as DECIMAL(12,2)), 0) as P_CARD_AMT",
	"JNR_SRC_TGT_CLAIM_NBR___CASH_AMOUNT as CASH_AMOUNT",
	"NVL(cast(JNR_SRC_TGT_CLAIM_NBR___CASH_AMOUNT as DECIMAL(12,2)), 0) as CASH_AMT",
	"JNR_SRC_TGT_CLAIM_NBR___PET_PARENT_VET_EXP as PET_PARENT_VET_EXP",
	"NVL(cast(JNR_SRC_TGT_CLAIM_NBR___PET_PARENT_VET_EXP as DECIMAL(12,2)), 0) as PET_PARENT_VET_EXP_AMT",
	"JNR_SRC_TGT_CLAIM_NBR___GIFT_CARDS_S as GIFT_CARDS_S",
	"NVL(cast(JNR_SRC_TGT_CLAIM_NBR___GIFT_CARDS_S as DECIMAL(12,2)), 0) as GIFT_CARDS_S_AMT",
	"JNR_SRC_TGT_CLAIM_NBR___FLOWERS as FLOWERS",
	"NVL(cast(JNR_SRC_TGT_CLAIM_NBR___FLOWERS as DECIMAL(12,2)), 0) as FLOWERS_AMT",
	"JNR_SRC_TGT_CLAIM_NBR___COMPED_PRODUCTS as COMPED_PRODUCTS",
	"NVL(cast(JNR_SRC_TGT_CLAIM_NBR___COMPED_PRODUCTS as DECIMAL(12,2)), 0) as COMPED_PRODUCTS_AMT",
	"JNR_SRC_TGT_CLAIM_NBR___COMPED_SERVICE_S as COMPED_SERVICE_S",
	"NVL(cast(JNR_SRC_TGT_CLAIM_NBR___COMPED_SERVICE_S as DECIMAL(12,2)), 0) as COMPED_SERVICE_S_AMT",
	"JNR_SRC_TGT_CLAIM_NBR___OTHER as OTHER",
	"NVL(cast(JNR_SRC_TGT_CLAIM_NBR___OTHER as DECIMAL(12,2)), 0) as OTHER_AMT",
	"JNR_SRC_TGT_CLAIM_NBR___EMPLOYEE_SHIFT_START_TSTMP as EMPLOYEE_SHIFT_START_TSTMP",
	"JNR_SRC_TGT_CLAIM_NBR___TGT_CLAIM_NBR as TGT_CLAIM_NBR",
	"JNR_SRC_TGT_CLAIM_NBR___TYPE_OF_INCIDENT_REPORTED as TYPE_OF_INCIDENT_REPORTED",
	"JNR_SRC_TGT_CLAIM_NBR___CHECK_AMOUNT as CHECK_AMOUNT",
	"NVL(cast(JNR_SRC_TGT_CLAIM_NBR___CHECK_AMOUNT as DECIMAL(12,2)), 0) as CHECK_AMT",
	"JNR_SRC_TGT_CLAIM_NBR___CLAIM_TYPE_SRC as CLAIM_TYPE_SRC",
	"JNR_SRC_TGT_CLAIM_NBR___CAUSE_LEGACY as CAUSE_LEGACY",
	"JNR_SRC_TGT_CLAIM_NBR___REASON_LEGACY as REASON_LEGACY",
	"JNR_SRC_TGT_CLAIM_NBR___ADOPTION_GROUP as ADOPTION_GROUP",
	"JNR_SRC_TGT_CLAIM_NBR___EMPLOYEE_JOB_TITLE as EMPLOYEE_JOB_TITLE",
	"LKP_INCIDENT_DATA_CONVERSION___INCIDENT_DATA_LOOKUP_CD as INCIDENT_DATA_LOOKUP_CD",
	"LKP_EMPLOYEE_PROFILE_WK___PS_DEPT_CD as PS_DEPT_CD",
	"NVL(LOCATION_ID, 99999) as LOCATION_ID_NOT_NULL",
	"NVL(JNR_SRC_TGT_CLAIM_NBR___TGT_CLAIM_NBR, CURRENT_TIMESTAMP) as LOAD_TSTMP",
	"CURRENT_TIMESTAMP as UPDATE_TSTMP",
	"date_format(to_date(JNR_SRC_TGT_CLAIM_NBR___DATE_OPENED, 'MMddyyyy'),'yyyy-MM-dd') as CLAIM_OPEN_DT",
	"date_format(to_date(JNR_SRC_TGT_CLAIM_NBR___DATE_REPORTED_TO_CLIENT, 'MMddyyyy'),'yyyy-MM-dd') as REPORTED_TO_MANAGER_DT",
	"date_format(to_date(JNR_SRC_TGT_CLAIM_NBR___DATE_CLOSED, 'MMddyyyy'),'yyyy-MM-dd') as CLAIM_CLOSE_DT",
	"date_format(to_date(JNR_SRC_TGT_CLAIM_NBR___DATE_HIRED, 'MMddyyyy'),'yyyy-MM-dd') as EMPLOYEE_HIRED_DT",
	"date_format(to_date(JNR_SRC_TGT_CLAIM_NBR___DATE_REPORTED_TO_TPA, 'MMddyyyy'),'yyyy-MM-dd') as REPORTED_TO_CMS_DT",
	"date_format(to_date(JNR_SRC_TGT_CLAIM_NBR___DATE_SAFETY_CERTIFIED, 'MMddyyyy'),'yyyy-MM-dd') as SAFETY_CERTIFIED_DT",
	"date_format(to_date(JNR_SRC_TGT_CLAIM_NBR___DATE_PRODUCT_PURCH, 'MMddyyyy'),'yyyy-MM-dd') as PET_PRODUCT_PURCH_DT",
	"date_format(to_date(JNR_SRC_TGT_CLAIM_NBR___PRODUCT_BEST_BY_DATE, 'MMddyyyy'),'yyyy-MM-dd') as PET_PRODUCT_BEST_BY_DT",
"CASE LOWER(JNR_SRC_TGT_CLAIM_NBR___WORK_RELATED) WHEN 'yes' THEN '1' WHEN 'no' THEN '0' WHEN 'unknown' THEN '2' END AS WORK_RELATED_ACCIDENT_FLAG",
	"CASE LOWER(JNR_SRC_TGT_CLAIM_NBR___LOST_TIME_INDICATOR) WHEN 'yes' THEN '1' WHEN 'no' THEN '0' WHEN 'unknown' THEN '2' END AS LOST_TIME_FLAG",
	"CASE LOWER(JNR_SRC_TGT_CLAIM_NBR___TREATMENT_INTENT) WHEN 'yes' THEN '1' WHEN 'no' THEN '0' WHEN 'unknown' THEN '2' END AS SEEK_TREATMENT_FLAG",
	"CASE LOWER(JNR_SRC_TGT_CLAIM_NBR___WAS_911_CALLED) WHEN 'yes' THEN '1' WHEN 'no' THEN '0' WHEN 'unknown' THEN '2' END AS CALLED_911_FLAG",
	"CASE LOWER(JNR_SRC_TGT_CLAIM_NBR___DID_ASSOCIATE_GO_TO_HOSPITAL) WHEN 'yes' THEN '1' WHEN 'no' THEN '0' WHEN 'unknown' THEN '2' END AS EMPLOYEE_GO_TO_HOSPITAL_FLAG",
	"CASE LOWER(JNR_SRC_TGT_CLAIM_NBR___WAS_ASSOCIATE_ADMITTED_TO_HOSPITAL) WHEN 'yes' THEN '1' WHEN 'no' THEN '0' WHEN 'unknown' THEN '2' END AS EMPLOYEE_ADMITTED_TO_HOSPITAL_FLAG",
	"CASE LOWER(JNR_SRC_TGT_CLAIM_NBR___WAS_ASSOCIATE_TRANSPORTED_BY_AMBULANCE) WHEN 'yes' THEN '1' WHEN 'no' THEN '0' WHEN 'unknown' THEN '2' END AS EMPLOYEE_TRANSPORTED_BY_AMBULANCE_FLAG",
	"CASE LOWER(JNR_SRC_TGT_CLAIM_NBR___ANIMAL_INVOLVED_IN_THE_INCIDENT) WHEN 'yes' THEN '1' WHEN 'no' THEN '0' WHEN 'unknown' THEN '2' END AS ANIMAL_INVOLVED_IN_THE_INCIDENT_FLAG",
	"CASE LOWER(JNR_SRC_TGT_CLAIM_NBR___INCIDENT_OCCUR_DURING_PETSMART_ACADEMY) WHEN 'yes' THEN '1' WHEN 'no' THEN '0' WHEN 'unknown' THEN '2' END AS INCIDENT_DURING_PETSMART_ACADEMY_FLAG",
	"CASE LOWER(JNR_SRC_TGT_CLAIM_NBR___INJURY_ILLNESS_CONFIRMED_BY_VETERINARIAN) WHEN 'yes' THEN '1' WHEN 'no' THEN '0' WHEN 'unknown' THEN '2' END AS INJURY_CONFIRMED_BY_VET_FLAG",
	"CASE LOWER(JNR_SRC_TGT_CLAIM_NBR___FULL_RECOVERY_EXPECTED) WHEN 'yes' THEN '1' WHEN 'no' THEN '0' WHEN 'unknown' THEN '2' END AS FULL_RECOVERY_EXPECTED_FLAG",
	"CASE LOWER(JNR_SRC_TGT_CLAIM_NBR___MATTED_PET_RELEASE) WHEN 'yes' THEN '1' WHEN 'no' THEN '0' WHEN 'unknown' THEN '2' END AS MATTED_PET_RELEASE_FLAG",
	"CASE LOWER(JNR_SRC_TGT_CLAIM_NBR___SHAVE_AUTHORIZATION) WHEN 'yes' THEN '1' WHEN 'no' THEN '0' WHEN 'unknown' THEN '2' END AS PET_SHAVE_AUTH_SIGNED_FLAG",
	"CASE LOWER(JNR_SRC_TGT_CLAIM_NBR___SRVC_CARD_SIGNED) WHEN 'yes' THEN '1' WHEN 'no' THEN '0' WHEN 'unknown' THEN '2' END AS PET_SERVICE_CARD_SIGNED_FLAG",
	"CASE LOWER(JNR_SRC_TGT_CLAIM_NBR___HEALTH_CHART_COMPLETED_DURING_STAY) WHEN 'yes' THEN '1' WHEN 'no' THEN '0' WHEN 'unknown' THEN '2' END AS HEALTH_CHART_COMPLETED_DURING_STAY_FLAG",
	"CASE LOWER(JNR_SRC_TGT_CLAIM_NBR___HAS_THE_PET_BEEN_NEUTERED_SPAYED) WHEN 'yes' THEN '1' WHEN 'no' THEN '0' WHEN 'unknown' THEN '2' END AS PET_NEUTERED_SPAYED_FLAG",
	"CASE JNR_SRC_TGT_CLAIM_NBR___SCORECARD_EXCEPTION_FLAG WHEN 'true' THEN '1' WHEN 'false' THEN '0' END AS SCORECARD_EXCEPTION_FLAG_bit",
	"date_format(to_date(JNR_SRC_TGT_CLAIM_NBR___CLOSED_ISSUE_DATE, 'MMddyyyy'),'yyyy-MM-dd') as CLOSED_ISSUE_DT",
	"to_utc_timestamp(from_unixtime(unix_timestamp(JNR_SRC_TGT_CLAIM_NBR___RECEIVED_DATE, 'MMddyyyy HH:mm')), 'UTC') as CASE_RECEIVED_TSTMP",
	"to_utc_timestamp(from_unixtime(unix_timestamp(JNR_SRC_TGT_CLAIM_NBR___RESPONDED_DATE, 'MMddyyyy HH:mm')), 'UTC') as ACTION_RESPONDED_TSTMP",
	"to_utc_timestamp(date_format(to_timestamp(JNR_SRC_TGT_CLAIM_NBR___RESPONSE_DUE_DATE, 'MMddyyyy'),'yyyy-MM-dd'),'UTC') as ACTION_RESPONSE_DUE_TSTMP",
  "IF (LKP_INCIDENT_DATA_CONVERSION___INCIDENT_DATA_LOOKUP_CD IS NULL, JNR_SRC_TGT_CLAIM_NBR___REASON_LEGACY, LKP_INCIDENT_DATA_CONVERSION___INCIDENT_DATA_LOOKUP_CD) AS PET_INCIDENT_REASON_LEGACY"
)

# COMMAND ----------

# Processing node UPD_CLAIMS_INS_UPD, type UPDATE_STRATEGY . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 121

# for each involved DataFrame, append the dataframe name to each column
EXP_TSTMP_FLAGS_temp = EXP_TSTMP_FLAGS.toDF(*["EXP_TSTMP_FLAGS___" + col for col in EXP_TSTMP_FLAGS.columns])

UPD_CLAIMS_INS_UPD = EXP_TSTMP_FLAGS_temp.selectExpr(
	"EXP_TSTMP_FLAGS___SRC_CD as SRC_CD",
	"EXP_TSTMP_FLAGS___CLAIM_NUMBER as CLAIM_NUMBER",
	"EXP_TSTMP_FLAGS___INCIDENT_TSTMP as INCIDENT_TSTMP",
	"EXP_TSTMP_FLAGS___CLAIM_OPEN_DT as CLAIM_OPEN_DT",
	"EXP_TSTMP_FLAGS___REPORTED_TO_MANAGER_DT as REPORTED_TO_MANAGER_DT",
	"EXP_TSTMP_FLAGS___CLAIM_CLOSE_DT as CLAIM_CLOSE_DT",
	"EXP_TSTMP_FLAGS___PETSMART_INCIDENT_TYPE as PETSMART_INCIDENT_TYPE",
	"EXP_TSTMP_FLAGS___STATUS as STATUS",
	"EXP_TSTMP_FLAGS___CLAIM_SUBSTATUS as CLAIM_SUBSTATUS",
	"EXP_TSTMP_FLAGS___STORE_DC_AREA as STORE_DC_AREA",
	"EXP_TSTMP_FLAGS___SPECIFIC_STORE_AREA as SPECIFIC_STORE_AREA",
	"EXP_TSTMP_FLAGS___ACCIDENT_DESCRIPTION as ACCIDENT_DESCRIPTION",
	"EXP_TSTMP_FLAGS___CAUSE_GENERAL as CAUSE_GENERAL",
	"EXP_TSTMP_FLAGS___CAUSE as CAUSE",
	"EXP_TSTMP_FLAGS___CAUSE_SRC as CAUSE_SRC",
	"EXP_TSTMP_FLAGS___NATURE_GENERAL as NATURE_GENERAL",
	"EXP_TSTMP_FLAGS___NATURE as NATURE",
	"EXP_TSTMP_FLAGS___PART_GENERAL as PART_GENERAL",
	"EXP_TSTMP_FLAGS___PART as PART",
	"EXP_TSTMP_FLAGS___PART_POSITION as PART_POSITION",
	"EXP_TSTMP_FLAGS___COVERAGE_MAJOR as COVERAGE_MAJOR",
	"EXP_TSTMP_FLAGS___CLAIMANT_NAME as CLAIMANT_NAME",
	"EXP_TSTMP_FLAGS___EMPLOYEE_ID_INT as EMPLOYEE_ID_INT",
	"EXP_TSTMP_FLAGS___EMPLOYEE_HIRED_DT as EMPLOYEE_HIRED_DT",
	"EXP_TSTMP_FLAGS___CLAIMANT_LENGTH_SERVICE as CLAIMANT_LENGTH_SERVICE",
	"EXP_TSTMP_FLAGS___TIME_EMPLOYEE_BEGAN_WORK as TIME_EMPLOYEE_BEGAN_WORK",
	"EXP_TSTMP_FLAGS___DEPARTMENT as DEPARTMENT",
	"EXP_TSTMP_FLAGS___ACADEMY_TRAINED as ACADEMY_TRAINED",
	"EXP_TSTMP_FLAGS___WORK_RELATED_ACCIDENT_FLAG as WORK_RELATED_ACCIDENT_FLAG",
	"EXP_TSTMP_FLAGS___ACTIVITY_ENGAGED_IN as ACTIVITY_ENGAGED_IN",
	"EXP_TSTMP_FLAGS___HUMAN_INJURY_ESCALATION as HUMAN_INJURY_ESCALATION",
	"EXP_TSTMP_FLAGS___LOST_TIME_FLAG as LOST_TIME_FLAG",
	"EXP_TSTMP_FLAGS___SEEK_TREATMENT_FLAG as SEEK_TREATMENT_FLAG",
	"EXP_TSTMP_FLAGS___CALLED_911_FLAG as CALLED_911_FLAG",
	"EXP_TSTMP_FLAGS___EMPLOYEE_GO_TO_HOSPITAL_FLAG as EMPLOYEE_GO_TO_HOSPITAL_FLAG",
	"EXP_TSTMP_FLAGS___EMPLOYEE_ADMITTED_TO_HOSPITAL_FLAG as EMPLOYEE_ADMITTED_TO_HOSPITAL_FLAG",
	"EXP_TSTMP_FLAGS___EMPLOYEE_TRANSPORTED_BY_AMBULANCE_FLAG as EMPLOYEE_TRANSPORTED_BY_AMBULANCE_FLAG",
	"EXP_TSTMP_FLAGS___REPORTED_TO_CMS_DT as REPORTED_TO_CMS_DT",
	"EXP_TSTMP_FLAGS___TPA_CARRIER as TPA_CARRIER",
	"EXP_TSTMP_FLAGS___TPA_CLAIM_NUMBER as TPA_CLAIM_NUMBER",
	"EXP_TSTMP_FLAGS___RESPONSIBLE_ASSOCIATE_ID as RESPONSIBLE_ASSOCIATE_ID",
	"EXP_TSTMP_FLAGS___ASSOCIATE_NAME as ASSOCIATE_NAME",
	"EXP_TSTMP_FLAGS___ANIMAL_INVOLVED_IN_THE_INCIDENT_FLAG as ANIMAL_INVOLVED_IN_THE_INCIDENT_FLAG",
	"EXP_TSTMP_FLAGS___ANIMAL_INJ_TYPE as ANIMAL_INJ_TYPE",
	"EXP_TSTMP_FLAGS___ANIMAL_CARE_CUSTODY as ANIMAL_CARE_CUSTODY",
	"EXP_TSTMP_FLAGS___PET_BREED_TYPE as PET_BREED_TYPE",
	"EXP_TSTMP_FLAGS___PET_BREED as PET_BREED",
	"EXP_TSTMP_FLAGS___NET_INCURRED_AMT as NET_INCURRED_AMT",
	"EXP_TSTMP_FLAGS___PET_INCIDENT_TYPE as PET_INCIDENT_TYPE",
	"EXP_TSTMP_FLAGS___HEADER_CODE as HEADER_CODE",
	"EXP_TSTMP_FLAGS___REASON_CODE as REASON_CODE",
	"EXP_TSTMP_FLAGS___PET_SYMPTOMS as PET_SYMPTOMS",
	"EXP_TSTMP_FLAGS___HOW_DID_STORE_FIND_OUT as HOW_DID_STORE_FIND_OUT",
	"EXP_TSTMP_FLAGS___BRAND_RISK_DEPT as BRAND_RISK_DEPT",
	"EXP_TSTMP_FLAGS___BRAND_RISK_ESCALATION_FACTORS as BRAND_RISK_ESCALATION_FACTORS",
	"EXP_TSTMP_FLAGS___DAY_CAMP_CAPACITY_CNT as DAY_CAMP_CAPACITY_CNT",
	"EXP_TSTMP_FLAGS___PET_IN_PLAYTIME_CNT as PET_IN_PLAYTIME_CNT",
	"EXP_TSTMP_FLAGS___PET_IN_TRAINING_CLASS_CNT as PET_IN_TRAINING_CLASS_CNT",
	"EXP_TSTMP_FLAGS___INCIDENT_DURING_PETSMART_ACADEMY_FLAG as INCIDENT_DURING_PETSMART_ACADEMY_FLAG",
	"EXP_TSTMP_FLAGS___DOES_INCIDENT_INVOLVE_THE_FOLLOWING as DOES_INCIDENT_INVOLVE_THE_FOLLOWING",
	"EXP_TSTMP_FLAGS___POLICY_VIOLATION as POLICY_VIOLATION",
	"EXP_TSTMP_FLAGS___OTHER_POLICY_VIOLATION as OTHER_POLICY_VIOLATION",
	"EXP_TSTMP_FLAGS___SERVICE_PERFORMED as SERVICE_PERFORMED",
	"EXP_TSTMP_FLAGS___WHAT_POINT_DID_THE_INCIDENT_OCCUR as WHAT_POINT_DID_THE_INCIDENT_OCCUR",
	"EXP_TSTMP_FLAGS___WHAT_POINT_DURING_SERVICE_OCCUR_HOTEL as WHAT_POINT_DURING_SERVICE_OCCUR_HOTEL",
	"EXP_TSTMP_FLAGS___PET_TAKEN_TO_VET as PET_TAKEN_TO_VET",
	"EXP_TSTMP_FLAGS___INJURY_CONFIRMED_BY_VET_FLAG as INJURY_CONFIRMED_BY_VET_FLAG",
	"EXP_TSTMP_FLAGS___FULL_RECOVERY_EXPECTED_FLAG as FULL_RECOVERY_EXPECTED_FLAG",
	"EXP_TSTMP_FLAGS___MATTED_PET_RELEASE_FLAG as MATTED_PET_RELEASE_FLAG",
	"EXP_TSTMP_FLAGS___PET_SHAVE_AUTH_SIGNED_FLAG as PET_SHAVE_AUTH_SIGNED_FLAG",
	"EXP_TSTMP_FLAGS___PET_SERVICE_CARD_SIGNED_FLAG as PET_SERVICE_CARD_SIGNED_FLAG",
	"EXP_TSTMP_FLAGS___HEALTH_CHART_COMPLETED_DURING_STAY_FLAG as HEALTH_CHART_COMPLETED_DURING_STAY_FLAG",
	"EXP_TSTMP_FLAGS___SAFETY_CERTIFIED_DT as SAFETY_CERTIFIED_DT",
	"EXP_TSTMP_FLAGS___PET_SAFETY_EQUIP as PET_SAFETY_EQUIP",
	"EXP_TSTMP_FLAGS___PET_SAFETY_PRIORITY as PET_SAFETY_PRIORITY",
	"EXP_TSTMP_FLAGS___PET_SAFETY_CAUSE_GENERAL as PET_SAFETY_CAUSE_GENERAL",
	"EXP_TSTMP_FLAGS___PET_SAFETY_CAUSE as PET_SAFETY_CAUSE",
	"EXP_TSTMP_FLAGS___PET_SAFETY_NATURE_GENERAL as PET_SAFETY_NATURE_GENERAL",
	"EXP_TSTMP_FLAGS___PET_SAFETY_NATURE as PET_SAFETY_NATURE",
	"EXP_TSTMP_FLAGS___PET_SAFETY_PART_GENERAL as PET_SAFETY_PART_GENERAL",
	"EXP_TSTMP_FLAGS___PET_SAFETY_PART as PET_SAFETY_PART",
	"EXP_TSTMP_FLAGS___PET_GENDER as PET_GENDER",
	"EXP_TSTMP_FLAGS___PET_AGE as PET_AGE",
	"EXP_TSTMP_FLAGS___PET_WEIGHT as PET_WEIGHT",
	"EXP_TSTMP_FLAGS___PET_NEUTERED_SPAYED_FLAG as PET_NEUTERED_SPAYED_FLAG",
	"EXP_TSTMP_FLAGS___PET_ORIGIN as PET_ORIGIN",
	"EXP_TSTMP_FLAGS___PET_PRODUCT_UPC_ID as PET_PRODUCT_UPC_ID",
	"EXP_TSTMP_FLAGS___PRODUCT_UPC_LONG_PRODUCT_CODE as PRODUCT_UPC_LONG_PRODUCT_CODE",
	"EXP_TSTMP_FLAGS___PRODUCT_LOT_CODE as PRODUCT_LOT_CODE",
	"EXP_TSTMP_FLAGS___PRODUCT_SKU_SHORT_PRODUCT_CODE as PRODUCT_SKU_SHORT_PRODUCT_CODE",
	"EXP_TSTMP_FLAGS___PET_PRODUCT_PURCH_DT as PET_PRODUCT_PURCH_DT",
	"EXP_TSTMP_FLAGS___PET_PRODUCT_BEST_BY_DT as PET_PRODUCT_BEST_BY_DT",
	"EXP_TSTMP_FLAGS___PET_EXPENSE_TYPE as PET_EXPENSE_TYPE",
	"EXP_TSTMP_FLAGS___BANFIELD_AMT as BANFIELD_AMT",
	"EXP_TSTMP_FLAGS___P_CARD_AMT as P_CARD_AMT",
	"EXP_TSTMP_FLAGS___CASH_AMT as CASH_AMT",
	"EXP_TSTMP_FLAGS___PET_PARENT_VET_EXP_AMT as PET_PARENT_VET_EXP_AMT",
	"EXP_TSTMP_FLAGS___GIFT_CARDS_S_AMT as GIFT_CARDS_S_AMT",
	"EXP_TSTMP_FLAGS___FLOWERS_AMT as FLOWERS_AMT",
	"EXP_TSTMP_FLAGS___COMPED_PRODUCTS_AMT as COMPED_PRODUCTS_AMT",
	"EXP_TSTMP_FLAGS___COMPED_SERVICE_S_AMT as COMPED_SERVICE_S_AMT",
	"EXP_TSTMP_FLAGS___OTHER_AMT as OTHER_AMT",
	"EXP_TSTMP_FLAGS___LOCATION_ID_NOT_NULL as LOCATION_ID",
	"EXP_TSTMP_FLAGS___TGT_CLAIM_NBR as TGT_CLAIM_NBR",
	"EXP_TSTMP_FLAGS___LOAD_TSTMP as LOAD_TSTMP",
	"EXP_TSTMP_FLAGS___UPDATE_TSTMP as UPDATE_TSTMP",
	"EXP_TSTMP_FLAGS___EMPLOYEE_SHIFT_START_TSTMP as EMPLOYEE_SHIFT_START_TSTMP",
	"EXP_TSTMP_FLAGS___TYPE_OF_INCIDENT_REPORTED as TYPE_OF_INCIDENT_REPORTED",
	"EXP_TSTMP_FLAGS___CHECK_AMT as CHECK_AMT",
	"EXP_TSTMP_FLAGS___CLAIM_TYPE_SRC as CLAIM_TYPE_SRC",
	"EXP_TSTMP_FLAGS___CAUSE_LEGACY as CAUSE_LEGACY",
	"EXP_TSTMP_FLAGS___SCORECARD_EXCEPTION_FLAG_bit as SCORECARD_EXCEPTION_FLAG_bit",
	"EXP_TSTMP_FLAGS___ADOPTION_GROUP as ADOPTION_GROUP",
	"EXP_TSTMP_FLAGS___CLOSED_ISSUE_DT as CLOSED_ISSUE_DT",
	"EXP_TSTMP_FLAGS___EMPLOYEE_JOB_TITLE as EMPLOYEE_JOB_TITLE",
	"EXP_TSTMP_FLAGS___CASE_RECEIVED_TSTMP as CASE_RECEIVED_TSTMP",
	"EXP_TSTMP_FLAGS___ACTION_RESPONDED_TSTMP as ACTION_RESPONDED_TSTMP",
	"EXP_TSTMP_FLAGS___ACTION_RESPONSE_DUE_TSTMP as ACTION_RESPONSE_DUE_TSTMP",
	"EXP_TSTMP_FLAGS___REASON_LEGACY as PET_INCIDENT_REASON_LEGACY",
	"EXP_TSTMP_FLAGS___INCIDENT_DATA_LOOKUP_CD as INCIDENT_DATA_LOOKUP_CD",
	"EXP_TSTMP_FLAGS___PS_DEPT_CD as PS_DEPT_CD") \
	.withColumn('pyspark_data_action', when((col("TGT_CLAIM_NBR").isNull()),(lit(0))).otherwise(lit(1)))

# COMMAND ----------

# Processing node Shortcut_to_INCIDENT_CLAIMS, type TARGET 
# COLUMN COUNT: 118


Shortcut_to_INCIDENT_CLAIMS = UPD_CLAIMS_INS_UPD.selectExpr(
	"CAST(SRC_CD AS STRING) as SRC_CD",
	"CAST(CLAIM_NUMBER AS STRING) as CLAIM_NBR",
	"CAST(LOCATION_ID AS BIGINT) as LOCATION_ID",
	"CAST(INCIDENT_TSTMP AS TIMESTAMP) as INCIDENT_TSTMP",
	"CAST(CLAIM_OPEN_DT AS DATE) as CLAIM_OPEN_DT",
	"CAST(REPORTED_TO_MANAGER_DT AS DATE) as REPORTED_TO_MANAGER_DT",
	"CAST(CLAIM_CLOSE_DT AS DATE) as CLAIM_CLOSE_DT",
	"CAST(CLOSED_ISSUE_DT AS DATE) as CLOSED_ISSUE_DT",
	"CAST(CASE_RECEIVED_TSTMP AS TIMESTAMP) as CASE_RECEIVED_TSTMP",
	"CAST(ACTION_RESPONSE_DUE_TSTMP AS TIMESTAMP) as ACTION_RESPONSE_DUE_TSTMP",
	"CAST(ACTION_RESPONDED_TSTMP AS TIMESTAMP) as ACTION_RESPONDED_TSTMP",
	"CAST(PETSMART_INCIDENT_TYPE AS STRING) as INCIDENT_TYPE",
	"CAST(CLAIM_TYPE_SRC AS STRING) as CLAIM_TYPE_RAW",
	"CAST(STATUS AS STRING) as CLAIM_STATUS",
	"CAST(CLAIM_SUBSTATUS AS STRING) as CLAIM_SUB_STATUS",
	"CAST(STORE_DC_AREA AS STRING) as STORE_DC_AREA",
	"CAST(SPECIFIC_STORE_AREA AS STRING) as SPECIFIC_STORE_AREA",
	"CAST(ACCIDENT_DESCRIPTION AS STRING) as CLAIM_INCIDENT_DESC",
	"CAST(CAUSE_GENERAL AS STRING) as GENERAL_CAUSE",
	"CAST(CAUSE AS STRING) as DETAIL_CAUSE",
	"CAST(CAUSE_SRC AS STRING) as CAUSE_RAW",
	"CAST(NATURE_GENERAL AS STRING) as GENERAL_NATURE",
	"CAST(NATURE AS STRING) as DETAIL_NATURE",
	"CAST(PART_GENERAL AS STRING) as GENERAL_PART",
	"CAST(PART AS STRING) as DETAIL_PART",
	"CAST(PART_POSITION AS STRING) as DETAIL_PART_POSITION",
	"CAST(COVERAGE_MAJOR AS STRING) as MAJOR_COVERAGE",
	"CAST(CLAIMANT_NAME AS STRING) as CLAIMANT_NAME",
	"CAST(EMPLOYEE_ID_INT AS BIGINT) as EMPLOYEE_ID",
	"CAST(RESPONSIBLE_ASSOCIATE_ID AS STRING) as RESPONSIBLE_EMPLOYEE_ID",
	"CAST(ASSOCIATE_NAME AS STRING) as RESPONSIBLE_EMPLOYEE_NAME",
	"CAST(EMPLOYEE_HIRED_DT AS DATE) as EMPLOYEE_HIRED_DT",
	"CAST(CLAIMANT_LENGTH_SERVICE AS STRING) as EMPLOYEE_TENURE",
	"CAST(EMPLOYEE_SHIFT_START_TSTMP AS TIMESTAMP) as EMPLOYEE_SHIFT_START_TSTMP",
	"CAST(DEPARTMENT AS STRING) as EMPLOYEE_DEPT",
	"CAST(EMPLOYEE_JOB_TITLE AS STRING) as EMPLOYEE_JOB_TITLE",
	"CAST(ACADEMY_TRAINED AS STRING) as ACADEMY_TRAINED",
	"CAST(WORK_RELATED_ACCIDENT_FLAG AS TINYINT) as WORK_RELATED_ACCIDENT_FLAG",
	"CAST(ACTIVITY_ENGAGED_IN AS STRING) as CLAIMANT_ACTIVITY_AT_INCIDENT",
	"CAST(HUMAN_INJURY_ESCALATION AS STRING) as HUMAN_INJURY_ESCALATION",
	"CAST(LOST_TIME_FLAG AS TINYINT) as LOST_TIME_FLAG",
	"CAST(SEEK_TREATMENT_FLAG AS TINYINT) as SEEK_TREATMENT_FLAG",
	"CAST(CALLED_911_FLAG AS TINYINT) as CALLED_911_FLAG",
	"CAST(EMPLOYEE_GO_TO_HOSPITAL_FLAG AS TINYINT) as EMPLOYEE_GO_TO_HOSPITAL_FLAG",
	"CAST(EMPLOYEE_ADMITTED_TO_HOSPITAL_FLAG AS TINYINT) as EMPLOYEE_ADMITTED_TO_HOSPITAL_FLAG",
	"CAST(EMPLOYEE_TRANSPORTED_BY_AMBULANCE_FLAG AS TINYINT) as EMPLOYEE_TRANSPORTED_BY_AMBULANCE_FLAG",
	"CAST(REPORTED_TO_CMS_DT AS DATE) as REPORTED_TO_TPA_DT",
	"CAST(TPA_CARRIER AS STRING) as TPA_CARRIER",
	"CAST(TPA_CLAIM_NUMBER AS STRING) as TPA_CLAIM_NBR",
	"CAST(ANIMAL_INVOLVED_IN_THE_INCIDENT_FLAG AS TINYINT) as ANIMAL_INVOLVED_IN_THE_INCIDENT_FLAG",
	"CAST(ANIMAL_INJ_TYPE AS STRING) as ANIMAL_INCIDENT_TYPE",
	"CAST(ANIMAL_CARE_CUSTODY AS STRING) as ANIMAL_CARE_CUSTODY",
	"CAST(ADOPTION_GROUP AS STRING) as ADOPTION_GROUP",
	"CAST(PET_BREED_TYPE AS STRING) as PET_BREED_TYPE",
	"CAST(PET_BREED AS STRING) as PET_BREED",
	"CAST(NET_INCURRED_AMT AS DECIMAL(12,2)) as NET_INCURRED_AMT",
	"CAST(SCORECARD_EXCEPTION_FLAG_bit AS TINYINT) as SCORECARD_EXCEPTION_FLAG",
	"CAST(PET_INCIDENT_TYPE AS STRING) as PET_INCIDENT_TYPE",
	"CAST(TYPE_OF_INCIDENT_REPORTED AS STRING) as PET_INCIDENT_TYPE_REPORTED",
	"CAST(HEADER_CODE AS STRING) as PET_INCIDENT_REASON_GROUP",
	"CAST(REASON_CODE AS STRING) as PET_INCIDENT_REASON",
	"CAST(INCIDENT_DATA_LOOKUP_CD AS STRING) as PET_INCIDENT_REASON_LEGACY_CD",
	"CAST(PET_INCIDENT_REASON_LEGACY AS STRING) as PET_INCIDENT_REASON_LEGACY",
	"CAST(CAUSE_LEGACY AS STRING) as PET_CAUSE_LEGACY",
	"CAST(PET_SYMPTOMS AS STRING) as PET_SYMPTOMS",
	"CAST(HOW_DID_STORE_FIND_OUT AS STRING) as NOTIFICATION_SOURCE",
	"CAST(BRAND_RISK_DEPT AS STRING) as BRAND_RISK_DEPT",
	"CAST(BRAND_RISK_ESCALATION_FACTORS AS STRING) as PET_ESCALATION_FACTORS",
	"CAST(DAY_CAMP_CAPACITY_CNT AS INT) as DAY_CAMP_CAPACITY_CNT",
	"CAST(PET_IN_PLAYTIME_CNT AS DECIMAL(18,0)) as PET_IN_PLAYTIME_CNT",
	"CAST(PET_IN_TRAINING_CLASS_CNT AS DECIMAL(18,0)) as PET_IN_TRAINING_CLASS_CNT",
	"CAST(INCIDENT_DURING_PETSMART_ACADEMY_FLAG AS TINYINT) as INCIDENT_DURING_PETSMART_ACADEMY_FLAG",
	"CAST(POLICY_VIOLATION AS STRING) as PET_POLICY_VIOLATION",
	"CAST(OTHER_POLICY_VIOLATION AS STRING) as OTHER_POLICY_VIOLATION",
	"CAST(SERVICE_PERFORMED AS STRING) as PET_SERVICE_PERFORMED",
	"CAST(WHAT_POINT_DID_THE_INCIDENT_OCCUR AS STRING) as GROOM_SERVICE_DURING_PET_INCIDENT",
	"CAST(WHAT_POINT_DURING_SERVICE_OCCUR_HOTEL AS STRING) as HOTEL_SERVICE_DURING_PET_INCIDENT",
	"CAST(PET_TAKEN_TO_VET AS STRING) as PET_TAKEN_TO_VET",
	"CAST(INJURY_CONFIRMED_BY_VET_FLAG AS TINYINT) as INJURY_CONFIRMED_BY_VET_FLAG",
	"CAST(FULL_RECOVERY_EXPECTED_FLAG AS TINYINT) as FULL_RECOVERY_EXPECTED_FLAG",
	"CAST(MATTED_PET_RELEASE_FLAG AS TINYINT) as MATTED_PET_RELEASE_FLAG",
	"CAST(PET_SHAVE_AUTH_SIGNED_FLAG AS TINYINT) as PET_SHAVE_AUTH_SIGNED_FLAG",
	"CAST(PET_SERVICE_CARD_SIGNED_FLAG AS TINYINT) as PET_SERVICE_CARD_SIGNED_FLAG",
	"CAST(HEALTH_CHART_COMPLETED_DURING_STAY_FLAG AS TINYINT) as HEALTH_CHART_COMPLETED_DURING_STAY_FLAG",
	"CAST(SAFETY_CERTIFIED_DT AS DATE) as SAFETY_CERTIFIED_DT",
	"CAST(PET_SAFETY_EQUIP AS STRING) as PET_SAFETY_EQUIPMENT_USED",
	"CAST(PET_SAFETY_PRIORITY AS STRING) as PET_SAFETY_PRIORITY",
	"CAST(PET_SAFETY_CAUSE_GENERAL AS STRING) as PET_SAFETY_GENERAL_CAUSE",
	"CAST(PET_SAFETY_CAUSE AS STRING) as PET_SAFETY_DETAIL_CAUSE",
	"CAST(PET_SAFETY_NATURE_GENERAL AS STRING) as PET_SAFETY_GENERAL_NATURE",
	"CAST(PET_SAFETY_NATURE AS STRING) as PET_SAFETY_DETAIL_NATURE",
	"CAST(PET_SAFETY_PART_GENERAL AS STRING) as PET_SAFETY_GENERAL_PART",
	"CAST(PET_SAFETY_PART AS STRING) as PET_SAFETY_DETAIL_PART",
	"CAST(PET_GENDER AS STRING) as PET_GENDER",
	"CAST(PET_AGE AS STRING) as PET_AGE",
	"CAST(PET_WEIGHT AS STRING) as PET_WEIGHT",
	"CAST(PET_NEUTERED_SPAYED_FLAG AS TINYINT) as PET_NEUTERED_SPAYED_FLAG",
	"CAST(PET_ORIGIN AS STRING) as PET_ORIGIN",
	"CAST(PET_PRODUCT_UPC_ID AS BIGINT) as PET_PRODUCT_UPC_ID",
	"CAST(PRODUCT_UPC_LONG_PRODUCT_CODE AS STRING) as PET_PRODUCT_UPC_LONG_CD",
	"CAST(PRODUCT_LOT_CODE AS STRING) as PET_PRODUCT_LOT_CD",
	"CAST(PRODUCT_SKU_SHORT_PRODUCT_CODE AS STRING) as PET_PRODUCT_SKU_SHORT_CD",
	"CAST(PET_PRODUCT_PURCH_DT AS DATE) as PET_PRODUCT_PURCH_DT",
	"CAST(PET_PRODUCT_BEST_BY_DT AS DATE) as PET_PRODUCT_BEST_BY_DT",
	"CAST(PET_EXPENSE_TYPE AS STRING) as PET_EXPENSE_TYPE",
	"CAST(BANFIELD_AMT AS DECIMAL(12,2)) as BANFIELD_AMT",
	"CAST(P_CARD_AMT AS DECIMAL(12,2)) as P_CARD_AMT",
	"CAST(CASH_AMT AS DECIMAL(12,2)) as CASH_AMT",
	"CAST(CHECK_AMT AS DECIMAL(12,2)) as CHECK_AMT",
	"CAST(PET_PARENT_VET_EXP_AMT AS DECIMAL(12,2)) as PET_PARENT_VET_EXP_AMT",
	"CAST(GIFT_CARDS_S_AMT AS DECIMAL(12,2)) as GIFT_CARD_AMT",
	"CAST(FLOWERS_AMT AS DECIMAL(12,2)) as FLOWERS_AMT",
	"CAST(COMPED_PRODUCTS_AMT AS DECIMAL(12,2)) as COMPED_PRODUCTS_AMT",
	"CAST(COMPED_SERVICE_S_AMT AS DECIMAL(12,2)) as COMPED_SERVICES_AMT",
	"CAST(OTHER_AMT AS DECIMAL(12,2)) as OTHER_SETTLEMENT_AMT",
	"CAST(PS_DEPT_CD AS STRING) as PS_DEPT_CD",
	"CAST(UPDATE_TSTMP AS TIMESTAMP) as UPDATE_TSTMP",
	"CAST(LOAD_TSTMP AS TIMESTAMP) as LOAD_TSTMP",
	"pyspark_data_action as pyspark_data_action"
)

try:
	primary_key = """source.SRC_CD = target.SRC_CD AND source.CLAIM_NBR = target.CLAIM_NBR"""
	refined_perf_table = f"{legacy}.INCIDENT_CLAIMS"
	executeMerge(Shortcut_to_INCIDENT_CLAIMS, refined_perf_table, primary_key)
	logger.info(f"Merge with {refined_perf_table} completed]")
	logPrevRunDt("INCIDENT_CLAIMS", "INCIDENT_CLAIMS", "Completed", "N/A", f"{raw}.log_run_details")
except Exception as e:
	logPrevRunDt("INCIDENT_CLAIMS", "INCIDENT_CLAIMS","Failed",str(e), f"{raw}.log_run_details", )
	raise e
		
