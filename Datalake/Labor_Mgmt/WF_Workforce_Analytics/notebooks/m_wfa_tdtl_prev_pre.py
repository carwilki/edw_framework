#Code converted on 2023-08-08 15:42:18
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from Datalake.utils.genericUtilities import *
from Datalake.utils.configs import *
from Datalake.utils.mergeUtils import *
from Datalake.utils.logger import *
# COMMAND ----------

parser = argparse.ArgumentParser()
spark = SparkSession.getActiveSession()
parser.add_argument('env', type=str, help='Env Variable')

args = parser.parse_args()
env = args.env

if env is None or env == '':
    raise ValueError('env is not set')

refine = getEnvPrefix(env) + 'refine'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'
empl_protected = getEnvPrefix(env) + 'empl_protected'


# COMMAND ----------
# Processing node SQ_Shortcut_to_WFA_TDTL_PRE, type SOURCE 
# COLUMN COUNT: 49

SQ_Shortcut_to_WFA_TDTL_PRE = spark.sql(f"""SELECT
raw_WFA_TDTL_PRE.TDTL_SKEY,
raw_WFA_TDTL_PRE.TDTL_ID,
raw_WFA_TDTL_PRE.TSITEM_SKEY,
raw_WFA_TDTL_PRE.RECORDED_DAT,
raw_WFA_TDTL_PRE.RECORDED_FOR_DAT,
raw_WFA_TDTL_PRE.ADJ_SWT,
raw_WFA_TDTL_PRE.EDT_SWT,
raw_WFA_TDTL_PRE.EMP_SKEY,
raw_WFA_TDTL_PRE.STRT_DTM,
raw_WFA_TDTL_PRE.END_DTM,
raw_WFA_TDTL_PRE.UNSCHD_STRT_DTM,
raw_WFA_TDTL_PRE.UNSCHD_END_DTM,
raw_WFA_TDTL_PRE.STRT_TZONE_SKEY,
raw_WFA_TDTL_PRE.LBRACCT_SKEY,
raw_WFA_TDTL_PRE.HM_LBRACCT_SWT,
raw_WFA_TDTL_PRE.HM_LBRACCT_SKEY,
raw_WFA_TDTL_PRE.FROM_LBRACCT_SKEY,
raw_WFA_TDTL_PRE.PAYCD_SKEY,
raw_WFA_TDTL_PRE.CORE_HRS_SWT,
raw_WFA_TDTL_PRE.FROM_PAYCD_SKEY,
raw_WFA_TDTL_PRE.SUPV_SKEY,
raw_WFA_TDTL_PRE.PRI_JOB_SKEY,
raw_WFA_TDTL_PRE.JOB_SKEY,
raw_WFA_TDTL_PRE.PRI_ORG_SKEY,
raw_WFA_TDTL_PRE.ORG_SKEY,
raw_WFA_TDTL_PRE.PAYPER_SKEY,
raw_WFA_TDTL_PRE.HDAY_SKEY,
raw_WFA_TDTL_PRE.STRT_PNCHEVNT_SKEY,
raw_WFA_TDTL_PRE.END_PNCHEVNT_SKEY,
raw_WFA_TDTL_PRE.STRT_DSRC_SKEY,
raw_WFA_TDTL_PRE.END_DSRC_SKEY,
raw_WFA_TDTL_PRE.DSRC_SKEY,
raw_WFA_TDTL_PRE.EMPSTAT_SKEY,
raw_WFA_TDTL_PRE.AGE_NBR,
raw_WFA_TDTL_PRE.TENURE_MO_NBR,
raw_WFA_TDTL_PRE.DFLT_PAY_RULE_SKEY,
raw_WFA_TDTL_PRE.DFLT_WRK_RULE_SWT,
raw_WFA_TDTL_PRE.DFLT_WRK_RULE_SKEY,
raw_WFA_TDTL_PRE.WRK_RULE_SKEY,
raw_WFA_TDTL_PRE.MONEY_AMT,
raw_WFA_TDTL_PRE.DRTN_AMT,
raw_WFA_TDTL_PRE.CORE_AMT,
raw_WFA_TDTL_PRE.NON_CORE_AMT,
raw_WFA_TDTL_PRE.DRTN_DIFF_AMT,
raw_WFA_TDTL_PRE.DRTN_HRS,
raw_WFA_TDTL_PRE.CORE_HRS,
raw_WFA_TDTL_PRE.NON_CORE_HRS,
raw_WFA_TDTL_PRE.LOCKED_SWT,
raw_WFA_TDTL_PRE.GRP_SCHD_SKEY
FROM {empl_protected}.raw_WFA_TDTL_PRE""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node Shortcut_to_WFA_TDTL_PREV_PRE, type TARGET 
# COLUMN COUNT: 49


Shortcut_to_WFA_TDTL_PREV_PRE = SQ_Shortcut_to_WFA_TDTL_PRE.selectExpr(
	"CAST(TDTL_SKEY AS DECIMAL(20,0)) as TDTL_SKEY",
	"CAST(TDTL_ID AS BIGINT) as TDTL_ID",
	"CAST(TSITEM_SKEY AS DECIMAL(20,0)) as TSITEM_SKEY",
	"CAST(RECORDED_DAT AS TIMESTAMP) as RECORDED_DAT",
	"CAST(RECORDED_FOR_DAT AS TIMESTAMP) as RECORDED_FOR_DAT",
	"CAST(ADJ_SWT AS INT) as ADJ_SWT",
	"CAST(EDT_SWT AS INT) as EDT_SWT",
	"CAST(EMP_SKEY AS BIGINT) as EMP_SKEY",
	"CAST(STRT_DTM AS TIMESTAMP) as STRT_DTM",
	"CAST(END_DTM AS TIMESTAMP) as END_DTM",
	"CAST(UNSCHD_STRT_DTM AS TIMESTAMP) as UNSCHD_STRT_DTM",
	"CAST(UNSCHD_END_DTM AS TIMESTAMP) as UNSCHD_END_DTM",
	"CAST(STRT_TZONE_SKEY AS BIGINT) as STRT_TZONE_SKEY",
	"CAST(LBRACCT_SKEY AS BIGINT) as LBRACCT_SKEY",
	"CAST(HM_LBRACCT_SWT AS INT) as HM_LBRACCT_SWT",
	"CAST(HM_LBRACCT_SKEY AS BIGINT) as HM_LBRACCT_SKEY",
	"CAST(FROM_LBRACCT_SKEY AS BIGINT) as FROM_LBRACCT_SKEY",
	"CAST(PAYCD_SKEY AS BIGINT) as PAYCD_SKEY",
	"CAST(CORE_HRS_SWT AS INT) as CORE_HRS_SWT",
	"CAST(FROM_PAYCD_SKEY AS BIGINT) as FROM_PAYCD_SKEY",
	"CAST(SUPV_SKEY AS BIGINT) as SUPV_SKEY",
	"CAST(PRI_JOB_SKEY AS BIGINT) as PRI_JOB_SKEY",
	"CAST(JOB_SKEY AS BIGINT) as JOB_SKEY",
	"CAST(PRI_ORG_SKEY AS BIGINT) as PRI_ORG_SKEY",
	"CAST(ORG_SKEY AS BIGINT) as ORG_SKEY",
	"CAST(PAYPER_SKEY AS BIGINT) as PAYPER_SKEY",
	"CAST(HDAY_SKEY AS BIGINT) as HDAY_SKEY",
	"CAST(STRT_PNCHEVNT_SKEY AS BIGINT) as STRT_PNCHEVNT_SKEY",
	"CAST(END_PNCHEVNT_SKEY AS BIGINT) as END_PNCHEVNT_SKEY",
	"CAST(STRT_DSRC_SKEY AS BIGINT) as STRT_DSRC_SKEY",
	"CAST(END_DSRC_SKEY AS BIGINT) as END_DSRC_SKEY",
	"CAST(DSRC_SKEY AS BIGINT) as DSRC_SKEY",
	"CAST(EMPSTAT_SKEY AS BIGINT) as EMPSTAT_SKEY",
	"CAST(AGE_NBR AS BIGINT) as AGE_NBR",
	"CAST(TENURE_MO_NBR AS BIGINT) as TENURE_MO_NBR",
	"CAST(DFLT_PAY_RULE_SKEY AS BIGINT) as DFLT_PAY_RULE_SKEY",
	"CAST(DFLT_WRK_RULE_SWT AS INT) as DFLT_WRK_RULE_SWT",
	"CAST(DFLT_WRK_RULE_SKEY AS BIGINT) as DFLT_WRK_RULE_SKEY",
	"CAST(WRK_RULE_SKEY AS BIGINT) as WRK_RULE_SKEY",
	"CAST(MONEY_AMT AS DECIMAL(16,6)) as MONEY_AMT",
	"CAST(DRTN_AMT AS DECIMAL(16,6)) as DRTN_AMT",
	"CAST(CORE_AMT AS DECIMAL(16,6)) as CORE_AMT",
	"CAST(NON_CORE_AMT AS DECIMAL(16,6)) as NON_CORE_AMT",
	"CAST(DRTN_DIFF_AMT AS DECIMAL(16,6)) as DRTN_DIFF_AMT",
	"CAST(DRTN_HRS AS DECIMAL(16,6)) as DRTN_HRS",
	"CAST(CORE_HRS AS DECIMAL(16,6)) as CORE_HRS",
	"CAST(NON_CORE_HRS AS DECIMAL(16,6)) as NON_CORE_HRS",
	"CAST(LOCKED_SWT AS INT) as LOCKED_SWT",
	"CAST(GRP_SCHD_SKEY AS BIGINT) as GRP_SCHD_SKEY"
)
# overwriteDeltaPartition(Shortcut_to_WFA_TDTL_PREV_PRE,'DC_NBR',dcnbr,f'{raw}.WFA_TDTL_PREV_PRE')
Shortcut_to_WFA_TDTL_PREV_PRE.write.mode("overwrite").saveAsTable(f'{empl_protected}.raw_WFA_TDTL_PREV_PRE')