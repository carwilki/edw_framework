#Code converted on 2023-08-08 15:41:11
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from Datalake.utils.genericUtilities import *
from Datalake.utils.configs import *
from Datalake.utils.mergeUtils import *
from Datalake.utils.logger import *
# COMMAND ----------

parser = argparse.ArgumentParser()
spark = SparkSession.getActiveSession()
parser.add_argument('env', type=str, help='Env Variable')

args = parser.parse_args()
env = args.env

if env is None or env == '':
    raise ValueError('env is not set')

refine = getEnvPrefix(env) + 'refine'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'
enterprise = getEnvPrefix(env) + 'enterprise'


# COMMAND ----------
# Processing node SQ_Shortcut_to_WFA_FCST_SLS_TASK, type SOURCE 
# COLUMN COUNT: 3

SQ_Shortcut_to_WFA_FCST_SLS_TASK = spark.sql(f"""SELECT
WFA_FCST_SLS_TASK.DAY_DT,
WFA_FCST_SLS_TASK.ORG_ID,
WFA_FCST_SLS_TASK.LOAD_DT
FROM {legacy}.WFA_FCST_SLS_TASK
WHERE DAY_DT > CURRENT_DATE - 36""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node SQ_Shortcut_to_WFA_FCST_SLS_PRE, type SOURCE 
# COLUMN COUNT: 43

SQ_Shortcut_to_WFA_FCST_SLS_PRE = spark.sql(f"""SELECT
WFA_FCST_SLS_PRE.BUSN_DAT,
WFA_ORG_FACT_PRE.ORG_ID,
WFA_ORG_FACT_PRE.LOCATION_ID,
WFA_ORG_FACT_PRE.WFA_BUSN_AREA_ID,
WFA_ORG_FACT_PRE.WFA_BUSN_AREA_DESC,
WFA_ORG_FACT_PRE.WFA_DEPT_ID,
WFA_ORG_FACT_PRE.WFA_DEPT_DESC,
WFA_ORG_FACT_PRE.WFA_TASK_ID,
WFA_ORG_FACT_PRE.WFA_TASK_DESC,
WFA_FCST_SLS_PRE.ACTL_AMT,
WFA_FCST_SLS_PRE.ACTL_HRS,
WFA_FCST_SLS_PRE.ACTL_RATE_AMT,
WFA_FCST_SLS_PRE.ACTL_REG_AMT,
WFA_FCST_SLS_PRE.ACTL_REG_HRS,
WFA_FCST_SLS_PRE.ACTL_OT_AMT,
WFA_FCST_SLS_PRE.ACTL_OT_HRS,
WFA_FCST_SLS_PRE.ACTL_OTH_AMT,
WFA_FCST_SLS_PRE.ACTL_OTH_HRS,
WFA_FCST_SLS_PRE.ACTL_NPRD_AMT,
WFA_FCST_SLS_PRE.ACTL_NPRD_HRS,
WFA_FCST_SLS_PRE.ACTL_TRNG_AMT,
WFA_FCST_SLS_PRE.ACTL_TRNG_HRS,
WFA_FCST_SLS_PRE.ACTL_UNK_AMT,
WFA_FCST_SLS_PRE.ACTL_UNK_HRS,
WFA_FCST_SLS_PRE.SCHD_AMT,
WFA_FCST_SLS_PRE.SCHD_HRS,
WFA_FCST_SLS_PRE.SCHD_RATE_AMT,
WFA_FCST_SLS_PRE.SCHD_REG_AMT,
WFA_FCST_SLS_PRE.SCHD_REG_HRS,
WFA_FCST_SLS_PRE.SCHD_OT_AMT,
WFA_FCST_SLS_PRE.SCHD_OT_HRS,
WFA_FCST_SLS_PRE.SCHD_OTH_AMT,
WFA_FCST_SLS_PRE.SCHD_OTH_HRS,
WFA_FCST_SLS_PRE.SCHD_NPRD_AMT,
WFA_FCST_SLS_PRE.SCHD_NPRD_HRS,
WFA_FCST_SLS_PRE.SCHD_TRNG_AMT,
WFA_FCST_SLS_PRE.SCHD_TRNG_HRS,
WFA_FCST_SLS_PRE.SCHD_UNK_AMT,
WFA_FCST_SLS_PRE.SCHD_UNK_HRS,
WFA_FCST_SLS_PRE.FCST_AMT,
WFA_FCST_SLS_PRE.FCST_HRS,
WFA_FCST_SLS_PRE.FCST_RATE_AMT,
DAYS.WEEK_DT
FROM {enterprise}.DAYS, {raw}.WFA_ORG_FACT_PRE, {raw}.WFA_FCST_SLS_PRE
WHERE wfa_fcst_sls_pre.org_skey = wfa_org_fact_pre.org_skey
AND wfa_fcst_sls_pre.busn_dat = days.day_dt
AND wfa_org_fact_pre.org_lvl_nbr = 9""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node JNR_TRANS, type JOINER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 46

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_WFA_FCST_SLS_PRE_temp = SQ_Shortcut_to_WFA_FCST_SLS_PRE.toDF(*["SQ_Shortcut_to_WFA_FCST_SLS_PRE___" + col for col in SQ_Shortcut_to_WFA_FCST_SLS_PRE.columns])
SQ_Shortcut_to_WFA_FCST_SLS_TASK_temp = SQ_Shortcut_to_WFA_FCST_SLS_TASK.toDF(*["SQ_Shortcut_to_WFA_FCST_SLS_TASK___" + col for col in SQ_Shortcut_to_WFA_FCST_SLS_TASK.columns])

JNR_TRANS = SQ_Shortcut_to_WFA_FCST_SLS_PRE_temp.join(SQ_Shortcut_to_WFA_FCST_SLS_TASK_temp,[SQ_Shortcut_to_WFA_FCST_SLS_PRE_temp.SQ_Shortcut_to_WFA_FCST_SLS_PRE___BUSN_DAT == SQ_Shortcut_to_WFA_FCST_SLS_TASK_temp.SQ_Shortcut_to_WFA_FCST_SLS_TASK___DAY_DT, SQ_Shortcut_to_WFA_FCST_SLS_PRE_temp.SQ_Shortcut_to_WFA_FCST_SLS_PRE___ORG_ID == SQ_Shortcut_to_WFA_FCST_SLS_TASK_temp.SQ_Shortcut_to_WFA_FCST_SLS_TASK___ORG_ID],'left_outer').selectExpr(
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___sys_row_id as sys_row_id",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___BUSN_DAT as BUSN_DAT",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___ORG_ID as ORG_ID",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___LOCATION_ID as LOCATION_ID",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___WFA_BUSN_AREA_ID as WFA_BUSN_AREA_ID",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___WFA_BUSN_AREA_DESC as WFA_BUSN_AREA_DESC",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___WFA_DEPT_ID as WFA_DEPT_ID",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___WFA_DEPT_DESC as WFA_DEPT_DESC",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___WFA_TASK_ID as WFA_TASK_ID",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___WFA_TASK_DESC as WFA_TASK_DESC",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___ACTL_AMT as ACTL_AMT",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___ACTL_HRS as ACTL_HRS",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___ACTL_RATE_AMT as ACTL_RATE_AMT",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___ACTL_REG_AMT as ACTL_REG_AMT",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___ACTL_REG_HRS as ACTL_REG_HRS",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___ACTL_OT_AMT as ACTL_OT_AMT",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___ACTL_OT_HRS as ACTL_OT_HRS",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___ACTL_OTH_AMT as ACTL_OTH_AMT",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___ACTL_OTH_HRS as ACTL_OTH_HRS",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___ACTL_NPRD_AMT as ACTL_NPRD_AMT",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___ACTL_NPRD_HRS as ACTL_NPRD_HRS",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___ACTL_TRNG_AMT as ACTL_TRNG_AMT",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___ACTL_TRNG_HRS as ACTL_TRNG_HRS",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___ACTL_UNK_AMT as ACTL_UNK_AMT",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___ACTL_UNK_HRS as ACTL_UNK_HRS",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___SCHD_AMT as SCHD_AMT",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___SCHD_HRS as SCHD_HRS",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___SCHD_RATE_AMT as SCHD_RATE_AMT",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___SCHD_REG_AMT as SCHD_REG_AMT",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___SCHD_REG_HRS as SCHD_REG_HRS",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___SCHD_OT_AMT as SCHD_OT_AMT",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___SCHD_OT_HRS as SCHD_OT_HRS",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___SCHD_OTH_AMT as SCHD_OTH_AMT",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___SCHD_OTH_HRS as SCHD_OTH_HRS",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___SCHD_NPRD_AMT as SCHD_NPRD_AMT",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___SCHD_NPRD_HRS as SCHD_NPRD_HRS",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___SCHD_TRNG_AMT as SCHD_TRNG_AMT",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___SCHD_TRNG_HRS as SCHD_TRNG_HRS",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___SCHD_UNK_AMT as SCHD_UNK_AMT",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___SCHD_UNK_HRS as SCHD_UNK_HRS",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___FCST_AMT as FCST_AMT",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___FCST_HRS as FCST_HRS",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___FCST_RATE_AMT as FCST_RATE_AMT",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___WEEK_DT as WEEK_DT",
	"SQ_Shortcut_to_WFA_FCST_SLS_TASK___DAY_DT as DAY_DT",
	"SQ_Shortcut_to_WFA_FCST_SLS_TASK___ORG_ID as ORG_ID1",
	"SQ_Shortcut_to_WFA_FCST_SLS_TASK___LOAD_DT as LOAD_DT")

# COMMAND ----------
# Processing node EXP_TRANS, type EXPRESSION . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 46

# for each involved DataFrame, append the dataframe name to each column
JNR_TRANS_temp = JNR_TRANS.toDF(*["JNR_TRANS___" + col for col in JNR_TRANS.columns])

EXP_TRANS = JNR_TRANS_temp.selectExpr(
	"JNR_TRANS___sys_row_id as sys_row_id",
	"JNR_TRANS___BUSN_DAT as BUSN_DAT",
	"JNR_TRANS___ORG_ID as ORG_ID",
	"JNR_TRANS___LOCATION_ID as LOCATION_ID",
	"JNR_TRANS___WFA_BUSN_AREA_ID as WFA_BUSN_AREA_ID",
	"JNR_TRANS___WFA_BUSN_AREA_DESC as WFA_BUSN_AREA_DESC",
	"JNR_TRANS___WFA_DEPT_ID as WFA_DEPT_ID",
	"JNR_TRANS___WFA_DEPT_DESC as WFA_DEPT_DESC",
	"JNR_TRANS___WFA_TASK_ID as WFA_TASK_ID",
	"JNR_TRANS___WFA_TASK_DESC as WFA_TASK_DESC",
	"JNR_TRANS___ACTL_AMT as ACTL_AMT",
	"JNR_TRANS___ACTL_HRS as ACTL_HRS",
	"JNR_TRANS___ACTL_RATE_AMT as ACTL_RATE_AMT",
	"JNR_TRANS___ACTL_REG_AMT as ACTL_REG_AMT",
	"JNR_TRANS___ACTL_REG_HRS as ACTL_REG_HRS",
	"JNR_TRANS___ACTL_OT_AMT as ACTL_OT_AMT",
	"JNR_TRANS___ACTL_OT_HRS as ACTL_OT_HRS",
	"JNR_TRANS___ACTL_OTH_AMT as ACTL_OTH_AMT",
	"JNR_TRANS___ACTL_OTH_HRS as ACTL_OTH_HRS",
	"JNR_TRANS___ACTL_NPRD_AMT as ACTL_NPRD_AMT",
	"JNR_TRANS___ACTL_NPRD_HRS as ACTL_NPRD_HRS",
	"JNR_TRANS___ACTL_TRNG_AMT as ACTL_TRNG_AMT",
	"JNR_TRANS___ACTL_TRNG_HRS as ACTL_TRNG_HRS",
	"JNR_TRANS___ACTL_UNK_AMT as ACTL_UNK_AMT",
	"JNR_TRANS___ACTL_UNK_HRS as ACTL_UNK_HRS",
	"JNR_TRANS___SCHD_AMT as SCHD_AMT",
	"JNR_TRANS___SCHD_HRS as SCHD_HRS",
	"JNR_TRANS___SCHD_RATE_AMT as SCHD_RATE_AMT",
	"JNR_TRANS___SCHD_REG_AMT as SCHD_REG_AMT",
	"JNR_TRANS___SCHD_REG_HRS as SCHD_REG_HRS",
	"JNR_TRANS___SCHD_OT_AMT as SCHD_OT_AMT",
	"JNR_TRANS___SCHD_OT_HRS as SCHD_OT_HRS",
	"JNR_TRANS___SCHD_OTH_AMT as SCHD_OTH_AMT",
	"JNR_TRANS___SCHD_OTH_HRS as SCHD_OTH_HRS",
	"JNR_TRANS___SCHD_NPRD_AMT as SCHD_NPRD_AMT",
	"JNR_TRANS___SCHD_NPRD_HRS as SCHD_NPRD_HRS",
	"JNR_TRANS___SCHD_TRNG_AMT as SCHD_TRNG_AMT",
	"JNR_TRANS___SCHD_TRNG_HRS as SCHD_TRNG_HRS",
	"JNR_TRANS___SCHD_UNK_AMT as SCHD_UNK_AMT",
	"JNR_TRANS___SCHD_UNK_HRS as SCHD_UNK_HRS",
	"JNR_TRANS___FCST_AMT as FCST_AMT",
	"JNR_TRANS___FCST_HRS as FCST_HRS",
	"JNR_TRANS___FCST_RATE_AMT as FCST_RATE_AMT",
	"JNR_TRANS___WEEK_DT as WEEK_DT",
	"IF (JNR_TRANS___ORG_ID1 IS NULL, 'I', 'U') as LOAD_FLAG",
	"DATE_TRUNC ('DAY', CURRENT_TIMESTAMP ) as UPDATE_DT",
	"IF (JNR_TRANS___LOAD_DT IS NULL, DATE_TRUNC ('DAY', CURRENT_TIMESTAMP ), JNR_TRANS___LOAD_DT) as LOAD_DT"
)

# COMMAND ----------
# Processing node UPD_ins_upd, type UPDATE_STRATEGY . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 46

# for each involved DataFrame, append the dataframe name to each column
EXP_TRANS_temp = EXP_TRANS.toDF(*["EXP_TRANS___" + col for col in EXP_TRANS.columns])

UPD_ins_upd = EXP_TRANS_temp.selectExpr(
	"EXP_TRANS___BUSN_DAT as BUSN_DAT1",
	"EXP_TRANS___ORG_ID as ORG_ID1",
	"EXP_TRANS___LOCATION_ID as LOCATION_ID1",
	"EXP_TRANS___WFA_BUSN_AREA_ID as WFA_BUSN_AREA_ID1",
	"EXP_TRANS___WFA_BUSN_AREA_DESC as WFA_BUSN_AREA_DESC1",
	"EXP_TRANS___WFA_DEPT_ID as WFA_DEPT_ID1",
	"EXP_TRANS___WFA_DEPT_DESC as WFA_DEPT_DESC1",
	"EXP_TRANS___WFA_TASK_ID as WFA_TASK_ID1",
	"EXP_TRANS___WFA_TASK_DESC as WFA_TASK_DESC1",
	"EXP_TRANS___ACTL_AMT as ACTL_AMT1",
	"EXP_TRANS___ACTL_HRS as ACTL_HRS1",
	"EXP_TRANS___ACTL_RATE_AMT as ACTL_RATE_AMT1",
	"EXP_TRANS___ACTL_REG_AMT as ACTL_REG_AMT1",
	"EXP_TRANS___ACTL_REG_HRS as ACTL_REG_HRS1",
	"EXP_TRANS___ACTL_OT_AMT as ACTL_OT_AMT1",
	"EXP_TRANS___ACTL_OT_HRS as ACTL_OT_HRS1",
	"EXP_TRANS___ACTL_OTH_AMT as ACTL_OTH_AMT1",
	"EXP_TRANS___ACTL_OTH_HRS as ACTL_OTH_HRS1",
	"EXP_TRANS___ACTL_NPRD_AMT as ACTL_NPRD_AMT1",
	"EXP_TRANS___ACTL_NPRD_HRS as ACTL_NPRD_HRS1",
	"EXP_TRANS___ACTL_TRNG_AMT as ACTL_TRNG_AMT1",
	"EXP_TRANS___ACTL_TRNG_HRS as ACTL_TRNG_HRS1",
	"EXP_TRANS___ACTL_UNK_AMT as ACTL_UNK_AMT1",
	"EXP_TRANS___ACTL_UNK_HRS as ACTL_UNK_HRS1",
	"EXP_TRANS___SCHD_AMT as SCHD_AMT1",
	"EXP_TRANS___SCHD_HRS as SCHD_HRS1",
	"EXP_TRANS___SCHD_RATE_AMT as SCHD_RATE_AMT1",
	"EXP_TRANS___SCHD_REG_AMT as SCHD_REG_AMT1",
	"EXP_TRANS___SCHD_REG_HRS as SCHD_REG_HRS1",
	"EXP_TRANS___SCHD_OT_AMT as SCHD_OT_AMT1",
	"EXP_TRANS___SCHD_OT_HRS as SCHD_OT_HRS1",
	"EXP_TRANS___SCHD_OTH_AMT as SCHD_OTH_AMT1",
	"EXP_TRANS___SCHD_OTH_HRS as SCHD_OTH_HRS1",
	"EXP_TRANS___SCHD_NPRD_AMT as SCHD_NPRD_AMT1",
	"EXP_TRANS___SCHD_NPRD_HRS as SCHD_NPRD_HRS1",
	"EXP_TRANS___SCHD_TRNG_AMT as SCHD_TRNG_AMT1",
	"EXP_TRANS___SCHD_TRNG_HRS as SCHD_TRNG_HRS1",
	"EXP_TRANS___SCHD_UNK_AMT as SCHD_UNK_AMT1",
	"EXP_TRANS___SCHD_UNK_HRS as SCHD_UNK_HRS1",
	"EXP_TRANS___FCST_AMT as FCST_AMT1",
	"EXP_TRANS___FCST_HRS as FCST_HRS1",
	"EXP_TRANS___FCST_RATE_AMT as FCST_RATE_AMT1",
	"EXP_TRANS___WEEK_DT as WEEK_DT1",
	"EXP_TRANS___LOAD_FLAG as LOAD_FLAG",
	"EXP_TRANS___UPDATE_DT as UPDATE_DT",
	"EXP_TRANS___LOAD_DT as LOAD_DT1",
 	"IF(EXP_TRANS___LOAD_FLAG == 'I', 0, 1) as pyspark_data_action") 
	# .withColumn('pyspark_data_action', when((EXP_TRANS_temp.LOAD_FLAG == lit('I')) ,(lit(0))) .otherwise(lit(1)))

# COMMAND ----------
# Processing node Shortcut_to_WFA_FCST_SLS_TASK_ins_upd, type TARGET 
# COLUMN COUNT: 45


Shortcut_to_WFA_FCST_SLS_TASK_ins_upd = UPD_ins_upd.selectExpr(
	"CAST(BUSN_DAT1 AS TIMESTAMP) as DAY_DT",
	"CAST(ORG_ID1 AS DECIMAL(10,0)) as ORG_ID",
	"CAST(LOCATION_ID1 AS BIGINT) as LOCATION_ID",
	"WFA_BUSN_AREA_ID1 as WFA_BUSN_AREA_ID",
	"WFA_BUSN_AREA_DESC1 as WFA_BUSN_AREA_DESC",
	"WFA_DEPT_ID1 as WFA_DEPT_ID",
	"WFA_DEPT_DESC1 as WFA_DEPT_DESC",
	"WFA_TASK_ID1 as WFA_TASK_ID",
	"WFA_TASK_DESC1 as WFA_TASK_DESC",
	"CAST(ACTL_AMT1 AS DECIMAL(16,6)) as ACTL_AMT",
	"CAST(ACTL_HRS1 AS DECIMAL(16,6)) as ACTL_HRS",
	"CAST(ACTL_RATE_AMT1 AS DECIMAL(16,6)) as ACTL_RATE_AMT",
	"CAST(ACTL_REG_AMT1 AS DECIMAL(16,6)) as ACTL_REG_AMT",
	"CAST(ACTL_REG_HRS1 AS DECIMAL(16,6)) as ACTL_REG_HRS",
	"CAST(ACTL_OT_AMT1 AS DECIMAL(16,6)) as ACTL_OT_AMT",
	"CAST(ACTL_OT_HRS1 AS DECIMAL(16,6)) as ACTL_OT_HRS",
	"CAST(ACTL_OTH_AMT1 AS DECIMAL(16,6)) as ACTL_OTH_AMT",
	"CAST(ACTL_OTH_HRS1 AS DECIMAL(16,6)) as ACTL_OTH_HRS",
	"CAST(ACTL_NPRD_AMT1 AS DECIMAL(16,6)) as ACTL_NPRD_AMT",
	"CAST(ACTL_NPRD_HRS1 AS DECIMAL(16,6)) as ACTL_NPRD_HRS",
	"CAST(ACTL_TRNG_AMT1 AS DECIMAL(16,6)) as ACTL_TRNG_AMT",
	"CAST(ACTL_TRNG_HRS1 AS DECIMAL(16,6)) as ACTL_TRNG_HRS",
	"CAST(ACTL_UNK_AMT1 AS DECIMAL(16,6)) as ACTL_UNK_AMT",
	"CAST(ACTL_UNK_HRS1 AS DECIMAL(16,6)) as ACTL_UNK_HRS",
	"CAST(SCHD_AMT1 AS DECIMAL(16,6)) as SCHD_AMT",
	"CAST(SCHD_HRS1 AS DECIMAL(16,6)) as SCHD_HRS",
	"CAST(SCHD_RATE_AMT1 AS DECIMAL(16,6)) as SCHD_RATE_AMT",
	"CAST(SCHD_REG_AMT1 AS DECIMAL(16,6)) as SCHD_REG_AMT",
	"CAST(SCHD_REG_HRS1 AS DECIMAL(16,6)) as SCHD_REG_HRS",
	"CAST(SCHD_OT_AMT1 AS DECIMAL(16,6)) as SCHD_OT_AMT",
	"CAST(SCHD_OT_HRS1 AS DECIMAL(16,6)) as SCHD_OT_HRS",
	"CAST(SCHD_OTH_AMT1 AS DECIMAL(16,6)) as SCHD_OTH_AMT",
	"CAST(SCHD_OTH_HRS1 AS DECIMAL(16,6)) as SCHD_OTH_HRS",
	"CAST(SCHD_NPRD_AMT1 AS DECIMAL(16,6)) as SCHD_NPRD_AMT",
	"CAST(SCHD_NPRD_HRS1 AS DECIMAL(16,6)) as SCHD_NPRD_HRS",
	"CAST(SCHD_TRNG_AMT1 AS DECIMAL(16,6)) as SCHD_TRNG_AMT",
	"CAST(SCHD_TRNG_HRS1 AS DECIMAL(16,6)) as SCHD_TRNG_HRS",
	"CAST(SCHD_UNK_AMT1 AS DECIMAL(16,6)) as SCHD_UNK_AMT",
	"CAST(SCHD_UNK_HRS1 AS DECIMAL(16,6)) as SCHD_UNK_HRS",
	"CAST(FCST_AMT1 AS DECIMAL(16,6)) as FCST_AMT",
	"CAST(FCST_HRS1 AS DECIMAL(16,6)) as FCST_HRS",
	"CAST(FCST_RATE_AMT1 AS DECIMAL(16,6)) as FCST_RATE_AMT",
	"CAST(WEEK_DT1 AS TIMESTAMP) as WEEK_DT",
	"CAST(UPDATE_DT AS TIMESTAMP) as UPDATE_DT",
	"CAST(LOAD_DT1 AS TIMESTAMP) as LOAD_DT",
	"pyspark_data_action as pyspark_data_action"
)

try:
	primary_key = """source.DAY_DT = target.DAY_DT AND source.ORG_ID = target.ORG_ID"""
	refined_perf_table = f"{legacy}.WFA_FCST_SLS_TASK"
	executeMerge(Shortcut_to_WFA_FCST_SLS_TASK_ins_upd, refined_perf_table, primary_key)
	logger.info(f"Merge with {refined_perf_table} completed]")
	logPrevRunDt("WFA_FCST_SLS_TASK", "WFA_FCST_SLS_TASK", "Completed", "N/A", f"{raw}.log_run_details")
except Exception as e:
	logPrevRunDt("WFA_FCST_SLS_TASK", "WFA_FCST_SLS_TASK","Failed",str(e), f"{raw}.log_run_details")
	raise e
		