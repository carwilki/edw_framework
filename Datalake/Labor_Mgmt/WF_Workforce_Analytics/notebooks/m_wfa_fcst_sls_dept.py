#Code converted on 2023-08-08 15:41:06
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from Datalake.utils.genericUtilities import *
from Datalake.utils.configs import *
from Datalake.utils.mergeUtils import *
from Datalake.utils.logger import *
# COMMAND ----------

parser = argparse.ArgumentParser()
spark = SparkSession.getActiveSession()
parser.add_argument('env', type=str, help='Env Variable')

args = parser.parse_args()
env = args.env

if env is None or env == '':
    raise ValueError('env is not set')

refine = getEnvPrefix(env) + 'refine'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'
enterprise = getEnvPrefix(env) + 'enterprise'


# COMMAND ----------
# Processing node SQ_Shortcut_to_WFA_FCST_SLS_DEPT, type SOURCE 
# COLUMN COUNT: 3

SQ_Shortcut_to_WFA_FCST_SLS_DEPT = spark.sql(f"""SELECT
WFA_FCST_SLS_DEPT.DAY_DT,
WFA_FCST_SLS_DEPT.ORG_ID,
WFA_FCST_SLS_DEPT.LOAD_DT
FROM {legacy}.WFA_FCST_SLS_DEPT
WHERE DAY_DT > CURRENT_DATE - 36""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node SQ_Shortcut_to_WFA_FCST_SLS_PRE, type SOURCE 
# COLUMN COUNT: 33

SQ_Shortcut_to_WFA_FCST_SLS_PRE = spark.sql(f"""SELECT
WFA_FCST_SLS_PRE.BUSN_DAT,
WFA_ORG_PRE.ORG_ID,
SITE_PROFILE.LOCATION_ID,
WFA_BUSINESS_AREA.WFA_BUSN_AREA_ID,
WFA_BUSINESS_AREA.WFA_BUSN_AREA_DESC,
WFA_DEPARTMENT.WFA_DEPT_ID,
WFA_DEPARTMENT.WFA_DEPT_DESC,
WFA_FCST_SLS_PRE.ACTL_CLNT1_NBR,
WFA_FCST_SLS_PRE.ACTL_CLNT2_NBR,
WFA_FCST_SLS_PRE.ACTL_CLNT3_NBR,
WFA_FCST_SLS_PRE.ACTL_CLNT4_NBR,
WFA_FCST_SLS_PRE.ACTL_CLNT5_NBR,
WFA_FCST_SLS_PRE.ACTL_CLNT6_NBR,
WFA_FCST_SLS_PRE.ACTL_CLNT7_NBR,
WFA_FCST_SLS_PRE.FCST_ORIG_CLNT1_NBR,
WFA_FCST_SLS_PRE.FCST_CLNT1_NBR,
WFA_FCST_SLS_PRE.FCST_ORIG_CLNT2_NBR,
WFA_FCST_SLS_PRE.FCST_CLNT2_NBR,
WFA_FCST_SLS_PRE.FCST_ORIG_CLNT3_NBR,
WFA_FCST_SLS_PRE.FCST_CLNT3_NBR,
WFA_FCST_SLS_PRE.FCST_ORIG_CLNT4_NBR,
WFA_FCST_SLS_PRE.FCST_CLNT4_NBR,
WFA_FCST_SLS_PRE.FCST_ORIG_CLNT5_NBR,
WFA_FCST_SLS_PRE.FCST_CLNT5_NBR,
WFA_FCST_SLS_PRE.FCST_ORIG_CLNT6_NBR,
WFA_FCST_SLS_PRE.FCST_CLNT6_NBR,
WFA_FCST_SLS_PRE.FCST_ORIG_CLNT7_NBR,
WFA_FCST_SLS_PRE.FCST_CLNT7_NBR,
WFA_FCST_SLS_PRE.BUD_AMT,
WFA_FCST_SLS_PRE.BUD_HRS,
WFA_FCST_SLS_PRE.BUD_RATE_AMT,
WFA_FCST_SLS_PRE.BUD_SLS_AMT,
DAYS.WEEK_DT
FROM {enterprise}.DAYS, {raw}.WFA_ORG_PRE, {legacy}.SITE_PROFILE, {legacy}.WFA_DEPARTMENT, {raw}.WFA_FCST_SLS_PRE, {legacy}.WFA_BUSINESS_AREA
WHERE wfa_fcst_sls_pre.org_skey = wfa_org_pre.org_skey
AND wfa_fcst_sls_pre.busn_dat = days.day_dt
AND wfa_org_pre.org_lvl06_nam = site_profile.store_nbr
AND wfa_org_pre.org_lvl07_nam = wfa_business_area.wfa_busn_area_desc
AND wfa_org_pre.org_lvl08_nam = wfa_department.wfa_dept_desc
AND wfa_org_pre.org_lvl_nbr = 8""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node JNR_TRANS, type JOINER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 36

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_WFA_FCST_SLS_DEPT_temp = SQ_Shortcut_to_WFA_FCST_SLS_DEPT.toDF(*["SQ_Shortcut_to_WFA_FCST_SLS_DEPT___" + col for col in SQ_Shortcut_to_WFA_FCST_SLS_DEPT.columns])
SQ_Shortcut_to_WFA_FCST_SLS_PRE_temp = SQ_Shortcut_to_WFA_FCST_SLS_PRE.toDF(*["SQ_Shortcut_to_WFA_FCST_SLS_PRE___" + col for col in SQ_Shortcut_to_WFA_FCST_SLS_PRE.columns])

JNR_TRANS = SQ_Shortcut_to_WFA_FCST_SLS_DEPT_temp.join(SQ_Shortcut_to_WFA_FCST_SLS_PRE_temp,[SQ_Shortcut_to_WFA_FCST_SLS_DEPT_temp.SQ_Shortcut_to_WFA_FCST_SLS_DEPT___ORG_ID == SQ_Shortcut_to_WFA_FCST_SLS_PRE_temp.SQ_Shortcut_to_WFA_FCST_SLS_PRE___ORG_ID, SQ_Shortcut_to_WFA_FCST_SLS_DEPT_temp.SQ_Shortcut_to_WFA_FCST_SLS_DEPT___DAY_DT == SQ_Shortcut_to_WFA_FCST_SLS_PRE_temp.SQ_Shortcut_to_WFA_FCST_SLS_PRE___BUSN_DAT],'right_outer').selectExpr(
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___sys_row_id as sys_row_id",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___BUSN_DAT as BUSN_DAT",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___ORG_ID as ORG_ID",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___LOCATION_ID as LOCATION_ID",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___WFA_BUSN_AREA_ID as WFA_BUSN_AREA_ID",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___WFA_BUSN_AREA_DESC as WFA_BUSN_AREA_DESC",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___WFA_DEPT_ID as WFA_DEPT_ID",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___WFA_DEPT_DESC as WFA_DEPT_DESC",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___ACTL_CLNT1_NBR as ACTL_CLNT1_NBR",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___ACTL_CLNT2_NBR as ACTL_CLNT2_NBR",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___ACTL_CLNT3_NBR as ACTL_CLNT3_NBR",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___ACTL_CLNT4_NBR as ACTL_CLNT4_NBR",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___ACTL_CLNT5_NBR as ACTL_CLNT5_NBR",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___ACTL_CLNT6_NBR as ACTL_CLNT6_NBR",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___ACTL_CLNT7_NBR as ACTL_CLNT7_NBR",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___FCST_ORIG_CLNT1_NBR as FCST_ORIG_CLNT1_NBR",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___FCST_CLNT1_NBR as FCST_CLNT1_NBR",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___FCST_ORIG_CLNT2_NBR as FCST_ORIG_CLNT2_NBR",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___FCST_CLNT2_NBR as FCST_CLNT2_NBR",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___FCST_ORIG_CLNT3_NBR as FCST_ORIG_CLNT3_NBR",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___FCST_CLNT3_NBR as FCST_CLNT3_NBR",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___FCST_ORIG_CLNT4_NBR as FCST_ORIG_CLNT4_NBR",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___FCST_CLNT4_NBR as FCST_CLNT4_NBR",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___FCST_ORIG_CLNT5_NBR as FCST_ORIG_CLNT5_NBR",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___FCST_CLNT5_NBR as FCST_CLNT5_NBR",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___FCST_ORIG_CLNT6_NBR as FCST_ORIG_CLNT6_NBR",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___FCST_CLNT6_NBR as FCST_CLNT6_NBR",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___FCST_ORIG_CLNT7_NBR as FCST_ORIG_CLNT7_NBR",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___FCST_CLNT7_NBR as FCST_CLNT7_NBR",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___BUD_AMT as BUD_AMT",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___BUD_HRS as BUD_HRS",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___BUD_RATE_AMT as BUD_RATE_AMT",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___BUD_SLS_AMT as BUD_SLS_AMT",
	"SQ_Shortcut_to_WFA_FCST_SLS_PRE___WEEK_DT as WEEK_DT",
	"SQ_Shortcut_to_WFA_FCST_SLS_DEPT___DAY_DT as DAY_DT",
	"SQ_Shortcut_to_WFA_FCST_SLS_DEPT___ORG_ID as ORG_ID1",
	"SQ_Shortcut_to_WFA_FCST_SLS_DEPT___LOAD_DT as LOAD_DT")

# COMMAND ----------
# Processing node EXP_TRANS, type EXPRESSION . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 37

# for each involved DataFrame, append the dataframe name to each column
JNR_TRANS_temp = JNR_TRANS.toDF(*["JNR_TRANS___" + col for col in JNR_TRANS.columns])

EXP_TRANS = JNR_TRANS_temp.selectExpr(
	"JNR_TRANS___sys_row_id as sys_row_id",
	"JNR_TRANS___BUSN_DAT as BUSN_DAT",
	"JNR_TRANS___ORG_ID as ORG_ID",
	"JNR_TRANS___LOCATION_ID as LOCATION_ID",
	"JNR_TRANS___WFA_BUSN_AREA_ID as WFA_BUSN_AREA_ID",
	"JNR_TRANS___WFA_BUSN_AREA_DESC as WFA_BUSN_AREA_DESC",
	"JNR_TRANS___WFA_DEPT_ID as WFA_DEPT_ID",
	"JNR_TRANS___WFA_DEPT_DESC as WFA_DEPT_DESC",
	"JNR_TRANS___ACTL_CLNT1_NBR as ACTL_CLNT1_NBR",
	"JNR_TRANS___ACTL_CLNT2_NBR as ACTL_CLNT2_NBR",
	"JNR_TRANS___ACTL_CLNT3_NBR as ACTL_CLNT3_NBR",
	"JNR_TRANS___ACTL_CLNT4_NBR as ACTL_CLNT4_NBR",
	"JNR_TRANS___ACTL_CLNT5_NBR as ACTL_CLNT5_NBR",
	"JNR_TRANS___ACTL_CLNT6_NBR as ACTL_CLNT6_NBR",
	"JNR_TRANS___ACTL_CLNT7_NBR as ACTL_CLNT7_NBR",
	"JNR_TRANS___FCST_ORIG_CLNT1_NBR as FCST_ORIG_CLNT1_NBR",
	"JNR_TRANS___FCST_CLNT1_NBR as FCST_CLNT1_NBR",
	"JNR_TRANS___FCST_ORIG_CLNT2_NBR as FCST_ORIG_CLNT2_NBR",
	"JNR_TRANS___FCST_CLNT2_NBR as FCST_CLNT2_NBR",
	"JNR_TRANS___FCST_ORIG_CLNT3_NBR as FCST_ORIG_CLNT3_NBR",
	"JNR_TRANS___FCST_CLNT3_NBR as FCST_CLNT3_NBR",
	"JNR_TRANS___FCST_ORIG_CLNT4_NBR as FCST_ORIG_CLNT4_NBR",
	"JNR_TRANS___FCST_CLNT4_NBR as FCST_CLNT4_NBR",
	"JNR_TRANS___FCST_ORIG_CLNT5_NBR as FCST_ORIG_CLNT5_NBR",
	"JNR_TRANS___FCST_CLNT5_NBR as FCST_CLNT5_NBR",
	"JNR_TRANS___FCST_ORIG_CLNT6_NBR as FCST_ORIG_CLNT6_NBR",
	"JNR_TRANS___FCST_CLNT6_NBR as FCST_CLNT6_NBR",
	"JNR_TRANS___FCST_ORIG_CLNT7_NBR as FCST_ORIG_CLNT7_NBR",
	"JNR_TRANS___FCST_CLNT7_NBR as FCST_CLNT7_NBR",
	"JNR_TRANS___BUD_AMT as BUD_AMT",
	"JNR_TRANS___BUD_HRS as BUD_HRS",
	"JNR_TRANS___BUD_RATE_AMT as BUD_RATE_AMT",
	"JNR_TRANS___BUD_SLS_AMT as BUD_SLS_AMT",
	"JNR_TRANS___WEEK_DT as WEEK_DT",
	"DATE_TRUNC ('DAY', CURRENT_TIMESTAMP ) as UPDATE_DT",
	"JNR_TRANS___ORG_ID1 as ORG_ID1",
	"IF (JNR_TRANS___ORG_ID1 IS NULL, 'I', 'U') as LOAD_FLAG",
	"IF (JNR_TRANS___LOAD_DT IS NULL, DATE_TRUNC ('DAY', CURRENT_TIMESTAMP ), JNR_TRANS___LOAD_DT) as LOAD_DT"
)

# COMMAND ----------
# Processing node UPD_ins_upd, type UPDATE_STRATEGY . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 36

# for each involved DataFrame, append the dataframe name to each column
EXP_TRANS_temp = EXP_TRANS.toDF(*["EXP_TRANS___" + col for col in EXP_TRANS.columns])

UPD_ins_upd = EXP_TRANS_temp.selectExpr(
	"EXP_TRANS___BUSN_DAT as BUSN_DAT1",
	"EXP_TRANS___ORG_ID as ORG_ID",
	"EXP_TRANS___LOCATION_ID as LOCATION_ID1",
	"EXP_TRANS___WFA_BUSN_AREA_ID as WFA_BUSN_AREA_ID1",
	"EXP_TRANS___WFA_BUSN_AREA_DESC as WFA_BUSN_AREA_DESC1",
	"EXP_TRANS___WFA_DEPT_ID as WFA_DEPT_ID1",
	"EXP_TRANS___WFA_DEPT_DESC as WFA_DEPT_DESC1",
	"EXP_TRANS___ACTL_CLNT1_NBR as ACTL_CLNT1_NBR1",
	"EXP_TRANS___ACTL_CLNT2_NBR as ACTL_CLNT2_NBR1",
	"EXP_TRANS___ACTL_CLNT3_NBR as ACTL_CLNT3_NBR1",
	"EXP_TRANS___ACTL_CLNT4_NBR as ACTL_CLNT4_NBR1",
	"EXP_TRANS___ACTL_CLNT5_NBR as ACTL_CLNT5_NBR1",
	"EXP_TRANS___ACTL_CLNT6_NBR as ACTL_CLNT6_NBR1",
	"EXP_TRANS___ACTL_CLNT7_NBR as ACTL_CLNT7_NBR1",
	"EXP_TRANS___FCST_ORIG_CLNT1_NBR as FCST_ORIG_CLNT1_NBR1",
	"EXP_TRANS___FCST_CLNT1_NBR as FCST_CLNT1_NBR1",
	"EXP_TRANS___FCST_ORIG_CLNT2_NBR as FCST_ORIG_CLNT2_NBR1",
	"EXP_TRANS___FCST_CLNT2_NBR as FCST_CLNT2_NBR1",
	"EXP_TRANS___FCST_ORIG_CLNT3_NBR as FCST_ORIG_CLNT3_NBR1",
	"EXP_TRANS___FCST_CLNT3_NBR as FCST_CLNT3_NBR1",
	"EXP_TRANS___FCST_ORIG_CLNT4_NBR as FCST_ORIG_CLNT4_NBR1",
	"EXP_TRANS___FCST_CLNT4_NBR as FCST_CLNT4_NBR1",
	"EXP_TRANS___FCST_ORIG_CLNT5_NBR as FCST_ORIG_CLNT5_NBR1",
	"EXP_TRANS___FCST_CLNT5_NBR as FCST_CLNT5_NBR1",
	"EXP_TRANS___FCST_ORIG_CLNT6_NBR as FCST_ORIG_CLNT6_NBR1",
	"EXP_TRANS___FCST_CLNT6_NBR as FCST_CLNT6_NBR1",
	"EXP_TRANS___FCST_ORIG_CLNT7_NBR as FCST_ORIG_CLNT7_NBR1",
	"EXP_TRANS___FCST_CLNT7_NBR as FCST_CLNT7_NBR1",
	"EXP_TRANS___BUD_AMT as BUD_AMT1",
	"EXP_TRANS___BUD_HRS as BUD_HRS1",
	"EXP_TRANS___BUD_RATE_AMT as BUD_RATE_AMT1",
	"EXP_TRANS___BUD_SLS_AMT as BUD_SLS_AMT1",
	"EXP_TRANS___WEEK_DT as WEEK_DT",
	"EXP_TRANS___LOAD_FLAG as LOAD_FLAG",
	"EXP_TRANS___UPDATE_DT as UPDATE_DT",
	"EXP_TRANS___LOAD_DT as LOAD_DT1",
	"IF(EXP_TRANS___LOAD_FLAG == 'I', 0, 1) as pyspark_data_action")	
	# .withColumn('pyspark_data_action', when((EXP_TRANS_temp.LOAD_FLAG == lit('I')) ,(lit(0))) .otherwise(lit(1)))

# COMMAND ----------
# Processing node Shortcut_to_WFA_FCST_SLS_DEPT_ins_upd, type TARGET 
# COLUMN COUNT: 35


Shortcut_to_WFA_FCST_SLS_DEPT_ins_upd = UPD_ins_upd.selectExpr(
	"CAST(BUSN_DAT1 AS TIMESTAMP) as DAY_DT",
	"CAST(ORG_ID AS DECIMAL(10,0)) as ORG_ID",
	"CAST(LOCATION_ID1 AS BIGINT) as LOCATION_ID",
	"WFA_BUSN_AREA_ID1 as WFA_BUSN_AREA_ID",
	"WFA_BUSN_AREA_DESC1 as WFA_BUSN_AREA_DESC",
	"WFA_DEPT_ID1 as WFA_DEPT_ID",
	"WFA_DEPT_DESC1 as WFA_DEPT_DESC",
	"CAST(ACTL_CLNT1_NBR1 AS DECIMAL(16,6)) as ACTL_SLS_AMT",
	"CAST(ACTL_CLNT2_NBR1 AS DECIMAL(16,6)) as ACTL_SALON_ITEMS_CNT",
	"CAST(ACTL_CLNT3_NBR1 AS DECIMAL(16,6)) as ACTL_REG_TRANS_CNT",
	"CAST(ACTL_CLNT4_NBR1 AS DECIMAL(16,6)) as ACTL_CUST_INTERACT_CNT",
	"CAST(ACTL_CLNT5_NBR1 AS DECIMAL(16,6)) as ACTL_LIVE_ITEMS_RECVD_CNT",
	"CAST(ACTL_CLNT6_NBR1 AS DECIMAL(16,6)) as ACTL_REG_ITEMS_CNT",
	"CAST(ACTL_CLNT7_NBR1 AS DECIMAL(16,6)) as ACTL_RESTOCK_CNT",
	"CAST(FCST_ORIG_CLNT1_NBR1 AS DECIMAL(16,6)) as FCST_ORIG_SLS_AMT",
	"CAST(FCST_CLNT1_NBR1 AS DECIMAL(16,6)) as FCST_SLS_AMT",
	"CAST(FCST_ORIG_CLNT2_NBR1 AS DECIMAL(16,6)) as FCST_ORIG_SALON_ITEMS_CNT",
	"CAST(FCST_CLNT2_NBR1 AS DECIMAL(16,6)) as FCST_SALON_ITEMS_CNT",
	"CAST(FCST_ORIG_CLNT3_NBR1 AS DECIMAL(16,6)) as FCST_ORIG_REG_TRANS_CNT",
	"CAST(FCST_CLNT3_NBR1 AS DECIMAL(16,6)) as FCST_REG_TRANS_CNT",
	"CAST(FCST_ORIG_CLNT4_NBR1 AS DECIMAL(16,6)) as FCST_ORIG_CUST_INTERACT_CNT",
	"CAST(FCST_CLNT4_NBR1 AS DECIMAL(16,6)) as FCST_CUST_INTERACT_CNT",
	"CAST(FCST_ORIG_CLNT5_NBR1 AS DECIMAL(16,6)) as FCST_ORIG_LIVE_ITEMS_RECVD_CNT",
	"CAST(FCST_CLNT5_NBR1 AS DECIMAL(16,6)) as FCST_LIVE_ITEMS_RECVD_CNT",
	"CAST(FCST_ORIG_CLNT6_NBR1 AS DECIMAL(16,6)) as FCST_ORIG_REG_ITEMS_CNT",
	"CAST(FCST_CLNT6_NBR1 AS DECIMAL(16,6)) as FCST_REG_ITEMS_CNT",
	"CAST(FCST_ORIG_CLNT7_NBR1 AS DECIMAL(16,6)) as FCST_ORIG_RESTOCK_CNT",
	"CAST(FCST_CLNT7_NBR1 AS DECIMAL(16,6)) as FCST_RESTOCK_CNT",
	"CAST(BUD_AMT1 AS DECIMAL(16,6)) as BUD_AMT",
	"CAST(BUD_HRS1 AS DECIMAL(16,6)) as BUD_HRS",
	"CAST(BUD_RATE_AMT1 AS DECIMAL(16,6)) as BUD_RATE_AMT",
	"CAST(BUD_SLS_AMT1 AS DECIMAL(16,6)) as BUD_SLS_AMT",
	"CAST(WEEK_DT AS TIMESTAMP) as WEEK_DT",
	"CAST(UPDATE_DT AS TIMESTAMP) as UPDATE_DT",
	"CAST(LOAD_DT1 AS TIMESTAMP) as LOAD_DT",
	"pyspark_data_action as pyspark_data_action"
)

try:
	primary_key = """source.DAY_DT = target.DAY_DT AND source.ORG_ID = target.ORG_ID"""
	refined_perf_table = f"{legacy}.WFA_FCST_SLS_DEPT"
	executeMerge(Shortcut_to_WFA_FCST_SLS_DEPT_ins_upd, refined_perf_table, primary_key)
	logger.info(f"Merge with {refined_perf_table} completed]")
	logPrevRunDt("WFA_FCST_SLS_DEPT", "WFA_FCST_SLS_DEPT", "Completed", "N/A", f"{raw}.log_run_details")
except Exception as e:
	logPrevRunDt("WFA_FCST_SLS_DEPT", "WFA_FCST_SLS_DEPT","Failed",str(e), f"{raw}.log_run_details")
	raise e
		