#Code converted on 2023-08-08 15:42:02
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from Datalake.utils.genericUtilities import *
from Datalake.utils.configs import *
from Datalake.utils.mergeUtils import *
from Datalake.utils.logger import *
# COMMAND ----------

parser = argparse.ArgumentParser()
spark = SparkSession.getActiveSession()
parser.add_argument('env', type=str, help='Env Variable')

args = parser.parse_args()
env = args.env

if env is None or env == '':
    raise ValueError('env is not set')

refine = getEnvPrefix(env) + 'refine'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'

(username,password,connection_string) = or_kro_read_krap1(env)
# COMMAND ----------
# Processing node SQ_Shortcut_to_DIM_LBRACCT, type SOURCE 
# COLUMN COUNT: 36

SQ_Shortcut_to_DIM_LBRACCT = jdbcOracleConnection(f"""SELECT
DIM_LBRACCT.LBRACCT_SKEY,
DIM_LBRACCT.LBRACCT_ID,
DIM_LBRACCT.LBRACCT_FULL_ID,
DIM_LBRACCT.LBRACCT_FULL_NAM,
DIM_LBRACCT.LBRLVL1_NAM,
DIM_LBRACCT.LBRACCT1_ID,
DIM_LBRACCT.LBRACCT1_NAM,
DIM_LBRACCT.LBRACCT1_DES,
DIM_LBRACCT.LBRLVL2_NAM,
DIM_LBRACCT.LBRACCT2_ID,
DIM_LBRACCT.LBRACCT2_NAM,
DIM_LBRACCT.LBRACCT2_DES,
DIM_LBRACCT.LBRLVL3_NAM,
DIM_LBRACCT.LBRACCT3_ID,
DIM_LBRACCT.LBRACCT3_NAM,
DIM_LBRACCT.LBRACCT3_DES,
DIM_LBRACCT.LBRLVL4_NAM,
DIM_LBRACCT.LBRACCT4_ID,
DIM_LBRACCT.LBRACCT4_NAM,
DIM_LBRACCT.LBRACCT4_DES,
DIM_LBRACCT.LBRLVL5_NAM,
DIM_LBRACCT.LBRACCT5_ID,
DIM_LBRACCT.LBRACCT5_NAM,
DIM_LBRACCT.LBRACCT5_DES,
DIM_LBRACCT.LBRLVL6_NAM,
DIM_LBRACCT.LBRACCT6_ID,
DIM_LBRACCT.LBRACCT6_NAM,
DIM_LBRACCT.LBRACCT6_DES,
DIM_LBRACCT.LBRLVL7_NAM,
DIM_LBRACCT.LBRACCT7_ID,
DIM_LBRACCT.LBRACCT7_NAM,
DIM_LBRACCT.LBRACCT7_DES,
DIM_LBRACCT.UPDT_DTM,
DIM_LBRACCT.SRC_COD,
DIM_LBRACCT.SRC_SKEY,
DIM_LBRACCT.TENANT_SKEY
FROM ia.DIM_LBRACCT""",username,password,connection_string).withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node Shortcut_to_WFA_LBRACCT_PRE, type TARGET 
# COLUMN COUNT: 36


Shortcut_to_WFA_LBRACCT_PRE = SQ_Shortcut_to_DIM_LBRACCT.selectExpr(
	"CAST(LBRACCT_ID AS INT) as LBRACCT_ID",
	"CAST(LBRACCT_SKEY AS INT) as LBRACCT_SKEY",
	"CAST(LBRACCT_FULL_ID AS STRING) as LBRACCT_FULL_ID",
	"CAST(LBRACCT_FULL_NAM AS STRING) as LBRACCT_FULL_NAM",
	"CAST(LBRLVL1_NAM AS STRING) as LBRLVL1_NAM",
	"CAST(LBRACCT1_ID AS INT) as LBRACCT1_ID",
	"CAST(LBRACCT1_NAM AS STRING) as LBRACCT1_NAM",
	"CAST(LBRACCT1_DES AS STRING) as LBRACCT1_DES",
	"CAST(LBRLVL2_NAM AS STRING) as LBRLVL2_NAM",
	"CAST(LBRACCT2_ID AS INT) as LBRACCT2_ID",
	"CAST(LBRACCT2_NAM AS STRING) as LBRACCT2_NAM",
	"CAST(LBRACCT2_DES AS STRING) as LBRACCT2_DES",
	"CAST(LBRLVL3_NAM AS STRING) as LBRLVL3_NAM",
	"CAST(LBRACCT3_ID AS INT) as LBRACCT3_ID",
	"CAST(LBRACCT3_NAM AS STRING) as LBRACCT3_NAM",
	"CAST(LBRACCT3_DES AS STRING) as LBRACCT3_DES",
	"CAST(LBRLVL4_NAM AS STRING) as LBRLVL4_NAM",
	"CAST(LBRACCT4_ID AS INT) as LBRACCT4_ID",
	"CAST(LBRACCT4_NAM AS STRING) as LBRACCT4_NAM",
	"CAST(LBRACCT4_DES AS STRING) as LBRACCT4_DES",
	"CAST(LBRLVL5_NAM AS STRING) as LBRLVL5_NAM",
	"CAST(LBRACCT5_ID AS INT) as LBRACCT5_ID",
	"CAST(LBRACCT5_NAM AS STRING) as LBRACCT5_NAM",
	"CAST(LBRACCT5_DES AS STRING) as LBRACCT5_DES",
	"CAST(LBRLVL6_NAM AS STRING) as LBRLVL6_NAM",
	"CAST(LBRACCT6_ID AS INT) as LBRACCT6_ID",
	"CAST(LBRACCT6_NAM AS STRING) as LBRACCT6_NAM",
	"CAST(LBRACCT6_DES AS STRING) as LBRACCT6_DES",
	"CAST(LBRLVL7_NAM AS STRING) as LBRLVL7_NAM",
	"CAST(LBRACCT7_ID AS INT) as LBRACCT7_ID",
	"CAST(LBRACCT7_NAM AS STRING) as LBRACCT7_NAM",
	"CAST(LBRACCT7_DES AS STRING) as LBRACCT7_DES",
	"CAST(UPDT_DTM AS TIMESTAMP) as UPDT_DTM",
	"CAST(SRC_COD AS STRING) as SRC_COD",
	"CAST(SRC_SKEY AS INT) as SRC_SKEY",
	"CAST(TENANT_SKEY AS INT) as TENANT_SKEY"
)
# overwriteDeltaPartition(Shortcut_to_WFA_LBRACCT_PRE,'DC_NBR',dcnbr,f'{raw}.WFA_LBRACCT_PRE')
Shortcut_to_WFA_LBRACCT_PRE.write.mode("overwrite").saveAsTable(f'{raw}.WFA_LBRACCT_PRE')