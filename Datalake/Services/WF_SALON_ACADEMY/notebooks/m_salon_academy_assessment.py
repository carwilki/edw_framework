#Code converted on 2023-07-26 09:54:15
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from Datalake.utils.genericUtilities import *
from Datalake.utils.configs import *
from Datalake.utils.mergeUtils import *
from Datalake.utils.logger import *
# COMMAND ----------

parser = argparse.ArgumentParser()
spark = SparkSession.getActiveSession()
parser.add_argument('env', type=str, help='Env Variable')

args = parser.parse_args()
env = args.env

if env is None or env == '':
    raise ValueError('env is not set')

refine = getEnvPrefix(env) + 'refine'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'


# COMMAND ----------
# Processing node SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT, type SOURCE 
# COLUMN COUNT: 21

SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT = spark.sql(f"""SELECT
SALON_ACADEMY_ASSESSMENT.SALON_ACADEMY_ASSESSMENT_ID,
SALON_ACADEMY_ASSESSMENT.ASSESSMENT_REQUEST_TSTMP,
SALON_ACADEMY_ASSESSMENT.SCHEDULED_ASSESSMENT_DT,
SALON_ACADEMY_ASSESSMENT.SCHEDULED_ASSESSMENT_TIME,
SALON_ACADEMY_ASSESSMENT.PRE_ASSESSMENT_COMPLETION_TSTMP,
SALON_ACADEMY_ASSESSMENT.ASSESSMENT_PASS_TSTMP,
SALON_ACADEMY_ASSESSMENT.ASSESSMENT_FAIL_TSTMP,
SALON_ACADEMY_ASSESSMENT.ACADEMY_ENROLLMENT_TSTMP,
SALON_ACADEMY_ASSESSMENT.ASSESSMENT_STATUS,
SALON_ACADEMY_ASSESSMENT.ASSESSMENT_COMPLETION_TSTMP,
SALON_ACADEMY_ASSESSMENT.REASON_COMMENT,
SALON_ACADEMY_ASSESSMENT.SALON_ACADEMY_ASSESSMENT_DENY_REASON_ID,
SALON_ACADEMY_ASSESSMENT.SALON_ACADEMY_ASSESSMENT_FAIL_REASON_ID,
SALON_ACADEMY_ASSESSMENT.ACADEMY_ENROLLMENT_CHANGED_TSTMP,
SALON_ACADEMY_ASSESSMENT.ACADEMY_COMPLETED_TSTMP,
SALON_ACADEMY_ASSESSMENT.SCHEDULE_ASSESSMENT_CHANGED_TSTMP,
SALON_ACADEMY_ASSESSMENT.CREATED_TSTMP,
SALON_ACADEMY_ASSESSMENT.CREATED_BY,
SALON_ACADEMY_ASSESSMENT.MODIFIED_TSTMP,
SALON_ACADEMY_ASSESSMENT.MODIFIED_BY,
SALON_ACADEMY_ASSESSMENT.LOAD_TSTMP
FROM {legacy}.SALON_ACADEMY_ASSESSMENT""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_PRE, type SOURCE 
# COLUMN COUNT: 20

SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_PRE = spark.sql(f"""SELECT
SALON_ACADEMY_ASSESSMENT_PRE.SALON_ACADEMY_ASSESSMENT_ID,
SALON_ACADEMY_ASSESSMENT_PRE.ASSESSMENT_REQUEST_TSTMP,
SALON_ACADEMY_ASSESSMENT_PRE.SCHEDULED_ASSESSMENT_DT,
SALON_ACADEMY_ASSESSMENT_PRE.SCHEDULED_ASSESSMENT_TIME,
SALON_ACADEMY_ASSESSMENT_PRE.PRE_ASSESSMENT_COMPLETION_TSTMP,
SALON_ACADEMY_ASSESSMENT_PRE.ASSESSMENT_PASS_TSTMP,
SALON_ACADEMY_ASSESSMENT_PRE.ASSESSMENT_FAIL_TSTMP,
SALON_ACADEMY_ASSESSMENT_PRE.ACADEMY_ENROLLMENT_TSTMP,
SALON_ACADEMY_ASSESSMENT_PRE.ASSESSMENT_STATUS,
SALON_ACADEMY_ASSESSMENT_PRE.ASSESSMENT_COMPLETION_TSTMP,
SALON_ACADEMY_ASSESSMENT_PRE.REASON_COMMENT,
SALON_ACADEMY_ASSESSMENT_PRE.SALON_ACADEMY_ASSESSMENT_DENY_REASON_ID,
SALON_ACADEMY_ASSESSMENT_PRE.SALON_ACADEMY_ASSESSMENT_FAIL_REASON_ID,
SALON_ACADEMY_ASSESSMENT_PRE.ACADEMY_ENROLLMENT_CHANGED_TSTMP,
SALON_ACADEMY_ASSESSMENT_PRE.ACADEMY_COMPLETED_TSTMP,
SALON_ACADEMY_ASSESSMENT_PRE.SCHEDULE_ASSESSMENT_CHANGED_TSTMP,
SALON_ACADEMY_ASSESSMENT_PRE.CREATED_TSTMP,
SALON_ACADEMY_ASSESSMENT_PRE.CREATED_BY,
SALON_ACADEMY_ASSESSMENT_PRE.MODIFIED_TSTMP,
SALON_ACADEMY_ASSESSMENT_PRE.MODIFIED_BY
FROM {raw}.SALON_ACADEMY_ASSESSMENT_PRE""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node JNR_SALON_ACADEMY_ASSESSMENT, type JOINER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 41

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_temp = SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT.toDF(*["SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT___" + col for col in SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT.columns])
SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_PRE_temp = SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_PRE.toDF(*["SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_PRE___" + col for col in SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_PRE.columns])

JNR_SALON_ACADEMY_ASSESSMENT = SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_PRE_temp.join(SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_temp,[SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_PRE_temp.SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_PRE___SALON_ACADEMY_ASSESSMENT_ID == SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_temp.SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT___SALON_ACADEMY_ASSESSMENT_ID],'left_outer').selectExpr(
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_PRE___SALON_ACADEMY_ASSESSMENT_ID as SALON_ACADEMY_ASSESSMENT_ID",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_PRE___ASSESSMENT_REQUEST_TSTMP as ASSESSMENT_REQUEST_TSTMP",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_PRE___SCHEDULED_ASSESSMENT_DT as SCHEDULED_ASSESSMENT_DT",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_PRE___SCHEDULED_ASSESSMENT_TIME as SCHEDULED_ASSESSMENT_TIME",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_PRE___PRE_ASSESSMENT_COMPLETION_TSTMP as PRE_ASSESSMENT_COMPLETION_TSTMP",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_PRE___ASSESSMENT_PASS_TSTMP as ASSESSMENT_PASS_TSTMP",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_PRE___ASSESSMENT_FAIL_TSTMP as ASSESSMENT_FAIL_TSTMP",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_PRE___ACADEMY_ENROLLMENT_TSTMP as ACADEMY_ENROLLMENT_TSTMP",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_PRE___ASSESSMENT_STATUS as ASSESSMENT_STATUS",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_PRE___ASSESSMENT_COMPLETION_TSTMP as ASSESSMENT_COMPLETION_TSTMP",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_PRE___REASON_COMMENT as REASON_COMMENT",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_PRE___SALON_ACADEMY_ASSESSMENT_DENY_REASON_ID as SALON_ACADEMY_ASSESSMENT_DENY_REASON_ID",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_PRE___SALON_ACADEMY_ASSESSMENT_FAIL_REASON_ID as SALON_ACADEMY_ASSESSMENT_FAIL_REASON_ID",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_PRE___ACADEMY_ENROLLMENT_CHANGED_TSTMP as ACADEMY_ENROLLMENT_CHANGED_TSTMP",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_PRE___ACADEMY_COMPLETED_TSTMP as ACADEMY_COMPLETED_TSTMP",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_PRE___SCHEDULE_ASSESSMENT_CHANGED_TSTMP as SCHEDULE_ASSESSMENT_CHANGED_TSTMP",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_PRE___CREATED_TSTMP as CREATED_TSTMP",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_PRE___CREATED_BY as CREATED_BY",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_PRE___MODIFIED_TSTMP as MODIFIED_TSTMP",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_PRE___MODIFIED_BY as MODIFIED_BY",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT___SALON_ACADEMY_ASSESSMENT_ID as i_SALON_ACADEMY_ASSESSMENT_ID",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT___ASSESSMENT_REQUEST_TSTMP as i_ASSESSMENT_REQUEST_TSTMP",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT___SCHEDULED_ASSESSMENT_DT as i_SCHEDULED_ASSESSMENT_DT",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT___SCHEDULED_ASSESSMENT_TIME as i_SCHEDULED_ASSESSMENT_TIME",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT___PRE_ASSESSMENT_COMPLETION_TSTMP as i_PRE_ASSESSMENT_COMPLETION_TSTMP",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT___ASSESSMENT_PASS_TSTMP as i_ASSESSMENT_PASS_TSTMP",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT___ASSESSMENT_FAIL_TSTMP as i_ASSESSMENT_FAIL_TSTMP",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT___ACADEMY_ENROLLMENT_TSTMP as i_ACADEMY_ENROLLMENT_TSTMP",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT___ASSESSMENT_STATUS as i_ASSESSMENT_STATUS",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT___ASSESSMENT_COMPLETION_TSTMP as i_ASSESSMENT_COMPLETION_TSTMP",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT___REASON_COMMENT as i_REASON_COMMENT",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT___SALON_ACADEMY_ASSESSMENT_DENY_REASON_ID as i_SALON_ACADEMY_ASSESSMENT_DENY_REASON_ID",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT___SALON_ACADEMY_ASSESSMENT_FAIL_REASON_ID as i_SALON_ACADEMY_ASSESSMENT_FAIL_REASON_ID",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT___ACADEMY_ENROLLMENT_CHANGED_TSTMP as i_ACADEMY_ENROLLMENT_CHANGED_TSTMP",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT___ACADEMY_COMPLETED_TSTMP as i_ACADEMY_COMPLETED_TSTMP",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT___SCHEDULE_ASSESSMENT_CHANGED_TSTMP as i_SCHEDULE_ASSESSMENT_CHANGED_TSTMP",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT___CREATED_TSTMP as i_CREATED_TSTMP",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT___CREATED_BY as i_CREATED_BY",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT___MODIFIED_TSTMP as i_MODIFIED_TSTMP",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT___MODIFIED_BY as i_MODIFIED_BY",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT___LOAD_TSTMP as i_LOAD_TSTMP")

# COMMAND ----------
# Processing node FIL_SALON_ACADEMY_ASSESSMENT, type FILTER 
# COLUMN COUNT: 41

# for each involved DataFrame, append the dataframe name to each column
JNR_SALON_ACADEMY_ASSESSMENT_temp = JNR_SALON_ACADEMY_ASSESSMENT.toDF(*["JNR_SALON_ACADEMY_ASSESSMENT___" + col for col in JNR_SALON_ACADEMY_ASSESSMENT.columns])

FIL_SALON_ACADEMY_ASSESSMENT = JNR_SALON_ACADEMY_ASSESSMENT_temp.selectExpr(
	"JNR_SALON_ACADEMY_ASSESSMENT___SALON_ACADEMY_ASSESSMENT_ID as SALON_ACADEMY_ASSESSMENT_ID",
	"JNR_SALON_ACADEMY_ASSESSMENT___ASSESSMENT_REQUEST_TSTMP as ASSESSMENT_REQUEST_TSTMP",
	"JNR_SALON_ACADEMY_ASSESSMENT___SCHEDULED_ASSESSMENT_DT as SCHEDULED_ASSESSMENT_DT",
	"JNR_SALON_ACADEMY_ASSESSMENT___SCHEDULED_ASSESSMENT_TIME as SCHEDULED_ASSESSMENT_TIME",
	"JNR_SALON_ACADEMY_ASSESSMENT___PRE_ASSESSMENT_COMPLETION_TSTMP as PRE_ASSESSMENT_COMPLETION_TSTMP",
	"JNR_SALON_ACADEMY_ASSESSMENT___ASSESSMENT_PASS_TSTMP as ASSESSMENT_PASS_TSTMP",
	"JNR_SALON_ACADEMY_ASSESSMENT___ASSESSMENT_FAIL_TSTMP as ASSESSMENT_FAIL_TSTMP",
	"JNR_SALON_ACADEMY_ASSESSMENT___ACADEMY_ENROLLMENT_TSTMP as ACADEMY_ENROLLMENT_TSTMP",
	"JNR_SALON_ACADEMY_ASSESSMENT___ASSESSMENT_STATUS as ASSESSMENT_STATUS",
	"JNR_SALON_ACADEMY_ASSESSMENT___ASSESSMENT_COMPLETION_TSTMP as ASSESSMENT_COMPLETION_TSTMP",
	"JNR_SALON_ACADEMY_ASSESSMENT___REASON_COMMENT as REASON_COMMENT",
	"JNR_SALON_ACADEMY_ASSESSMENT___SALON_ACADEMY_ASSESSMENT_DENY_REASON_ID as SALON_ACADEMY_ASSESSMENT_DENY_REASON_ID",
	"JNR_SALON_ACADEMY_ASSESSMENT___SALON_ACADEMY_ASSESSMENT_FAIL_REASON_ID as SALON_ACADEMY_ASSESSMENT_FAIL_REASON_ID",
	"JNR_SALON_ACADEMY_ASSESSMENT___ACADEMY_ENROLLMENT_CHANGED_TSTMP as ACADEMY_ENROLLMENT_CHANGED_TSTMP",
	"JNR_SALON_ACADEMY_ASSESSMENT___ACADEMY_COMPLETED_TSTMP as ACADEMY_COMPLETED_TSTMP",
	"JNR_SALON_ACADEMY_ASSESSMENT___SCHEDULE_ASSESSMENT_CHANGED_TSTMP as SCHEDULE_ASSESSMENT_CHANGED_TSTMP",
	"JNR_SALON_ACADEMY_ASSESSMENT___CREATED_TSTMP as CREATED_TSTMP",
	"JNR_SALON_ACADEMY_ASSESSMENT___CREATED_BY as CREATED_BY",
	"JNR_SALON_ACADEMY_ASSESSMENT___MODIFIED_TSTMP as MODIFIED_TSTMP",
	"JNR_SALON_ACADEMY_ASSESSMENT___MODIFIED_BY as MODIFIED_BY",
	"JNR_SALON_ACADEMY_ASSESSMENT___i_SALON_ACADEMY_ASSESSMENT_ID as i_SALON_ACADEMY_ASSESSMENT_ID",
	"JNR_SALON_ACADEMY_ASSESSMENT___i_ASSESSMENT_REQUEST_TSTMP as i_ASSESSMENT_REQUEST_TSTMP",
	"JNR_SALON_ACADEMY_ASSESSMENT___i_SCHEDULED_ASSESSMENT_DT as i_SCHEDULED_ASSESSMENT_DT",
	"JNR_SALON_ACADEMY_ASSESSMENT___i_SCHEDULED_ASSESSMENT_TIME as i_SCHEDULED_ASSESSMENT_TIME",
	"JNR_SALON_ACADEMY_ASSESSMENT___i_PRE_ASSESSMENT_COMPLETION_TSTMP as i_PRE_ASSESSMENT_COMPLETION_TSTMP",
	"JNR_SALON_ACADEMY_ASSESSMENT___i_ASSESSMENT_PASS_TSTMP as i_ASSESSMENT_PASS_TSTMP",
	"JNR_SALON_ACADEMY_ASSESSMENT___i_ASSESSMENT_FAIL_TSTMP as i_ASSESSMENT_FAIL_TSTMP",
	"JNR_SALON_ACADEMY_ASSESSMENT___i_ACADEMY_ENROLLMENT_TSTMP as i_ACADEMY_ENROLLMENT_TSTMP",
	"JNR_SALON_ACADEMY_ASSESSMENT___i_ASSESSMENT_STATUS as i_ASSESSMENT_STATUS",
	"JNR_SALON_ACADEMY_ASSESSMENT___i_ASSESSMENT_COMPLETION_TSTMP as i_ASSESSMENT_COMPLETION_TSTMP",
	"JNR_SALON_ACADEMY_ASSESSMENT___i_REASON_COMMENT as i_REASON_COMMENT",
	"JNR_SALON_ACADEMY_ASSESSMENT___i_SALON_ACADEMY_ASSESSMENT_DENY_REASON_ID as i_SALON_ACADEMY_ASSESSMENT_DENY_REASON_ID",
	"JNR_SALON_ACADEMY_ASSESSMENT___i_SALON_ACADEMY_ASSESSMENT_FAIL_REASON_ID as i_SALON_ACADEMY_ASSESSMENT_FAIL_REASON_ID",
	"JNR_SALON_ACADEMY_ASSESSMENT___i_ACADEMY_ENROLLMENT_CHANGED_TSTMP as i_ACADEMY_ENROLLMENT_CHANGED_TSTMP",
	"JNR_SALON_ACADEMY_ASSESSMENT___i_ACADEMY_COMPLETED_TSTMP as i_ACADEMY_COMPLETED_TSTMP",
	"JNR_SALON_ACADEMY_ASSESSMENT___i_SCHEDULE_ASSESSMENT_CHANGED_TSTMP as i_SCHEDULE_ASSESSMENT_CHANGED_TSTMP",
	"JNR_SALON_ACADEMY_ASSESSMENT___i_CREATED_TSTMP as i_CREATED_TSTMP",
	"JNR_SALON_ACADEMY_ASSESSMENT___i_CREATED_BY as i_CREATED_BY",
	"JNR_SALON_ACADEMY_ASSESSMENT___i_MODIFIED_TSTMP as i_MODIFIED_TSTMP",
	"JNR_SALON_ACADEMY_ASSESSMENT___i_MODIFIED_BY as i_MODIFIED_BY",
	"JNR_SALON_ACADEMY_ASSESSMENT___i_LOAD_TSTMP as i_LOAD_TSTMP").filter("i_SALON_ACADEMY_ASSESSMENT_ID IS NULL OR (NOT i_SALON_ACADEMY_ASSESSMENT_ID IS NULL AND (CASE WHEN ASSESSMENT_REQUEST_TSTMP IS NULL THEN date'9999-12-31' ELSE ASSESSMENT_REQUEST_TSTMP END) != (CASE WHEN i_ASSESSMENT_REQUEST_TSTMP IS NULL THEN date'9999-12-31' ELSE i_ASSESSMENT_REQUEST_TSTMP END) OR (CASE WHEN SCHEDULED_ASSESSMENT_DT IS NULL THEN date'9999-12-31' ELSE SCHEDULED_ASSESSMENT_DT END) != (CASE WHEN i_SCHEDULED_ASSESSMENT_DT IS NULL THEN date'9999-12-31' ELSE i_SCHEDULED_ASSESSMENT_DT END) OR (CASE WHEN SCHEDULED_ASSESSMENT_TIME IS NULL THEN date'9999-12-31' ELSE SCHEDULED_ASSESSMENT_TIME END) != (CASE WHEN i_SCHEDULED_ASSESSMENT_TIME IS NULL THEN date'9999-12-31' ELSE i_SCHEDULED_ASSESSMENT_TIME END) OR (CASE WHEN PRE_ASSESSMENT_COMPLETION_TSTMP IS NULL THEN date'9999-12-31' ELSE PRE_ASSESSMENT_COMPLETION_TSTMP END) != (CASE WHEN i_PRE_ASSESSMENT_COMPLETION_TSTMP IS NULL THEN date'9999-12-31' ELSE i_PRE_ASSESSMENT_COMPLETION_TSTMP END) OR (CASE WHEN ASSESSMENT_PASS_TSTMP IS NULL THEN date'9999-12-31' ELSE ASSESSMENT_PASS_TSTMP END) != (CASE WHEN i_ASSESSMENT_PASS_TSTMP IS NULL THEN date'9999-12-31' ELSE i_ASSESSMENT_PASS_TSTMP END) OR (CASE WHEN ASSESSMENT_FAIL_TSTMP IS NULL THEN date'9999-12-31' ELSE ASSESSMENT_FAIL_TSTMP END) != (CASE WHEN i_ASSESSMENT_FAIL_TSTMP IS NULL THEN date'9999-12-31' ELSE i_ASSESSMENT_FAIL_TSTMP END) OR (CASE WHEN ACADEMY_ENROLLMENT_TSTMP IS NULL THEN date'9999-12-31' ELSE ACADEMY_ENROLLMENT_TSTMP END) != (CASE WHEN i_ACADEMY_ENROLLMENT_TSTMP IS NULL THEN date'9999-12-31' ELSE i_ACADEMY_ENROLLMENT_TSTMP END) OR (CASE WHEN ASSESSMENT_STATUS IS NULL THEN '' ELSE ASSESSMENT_STATUS END) != (CASE WHEN i_ASSESSMENT_STATUS IS NULL THEN '' ELSE i_ASSESSMENT_STATUS END) OR (CASE WHEN ASSESSMENT_COMPLETION_TSTMP IS NULL THEN date'9999-12-31' ELSE ASSESSMENT_COMPLETION_TSTMP END) != (CASE WHEN i_ASSESSMENT_COMPLETION_TSTMP IS NULL THEN date'9999-12-31' ELSE i_ASSESSMENT_COMPLETION_TSTMP END) OR (CASE WHEN REASON_COMMENT IS NULL THEN '' ELSE REASON_COMMENT END) != (CASE WHEN i_REASON_COMMENT IS NULL THEN '' ELSE i_REASON_COMMENT END) OR (CASE WHEN SALON_ACADEMY_ASSESSMENT_DENY_REASON_ID IS NULL THEN 0 ELSE SALON_ACADEMY_ASSESSMENT_DENY_REASON_ID END) != (CASE WHEN i_SALON_ACADEMY_ASSESSMENT_DENY_REASON_ID IS NULL THEN 0 ELSE i_SALON_ACADEMY_ASSESSMENT_DENY_REASON_ID END) OR (CASE WHEN SALON_ACADEMY_ASSESSMENT_FAIL_REASON_ID IS NULL THEN 0 ELSE SALON_ACADEMY_ASSESSMENT_FAIL_REASON_ID END) != (CASE WHEN i_SALON_ACADEMY_ASSESSMENT_FAIL_REASON_ID IS NULL THEN 0 ELSE i_SALON_ACADEMY_ASSESSMENT_FAIL_REASON_ID END) OR (CASE WHEN ACADEMY_ENROLLMENT_CHANGED_TSTMP IS NULL THEN date'9999-12-31' ELSE ACADEMY_ENROLLMENT_CHANGED_TSTMP END) != (CASE WHEN i_ACADEMY_ENROLLMENT_CHANGED_TSTMP IS NULL THEN date'9999-12-31' ELSE i_ACADEMY_ENROLLMENT_CHANGED_TSTMP END) OR (CASE WHEN ACADEMY_COMPLETED_TSTMP IS NULL THEN date'9999-12-31' ELSE ACADEMY_COMPLETED_TSTMP END) != (CASE WHEN i_ACADEMY_COMPLETED_TSTMP IS NULL THEN date'9999-12-31' ELSE i_ACADEMY_COMPLETED_TSTMP END) OR (CASE WHEN SCHEDULE_ASSESSMENT_CHANGED_TSTMP IS NULL THEN date'9999-12-31' ELSE SCHEDULE_ASSESSMENT_CHANGED_TSTMP END) != (CASE WHEN i_SCHEDULE_ASSESSMENT_CHANGED_TSTMP IS NULL THEN date'9999-12-31' ELSE i_SCHEDULE_ASSESSMENT_CHANGED_TSTMP END) OR (CASE WHEN CREATED_TSTMP IS NULL THEN date'9999-12-31' ELSE CREATED_TSTMP END) != (CASE WHEN i_CREATED_TSTMP IS NULL THEN date'9999-12-31' ELSE i_CREATED_TSTMP END) OR (CASE WHEN CREATED_BY IS NULL THEN '' ELSE CREATED_BY END) != (CASE WHEN i_CREATED_BY IS NULL THEN '' ELSE i_CREATED_BY END) OR (CASE WHEN MODIFIED_TSTMP IS NULL THEN date'9999-12-31' ELSE MODIFIED_TSTMP END) != (CASE WHEN i_MODIFIED_TSTMP IS NULL THEN date'9999-12-31' ELSE i_MODIFIED_TSTMP END) OR (CASE WHEN MODIFIED_BY IS NULL THEN '' ELSE MODIFIED_BY END) != (CASE WHEN i_MODIFIED_BY IS NULL THEN '' ELSE i_MODIFIED_BY END))").withColumn("sys_row_id", monotonically_increasing_id())


# COMMAND ----------
# Processing node EXP_SALON_ACADEMY_ASSESSMENT, type EXPRESSION 
# COLUMN COUNT: 25

# for each involved DataFrame, append the dataframe name to each column
FIL_SALON_ACADEMY_ASSESSMENT_temp = FIL_SALON_ACADEMY_ASSESSMENT.toDF(*["FIL_SALON_ACADEMY_ASSESSMENT___" + col for col in FIL_SALON_ACADEMY_ASSESSMENT.columns])

EXP_SALON_ACADEMY_ASSESSMENT = FIL_SALON_ACADEMY_ASSESSMENT_temp.selectExpr(
	"FIL_SALON_ACADEMY_ASSESSMENT___sys_row_id as sys_row_id",
	"FIL_SALON_ACADEMY_ASSESSMENT___SALON_ACADEMY_ASSESSMENT_ID as SALON_ACADEMY_ASSESSMENT_ID",
	"FIL_SALON_ACADEMY_ASSESSMENT___ASSESSMENT_REQUEST_TSTMP as ASSESSMENT_REQUEST_TSTMP",
	"FIL_SALON_ACADEMY_ASSESSMENT___SCHEDULED_ASSESSMENT_DT as SCHEDULED_ASSESSMENT_DT",
	"FIL_SALON_ACADEMY_ASSESSMENT___SCHEDULED_ASSESSMENT_TIME as SCHEDULED_ASSESSMENT_TIME",
	"FIL_SALON_ACADEMY_ASSESSMENT___PRE_ASSESSMENT_COMPLETION_TSTMP as PRE_ASSESSMENT_COMPLETION_TSTMP",
	"FIL_SALON_ACADEMY_ASSESSMENT___ASSESSMENT_PASS_TSTMP as ASSESSMENT_PASS_TSTMP",
	"FIL_SALON_ACADEMY_ASSESSMENT___ASSESSMENT_FAIL_TSTMP as ASSESSMENT_FAIL_TSTMP",
	"FIL_SALON_ACADEMY_ASSESSMENT___ACADEMY_ENROLLMENT_TSTMP as ACADEMY_ENROLLMENT_TSTMP",
	"FIL_SALON_ACADEMY_ASSESSMENT___ASSESSMENT_STATUS as ASSESSMENT_STATUS",
	"FIL_SALON_ACADEMY_ASSESSMENT___ASSESSMENT_COMPLETION_TSTMP as ASSESSMENT_COMPLETION_TSTMP",
	"FIL_SALON_ACADEMY_ASSESSMENT___REASON_COMMENT as REASON_COMMENT",
	"FIL_SALON_ACADEMY_ASSESSMENT___SALON_ACADEMY_ASSESSMENT_DENY_REASON_ID as SALON_ACADEMY_ASSESSMENT_DENY_REASON_ID",
	"FIL_SALON_ACADEMY_ASSESSMENT___SALON_ACADEMY_ASSESSMENT_FAIL_REASON_ID as SALON_ACADEMY_ASSESSMENT_FAIL_REASON_ID",
	"FIL_SALON_ACADEMY_ASSESSMENT___ACADEMY_ENROLLMENT_CHANGED_TSTMP as ACADEMY_ENROLLMENT_CHANGED_TSTMP",
	"FIL_SALON_ACADEMY_ASSESSMENT___ACADEMY_COMPLETED_TSTMP as ACADEMY_COMPLETED_TSTMP",
	"FIL_SALON_ACADEMY_ASSESSMENT___SCHEDULE_ASSESSMENT_CHANGED_TSTMP as SCHEDULE_ASSESSMENT_CHANGED_TSTMP",
	"FIL_SALON_ACADEMY_ASSESSMENT___CREATED_TSTMP as CREATED_TSTMP",
	"FIL_SALON_ACADEMY_ASSESSMENT___CREATED_BY as CREATED_BY",
	"FIL_SALON_ACADEMY_ASSESSMENT___MODIFIED_TSTMP as MODIFIED_TSTMP",
	"FIL_SALON_ACADEMY_ASSESSMENT___MODIFIED_BY as MODIFIED_BY",
	"FIL_SALON_ACADEMY_ASSESSMENT___i_SALON_ACADEMY_ASSESSMENT_ID as i_SALON_ACADEMY_ASSESSMENT_ID",
	"FIL_SALON_ACADEMY_ASSESSMENT___i_LOAD_TSTMP as i_LOAD_TSTMP",
	"IF (FIL_SALON_ACADEMY_ASSESSMENT___i_SALON_ACADEMY_ASSESSMENT_ID IS NULL, 1, 2) as o_UPDATE_VALIDATOR",
	"CURRENT_TIMESTAMP as UPDATE_TSTMP",
	"IF (FIL_SALON_ACADEMY_ASSESSMENT___i_LOAD_TSTMP IS NULL, CURRENT_TIMESTAMP, FIL_SALON_ACADEMY_ASSESSMENT___i_LOAD_TSTMP) as LOAD_TSTMP"
)

# COMMAND ----------
# Processing node UPD_SALON_ACADEMY_ASSESSMENT, type UPDATE_STRATEGY 
# COLUMN COUNT: 23

# for each involved DataFrame, append the dataframe name to each column
EXP_SALON_ACADEMY_ASSESSMENT_temp = EXP_SALON_ACADEMY_ASSESSMENT.toDF(*["EXP_SALON_ACADEMY_ASSESSMENT___" + col for col in EXP_SALON_ACADEMY_ASSESSMENT.columns])

UPD_SALON_ACADEMY_ASSESSMENT = EXP_SALON_ACADEMY_ASSESSMENT_temp.selectExpr(
	"EXP_SALON_ACADEMY_ASSESSMENT___SALON_ACADEMY_ASSESSMENT_ID as SALON_ACADEMY_ASSESSMENT_ID",
	"EXP_SALON_ACADEMY_ASSESSMENT___ASSESSMENT_REQUEST_TSTMP as ASSESSMENT_REQUEST_TSTMP",
	"EXP_SALON_ACADEMY_ASSESSMENT___SCHEDULED_ASSESSMENT_DT as SCHEDULED_ASSESSMENT_DT",
	"EXP_SALON_ACADEMY_ASSESSMENT___SCHEDULED_ASSESSMENT_TIME as SCHEDULED_ASSESSMENT_TIME",
	"EXP_SALON_ACADEMY_ASSESSMENT___PRE_ASSESSMENT_COMPLETION_TSTMP as PRE_ASSESSMENT_COMPLETION_TSTMP",
	"EXP_SALON_ACADEMY_ASSESSMENT___ASSESSMENT_PASS_TSTMP as ASSESSMENT_PASS_TSTMP",
	"EXP_SALON_ACADEMY_ASSESSMENT___ASSESSMENT_FAIL_TSTMP as ASSESSMENT_FAIL_TSTMP",
	"EXP_SALON_ACADEMY_ASSESSMENT___ACADEMY_ENROLLMENT_TSTMP as ACADEMY_ENROLLMENT_TSTMP",
	"EXP_SALON_ACADEMY_ASSESSMENT___ASSESSMENT_STATUS as ASSESSMENT_STATUS",
	"EXP_SALON_ACADEMY_ASSESSMENT___ASSESSMENT_COMPLETION_TSTMP as ASSESSMENT_COMPLETION_TSTMP",
	"EXP_SALON_ACADEMY_ASSESSMENT___REASON_COMMENT as REASON_COMMENT",
	"EXP_SALON_ACADEMY_ASSESSMENT___SALON_ACADEMY_ASSESSMENT_DENY_REASON_ID as SALON_ACADEMY_ASSESSMENT_DENY_REASON_ID",
	"EXP_SALON_ACADEMY_ASSESSMENT___SALON_ACADEMY_ASSESSMENT_FAIL_REASON_ID as SALON_ACADEMY_ASSESSMENT_FAIL_REASON_ID",
	"EXP_SALON_ACADEMY_ASSESSMENT___ACADEMY_ENROLLMENT_CHANGED_TSTMP as ACADEMY_ENROLLMENT_CHANGED_TSTMP",
	"EXP_SALON_ACADEMY_ASSESSMENT___ACADEMY_COMPLETED_TSTMP as ACADEMY_COMPLETED_TSTMP",
	"EXP_SALON_ACADEMY_ASSESSMENT___SCHEDULE_ASSESSMENT_CHANGED_TSTMP as SCHEDULE_ASSESSMENT_CHANGED_TSTMP",
	"EXP_SALON_ACADEMY_ASSESSMENT___CREATED_TSTMP as CREATED_TSTMP",
	"EXP_SALON_ACADEMY_ASSESSMENT___CREATED_BY as CREATED_BY",
	"EXP_SALON_ACADEMY_ASSESSMENT___MODIFIED_TSTMP as MODIFIED_TSTMP",
	"EXP_SALON_ACADEMY_ASSESSMENT___MODIFIED_BY as MODIFIED_BY",
	"EXP_SALON_ACADEMY_ASSESSMENT___UPDATE_TSTMP as UPDATE_TSTMP",
	"EXP_SALON_ACADEMY_ASSESSMENT___LOAD_TSTMP as LOAD_TSTMP",
	"EXP_SALON_ACADEMY_ASSESSMENT___o_UPDATE_VALIDATOR as o_UPDATE_VALIDATOR") \
	.withColumn('pyspark_data_action', when(col('o_UPDATE_VALIDATOR') ==(lit(1)) , lit(0)) .when(col('o_UPDATE_VALIDATOR') ==(lit(2)) , lit(1)))

# COMMAND ----------
# Processing node Shortcut_to_SALON_ACADEMY_ASSESSMENT, type TARGET 
# COLUMN COUNT: 22


Shortcut_to_SALON_ACADEMY_ASSESSMENT = UPD_SALON_ACADEMY_ASSESSMENT.selectExpr(
	"SALON_ACADEMY_ASSESSMENT_ID as SALON_ACADEMY_ASSESSMENT_ID",
	"CAST(ASSESSMENT_REQUEST_TSTMP AS TIMESTAMP) as ASSESSMENT_REQUEST_TSTMP",
	"CAST(SCHEDULED_ASSESSMENT_DT AS DATE) as SCHEDULED_ASSESSMENT_DT",
	"CAST(SCHEDULED_ASSESSMENT_TIME AS TIMESTAMP) as SCHEDULED_ASSESSMENT_TIME",
	"CAST(PRE_ASSESSMENT_COMPLETION_TSTMP AS TIMESTAMP) as PRE_ASSESSMENT_COMPLETION_TSTMP",
	"CAST(ASSESSMENT_PASS_TSTMP AS TIMESTAMP) as ASSESSMENT_PASS_TSTMP",
	"CAST(ASSESSMENT_FAIL_TSTMP AS TIMESTAMP) as ASSESSMENT_FAIL_TSTMP",
	"CAST(ACADEMY_ENROLLMENT_TSTMP AS TIMESTAMP) as ACADEMY_ENROLLMENT_TSTMP",
	"CAST(ASSESSMENT_STATUS AS STRING) as ASSESSMENT_STATUS",
	"CAST(ASSESSMENT_COMPLETION_TSTMP AS TIMESTAMP) as ASSESSMENT_COMPLETION_TSTMP",
	"CAST(REASON_COMMENT AS STRING) as REASON_COMMENT",
	"SALON_ACADEMY_ASSESSMENT_DENY_REASON_ID as SALON_ACADEMY_ASSESSMENT_DENY_REASON_ID",
	"SALON_ACADEMY_ASSESSMENT_FAIL_REASON_ID as SALON_ACADEMY_ASSESSMENT_FAIL_REASON_ID",
	"CAST(ACADEMY_ENROLLMENT_CHANGED_TSTMP AS TIMESTAMP) as ACADEMY_ENROLLMENT_CHANGED_TSTMP",
	"CAST(ACADEMY_COMPLETED_TSTMP AS TIMESTAMP) as ACADEMY_COMPLETED_TSTMP",
	"CAST(SCHEDULE_ASSESSMENT_CHANGED_TSTMP AS TIMESTAMP) as SCHEDULE_ASSESSMENT_CHANGED_TSTMP",
	"CAST(CREATED_TSTMP AS TIMESTAMP) as CREATED_TSTMP",
	"CAST(CREATED_BY AS STRING) as CREATED_BY",
	"CAST(MODIFIED_TSTMP AS TIMESTAMP) as MODIFIED_TSTMP",
	"CAST(MODIFIED_BY AS STRING) as MODIFIED_BY",
	"CAST(UPDATE_TSTMP AS TIMESTAMP) as UPDATE_TSTMP",
	"CAST(LOAD_TSTMP AS TIMESTAMP) as LOAD_TSTMP",
	"pyspark_data_action as pyspark_data_action"
)

try:
	primary_key = """source.SALON_ACADEMY_ASSESSMENT_ID = target.SALON_ACADEMY_ASSESSMENT_ID"""
	refined_perf_table = f"{legacy}.SALON_ACADEMY_ASSESSMENT"
	executeMerge(Shortcut_to_SALON_ACADEMY_ASSESSMENT, refined_perf_table, primary_key)
	logger.info(f"Merge with {refined_perf_table} completed]")
	logPrevRunDt("SALON_ACADEMY_ASSESSMENT", "SALON_ACADEMY_ASSESSMENT", "Completed", "N/A", f"{raw}.log_run_details")
except Exception as e:
	logPrevRunDt("SALON_ACADEMY_ASSESSMENT", "SALON_ACADEMY_ASSESSMENT","Failed",str(e), f"{raw}.log_run_details")
	raise e
		