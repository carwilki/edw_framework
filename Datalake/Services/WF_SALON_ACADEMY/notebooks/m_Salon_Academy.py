#Code converted on 2023-07-26 09:54:22
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from Datalake.utils.genericUtilities import *
from Datalake.utils.configs import *
from Datalake.utils.mergeUtils import *
from Datalake.utils.logger import *
# COMMAND ----------

parser = argparse.ArgumentParser()
spark = SparkSession.getActiveSession()
parser.add_argument('env', type=str, help='Env Variable')

args = parser.parse_args()
env = args.env

if env is None or env == '':
    raise ValueError('env is not set')

refine = getEnvPrefix(env) + 'refine'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'


# COMMAND ----------
# Processing node SQ_Shortcut_to_SALON_ACADEMY_PRE, type SOURCE 
# COLUMN COUNT: 12

SQ_Shortcut_to_SALON_ACADEMY_PRE = spark.sql(f"""SELECT
SALON_ACADEMY_PRE.SALON_ACADEMY_ID,
SALON_ACADEMY_PRE.LOCATION_ID,
SALON_ACADEMY_PRE.START_DT,
SALON_ACADEMY_PRE.END_DT,
SALON_ACADEMY_PRE.ACTIVE_FLAG,
SALON_ACADEMY_PRE.SEAT_LIMIT,
SALON_ACADEMY_PRE.CANCELLED_FLAG,
SALON_ACADEMY_PRE.TRAINER_EMPLOYEE_ID,
SALON_ACADEMY_PRE.TRAINER_NAME,
SALON_ACADEMY_PRE.SALON_ACADEMY_TYPE_ID,
SALON_ACADEMY_PRE.SALON_ACADEMY_TYPE_DESC,
SALON_ACADEMY_PRE.APPROVED_BY_DISTRICT_LEADER_FLAG
FROM {raw}.SALON_ACADEMY_PRE""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node SQ_Shortcut_to_SALON_ACADEMY, type SOURCE 
# COLUMN COUNT: 13

SQ_Shortcut_to_SALON_ACADEMY = spark.sql(f"""SELECT
SALON_ACADEMY.SALON_ACADEMY_ID,
SALON_ACADEMY.LOCATION_ID,
SALON_ACADEMY.START_DT,
SALON_ACADEMY.END_DT,
SALON_ACADEMY.ACTIVE_FLAG,
SALON_ACADEMY.SEAT_LIMIT,
SALON_ACADEMY.CANCELLED_FLAG,
SALON_ACADEMY.TRAINER_EMPLOYEE_ID,
SALON_ACADEMY.TRAINER_NAME,
SALON_ACADEMY.SALON_ACADEMY_TYPE_ID,
SALON_ACADEMY.SALON_ACADEMY_TYPE_DESC,
SALON_ACADEMY.APPROVED_BY_DISTRICT_LEADER_FLAG,
SALON_ACADEMY.LOAD_TSTMP
FROM {legacy}.SALON_ACADEMY""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node JNR_COMPARE_DATA, type JOINER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 25

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_SALON_ACADEMY_temp = SQ_Shortcut_to_SALON_ACADEMY.toDF(*["SQ_Shortcut_to_SALON_ACADEMY___" + col for col in SQ_Shortcut_to_SALON_ACADEMY.columns])
SQ_Shortcut_to_SALON_ACADEMY_PRE_temp = SQ_Shortcut_to_SALON_ACADEMY_PRE.toDF(*["SQ_Shortcut_to_SALON_ACADEMY_PRE___" + col for col in SQ_Shortcut_to_SALON_ACADEMY_PRE.columns])

JNR_COMPARE_DATA = SQ_Shortcut_to_SALON_ACADEMY_temp.join(SQ_Shortcut_to_SALON_ACADEMY_PRE_temp,[SQ_Shortcut_to_SALON_ACADEMY_temp.SQ_Shortcut_to_SALON_ACADEMY___SALON_ACADEMY_ID == SQ_Shortcut_to_SALON_ACADEMY_PRE_temp.SQ_Shortcut_to_SALON_ACADEMY_PRE___SALON_ACADEMY_ID],'right_outer').selectExpr(
	"SQ_Shortcut_to_SALON_ACADEMY_PRE___SALON_ACADEMY_ID as SALON_ACADEMY_ID",
	"SQ_Shortcut_to_SALON_ACADEMY_PRE___LOCATION_ID as LOCATION_ID",
	"SQ_Shortcut_to_SALON_ACADEMY_PRE___START_DT as START_DT",
	"SQ_Shortcut_to_SALON_ACADEMY_PRE___END_DT as END_DT",
	"SQ_Shortcut_to_SALON_ACADEMY_PRE___ACTIVE_FLAG as ACTIVE_FLAG",
	"SQ_Shortcut_to_SALON_ACADEMY_PRE___SEAT_LIMIT as SEAT_LIMIT",
	"SQ_Shortcut_to_SALON_ACADEMY_PRE___CANCELLED_FLAG as CANCELLED_FLAG",
	"SQ_Shortcut_to_SALON_ACADEMY_PRE___TRAINER_EMPLOYEE_ID as TRAINER_EMPLOYEE_ID",
	"SQ_Shortcut_to_SALON_ACADEMY_PRE___TRAINER_NAME as TRAINER_NAME",
	"SQ_Shortcut_to_SALON_ACADEMY_PRE___SALON_ACADEMY_TYPE_ID as SALON_ACADEMY_TYPE_ID",
	"SQ_Shortcut_to_SALON_ACADEMY_PRE___SALON_ACADEMY_TYPE_DESC as SALON_ACADEMY_TYPE_DESC",
	"SQ_Shortcut_to_SALON_ACADEMY_PRE___APPROVED_BY_DISTRICT_LEADER_FLAG as APPROVED_BY_DISTRICT_LEADER_FLAG",
	"SQ_Shortcut_to_SALON_ACADEMY___SALON_ACADEMY_ID as SALON_ACADEMY_ID1",
	"SQ_Shortcut_to_SALON_ACADEMY___LOCATION_ID as LOCATION_ID1",
	"SQ_Shortcut_to_SALON_ACADEMY___START_DT as START_DT1",
	"SQ_Shortcut_to_SALON_ACADEMY___END_DT as END_DT1",
	"SQ_Shortcut_to_SALON_ACADEMY___ACTIVE_FLAG as ACTIVE_FLAG1",
	"SQ_Shortcut_to_SALON_ACADEMY___SEAT_LIMIT as SEAT_LIMIT1",
	"SQ_Shortcut_to_SALON_ACADEMY___CANCELLED_FLAG as CANCELLED_FLAG1",
	"SQ_Shortcut_to_SALON_ACADEMY___TRAINER_EMPLOYEE_ID as TRAINER_EMPLOYEE_ID1",
	"SQ_Shortcut_to_SALON_ACADEMY___TRAINER_NAME as TRAINER_NAME1",
	"SQ_Shortcut_to_SALON_ACADEMY___SALON_ACADEMY_TYPE_ID as SALON_ACADEMY_TYPE_ID1",
	"SQ_Shortcut_to_SALON_ACADEMY___SALON_ACADEMY_TYPE_DESC as SALON_ACADEMY_TYPE_DESC1",
	"SQ_Shortcut_to_SALON_ACADEMY___APPROVED_BY_DISTRICT_LEADER_FLAG as APPROVED_BY_DISTRICT_LEADER_FLAG1",
	"SQ_Shortcut_to_SALON_ACADEMY___LOAD_TSTMP as LOAD_TSTMP") 

# COMMAND ----------
# Processing node EXP_MD5_UPD_FLAG, type EXPRESSION . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 28

# for each involved DataFrame, append the dataframe name to each column
JNR_COMPARE_DATA_temp = JNR_COMPARE_DATA.toDF(*["JNR_COMPARE_DATA___" + col for col in JNR_COMPARE_DATA.columns])

JNR_COMPARE_DATA_temp = JNR_COMPARE_DATA_temp.selectExpr('*', '''md5(concat ( ifnull(JNR_COMPARE_DATA___SALON_ACADEMY_ID  , "") 
, ifnull(JNR_COMPARE_DATA___LOCATION_ID , "") 
, ifnull(JNR_COMPARE_DATA___START_DT , "") 
, ifnull(JNR_COMPARE_DATA___END_DT , "") 
, ifnull(JNR_COMPARE_DATA___ACTIVE_FLAG , "") 
, ifnull(JNR_COMPARE_DATA___SEAT_LIMIT , "") 
, ifnull(JNR_COMPARE_DATA___CANCELLED_FLAG , "") 
, ifnull(JNR_COMPARE_DATA___TRAINER_EMPLOYEE_ID , "") 
, ifnull(JNR_COMPARE_DATA___TRAINER_NAME , "") 
, ifnull(JNR_COMPARE_DATA___SALON_ACADEMY_TYPE_ID , "") 
, ifnull(JNR_COMPARE_DATA___SALON_ACADEMY_TYPE_DESC , "") 
, ifnull(JNR_COMPARE_DATA___APPROVED_BY_DISTRICT_LEADER_FLAG, "") 
)) as md5pre''',
'''md5(concat( ifnull(JNR_COMPARE_DATA___SALON_ACADEMY_ID1 , "") 
, ifnull(JNR_COMPARE_DATA___LOCATION_ID1 , "") 
, ifnull(JNR_COMPARE_DATA___START_DT1 , "") 
, ifnull(JNR_COMPARE_DATA___END_DT1 , "") 
, ifnull(JNR_COMPARE_DATA___ACTIVE_FLAG1 , "") 
, ifnull(JNR_COMPARE_DATA___SEAT_LIMIT1 , "") 
, ifnull(JNR_COMPARE_DATA___CANCELLED_FLAG1 , "") 
, ifnull(JNR_COMPARE_DATA___TRAINER_EMPLOYEE_ID1 , "") 
, ifnull(JNR_COMPARE_DATA___TRAINER_NAME1 , "") 
, ifnull(JNR_COMPARE_DATA___SALON_ACADEMY_TYPE_ID1 , "") 
, ifnull(JNR_COMPARE_DATA___SALON_ACADEMY_TYPE_DESC1 , "") 
, ifnull(JNR_COMPARE_DATA___APPROVED_BY_DISTRICT_LEADER_FLAG1 , ""))) as md5base''')


EXP_MD5_UPD_FLAG = JNR_COMPARE_DATA_temp \
  .withColumn("MD5_RESULTS", expr("""IF (md5pre != md5base, 1, 0)""")).withColumn("v_UPD_FLAG", expr("""IF (JNR_COMPARE_DATA___SALON_ACADEMY_ID1 IS NULL, 0, IF (MD5_RESULTS = 1, 1, 3))""")).selectExpr(
	"JNR_COMPARE_DATA___SALON_ACADEMY_ID as SALON_ACADEMY_ID",
	"JNR_COMPARE_DATA___LOCATION_ID as LOCATION_ID",
	"JNR_COMPARE_DATA___START_DT as START_DT",
	"JNR_COMPARE_DATA___END_DT as END_DT",
	"JNR_COMPARE_DATA___ACTIVE_FLAG as ACTIVE_FLAG",
	"JNR_COMPARE_DATA___SEAT_LIMIT as SEAT_LIMIT",
	"JNR_COMPARE_DATA___CANCELLED_FLAG as CANCELLED_FLAG",
	"JNR_COMPARE_DATA___TRAINER_EMPLOYEE_ID as TRAINER_EMPLOYEE_ID",
	"JNR_COMPARE_DATA___TRAINER_NAME as TRAINER_NAME",
	"JNR_COMPARE_DATA___SALON_ACADEMY_TYPE_ID as SALON_ACADEMY_TYPE_ID",
	"JNR_COMPARE_DATA___SALON_ACADEMY_TYPE_DESC as SALON_ACADEMY_TYPE_DESC",
	"JNR_COMPARE_DATA___APPROVED_BY_DISTRICT_LEADER_FLAG as APPROVED_BY_DISTRICT_LEADER_FLAG",
	"JNR_COMPARE_DATA___SALON_ACADEMY_ID1 as SALON_ACADEMY_ID1",
	"JNR_COMPARE_DATA___LOCATION_ID1 as LOCATION_ID1",
	"JNR_COMPARE_DATA___START_DT1 as START_DT1",
	"JNR_COMPARE_DATA___END_DT1 as END_DT1",
	"JNR_COMPARE_DATA___ACTIVE_FLAG1 as ACTIVE_FLAG1",
	"JNR_COMPARE_DATA___SEAT_LIMIT1 as SEAT_LIMIT1",
	"JNR_COMPARE_DATA___CANCELLED_FLAG1 as CANCELLED_FLAG1",
	"JNR_COMPARE_DATA___TRAINER_EMPLOYEE_ID1 as TRAINER_EMPLOYEE_ID1",
	"JNR_COMPARE_DATA___TRAINER_NAME1 as TRAINER_NAME1",
	"JNR_COMPARE_DATA___SALON_ACADEMY_TYPE_ID1 as SALON_ACADEMY_TYPE_ID1",
	"JNR_COMPARE_DATA___SALON_ACADEMY_TYPE_DESC1 as SALON_ACADEMY_TYPE_DESC1",
	"JNR_COMPARE_DATA___APPROVED_BY_DISTRICT_LEADER_FLAG1 as APPROVED_BY_DISTRICT_LEADER_FLAG1",
	"JNR_COMPARE_DATA___LOAD_TSTMP as i_LOAD_TSTMP",
	"v_UPD_FLAG as o_UPD_FLAG",
	"CURRENT_TIMESTAMP as UPDATE_TSTMP",
	"IF (v_UPD_FLAG = 1, JNR_COMPARE_DATA___LOAD_TSTMP, CURRENT_TIMESTAMP) as o_LOAD_TSTMP"
)
# COMMAND ----------
# Processing node FIL_UPD_FLAG, type FILTER 
# COLUMN COUNT: 15

# for each involved DataFrame, append the dataframe name to each column
EXP_MD5_UPD_FLAG_temp = EXP_MD5_UPD_FLAG.toDF(*["EXP_MD5_UPD_FLAG___" + col for col in EXP_MD5_UPD_FLAG.columns])

FIL_UPD_FLAG = EXP_MD5_UPD_FLAG_temp.selectExpr(
	"EXP_MD5_UPD_FLAG___SALON_ACADEMY_ID as SALON_ACADEMY_ID",
	"EXP_MD5_UPD_FLAG___LOCATION_ID as LOCATION_ID",
	"EXP_MD5_UPD_FLAG___START_DT as START_DT",
	"EXP_MD5_UPD_FLAG___END_DT as END_DT",
	"EXP_MD5_UPD_FLAG___ACTIVE_FLAG as ACTIVE_FLAG",
	"EXP_MD5_UPD_FLAG___SEAT_LIMIT as SEAT_LIMIT",
	"EXP_MD5_UPD_FLAG___CANCELLED_FLAG as CANCELLED_FLAG",
	"EXP_MD5_UPD_FLAG___TRAINER_EMPLOYEE_ID as TRAINER_EMPLOYEE_ID",
	"EXP_MD5_UPD_FLAG___TRAINER_NAME as TRAINER_NAME",
	"EXP_MD5_UPD_FLAG___SALON_ACADEMY_TYPE_ID as SALON_ACADEMY_TYPE_ID",
	"EXP_MD5_UPD_FLAG___SALON_ACADEMY_TYPE_DESC as SALON_ACADEMY_TYPE_DESC",
	"EXP_MD5_UPD_FLAG___APPROVED_BY_DISTRICT_LEADER_FLAG as APPROVED_BY_DISTRICT_LEADER_FLAG",
	"EXP_MD5_UPD_FLAG___UPDATE_TSTMP as UPDATE_TSTMP",
	"EXP_MD5_UPD_FLAG___o_LOAD_TSTMP as o_LOAD_TSTMP",
	"EXP_MD5_UPD_FLAG___o_UPD_FLAG as o_UPD_FLAG").filter("o_UPD_FLAG != 3").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node UPD_UPD_FLAG, type UPDATE_STRATEGY 
# COLUMN COUNT: 15

# for each involved DataFrame, append the dataframe name to each column
FIL_UPD_FLAG_temp = FIL_UPD_FLAG.toDF(*["FIL_UPD_FLAG___" + col for col in FIL_UPD_FLAG.columns])

UPD_UPD_FLAG = FIL_UPD_FLAG_temp.selectExpr(
	"FIL_UPD_FLAG___SALON_ACADEMY_ID as SALON_ACADEMY_ID",
	"FIL_UPD_FLAG___LOCATION_ID as LOCATION_ID",
	"FIL_UPD_FLAG___START_DT as START_DT",
	"FIL_UPD_FLAG___END_DT as END_DT",
	"FIL_UPD_FLAG___ACTIVE_FLAG as ACTIVE_FLAG",
	"FIL_UPD_FLAG___SEAT_LIMIT as SEAT_LIMIT",
	"FIL_UPD_FLAG___CANCELLED_FLAG as CANCELLED_FLAG",
	"FIL_UPD_FLAG___TRAINER_EMPLOYEE_ID as TRAINER_EMPLOYEE_ID",
	"FIL_UPD_FLAG___TRAINER_NAME as TRAINER_NAME",
	"FIL_UPD_FLAG___SALON_ACADEMY_TYPE_ID as SALON_ACADEMY_TYPE_ID",
	"FIL_UPD_FLAG___SALON_ACADEMY_TYPE_DESC as SALON_ACADEMY_TYPE_DESC",
	"FIL_UPD_FLAG___APPROVED_BY_DISTRICT_LEADER_FLAG as APPROVED_BY_DISTRICT_LEADER_FLAG",
	"FIL_UPD_FLAG___UPDATE_TSTMP as UPDATE_TSTMP",
	"FIL_UPD_FLAG___o_LOAD_TSTMP as o_LOAD_TSTMP",
	"FIL_UPD_FLAG___o_UPD_FLAG as o_UPD_FLAG") \
	.withColumn('pyspark_data_action', col('o_UPD_FLAG'))

# COMMAND ----------
# Processing node Shortcut_to_SALON_ACADEMY1, type TARGET 
# COLUMN COUNT: 14


Shortcut_to_SALON_ACADEMY1 = UPD_UPD_FLAG.selectExpr(
	"SALON_ACADEMY_ID as SALON_ACADEMY_ID",
	"CAST(LOCATION_ID AS BIGINT) as LOCATION_ID",
	"CAST(START_DT AS DATE) as START_DT",
	"CAST(END_DT AS DATE) as END_DT",
	"CAST(ACTIVE_FLAG AS TINYINT) as ACTIVE_FLAG",
	"CAST(SEAT_LIMIT AS BIGINT) as SEAT_LIMIT",
	"CAST(CANCELLED_FLAG AS TINYINT) as CANCELLED_FLAG",
	"CAST(TRAINER_EMPLOYEE_ID AS BIGINT) as TRAINER_EMPLOYEE_ID",
	"CAST(TRAINER_NAME AS STRING) as TRAINER_NAME",
	"CAST(SALON_ACADEMY_TYPE_ID AS BIGINT) as SALON_ACADEMY_TYPE_ID",
	"CAST(SALON_ACADEMY_TYPE_DESC AS STRING) as SALON_ACADEMY_TYPE_DESC",
	"APPROVED_BY_DISTRICT_LEADER_FLAG as APPROVED_BY_DISTRICT_LEADER_FLAG",
	"CAST(UPDATE_TSTMP AS TIMESTAMP) as UPDATE_TSTMP",
	"CAST(o_LOAD_TSTMP AS TIMESTAMP) as LOAD_TSTMP",
	"pyspark_data_action as pyspark_data_action"
)

try:
	primary_key = """source.SALON_ACADEMY_ID = target.SALON_ACADEMY_ID"""
	refined_perf_table = f"{legacy}.SALON_ACADEMY"
	executeMerge(Shortcut_to_SALON_ACADEMY1, refined_perf_table, primary_key)
	logger.info(f"Merge with {refined_perf_table} completed]")
	logPrevRunDt("SALON_ACADEMY", "SALON_ACADEMY", "Completed", "N/A", f"{raw}.log_run_details")
except Exception as e:
	logPrevRunDt("SALON_ACADEMY", "SALON_ACADEMY","Failed",str(e), f"{raw}.log_run_details")
	raise e
		
