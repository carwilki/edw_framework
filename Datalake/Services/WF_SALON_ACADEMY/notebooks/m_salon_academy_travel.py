#Code converted on 2023-07-26 09:54:25
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from Datalake.utils.genericUtilities import *
from Datalake.utils.configs import *
from Datalake.utils.mergeUtils import *
from Datalake.utils.logger import *
# COMMAND ----------

parser = argparse.ArgumentParser()
spark = SparkSession.getActiveSession()
parser.add_argument('env', type=str, help='Env Variable')

args = parser.parse_args()
env = args.env

if env is None or env == '':
    raise ValueError('env is not set')

refine = getEnvPrefix(env) + 'refine'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'


# COMMAND ----------
# Processing node SQ_Shortcut_to_SALON_ACADEMY_TRAVEL, type SOURCE 
# COLUMN COUNT: 19

SQ_Shortcut_to_SALON_ACADEMY_TRAVEL = spark.sql(f"""SELECT
SALON_ACADEMY_TRAVEL.SALON_ACADEMY_TRAVEL_ID,
SALON_ACADEMY_TRAVEL.AIRLINE_DEPART_DT,
SALON_ACADEMY_TRAVEL.AIRLINE_DEPART_TIME_TX,
SALON_ACADEMY_TRAVEL.AIRLINE_RETURN_DT,
SALON_ACADEMY_TRAVEL.AIRLINE_RETURN_TIME_TX,
SALON_ACADEMY_TRAVEL.AIRLINE_SEAT_PREFERENCE,
SALON_ACADEMY_TRAVEL.HOTEL_CHECK_IN_DT,
SALON_ACADEMY_TRAVEL.HOTEL_CHECK_OUT_DT,
SALON_ACADEMY_TRAVEL.LEGAL_NAME,
SALON_ACADEMY_TRAVEL.PREFERRED_HOTEL,
SALON_ACADEMY_TRAVEL.PREFERRED_HOTEL_ADDR,
SALON_ACADEMY_TRAVEL.PREFERRED_HOTEL_PHONE_NBR,
SALON_ACADEMY_TRAVEL.PREFERRED_HOTEL_CONTACT,
SALON_ACADEMY_TRAVEL.PREFERRED_HOTEL_RATE,
SALON_ACADEMY_TRAVEL.MODIFIED_BY,
SALON_ACADEMY_TRAVEL.LOAD_TSTMP,
SALON_ACADEMY_TRAVEL.CREATED_TSTMP,
SALON_ACADEMY_TRAVEL.CREATED_BY,
SALON_ACADEMY_TRAVEL.MODIFIED_TSTMP
FROM {legacy}.SALON_ACADEMY_TRAVEL""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node SQ_Shortcut_to_SALON_ACADEMY_TRAVEL_PRE, type SOURCE 
# COLUMN COUNT: 18

SQ_Shortcut_to_SALON_ACADEMY_TRAVEL_PRE = spark.sql(f"""SELECT
SALON_ACADEMY_TRAVEL_PRE.SALON_ACADEMY_TRAVEL_ID,
SALON_ACADEMY_TRAVEL_PRE.AIRLINE_DEPART_DT,
SALON_ACADEMY_TRAVEL_PRE.AIRLINE_DEPART_TIME_TX,
SALON_ACADEMY_TRAVEL_PRE.AIRLINE_RETURN_DT,
SALON_ACADEMY_TRAVEL_PRE.AIRLINE_RETURN_TIME_TX,
SALON_ACADEMY_TRAVEL_PRE.AIRLINE_SEAT_PREFERENCE,
SALON_ACADEMY_TRAVEL_PRE.HOTEL_CHECK_IN_DT,
SALON_ACADEMY_TRAVEL_PRE.HOTEL_CHECK_OUT_DT,
SALON_ACADEMY_TRAVEL_PRE.LEGAL_NAME,
SALON_ACADEMY_TRAVEL_PRE.PREFERRED_HOTEL,
SALON_ACADEMY_TRAVEL_PRE.PREFERRED_HOTEL_ADDR,
SALON_ACADEMY_TRAVEL_PRE.PREFERRED_HOTEL_PHONE_NBR,
SALON_ACADEMY_TRAVEL_PRE.PREFERRED_HOTEL_CONTACT,
SALON_ACADEMY_TRAVEL_PRE.PREFERRED_HOTEL_RATE,
SALON_ACADEMY_TRAVEL_PRE.MODIFIED_BY,
SALON_ACADEMY_TRAVEL_PRE.CREATED_TSTMP,
SALON_ACADEMY_TRAVEL_PRE.CREATED_BY,
SALON_ACADEMY_TRAVEL_PRE.MODIFIED_TSTMP
FROM {raw}.SALON_ACADEMY_TRAVEL_PRE""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node JNR_SALON_ACADEMY_TRAVEL, type JOINER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 37

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_SALON_ACADEMY_TRAVEL_temp = SQ_Shortcut_to_SALON_ACADEMY_TRAVEL.toDF(*["SQ_Shortcut_to_SALON_ACADEMY_TRAVEL___" + col for col in SQ_Shortcut_to_SALON_ACADEMY_TRAVEL.columns])
SQ_Shortcut_to_SALON_ACADEMY_TRAVEL_PRE_temp = SQ_Shortcut_to_SALON_ACADEMY_TRAVEL_PRE.toDF(*["SQ_Shortcut_to_SALON_ACADEMY_TRAVEL_PRE___" + col for col in SQ_Shortcut_to_SALON_ACADEMY_TRAVEL_PRE.columns])

JNR_SALON_ACADEMY_TRAVEL = SQ_Shortcut_to_SALON_ACADEMY_TRAVEL_PRE_temp.join(SQ_Shortcut_to_SALON_ACADEMY_TRAVEL_temp,[SQ_Shortcut_to_SALON_ACADEMY_TRAVEL_PRE_temp.SQ_Shortcut_to_SALON_ACADEMY_TRAVEL_PRE___SALON_ACADEMY_TRAVEL_ID == SQ_Shortcut_to_SALON_ACADEMY_TRAVEL_temp.SQ_Shortcut_to_SALON_ACADEMY_TRAVEL___SALON_ACADEMY_TRAVEL_ID],'left_outer').selectExpr(
	"SQ_Shortcut_to_SALON_ACADEMY_TRAVEL_PRE___SALON_ACADEMY_TRAVEL_ID as SALON_ACADEMY_TRAVEL_ID",
	"SQ_Shortcut_to_SALON_ACADEMY_TRAVEL_PRE___AIRLINE_DEPART_DT as AIRLINE_DEPART_DT",
	"SQ_Shortcut_to_SALON_ACADEMY_TRAVEL_PRE___AIRLINE_DEPART_TIME_TX as AIRLINE_DEPART_TIME_TX",
	"SQ_Shortcut_to_SALON_ACADEMY_TRAVEL_PRE___AIRLINE_RETURN_DT as AIRLINE_RETURN_DT",
	"SQ_Shortcut_to_SALON_ACADEMY_TRAVEL_PRE___AIRLINE_RETURN_TIME_TX as AIRLINE_RETURN_TIME_TX",
	"SQ_Shortcut_to_SALON_ACADEMY_TRAVEL_PRE___AIRLINE_SEAT_PREFERENCE as AIRLINE_SEAT_PREFERENCE",
	"SQ_Shortcut_to_SALON_ACADEMY_TRAVEL_PRE___HOTEL_CHECK_IN_DT as HOTEL_CHECK_IN_DT",
	"SQ_Shortcut_to_SALON_ACADEMY_TRAVEL_PRE___HOTEL_CHECK_OUT_DT as HOTEL_CHECK_OUT_DT",
	"SQ_Shortcut_to_SALON_ACADEMY_TRAVEL_PRE___LEGAL_NAME as LEGAL_NAME",
	"SQ_Shortcut_to_SALON_ACADEMY_TRAVEL_PRE___PREFERRED_HOTEL as PREFERRED_HOTEL",
	"SQ_Shortcut_to_SALON_ACADEMY_TRAVEL_PRE___PREFERRED_HOTEL_ADDR as PREFERRED_HOTEL_ADDR",
	"SQ_Shortcut_to_SALON_ACADEMY_TRAVEL_PRE___PREFERRED_HOTEL_PHONE_NBR as PREFERRED_HOTEL_PHONE_NBR",
	"SQ_Shortcut_to_SALON_ACADEMY_TRAVEL_PRE___PREFERRED_HOTEL_CONTACT as PREFERRED_HOTEL_CONTACT",
	"SQ_Shortcut_to_SALON_ACADEMY_TRAVEL_PRE___PREFERRED_HOTEL_RATE as PREFERRED_HOTEL_RATE",
	"SQ_Shortcut_to_SALON_ACADEMY_TRAVEL_PRE___MODIFIED_BY as MODIFIED_BY",
	"SQ_Shortcut_to_SALON_ACADEMY_TRAVEL_PRE___CREATED_TSTMP as CREATED_TSTMP",
	"SQ_Shortcut_to_SALON_ACADEMY_TRAVEL_PRE___CREATED_BY as CREATED_BY",
	"SQ_Shortcut_to_SALON_ACADEMY_TRAVEL_PRE___MODIFIED_TSTMP as MODIFIED_TSTMP",
	"SQ_Shortcut_to_SALON_ACADEMY_TRAVEL___SALON_ACADEMY_TRAVEL_ID as i_SALON_ACADEMY_TRAVEL_ID",
	"SQ_Shortcut_to_SALON_ACADEMY_TRAVEL___AIRLINE_DEPART_DT as i_AIRLINE_DEPART_DT",
	"SQ_Shortcut_to_SALON_ACADEMY_TRAVEL___AIRLINE_DEPART_TIME_TX as i_AIRLINE_DEPART_TIME_TX",
	"SQ_Shortcut_to_SALON_ACADEMY_TRAVEL___AIRLINE_RETURN_DT as i_AIRLINE_RETURN_DT",
	"SQ_Shortcut_to_SALON_ACADEMY_TRAVEL___AIRLINE_RETURN_TIME_TX as i_AIRLINE_RETURN_TIME_TX",
	"SQ_Shortcut_to_SALON_ACADEMY_TRAVEL___AIRLINE_SEAT_PREFERENCE as i_AIRLINE_SEAT_PREFERENCE",
	"SQ_Shortcut_to_SALON_ACADEMY_TRAVEL___HOTEL_CHECK_IN_DT as i_HOTEL_CHECK_IN_DT",
	"SQ_Shortcut_to_SALON_ACADEMY_TRAVEL___HOTEL_CHECK_OUT_DT as i_HOTEL_CHECK_OUT_DT",
	"SQ_Shortcut_to_SALON_ACADEMY_TRAVEL___LEGAL_NAME as i_LEGAL_NAME",
	"SQ_Shortcut_to_SALON_ACADEMY_TRAVEL___PREFERRED_HOTEL as i_PREFERRED_HOTEL",
	"SQ_Shortcut_to_SALON_ACADEMY_TRAVEL___PREFERRED_HOTEL_ADDR as i_PREFERRED_HOTEL_ADDR",
	"SQ_Shortcut_to_SALON_ACADEMY_TRAVEL___PREFERRED_HOTEL_PHONE_NBR as i_PREFERRED_HOTEL_PHONE_NBR",
	"SQ_Shortcut_to_SALON_ACADEMY_TRAVEL___PREFERRED_HOTEL_CONTACT as i_PREFERRED_HOTEL_CONTACT",
	"SQ_Shortcut_to_SALON_ACADEMY_TRAVEL___PREFERRED_HOTEL_RATE as i_PREFERRED_HOTEL_RATE",
	"SQ_Shortcut_to_SALON_ACADEMY_TRAVEL___MODIFIED_BY as i_MODIFIED_BY",
	"SQ_Shortcut_to_SALON_ACADEMY_TRAVEL___LOAD_TSTMP as i_LOAD_TSTMP",
	"SQ_Shortcut_to_SALON_ACADEMY_TRAVEL___CREATED_TSTMP as i_CREATED_TSTMP",
	"SQ_Shortcut_to_SALON_ACADEMY_TRAVEL___CREATED_BY as i_CREATED_BY",
	"SQ_Shortcut_to_SALON_ACADEMY_TRAVEL___MODIFIED_TSTMP as i_MODIFIED_TSTMP")

# COMMAND ----------
# Processing node FIL_SALON_ACADEMY_TRAVEL, type FILTER 
# COLUMN COUNT: 37

# for each involved DataFrame, append the dataframe name to each column
JNR_SALON_ACADEMY_TRAVEL_temp = JNR_SALON_ACADEMY_TRAVEL.toDF(*["JNR_SALON_ACADEMY_TRAVEL___" + col for col in JNR_SALON_ACADEMY_TRAVEL.columns])

FIL_SALON_ACADEMY_TRAVEL = JNR_SALON_ACADEMY_TRAVEL_temp.selectExpr(
	"JNR_SALON_ACADEMY_TRAVEL___SALON_ACADEMY_TRAVEL_ID as SALON_ACADEMY_TRAVEL_ID",
	"JNR_SALON_ACADEMY_TRAVEL___AIRLINE_DEPART_DT as AIRLINE_DEPART_DT",
	"JNR_SALON_ACADEMY_TRAVEL___AIRLINE_DEPART_TIME_TX as AIRLINE_DEPART_TIME_TX",
	"JNR_SALON_ACADEMY_TRAVEL___AIRLINE_RETURN_DT as AIRLINE_RETURN_DT",
	"JNR_SALON_ACADEMY_TRAVEL___AIRLINE_RETURN_TIME_TX as AIRLINE_RETURN_TIME_TX",
	"JNR_SALON_ACADEMY_TRAVEL___AIRLINE_SEAT_PREFERENCE as AIRLINE_SEAT_PREFERENCE",
	"JNR_SALON_ACADEMY_TRAVEL___HOTEL_CHECK_IN_DT as HOTEL_CHECK_IN_DT",
	"JNR_SALON_ACADEMY_TRAVEL___HOTEL_CHECK_OUT_DT as HOTEL_CHECK_OUT_DT",
	"JNR_SALON_ACADEMY_TRAVEL___LEGAL_NAME as LEGAL_NAME",
	"JNR_SALON_ACADEMY_TRAVEL___PREFERRED_HOTEL as PREFERRED_HOTEL",
	"JNR_SALON_ACADEMY_TRAVEL___PREFERRED_HOTEL_ADDR as PREFERRED_HOTEL_ADDR",
	"JNR_SALON_ACADEMY_TRAVEL___PREFERRED_HOTEL_PHONE_NBR as PREFERRED_HOTEL_PHONE_NBR",
	"JNR_SALON_ACADEMY_TRAVEL___PREFERRED_HOTEL_CONTACT as PREFERRED_HOTEL_CONTACT",
	"JNR_SALON_ACADEMY_TRAVEL___PREFERRED_HOTEL_RATE as PREFERRED_HOTEL_RATE",
	"JNR_SALON_ACADEMY_TRAVEL___MODIFIED_TSTMP as MODIFIED_TSTMP",
	"JNR_SALON_ACADEMY_TRAVEL___MODIFIED_BY as MODIFIED_BY",
	"JNR_SALON_ACADEMY_TRAVEL___CREATED_BY as CREATED_BY",
	"JNR_SALON_ACADEMY_TRAVEL___CREATED_TSTMP as CREATED_TSTMP",
	"JNR_SALON_ACADEMY_TRAVEL___i_SALON_ACADEMY_TRAVEL_ID as i_SALON_ACADEMY_TRAVEL_ID",
	"JNR_SALON_ACADEMY_TRAVEL___i_AIRLINE_DEPART_DT as i_AIRLINE_DEPART_DT",
	"JNR_SALON_ACADEMY_TRAVEL___i_AIRLINE_DEPART_TIME_TX as i_AIRLINE_DEPART_TIME_TX",
	"JNR_SALON_ACADEMY_TRAVEL___i_AIRLINE_RETURN_DT as i_AIRLINE_RETURN_DT",
	"JNR_SALON_ACADEMY_TRAVEL___i_AIRLINE_RETURN_TIME_TX as i_AIRLINE_RETURN_TIME_TX",
	"JNR_SALON_ACADEMY_TRAVEL___i_AIRLINE_SEAT_PREFERENCE as i_AIRLINE_SEAT_PREFERENCE",
	"JNR_SALON_ACADEMY_TRAVEL___i_HOTEL_CHECK_IN_DT as i_HOTEL_CHECK_IN_DT",
	"JNR_SALON_ACADEMY_TRAVEL___i_HOTEL_CHECK_OUT_DT as i_HOTEL_CHECK_OUT_DT",
	"JNR_SALON_ACADEMY_TRAVEL___i_LEGAL_NAME as i_LEGAL_NAME",
	"JNR_SALON_ACADEMY_TRAVEL___i_PREFERRED_HOTEL as i_PREFERRED_HOTEL",
	"JNR_SALON_ACADEMY_TRAVEL___i_PREFERRED_HOTEL_ADDR as i_PREFERRED_HOTEL_ADDR",
	"JNR_SALON_ACADEMY_TRAVEL___i_PREFERRED_HOTEL_PHONE_NBR as i_PREFERRED_HOTEL_PHONE_NBR",
	"JNR_SALON_ACADEMY_TRAVEL___i_PREFERRED_HOTEL_CONTACT as i_PREFERRED_HOTEL_CONTACT",
	"JNR_SALON_ACADEMY_TRAVEL___i_PREFERRED_HOTEL_RATE as i_PREFERRED_HOTEL_RATE",
	"JNR_SALON_ACADEMY_TRAVEL___i_MODIFIED_BY as i_MODIFIED_BY",
	"JNR_SALON_ACADEMY_TRAVEL___i_LOAD_TSTMP as i_LOAD_TSTMP",
	"JNR_SALON_ACADEMY_TRAVEL___i_CREATED_TSTMP as i_CREATED_TSTMP",
	"JNR_SALON_ACADEMY_TRAVEL___i_CREATED_BY as i_CREATED_BY",
	"JNR_SALON_ACADEMY_TRAVEL___i_MODIFIED_TSTMP as i_MODIFIED_TSTMP").filter("i_SALON_ACADEMY_TRAVEL_ID IS NULL OR (NOT i_SALON_ACADEMY_TRAVEL_ID IS NULL AND (CASE WHEN AIRLINE_DEPART_DT IS NULL THEN date'9999-12-31' ELSE AIRLINE_DEPART_DT END) != (CASE WHEN i_AIRLINE_DEPART_DT IS NULL THEN date'9999-12-31' ELSE i_AIRLINE_DEPART_DT END) OR (CASE WHEN AIRLINE_DEPART_TIME_TX IS NULL THEN '' ELSE AIRLINE_DEPART_TIME_TX END) != (CASE WHEN i_AIRLINE_DEPART_TIME_TX IS NULL THEN '' ELSE i_AIRLINE_DEPART_TIME_TX END) OR (CASE WHEN AIRLINE_RETURN_DT IS NULL THEN date'9999-12-31' ELSE AIRLINE_RETURN_DT END) != (CASE WHEN i_AIRLINE_RETURN_DT IS NULL THEN date'9999-12-31' ELSE i_AIRLINE_RETURN_DT END) OR (CASE WHEN AIRLINE_RETURN_TIME_TX IS NULL THEN '' ELSE AIRLINE_RETURN_TIME_TX END) != (CASE WHEN i_AIRLINE_RETURN_TIME_TX IS NULL THEN '' ELSE i_AIRLINE_RETURN_TIME_TX END) OR (CASE WHEN AIRLINE_SEAT_PREFERENCE IS NULL THEN '' ELSE AIRLINE_SEAT_PREFERENCE END) != (CASE WHEN i_AIRLINE_SEAT_PREFERENCE IS NULL THEN '' ELSE i_AIRLINE_SEAT_PREFERENCE END) OR (CASE WHEN HOTEL_CHECK_IN_DT IS NULL THEN date'9999-12-31' ELSE HOTEL_CHECK_IN_DT END) != (CASE WHEN i_HOTEL_CHECK_IN_DT IS NULL THEN date'9999-12-31' ELSE i_HOTEL_CHECK_IN_DT END) OR (CASE WHEN HOTEL_CHECK_OUT_DT IS NULL THEN date'9999-12-31' ELSE HOTEL_CHECK_OUT_DT END) != (CASE WHEN i_HOTEL_CHECK_OUT_DT IS NULL THEN date'9999-12-31' ELSE i_HOTEL_CHECK_OUT_DT END) OR (CASE WHEN LEGAL_NAME IS NULL THEN '' ELSE LEGAL_NAME END) != (CASE WHEN i_LEGAL_NAME IS NULL THEN '' ELSE i_LEGAL_NAME END) OR (CASE WHEN PREFERRED_HOTEL IS NULL THEN '' ELSE PREFERRED_HOTEL END) != (CASE WHEN i_PREFERRED_HOTEL IS NULL THEN '' ELSE i_PREFERRED_HOTEL END) OR (CASE WHEN PREFERRED_HOTEL_ADDR IS NULL THEN '' ELSE PREFERRED_HOTEL_ADDR END) != (CASE WHEN i_PREFERRED_HOTEL_ADDR IS NULL THEN '' ELSE i_PREFERRED_HOTEL_ADDR END) OR (CASE WHEN PREFERRED_HOTEL_PHONE_NBR IS NULL THEN '' ELSE PREFERRED_HOTEL_PHONE_NBR END) != (CASE WHEN i_PREFERRED_HOTEL_PHONE_NBR IS NULL THEN '' ELSE i_PREFERRED_HOTEL_PHONE_NBR END) OR (CASE WHEN PREFERRED_HOTEL_CONTACT IS NULL THEN '' ELSE PREFERRED_HOTEL_CONTACT END) != (CASE WHEN i_PREFERRED_HOTEL_CONTACT IS NULL THEN '' ELSE i_PREFERRED_HOTEL_CONTACT END) OR (CASE WHEN PREFERRED_HOTEL_RATE IS NULL THEN '' ELSE PREFERRED_HOTEL_RATE END) != (CASE WHEN i_PREFERRED_HOTEL_RATE IS NULL THEN '' ELSE i_PREFERRED_HOTEL_RATE END) OR (CASE WHEN MODIFIED_BY IS NULL THEN '' ELSE MODIFIED_BY END) != (CASE WHEN i_MODIFIED_BY IS NULL THEN '' ELSE i_MODIFIED_BY END) OR (CASE WHEN CREATED_BY IS NULL THEN '' ELSE CREATED_BY END) != (CASE WHEN i_CREATED_BY IS NULL THEN '' ELSE i_CREATED_BY END) OR (CASE WHEN CREATED_TSTMP IS NULL THEN date'9999-12-31' ELSE CREATED_TSTMP END) != (CASE WHEN i_CREATED_TSTMP IS NULL THEN date'9999-12-31' ELSE i_CREATED_TSTMP END) OR (CASE WHEN MODIFIED_TSTMP IS NULL THEN date'9999-12-31' ELSE MODIFIED_TSTMP END) != (CASE WHEN i_MODIFIED_TSTMP IS NULL THEN date'9999-12-31' ELSE i_MODIFIED_TSTMP END))").withColumn("sys_row_id", monotonically_increasing_id())


# COMMAND ----------
# Processing node EXP_SALON_ACADEMY_TRAVEL, type EXPRESSION 
# COLUMN COUNT: 21

# for each involved DataFrame, append the dataframe name to each column
FIL_SALON_ACADEMY_TRAVEL_temp = FIL_SALON_ACADEMY_TRAVEL.toDF(*["FIL_SALON_ACADEMY_TRAVEL___" + col for col in FIL_SALON_ACADEMY_TRAVEL.columns])

EXP_SALON_ACADEMY_TRAVEL = FIL_SALON_ACADEMY_TRAVEL_temp.selectExpr(
	"FIL_SALON_ACADEMY_TRAVEL___sys_row_id as sys_row_id",
	"FIL_SALON_ACADEMY_TRAVEL___SALON_ACADEMY_TRAVEL_ID as SALON_ACADEMY_TRAVEL_ID",
	"FIL_SALON_ACADEMY_TRAVEL___AIRLINE_DEPART_DT as AIRLINE_DEPART_DT",
	"FIL_SALON_ACADEMY_TRAVEL___AIRLINE_DEPART_TIME_TX as AIRLINE_DEPART_TIME_TX",
	"FIL_SALON_ACADEMY_TRAVEL___AIRLINE_RETURN_DT as AIRLINE_RETURN_DT",
	"FIL_SALON_ACADEMY_TRAVEL___AIRLINE_RETURN_TIME_TX as AIRLINE_RETURN_TIME_TX",
	"FIL_SALON_ACADEMY_TRAVEL___AIRLINE_SEAT_PREFERENCE as AIRLINE_SEAT_PREFERENCE",
	"FIL_SALON_ACADEMY_TRAVEL___HOTEL_CHECK_IN_DT as HOTEL_CHECK_IN_DT",
	"FIL_SALON_ACADEMY_TRAVEL___HOTEL_CHECK_OUT_DT as HOTEL_CHECK_OUT_DT",
	"FIL_SALON_ACADEMY_TRAVEL___LEGAL_NAME as LEGAL_NAME",
	"FIL_SALON_ACADEMY_TRAVEL___PREFERRED_HOTEL as PREFERRED_HOTEL",
	"FIL_SALON_ACADEMY_TRAVEL___PREFERRED_HOTEL_ADDR as PREFERRED_HOTEL_ADDR",
	"FIL_SALON_ACADEMY_TRAVEL___PREFERRED_HOTEL_PHONE_NBR as PREFERRED_HOTEL_PHONE_NBR",
	"FIL_SALON_ACADEMY_TRAVEL___PREFERRED_HOTEL_CONTACT as PREFERRED_HOTEL_CONTACT",
	"FIL_SALON_ACADEMY_TRAVEL___PREFERRED_HOTEL_RATE as PREFERRED_HOTEL_RATE",
	"FIL_SALON_ACADEMY_TRAVEL___CREATED_TSTMP as CREATED_TSTMP",
	"FIL_SALON_ACADEMY_TRAVEL___CREATED_BY as CREATED_BY",
	"FIL_SALON_ACADEMY_TRAVEL___MODIFIED_TSTMP as MODIFIED_TSTMP",
	"FIL_SALON_ACADEMY_TRAVEL___MODIFIED_BY as MODIFIED_BY",
	"CURRENT_TIMESTAMP as UPDATE_TSTMP",
	"IF (FIL_SALON_ACADEMY_TRAVEL___i_LOAD_TSTMP IS NULL, CURRENT_TIMESTAMP, FIL_SALON_ACADEMY_TRAVEL___i_LOAD_TSTMP) as LOAD_TSTMP",
	"IF (FIL_SALON_ACADEMY_TRAVEL___i_SALON_ACADEMY_TRAVEL_ID IS NULL, 1, 2) as o_UPDATE_VALIDATOR"
)

# COMMAND ----------
# Processing node UPD_SALON_ACADEMY_TRAVEL, type UPDATE_STRATEGY 
# COLUMN COUNT: 21

# for each involved DataFrame, append the dataframe name to each column
EXP_SALON_ACADEMY_TRAVEL_temp = EXP_SALON_ACADEMY_TRAVEL.toDF(*["EXP_SALON_ACADEMY_TRAVEL___" + col for col in EXP_SALON_ACADEMY_TRAVEL.columns])

UPD_SALON_ACADEMY_TRAVEL = EXP_SALON_ACADEMY_TRAVEL_temp.selectExpr(
	"EXP_SALON_ACADEMY_TRAVEL___SALON_ACADEMY_TRAVEL_ID as SALON_ACADEMY_TRAVEL_ID",
	"EXP_SALON_ACADEMY_TRAVEL___AIRLINE_DEPART_DT as AIRLINE_DEPART_DT",
	"EXP_SALON_ACADEMY_TRAVEL___AIRLINE_DEPART_TIME_TX as AIRLINE_DEPART_TIME_TX",
	"EXP_SALON_ACADEMY_TRAVEL___AIRLINE_RETURN_DT as AIRLINE_RETURN_DT",
	"EXP_SALON_ACADEMY_TRAVEL___AIRLINE_RETURN_TIME_TX as AIRLINE_RETURN_TIME_TX",
	"EXP_SALON_ACADEMY_TRAVEL___AIRLINE_SEAT_PREFERENCE as AIRLINE_SEAT_PREFERENCE",
	"EXP_SALON_ACADEMY_TRAVEL___HOTEL_CHECK_IN_DT as HOTEL_CHECK_IN_DT",
	"EXP_SALON_ACADEMY_TRAVEL___HOTEL_CHECK_OUT_DT as HOTEL_CHECK_OUT_DT",
	"EXP_SALON_ACADEMY_TRAVEL___LEGAL_NAME as LEGAL_NAME",
	"EXP_SALON_ACADEMY_TRAVEL___PREFERRED_HOTEL as PREFERRED_HOTEL",
	"EXP_SALON_ACADEMY_TRAVEL___PREFERRED_HOTEL_ADDR as PREFERRED_HOTEL_ADDR",
	"EXP_SALON_ACADEMY_TRAVEL___PREFERRED_HOTEL_PHONE_NBR as PREFERRED_HOTEL_PHONE_NBR",
	"EXP_SALON_ACADEMY_TRAVEL___PREFERRED_HOTEL_CONTACT as PREFERRED_HOTEL_CONTACT",
	"EXP_SALON_ACADEMY_TRAVEL___PREFERRED_HOTEL_RATE as PREFERRED_HOTEL_RATE",
	"EXP_SALON_ACADEMY_TRAVEL___CREATED_TSTMP as CREATED_TSTMP",
	"EXP_SALON_ACADEMY_TRAVEL___CREATED_BY as CREATED_BY",
	"EXP_SALON_ACADEMY_TRAVEL___MODIFIED_TSTMP as MODIFIED_TSTMP",
	"EXP_SALON_ACADEMY_TRAVEL___MODIFIED_BY as MODIFIED_BY",
	"EXP_SALON_ACADEMY_TRAVEL___UPDATE_TSTMP as UPDATE_TSTMP",
	"EXP_SALON_ACADEMY_TRAVEL___LOAD_TSTMP as LOAD_TSTMP",
	"EXP_SALON_ACADEMY_TRAVEL___o_UPDATE_VALIDATOR as o_UPDATE_VALIDATOR") \
	.withColumn('pyspark_data_action', when(col('o_UPDATE_VALIDATOR') ==(lit(1)) , lit(0)) .when(col('o_UPDATE_VALIDATOR') ==(lit(2)) , lit(1)))

# COMMAND ----------
# Processing node Shortcut_to_SALON_ACADEMY_TRAVEL, type TARGET 
# COLUMN COUNT: 20


Shortcut_to_SALON_ACADEMY_TRAVEL = UPD_SALON_ACADEMY_TRAVEL.selectExpr(
	"SALON_ACADEMY_TRAVEL_ID as SALON_ACADEMY_TRAVEL_ID",
	"CAST(AIRLINE_DEPART_DT AS DATE) as AIRLINE_DEPART_DT",
	"CAST(AIRLINE_DEPART_TIME_TX AS STRING) as AIRLINE_DEPART_TIME_TX",
	"CAST(AIRLINE_RETURN_DT AS DATE) as AIRLINE_RETURN_DT",
	"CAST(AIRLINE_RETURN_TIME_TX AS STRING) as AIRLINE_RETURN_TIME_TX",
	"CAST(AIRLINE_SEAT_PREFERENCE AS STRING) as AIRLINE_SEAT_PREFERENCE",
	"CAST(HOTEL_CHECK_IN_DT AS DATE) as HOTEL_CHECK_IN_DT",
	"CAST(HOTEL_CHECK_OUT_DT AS DATE) as HOTEL_CHECK_OUT_DT",
	"CAST(LEGAL_NAME AS STRING) as LEGAL_NAME",
	"CAST(PREFERRED_HOTEL AS STRING) as PREFERRED_HOTEL",
	"CAST(PREFERRED_HOTEL_ADDR AS STRING) as PREFERRED_HOTEL_ADDR",
	"CAST(PREFERRED_HOTEL_PHONE_NBR AS STRING) as PREFERRED_HOTEL_PHONE_NBR",
	"CAST(PREFERRED_HOTEL_CONTACT AS STRING) as PREFERRED_HOTEL_CONTACT",
	"CAST(PREFERRED_HOTEL_RATE AS STRING) as PREFERRED_HOTEL_RATE",
	"CAST(CREATED_TSTMP AS TIMESTAMP) as CREATED_TSTMP",
	"CAST(CREATED_BY AS STRING) as CREATED_BY",
	"CAST(MODIFIED_TSTMP AS TIMESTAMP) as MODIFIED_TSTMP",
	"CAST(MODIFIED_BY AS STRING) as MODIFIED_BY",
	"CAST(UPDATE_TSTMP AS TIMESTAMP) as UPDATE_TSTMP",
	"CAST(LOAD_TSTMP AS TIMESTAMP) as LOAD_TSTMP",
	"pyspark_data_action as pyspark_data_action"
)

try:
	primary_key = """source.SALON_ACADEMY_TRAVEL_ID = target.SALON_ACADEMY_TRAVEL_ID"""
	refined_perf_table = f"{legacy}.SALON_ACADEMY_TRAVEL"
	executeMerge(Shortcut_to_SALON_ACADEMY_TRAVEL, refined_perf_table, primary_key)
	logger.info(f"Merge with {refined_perf_table} completed]")
	logPrevRunDt("SALON_ACADEMY_TRAVEL", "SALON_ACADEMY_TRAVEL", "Completed", "N/A", f"{raw}.log_run_details")
except Exception as e:
	logPrevRunDt("SALON_ACADEMY_TRAVEL", "SALON_ACADEMY_TRAVEL","Failed",str(e), f"{raw}.log_run_details")
	raise e
		