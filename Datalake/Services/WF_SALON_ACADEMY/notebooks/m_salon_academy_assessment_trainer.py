#Code converted on 2023-07-26 09:54:12
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from Datalake.utils.genericUtilities import *
from Datalake.utils.configs import *
from Datalake.utils.mergeUtils import *
from Datalake.utils.logger import *
# COMMAND ----------

parser = argparse.ArgumentParser()
spark = SparkSession.getActiveSession()
parser.add_argument('env', type=str, help='Env Variable')

args = parser.parse_args()
env = args.env

if env is None or env == '':
    raise ValueError('env is not set')

refine = getEnvPrefix(env) + 'refine'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'


# COMMAND ----------
# Processing node SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER, type SOURCE 
# COLUMN COUNT: 14

SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER = spark.sql(f"""SELECT
SALON_ACADEMY_ASSESSMENT_TRAINER.SALON_ACADEMY_ASSESSMENT_TRAINER_ID,
SALON_ACADEMY_ASSESSMENT_TRAINER.SALON_ACADEMY_ASSESSMENT_ID,
SALON_ACADEMY_ASSESSMENT_TRAINER.SALON_ACADEMY_INSTRUCTOR_ID,
SALON_ACADEMY_ASSESSMENT_TRAINER.SALON_ACADEMY_INSTRUCTOR_NAME,
SALON_ACADEMY_ASSESSMENT_TRAINER.ASSESSMENT_TRAINER_TEXT,
SALON_ACADEMY_ASSESSMENT_TRAINER.REGION_ID,
SALON_ACADEMY_ASSESSMENT_TRAINER.REGION_NAME,
SALON_ACADEMY_ASSESSMENT_TRAINER.DISTRICT_ID,
SALON_ACADEMY_ASSESSMENT_TRAINER.DISTRICT_NAME,
SALON_ACADEMY_ASSESSMENT_TRAINER.CREATED_TSTMP,
SALON_ACADEMY_ASSESSMENT_TRAINER.CREATED_BY,
SALON_ACADEMY_ASSESSMENT_TRAINER.MODIFIED_TSTMP,
SALON_ACADEMY_ASSESSMENT_TRAINER.MODIFIED_BY,
SALON_ACADEMY_ASSESSMENT_TRAINER.LOAD_TSTMP
FROM {legacy}.SALON_ACADEMY_ASSESSMENT_TRAINER""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER_PRE, type SOURCE 
# COLUMN COUNT: 13

SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER_PRE = spark.sql(f"""SELECT
SALON_ACADEMY_ASSESSMENT_TRAINER_PRE.SALON_ACADEMY_ASSESSMENT_TRAINER_ID,
SALON_ACADEMY_ASSESSMENT_TRAINER_PRE.SALON_ACADEMY_ASSESSMENT_ID,
SALON_ACADEMY_ASSESSMENT_TRAINER_PRE.SALON_ACADEMY_INSTRUCTOR_ID,
SALON_ACADEMY_ASSESSMENT_TRAINER_PRE.SALON_ACADEMY_INSTRUCTOR_NAME,
SALON_ACADEMY_ASSESSMENT_TRAINER_PRE.ASSESSMENT_TRAINER_TEXT,
SALON_ACADEMY_ASSESSMENT_TRAINER_PRE.REGION_ID,
SALON_ACADEMY_ASSESSMENT_TRAINER_PRE.REGION_NAME,
SALON_ACADEMY_ASSESSMENT_TRAINER_PRE.DISTRICT_ID,
SALON_ACADEMY_ASSESSMENT_TRAINER_PRE.DISTRICT_NAME,
SALON_ACADEMY_ASSESSMENT_TRAINER_PRE.CREATED_TSTMP,
SALON_ACADEMY_ASSESSMENT_TRAINER_PRE.CREATED_BY,
SALON_ACADEMY_ASSESSMENT_TRAINER_PRE.MODIFIED_TSTMP,
SALON_ACADEMY_ASSESSMENT_TRAINER_PRE.MODIFIED_BY
FROM {raw}.SALON_ACADEMY_ASSESSMENT_TRAINER_PRE""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node JNR_SALON_ACADEMY_ASSESSMENT_TRAINER, type JOINER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 27

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER_temp = SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER.toDF(*["SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER___" + col for col in SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER.columns])
SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER_PRE_temp = SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER_PRE.toDF(*["SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER_PRE___" + col for col in SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER_PRE.columns])

JNR_SALON_ACADEMY_ASSESSMENT_TRAINER = SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER_PRE_temp.join(SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER_temp,[SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER_PRE_temp.SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER_PRE___SALON_ACADEMY_ASSESSMENT_TRAINER_ID == SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER_temp.SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER___SALON_ACADEMY_ASSESSMENT_TRAINER_ID],'left_outer').selectExpr(
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER_PRE___SALON_ACADEMY_ASSESSMENT_TRAINER_ID as SALON_ACADEMY_ASSESSMENT_TRAINER_ID",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER_PRE___SALON_ACADEMY_ASSESSMENT_ID as SALON_ACADEMY_ASSESSMENT_ID",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER_PRE___SALON_ACADEMY_INSTRUCTOR_ID as SALON_ACADEMY_INSTRUCTOR_ID",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER_PRE___SALON_ACADEMY_INSTRUCTOR_NAME as SALON_ACADEMY_INSTRUCTOR_NAME",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER_PRE___ASSESSMENT_TRAINER_TEXT as ASSESSMENT_TRAINER_TEXT",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER_PRE___REGION_ID as REGION_ID",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER_PRE___REGION_NAME as REGION_NAME",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER_PRE___DISTRICT_ID as DISTRICT_ID",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER_PRE___DISTRICT_NAME as DISTRICT_NAME",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER_PRE___CREATED_TSTMP as CREATED_TSTMP",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER_PRE___CREATED_BY as CREATED_BY",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER_PRE___MODIFIED_TSTMP as MODIFIED_TSTMP",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER_PRE___MODIFIED_BY as MODIFIED_BY",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER___SALON_ACADEMY_ASSESSMENT_TRAINER_ID as i_SALON_ACADEMY_ASSESSMENT_TRAINER_ID",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER___SALON_ACADEMY_ASSESSMENT_ID as i_SALON_ACADEMY_ASSESSMENT_ID",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER___SALON_ACADEMY_INSTRUCTOR_ID as i_SALON_ACADEMY_INSTRUCTOR_ID",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER___SALON_ACADEMY_INSTRUCTOR_NAME as i_SALON_ACADEMY_INSTRUCTOR_NAME",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER___ASSESSMENT_TRAINER_TEXT as i_ASSESSMENT_TRAINER_TEXT",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER___REGION_ID as i_REGION_ID",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER___REGION_NAME as i_REGION_NAME",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER___DISTRICT_ID as i_DISTRICT_ID",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER___DISTRICT_NAME as i_DISTRICT_NAME",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER___CREATED_TSTMP as i_CREATED_TSTMP",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER___CREATED_BY as i_CREATED_BY",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER___MODIFIED_TSTMP as i_MODIFIED_TSTMP",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER___MODIFIED_BY as i_MODIFIED_BY",
	"SQ_Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER___LOAD_TSTMP as i_LOAD_TSTMP")

# COMMAND ----------
# Processing node FIL_SALON_ACADEMY_ASSESSMENT_TRAINER, type FILTER 
# COLUMN COUNT: 27

# for each involved DataFrame, append the dataframe name to each column
JNR_SALON_ACADEMY_ASSESSMENT_TRAINER_temp = JNR_SALON_ACADEMY_ASSESSMENT_TRAINER.toDF(*["JNR_SALON_ACADEMY_ASSESSMENT_TRAINER___" + col for col in JNR_SALON_ACADEMY_ASSESSMENT_TRAINER.columns])

FIL_SALON_ACADEMY_ASSESSMENT_TRAINER = JNR_SALON_ACADEMY_ASSESSMENT_TRAINER_temp.selectExpr(
	"JNR_SALON_ACADEMY_ASSESSMENT_TRAINER___SALON_ACADEMY_ASSESSMENT_TRAINER_ID as SALON_ACADEMY_ASSESSMENT_TRAINER_ID",
	"JNR_SALON_ACADEMY_ASSESSMENT_TRAINER___SALON_ACADEMY_ASSESSMENT_ID as SALON_ACADEMY_ASSESSMENT_ID",
	"JNR_SALON_ACADEMY_ASSESSMENT_TRAINER___SALON_ACADEMY_INSTRUCTOR_ID as SALON_ACADEMY_INSTRUCTOR_ID",
	"JNR_SALON_ACADEMY_ASSESSMENT_TRAINER___SALON_ACADEMY_INSTRUCTOR_NAME as SALON_ACADEMY_INSTRUCTOR_NAME",
	"JNR_SALON_ACADEMY_ASSESSMENT_TRAINER___ASSESSMENT_TRAINER_TEXT as ASSESSMENT_TRAINER_TEXT",
	"JNR_SALON_ACADEMY_ASSESSMENT_TRAINER___REGION_ID as REGION_ID",
	"JNR_SALON_ACADEMY_ASSESSMENT_TRAINER___REGION_NAME as REGION_NAME",
	"JNR_SALON_ACADEMY_ASSESSMENT_TRAINER___DISTRICT_ID as DISTRICT_ID",
	"JNR_SALON_ACADEMY_ASSESSMENT_TRAINER___DISTRICT_NAME as DISTRICT_NAME",
	"JNR_SALON_ACADEMY_ASSESSMENT_TRAINER___CREATED_TSTMP as CREATED_TSTMP",
	"JNR_SALON_ACADEMY_ASSESSMENT_TRAINER___CREATED_BY as CREATED_BY",
	"JNR_SALON_ACADEMY_ASSESSMENT_TRAINER___MODIFIED_TSTMP as MODIFIED_TSTMP",
	"JNR_SALON_ACADEMY_ASSESSMENT_TRAINER___MODIFIED_BY as MODIFIED_BY",
	"JNR_SALON_ACADEMY_ASSESSMENT_TRAINER___i_SALON_ACADEMY_ASSESSMENT_TRAINER_ID as i_SALON_ACADEMY_ASSESSMENT_TRAINER_ID",
	"JNR_SALON_ACADEMY_ASSESSMENT_TRAINER___i_SALON_ACADEMY_ASSESSMENT_ID as i_SALON_ACADEMY_ASSESSMENT_ID",
	"JNR_SALON_ACADEMY_ASSESSMENT_TRAINER___i_SALON_ACADEMY_INSTRUCTOR_ID as i_SALON_ACADEMY_INSTRUCTOR_ID",
	"JNR_SALON_ACADEMY_ASSESSMENT_TRAINER___i_SALON_ACADEMY_INSTRUCTOR_NAME as i_SALON_ACADEMY_INSTRUCTOR_NAME",
	"JNR_SALON_ACADEMY_ASSESSMENT_TRAINER___i_ASSESSMENT_TRAINER_TEXT as i_ASSESSMENT_TRAINER_TEXT",
	"JNR_SALON_ACADEMY_ASSESSMENT_TRAINER___i_REGION_ID as i_REGION_ID",
	"JNR_SALON_ACADEMY_ASSESSMENT_TRAINER___i_REGION_NAME as i_REGION_NAME",
	"JNR_SALON_ACADEMY_ASSESSMENT_TRAINER___i_DISTRICT_ID as i_DISTRICT_ID",
	"JNR_SALON_ACADEMY_ASSESSMENT_TRAINER___i_DISTRICT_NAME as i_DISTRICT_NAME",
	"JNR_SALON_ACADEMY_ASSESSMENT_TRAINER___i_CREATED_TSTMP as i_CREATED_TSTMP",
	"JNR_SALON_ACADEMY_ASSESSMENT_TRAINER___i_CREATED_BY as i_CREATED_BY",
	"JNR_SALON_ACADEMY_ASSESSMENT_TRAINER___i_MODIFIED_TSTMP as i_MODIFIED_TSTMP",
	"JNR_SALON_ACADEMY_ASSESSMENT_TRAINER___i_MODIFIED_BY as i_MODIFIED_BY",
	"JNR_SALON_ACADEMY_ASSESSMENT_TRAINER___i_LOAD_TSTMP as i_LOAD_TSTMP").filter("i_SALON_ACADEMY_ASSESSMENT_TRAINER_ID IS NULL OR (NOT i_SALON_ACADEMY_ASSESSMENT_TRAINER_ID IS NULL AND (CASE WHEN SALON_ACADEMY_ASSESSMENT_ID IS NULL THEN 0 ELSE SALON_ACADEMY_ASSESSMENT_ID END) != (CASE WHEN i_SALON_ACADEMY_ASSESSMENT_ID IS NULL THEN 0 ELSE i_SALON_ACADEMY_ASSESSMENT_ID END) OR (CASE WHEN SALON_ACADEMY_INSTRUCTOR_ID IS NULL THEN '' ELSE SALON_ACADEMY_INSTRUCTOR_ID END) != (CASE WHEN i_SALON_ACADEMY_INSTRUCTOR_ID IS NULL THEN '' ELSE i_SALON_ACADEMY_INSTRUCTOR_ID END) OR (CASE WHEN SALON_ACADEMY_INSTRUCTOR_NAME IS NULL THEN '' ELSE SALON_ACADEMY_INSTRUCTOR_NAME END) != (CASE WHEN i_SALON_ACADEMY_INSTRUCTOR_NAME IS NULL THEN '' ELSE i_SALON_ACADEMY_INSTRUCTOR_NAME END) OR (CASE WHEN ASSESSMENT_TRAINER_TEXT IS NULL THEN '' ELSE ASSESSMENT_TRAINER_TEXT END) != (CASE WHEN i_ASSESSMENT_TRAINER_TEXT IS NULL THEN '' ELSE i_ASSESSMENT_TRAINER_TEXT END) OR (CASE WHEN REGION_ID IS NULL THEN 0 ELSE REGION_ID END) != (CASE WHEN i_REGION_ID IS NULL THEN 0 ELSE i_REGION_ID END) OR (CASE WHEN REGION_NAME IS NULL THEN '' ELSE REGION_NAME END) != (CASE WHEN i_REGION_NAME IS NULL THEN '' ELSE i_REGION_NAME END) OR (CASE WHEN DISTRICT_ID IS NULL THEN 0 ELSE DISTRICT_ID END) != (CASE WHEN i_DISTRICT_ID IS NULL THEN 0 ELSE i_DISTRICT_ID END) OR (CASE WHEN DISTRICT_NAME IS NULL THEN '' ELSE DISTRICT_NAME END) != (CASE WHEN i_DISTRICT_NAME IS NULL THEN '' ELSE i_DISTRICT_NAME END) OR (CASE WHEN CREATED_TSTMP IS NULL THEN date'9999-12-31' ELSE CREATED_TSTMP END) != (CASE WHEN i_CREATED_TSTMP IS NULL THEN date'9999-12-31' ELSE i_CREATED_TSTMP END) OR (CASE WHEN CREATED_BY IS NULL THEN '' ELSE CREATED_BY END) != (CASE WHEN i_CREATED_BY IS NULL THEN '' ELSE i_CREATED_BY END) OR (CASE WHEN MODIFIED_TSTMP IS NULL THEN date'9999-12-31' ELSE MODIFIED_TSTMP END) != (CASE WHEN i_MODIFIED_TSTMP IS NULL THEN date'9999-12-31' ELSE i_MODIFIED_TSTMP END) OR (CASE WHEN MODIFIED_BY IS NULL THEN '' ELSE MODIFIED_BY END) != (CASE WHEN i_MODIFIED_BY IS NULL THEN '' ELSE i_MODIFIED_BY END))").withColumn("sys_row_id", monotonically_increasing_id())


# COMMAND ----------
# Processing node EXP_SALON_ACADEMY_ASSESSMENT_TRAINER, type EXPRESSION 
# COLUMN COUNT: 16

# for each involved DataFrame, append the dataframe name to each column
FIL_SALON_ACADEMY_ASSESSMENT_TRAINER_temp = FIL_SALON_ACADEMY_ASSESSMENT_TRAINER.toDF(*["FIL_SALON_ACADEMY_ASSESSMENT_TRAINER___" + col for col in FIL_SALON_ACADEMY_ASSESSMENT_TRAINER.columns])

EXP_SALON_ACADEMY_ASSESSMENT_TRAINER = FIL_SALON_ACADEMY_ASSESSMENT_TRAINER_temp.selectExpr(
	"FIL_SALON_ACADEMY_ASSESSMENT_TRAINER___sys_row_id as sys_row_id",
	"FIL_SALON_ACADEMY_ASSESSMENT_TRAINER___SALON_ACADEMY_ASSESSMENT_TRAINER_ID as SALON_ACADEMY_ASSESSMENT_TRAINER_ID",
	"FIL_SALON_ACADEMY_ASSESSMENT_TRAINER___SALON_ACADEMY_ASSESSMENT_ID as SALON_ACADEMY_ASSESSMENT_ID",
	"FIL_SALON_ACADEMY_ASSESSMENT_TRAINER___SALON_ACADEMY_INSTRUCTOR_ID as SALON_ACADEMY_INSTRUCTOR_ID",
	"FIL_SALON_ACADEMY_ASSESSMENT_TRAINER___SALON_ACADEMY_INSTRUCTOR_NAME as SALON_ACADEMY_INSTRUCTOR_NAME",
	"FIL_SALON_ACADEMY_ASSESSMENT_TRAINER___ASSESSMENT_TRAINER_TEXT as ASSESSMENT_TRAINER_TEXT",
	"FIL_SALON_ACADEMY_ASSESSMENT_TRAINER___REGION_ID as REGION_ID",
	"FIL_SALON_ACADEMY_ASSESSMENT_TRAINER___REGION_NAME as REGION_NAME",
	"FIL_SALON_ACADEMY_ASSESSMENT_TRAINER___DISTRICT_ID as DISTRICT_ID",
	"FIL_SALON_ACADEMY_ASSESSMENT_TRAINER___DISTRICT_NAME as DISTRICT_NAME",
	"FIL_SALON_ACADEMY_ASSESSMENT_TRAINER___CREATED_TSTMP as CREATED_TSTMP",
	"FIL_SALON_ACADEMY_ASSESSMENT_TRAINER___CREATED_BY as CREATED_BY",
	"FIL_SALON_ACADEMY_ASSESSMENT_TRAINER___MODIFIED_TSTMP as MODIFIED_TSTMP",
	"FIL_SALON_ACADEMY_ASSESSMENT_TRAINER___MODIFIED_BY as MODIFIED_BY",
	"CURRENT_TIMESTAMP as UPDATE_TSTMP",
	"IF (FIL_SALON_ACADEMY_ASSESSMENT_TRAINER___i_LOAD_TSTMP IS NULL, CURRENT_TIMESTAMP, FIL_SALON_ACADEMY_ASSESSMENT_TRAINER___i_LOAD_TSTMP) as LOAD_TSTMP",
	"IF (FIL_SALON_ACADEMY_ASSESSMENT_TRAINER___i_SALON_ACADEMY_ASSESSMENT_TRAINER_ID IS NULL, 1, 2) as o_UPDATE_VALIDATOR"
)

# COMMAND ----------
# Processing node UPD_SALON_ACADEMY_ASSESSMENT_TRAINER, type UPDATE_STRATEGY 
# COLUMN COUNT: 16

# for each involved DataFrame, append the dataframe name to each column
EXP_SALON_ACADEMY_ASSESSMENT_TRAINER_temp = EXP_SALON_ACADEMY_ASSESSMENT_TRAINER.toDF(*["EXP_SALON_ACADEMY_ASSESSMENT_TRAINER___" + col for col in EXP_SALON_ACADEMY_ASSESSMENT_TRAINER.columns])

UPD_SALON_ACADEMY_ASSESSMENT_TRAINER = EXP_SALON_ACADEMY_ASSESSMENT_TRAINER_temp.selectExpr(
	"EXP_SALON_ACADEMY_ASSESSMENT_TRAINER___SALON_ACADEMY_ASSESSMENT_TRAINER_ID as SALON_ACADEMY_ASSESSMENT_TRAINER_ID",
	"EXP_SALON_ACADEMY_ASSESSMENT_TRAINER___SALON_ACADEMY_ASSESSMENT_ID as SALON_ACADEMY_ASSESSMENT_ID",
	"EXP_SALON_ACADEMY_ASSESSMENT_TRAINER___SALON_ACADEMY_INSTRUCTOR_ID as SALON_ACADEMY_INSTRUCTOR_ID",
	"EXP_SALON_ACADEMY_ASSESSMENT_TRAINER___SALON_ACADEMY_INSTRUCTOR_NAME as SALON_ACADEMY_INSTRUCTOR_NAME",
	"EXP_SALON_ACADEMY_ASSESSMENT_TRAINER___ASSESSMENT_TRAINER_TEXT as ASSESSMENT_TRAINER_TEXT",
	"EXP_SALON_ACADEMY_ASSESSMENT_TRAINER___REGION_ID as REGION_ID",
	"EXP_SALON_ACADEMY_ASSESSMENT_TRAINER___REGION_NAME as REGION_NAME",
	"EXP_SALON_ACADEMY_ASSESSMENT_TRAINER___DISTRICT_ID as DISTRICT_ID",
	"EXP_SALON_ACADEMY_ASSESSMENT_TRAINER___DISTRICT_NAME as DISTRICT_NAME",
	"EXP_SALON_ACADEMY_ASSESSMENT_TRAINER___CREATED_TSTMP as CREATED_TSTMP",
	"EXP_SALON_ACADEMY_ASSESSMENT_TRAINER___CREATED_BY as CREATED_BY",
	"EXP_SALON_ACADEMY_ASSESSMENT_TRAINER___MODIFIED_TSTMP as MODIFIED_TSTMP",
	"EXP_SALON_ACADEMY_ASSESSMENT_TRAINER___MODIFIED_BY as MODIFIED_BY",
	"EXP_SALON_ACADEMY_ASSESSMENT_TRAINER___UPDATE_TSTMP as UPDATE_TSTMP",
	"EXP_SALON_ACADEMY_ASSESSMENT_TRAINER___LOAD_TSTMP as LOAD_TSTMP",
	"EXP_SALON_ACADEMY_ASSESSMENT_TRAINER___o_UPDATE_VALIDATOR as o_UPDATE_VALIDATOR") \
	.withColumn('pyspark_data_action', when(col('o_UPDATE_VALIDATOR') ==(lit(1)) , lit(0)) .when(col('o_UPDATE_VALIDATOR') ==(lit(2)) , lit(1)))

# COMMAND ----------
# Processing node Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER, type TARGET 
# COLUMN COUNT: 15


Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER = UPD_SALON_ACADEMY_ASSESSMENT_TRAINER.selectExpr(
	"SALON_ACADEMY_ASSESSMENT_TRAINER_ID as SALON_ACADEMY_ASSESSMENT_TRAINER_ID",
	"SALON_ACADEMY_ASSESSMENT_ID as SALON_ACADEMY_ASSESSMENT_ID",
	"CAST(SALON_ACADEMY_INSTRUCTOR_ID AS STRING) as SALON_ACADEMY_INSTRUCTOR_ID",
	"CAST(SALON_ACADEMY_INSTRUCTOR_NAME AS STRING) as SALON_ACADEMY_INSTRUCTOR_NAME",
	"CAST(ASSESSMENT_TRAINER_TEXT AS STRING) as ASSESSMENT_TRAINER_TEXT",
	"REGION_ID as REGION_ID",
	"CAST(REGION_NAME AS STRING) as REGION_NAME",
	"DISTRICT_ID as DISTRICT_ID",
	"CAST(DISTRICT_NAME AS STRING) as DISTRICT_NAME",
	"CAST(CREATED_TSTMP AS TIMESTAMP) as CREATED_TSTMP",
	"CAST(CREATED_BY AS STRING) as CREATED_BY",
	"CAST(MODIFIED_TSTMP AS TIMESTAMP) as MODIFIED_TSTMP",
	"CAST(MODIFIED_BY AS STRING) as MODIFIED_BY",
	"CAST(UPDATE_TSTMP AS TIMESTAMP) as UPDATE_TSTMP",
	"CAST(LOAD_TSTMP AS TIMESTAMP) as LOAD_TSTMP",
	"pyspark_data_action as pyspark_data_action"
)

try:
	primary_key = """source.SALON_ACADEMY_ASSESSMENT_TRAINER_ID = target.SALON_ACADEMY_ASSESSMENT_TRAINER_ID"""
	refined_perf_table = f"{legacy}.SALON_ACADEMY_ASSESSMENT_TRAINER"
	executeMerge(Shortcut_to_SALON_ACADEMY_ASSESSMENT_TRAINER, refined_perf_table, primary_key)
	logger.info(f"Merge with {refined_perf_table} completed]")
	logPrevRunDt("SALON_ACADEMY_ASSESSMENT_TRAINER", "SALON_ACADEMY_ASSESSMENT_TRAINER", "Completed", "N/A", f"{raw}.log_run_details")
except Exception as e:
	logPrevRunDt("SALON_ACADEMY_ASSESSMENT_TRAINER", "SALON_ACADEMY_ASSESSMENT_TRAINER","Failed",str(e), f"{raw}.log_run_details")
	raise e
		