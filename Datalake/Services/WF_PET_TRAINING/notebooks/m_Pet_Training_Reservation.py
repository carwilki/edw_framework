#Code converted on 2023-08-09 10:47:55
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from Datalake.utils.genericUtilities import *
from Datalake.utils.configs import *
from Datalake.utils.mergeUtils import *
from Datalake.utils.logger import *
# COMMAND ----------

parser = argparse.ArgumentParser()
spark = SparkSession.getActiveSession()
parser.add_argument('env', type=str, help='Env Variable')
args = parser.parse_args()
env = args.env
# env = 'dev'

if env is None or env == '':
    raise ValueError('env is not set')

sensitive = getEnvPrefix(env) + 'cust_sensitive'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'

# Set global variables
starttime = datetime.now() #start timestamp of the script


# COMMAND ----------
# Processing node SQ_Shortcut_to_PET_TRAINING_RESERVATION, type SOURCE 
# COLUMN COUNT: 18

SQ_Shortcut_to_PET_TRAINING_RESERVATION = spark.sql(f"""SELECT
PET_TRAINING_RESERVATION_ID,
LOCATION_ID,
ENROLLMENT_TSTMP,
UPC_ID,
STORE_CLASS_TYPE_ID,
STORE_CLASS_TYPE_DESC,
CLASS_START_TSTMP,
CLASS_DURATION_WEEKS,
PET_TRAINING_CUSTOMER_ID,
CUSTOMER_FIRST_NAME,
CUSTOMER_LAST_NAME,
PET_TRAINING_PET_ID,
PET_NAME,
PET_BREED_DESC,
PET_TRAINING_TRAINER_ID,
TRAINER_NAME,
CREATED_TSTMP,
LOAD_TSTMP
FROM {sensitive}.legacy_PET_TRAINING_RESERVATION""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node SQ_Shortcut_to_PET_TRAINING_RESERVATION_PRE, type SOURCE 
# COLUMN COUNT: 17

SQ_Shortcut_to_PET_TRAINING_RESERVATION_PRE = spark.sql(f"""SELECT
PET_TRAINING_RESERVATION_ID,
LOCATION_ID,
ENROLLMENT_TSTMP,
UPC_ID,
STORE_CLASS_TYPE_ID,
STORE_CLASS_TYPE_DESC,
CLASS_START_TSTMP,
CLASS_DURATION_WEEKS,
PET_TRAINING_CUSTOMER_ID,
CUSTOMER_FIRST_NAME,
CUSTOMER_LAST_NAME,
PET_TRAINING_PET_ID,
PET_NAME,
PET_BREED_DESC,
PET_TRAINING_TRAINER_ID,
TRAINER_NAME,
CREATED_TSTMP
FROM {sensitive}.raw_PET_TRAINING_RESERVATION_PRE""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node EXP_PET_NAME, type EXPRESSION 
# COLUMN COUNT: 17

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_PET_TRAINING_RESERVATION_PRE_temp = SQ_Shortcut_to_PET_TRAINING_RESERVATION_PRE.toDF(*["SQ_Shortcut_to_PET_TRAINING_RESERVATION_PRE___" + col for col in SQ_Shortcut_to_PET_TRAINING_RESERVATION_PRE.columns])

EXP_PET_NAME = SQ_Shortcut_to_PET_TRAINING_RESERVATION_PRE_temp.selectExpr( \
	"SQ_Shortcut_to_PET_TRAINING_RESERVATION_PRE___sys_row_id as sys_row_id", \
	"SQ_Shortcut_to_PET_TRAINING_RESERVATION_PRE___PET_TRAINING_RESERVATION_ID as PET_TRAINING_RESERVATION_ID", \
	"SQ_Shortcut_to_PET_TRAINING_RESERVATION_PRE___LOCATION_ID as LOCATION_ID", \
	"SQ_Shortcut_to_PET_TRAINING_RESERVATION_PRE___ENROLLMENT_TSTMP as ENROLLMENT_TSTMP", \
	"SQ_Shortcut_to_PET_TRAINING_RESERVATION_PRE___UPC_ID as UPC_ID", \
	"SQ_Shortcut_to_PET_TRAINING_RESERVATION_PRE___STORE_CLASS_TYPE_ID as STORE_CLASS_TYPE_ID", \
	"SQ_Shortcut_to_PET_TRAINING_RESERVATION_PRE___STORE_CLASS_TYPE_DESC as STORE_CLASS_TYPE_DESC", \
	"SQ_Shortcut_to_PET_TRAINING_RESERVATION_PRE___CLASS_START_TSTMP as CLASS_START_TSTMP", \
	"SQ_Shortcut_to_PET_TRAINING_RESERVATION_PRE___CLASS_DURATION_WEEKS as CLASS_DURATION_WEEKS", \
	"SQ_Shortcut_to_PET_TRAINING_RESERVATION_PRE___PET_TRAINING_CUSTOMER_ID as PET_TRAINING_CUSTOMER_ID", \
	"SQ_Shortcut_to_PET_TRAINING_RESERVATION_PRE___CUSTOMER_FIRST_NAME as CUSTOMER_FIRST_NAME", \
	"SQ_Shortcut_to_PET_TRAINING_RESERVATION_PRE___CUSTOMER_LAST_NAME as CUSTOMER_LAST_NAME", \
	"SQ_Shortcut_to_PET_TRAINING_RESERVATION_PRE___PET_TRAINING_PET_ID as PET_TRAINING_PET_ID", \
	"REGEXP_REPLACE(REGEXP_REPLACE(SQ_Shortcut_to_PET_TRAINING_RESERVATION_PRE___PET_NAME, '(' || CHR ( 13 ) || ')', concat ( '\' , CHR ( 13 ) ) ), '(' || CHR ( 10 ) || ')', concat( '\' , CHR ( 10 ) ) ) as O_PET_NAME", \
	"SQ_Shortcut_to_PET_TRAINING_RESERVATION_PRE___PET_BREED_DESC as PET_BREED_DESC", \
	"SQ_Shortcut_to_PET_TRAINING_RESERVATION_PRE___PET_TRAINING_TRAINER_ID as PET_TRAINING_TRAINER_ID", \
	"SQ_Shortcut_to_PET_TRAINING_RESERVATION_PRE___TRAINER_NAME as TRAINER_NAME", \
	"SQ_Shortcut_to_PET_TRAINING_RESERVATION_PRE___CREATED_TSTMP as CREATED_TSTMP" \
)

# COMMAND ----------
# Processing node JNR_TGT, type JOINER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 35

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_PET_TRAINING_RESERVATION_temp = SQ_Shortcut_to_PET_TRAINING_RESERVATION.toDF(*["SQ_Shortcut_to_PET_TRAINING_RESERVATION___" + col for col in SQ_Shortcut_to_PET_TRAINING_RESERVATION.columns])
EXP_PET_NAME_temp = EXP_PET_NAME.toDF(*["EXP_PET_NAME___" + col for col in EXP_PET_NAME.columns])

JNR_TGT = SQ_Shortcut_to_PET_TRAINING_RESERVATION_temp.join(EXP_PET_NAME_temp,[SQ_Shortcut_to_PET_TRAINING_RESERVATION_temp.SQ_Shortcut_to_PET_TRAINING_RESERVATION___PET_TRAINING_RESERVATION_ID == EXP_PET_NAME_temp.EXP_PET_NAME___PET_TRAINING_RESERVATION_ID],'right_outer').selectExpr( \
	"EXP_PET_NAME___PET_TRAINING_RESERVATION_ID as PET_TRAINING_RESERVATION_ID", \
	"EXP_PET_NAME___LOCATION_ID as LOCATION_ID", \
	"EXP_PET_NAME___ENROLLMENT_TSTMP as ENROLLMENT_TSTMP", \
	"EXP_PET_NAME___UPC_ID as UPC_ID", \
	"EXP_PET_NAME___STORE_CLASS_TYPE_ID as STORE_CLASS_TYPE_ID", \
	"EXP_PET_NAME___STORE_CLASS_TYPE_DESC as STORE_CLASS_TYPE_DESC", \
	"EXP_PET_NAME___CLASS_START_TSTMP as CLASS_START_TSTMP", \
	"EXP_PET_NAME___CLASS_DURATION_WEEKS as CLASS_DURATION_WEEKS", \
	"EXP_PET_NAME___PET_TRAINING_CUSTOMER_ID as PET_TRAINING_CUSTOMER_ID", \
	"EXP_PET_NAME___CUSTOMER_FIRST_NAME as CUSTOMER_FIRST_NAME", \
	"EXP_PET_NAME___CUSTOMER_LAST_NAME as CUSTOMER_LAST_NAME", \
	"EXP_PET_NAME___PET_TRAINING_PET_ID as PET_TRAINING_PET_ID", \
	"EXP_PET_NAME___O_PET_NAME as PET_NAME", \
	"EXP_PET_NAME___PET_BREED_DESC as PET_BREED_DESC", \
	"EXP_PET_NAME___PET_TRAINING_TRAINER_ID as PET_TRAINING_TRAINER_ID", \
	"EXP_PET_NAME___TRAINER_NAME as TRAINER_NAME", \
	"EXP_PET_NAME___CREATED_TSTMP as CREATED_TSTMP", \
	"SQ_Shortcut_to_PET_TRAINING_RESERVATION___PET_TRAINING_RESERVATION_ID as i_PET_TRAINING_RESERVATION_ID", \
	"SQ_Shortcut_to_PET_TRAINING_RESERVATION___LOCATION_ID as i_LOCATION_ID", \
	"SQ_Shortcut_to_PET_TRAINING_RESERVATION___ENROLLMENT_TSTMP as i_ENROLLMENT_TSTMP", \
	"SQ_Shortcut_to_PET_TRAINING_RESERVATION___UPC_ID as i_UPC_ID", \
	"SQ_Shortcut_to_PET_TRAINING_RESERVATION___STORE_CLASS_TYPE_ID as i_STORE_CLASS_TYPE_ID", \
	"SQ_Shortcut_to_PET_TRAINING_RESERVATION___STORE_CLASS_TYPE_DESC as i_STORE_CLASS_TYPE_DESC", \
	"SQ_Shortcut_to_PET_TRAINING_RESERVATION___CLASS_START_TSTMP as i_CLASS_START_TSTMP", \
	"SQ_Shortcut_to_PET_TRAINING_RESERVATION___CLASS_DURATION_WEEKS as i_CLASS_DURATION_WEEKS", \
	"SQ_Shortcut_to_PET_TRAINING_RESERVATION___PET_TRAINING_CUSTOMER_ID as i_PET_TRAINING_CUSTOMER_ID", \
	"SQ_Shortcut_to_PET_TRAINING_RESERVATION___CUSTOMER_FIRST_NAME as i_CUSTOMER_FIRST_NAME", \
	"SQ_Shortcut_to_PET_TRAINING_RESERVATION___CUSTOMER_LAST_NAME as i_CUSTOMER_LAST_NAME", \
	"SQ_Shortcut_to_PET_TRAINING_RESERVATION___PET_TRAINING_PET_ID as i_PET_TRAINING_PET_ID", \
	"SQ_Shortcut_to_PET_TRAINING_RESERVATION___PET_NAME as i_PET_NAME", \
	"SQ_Shortcut_to_PET_TRAINING_RESERVATION___PET_BREED_DESC as i_PET_BREED_DESC", \
	"SQ_Shortcut_to_PET_TRAINING_RESERVATION___PET_TRAINING_TRAINER_ID as i_PET_TRAINING_TRAINER_ID", \
	"SQ_Shortcut_to_PET_TRAINING_RESERVATION___TRAINER_NAME as i_TRAINER_NAME", \
	"SQ_Shortcut_to_PET_TRAINING_RESERVATION___CREATED_TSTMP as i_CREATED_TSTMP", \
	"SQ_Shortcut_to_PET_TRAINING_RESERVATION___LOAD_TSTMP as i_LOAD_TSTMP")

# COMMAND ----------
# Processing node FLT_UNCHANGED, type FILTER 
# COLUMN COUNT: 35

# for each involved DataFrame, append the dataframe name to each column
JNR_TGT_temp = JNR_TGT.toDF(*["JNR_TGT___" + col for col in JNR_TGT.columns])

FLT_UNCHANGED = JNR_TGT_temp.selectExpr( \
	"JNR_TGT___PET_TRAINING_RESERVATION_ID as PET_TRAINING_RESERVATION_ID", \
	"JNR_TGT___LOCATION_ID as LOCATION_ID", \
	"JNR_TGT___ENROLLMENT_TSTMP as ENROLLMENT_TSTMP", \
	"JNR_TGT___UPC_ID as UPC_ID", \
	"JNR_TGT___STORE_CLASS_TYPE_ID as STORE_CLASS_TYPE_ID", \
	"JNR_TGT___STORE_CLASS_TYPE_DESC as STORE_CLASS_TYPE_DESC", \
	"JNR_TGT___CLASS_START_TSTMP as CLASS_START_TSTMP", \
	"JNR_TGT___CLASS_DURATION_WEEKS as CLASS_DURATION_WEEKS", \
	"JNR_TGT___PET_TRAINING_CUSTOMER_ID as PET_TRAINING_CUSTOMER_ID", \
	"JNR_TGT___CUSTOMER_FIRST_NAME as CUSTOMER_FIRST_NAME", \
	"JNR_TGT___CUSTOMER_LAST_NAME as CUSTOMER_LAST_NAME", \
	"JNR_TGT___PET_TRAINING_PET_ID as PET_TRAINING_PET_ID", \
	"JNR_TGT___PET_NAME as PET_NAME", \
	"JNR_TGT___PET_BREED_DESC as PET_BREED_DESC", \
	"JNR_TGT___PET_TRAINING_TRAINER_ID as PET_TRAINING_TRAINER_ID", \
	"JNR_TGT___TRAINER_NAME as TRAINER_NAME", \
	"JNR_TGT___CREATED_TSTMP as CREATED_TSTMP", \
	"JNR_TGT___i_PET_TRAINING_RESERVATION_ID as i_PET_TRAINING_RESERVATION_ID", \
	"JNR_TGT___i_LOCATION_ID as i_LOCATION_ID", \
	"JNR_TGT___i_ENROLLMENT_TSTMP as i_ENROLLMENT_TSTMP", \
	"JNR_TGT___i_UPC_ID as i_UPC_ID", \
	"JNR_TGT___i_STORE_CLASS_TYPE_ID as i_STORE_CLASS_TYPE_ID", \
	"JNR_TGT___i_STORE_CLASS_TYPE_DESC as i_STORE_CLASS_TYPE_DESC", \
	"JNR_TGT___i_CLASS_START_TSTMP as i_CLASS_START_TSTMP", \
	"JNR_TGT___i_CLASS_DURATION_WEEKS as i_CLASS_DURATION_WEEKS", \
	"JNR_TGT___i_PET_TRAINING_CUSTOMER_ID as i_PET_TRAINING_CUSTOMER_ID", \
	"JNR_TGT___i_CUSTOMER_FIRST_NAME as i_CUSTOMER_FIRST_NAME", \
	"JNR_TGT___i_CUSTOMER_LAST_NAME as i_CUSTOMER_LAST_NAME", \
	"JNR_TGT___i_PET_TRAINING_PET_ID as i_PET_TRAINING_PET_ID", \
	"JNR_TGT___i_PET_NAME as i_PET_NAME", \
	"JNR_TGT___i_PET_BREED_DESC as i_PET_BREED_DESC", \
	"JNR_TGT___i_PET_TRAINING_TRAINER_ID as i_PET_TRAINING_TRAINER_ID", \
	"JNR_TGT___i_TRAINER_NAME as i_TRAINER_NAME", \
	"JNR_TGT___i_CREATED_TSTMP as i_CREATED_TSTMP", \
	"JNR_TGT___i_LOAD_TSTMP as i_LOAD_TSTMP").filter("i_PET_TRAINING_RESERVATION_ID IS NULL OR ( i_PET_TRAINING_RESERVATION_ID IS NOT NULL AND ( IF (LOCATION_ID IS NULL, - 99999, LOCATION_ID) != IF (i_LOCATION_ID IS NULL, - 99999, i_LOCATION_ID) OR IF (ENROLLMENT_TSTMP IS NULL, to_date ( '1900-01-01' , 'YYYY-MM-DD' ), ENROLLMENT_TSTMP) != IF (i_ENROLLMENT_TSTMP IS NULL, to_date ( '1900-01-01' , 'YYYY-MM-DD' ), i_ENROLLMENT_TSTMP) OR IF (UPC_ID IS NULL, - 99999, UPC_ID) != IF (i_UPC_ID IS NULL, - 99999, i_UPC_ID) OR IF (STORE_CLASS_TYPE_ID IS NULL, - 99999, STORE_CLASS_TYPE_ID) != IF (i_STORE_CLASS_TYPE_ID IS NULL, - 99999, i_STORE_CLASS_TYPE_ID) OR IF (STORE_CLASS_TYPE_DESC IS NULL, ' ', STORE_CLASS_TYPE_DESC) != IF (i_STORE_CLASS_TYPE_DESC IS NULL, ' ', i_STORE_CLASS_TYPE_DESC) OR IF (CLASS_START_TSTMP IS NULL, to_date ( '1900-01-01' , 'YYYY-MM-DD' ), CLASS_START_TSTMP) != IF (i_CLASS_START_TSTMP IS NULL, to_date ( '1900-01-01' , 'YYYY-MM-DD' ), i_CLASS_START_TSTMP) OR IF (CLASS_DURATION_WEEKS IS NULL, - 99999, CLASS_DURATION_WEEKS) != IF (i_CLASS_DURATION_WEEKS IS NULL, - 99999, i_CLASS_DURATION_WEEKS) OR IF (PET_TRAINING_CUSTOMER_ID IS NULL, - 99999, PET_TRAINING_CUSTOMER_ID) != IF (i_PET_TRAINING_CUSTOMER_ID IS NULL, - 99999, i_PET_TRAINING_CUSTOMER_ID) OR IF (CUSTOMER_FIRST_NAME IS NULL, ' ', CUSTOMER_FIRST_NAME) != IF (i_CUSTOMER_FIRST_NAME IS NULL, ' ', i_CUSTOMER_FIRST_NAME) OR IF (CUSTOMER_LAST_NAME IS NULL, ' ', CUSTOMER_LAST_NAME) != IF (i_CUSTOMER_LAST_NAME IS NULL, ' ', i_CUSTOMER_LAST_NAME) OR IF (PET_TRAINING_PET_ID IS NULL, - 99999, PET_TRAINING_PET_ID) != IF (i_PET_TRAINING_PET_ID IS NULL, - 99999, i_PET_TRAINING_PET_ID) OR IF (PET_NAME IS NULL, ' ', PET_NAME) != IF (i_PET_NAME IS NULL, ' ', i_PET_NAME) OR IF (PET_BREED_DESC IS NULL, ' ', PET_BREED_DESC) != IF (i_PET_BREED_DESC IS NULL, ' ', i_PET_BREED_DESC) OR IF (PET_TRAINING_TRAINER_ID IS NULL, - 99999, PET_TRAINING_TRAINER_ID) != IF (i_PET_TRAINING_TRAINER_ID IS NULL, - 99999, i_PET_TRAINING_TRAINER_ID) OR IF (TRAINER_NAME IS NULL, ' ', TRAINER_NAME) != IF (i_TRAINER_NAME IS NULL, ' ', i_TRAINER_NAME) OR IF (CREATED_TSTMP IS NULL, to_date ( '1900-01-01' , 'YYYY-MM-DD' ), CREATED_TSTMP) != IF (i_CREATED_TSTMP IS NULL, to_date ( '1900-01-01' , 'YYYY-MM-DD' ), i_CREATED_TSTMP) ) )").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node EXP_TSTMP, type EXPRESSION 
# COLUMN COUNT: 22

# for each involved DataFrame, append the dataframe name to each column
FLT_UNCHANGED_temp = FLT_UNCHANGED.toDF(*["FLT_UNCHANGED___" + col for col in FLT_UNCHANGED.columns])

EXP_TSTMP = FLT_UNCHANGED_temp.selectExpr( \
	"FLT_UNCHANGED___sys_row_id as sys_row_id", \
	"FLT_UNCHANGED___PET_TRAINING_RESERVATION_ID as PET_TRAINING_RESERVATION_ID", \
	"FLT_UNCHANGED___LOCATION_ID as LOCATION_ID", \
	"FLT_UNCHANGED___ENROLLMENT_TSTMP as ENROLLMENT_TSTMP", \
	"FLT_UNCHANGED___UPC_ID as UPC_ID", \
	"FLT_UNCHANGED___STORE_CLASS_TYPE_ID as STORE_CLASS_TYPE_ID", \
	"FLT_UNCHANGED___STORE_CLASS_TYPE_DESC as STORE_CLASS_TYPE_DESC", \
	"FLT_UNCHANGED___CLASS_START_TSTMP as CLASS_START_TSTMP", \
	"FLT_UNCHANGED___CLASS_DURATION_WEEKS as CLASS_DURATION_WEEKS", \
	"FLT_UNCHANGED___PET_TRAINING_CUSTOMER_ID as PET_TRAINING_CUSTOMER_ID", \
	"FLT_UNCHANGED___CUSTOMER_FIRST_NAME as CUSTOMER_FIRST_NAME", \
	"FLT_UNCHANGED___CUSTOMER_LAST_NAME as CUSTOMER_LAST_NAME", \
	"FLT_UNCHANGED___PET_TRAINING_PET_ID as PET_TRAINING_PET_ID", \
	"FLT_UNCHANGED___PET_NAME as PET_NAME", \
	"FLT_UNCHANGED___PET_BREED_DESC as PET_BREED_DESC", \
	"FLT_UNCHANGED___PET_TRAINING_TRAINER_ID as PET_TRAINING_TRAINER_ID", \
	"FLT_UNCHANGED___TRAINER_NAME as TRAINER_NAME", \
	"FLT_UNCHANGED___CREATED_TSTMP as CREATED_TSTMP", \
	"FLT_UNCHANGED___i_PET_TRAINING_RESERVATION_ID as i_PET_TRAINING_RESERVATION_ID", \
	"FLT_UNCHANGED___i_LOAD_TSTMP as i_LOAD_TSTMP", \
	"CURRENT_TIMESTAMP as UPDATE_TSTMP", \
	"IF (FLT_UNCHANGED___i_LOAD_TSTMP IS NULL, CURRENT_TIMESTAMP, FLT_UNCHANGED___i_LOAD_TSTMP) as LOAD_TSTMP", \
	"IF (FLT_UNCHANGED___i_PET_TRAINING_RESERVATION_ID IS NULL, 1, 2) as o_UPDATE_VALIDATOR" \
)

# COMMAND ----------
# Processing node UPD_INS_UPDATE, type UPDATE_STRATEGY 
# COLUMN COUNT: 20

# for each involved DataFrame, append the dataframe name to each column
EXP_TSTMP_temp = EXP_TSTMP.toDF(*["EXP_TSTMP___" + col for col in EXP_TSTMP.columns])

UPD_INS_UPDATE = EXP_TSTMP_temp.selectExpr( \
	"EXP_TSTMP___PET_TRAINING_RESERVATION_ID as PET_TRAINING_RESERVATION_ID", \
	"EXP_TSTMP___LOCATION_ID as LOCATION_ID", \
	"EXP_TSTMP___ENROLLMENT_TSTMP as ENROLLMENT_TSTMP", \
	"EXP_TSTMP___UPC_ID as UPC_ID", \
	"EXP_TSTMP___STORE_CLASS_TYPE_ID as STORE_CLASS_TYPE_ID", \
	"EXP_TSTMP___STORE_CLASS_TYPE_DESC as STORE_CLASS_TYPE_DESC", \
	"EXP_TSTMP___CLASS_START_TSTMP as CLASS_START_TSTMP", \
	"EXP_TSTMP___CLASS_DURATION_WEEKS as CLASS_DURATION_WEEKS", \
	"EXP_TSTMP___PET_TRAINING_CUSTOMER_ID as PET_TRAINING_CUSTOMER_ID", \
	"EXP_TSTMP___CUSTOMER_FIRST_NAME as CUSTOMER_FIRST_NAME", \
	"EXP_TSTMP___CUSTOMER_LAST_NAME as CUSTOMER_LAST_NAME", \
	"EXP_TSTMP___PET_TRAINING_PET_ID as PET_TRAINING_PET_ID", \
	"EXP_TSTMP___PET_NAME as PET_NAME", \
	"EXP_TSTMP___PET_BREED_DESC as PET_BREED_DESC", \
	"EXP_TSTMP___PET_TRAINING_TRAINER_ID as PET_TRAINING_TRAINER_ID", \
	"EXP_TSTMP___TRAINER_NAME as TRAINER_NAME", \
	"EXP_TSTMP___CREATED_TSTMP as CREATED_TSTMP", \
	"EXP_TSTMP___UPDATE_TSTMP as UPDATE_TSTMP", \
	"EXP_TSTMP___LOAD_TSTMP as LOAD_TSTMP", \
	"EXP_TSTMP___o_UPDATE_VALIDATOR as o_UPDATE_VALIDATOR") \
	.withColumn('pyspark_data_action', when(col('o_UPDATE_VALIDATOR') ==(lit(1)) , lit(0)) .when(col('o_UPDATE_VALIDATOR') ==(lit(2)) , lit(1)))

# COMMAND ----------
# Processing node Shortcut_to_PET_TRAINING_RESERVATION1, type TARGET 
# COLUMN COUNT: 19


Shortcut_to_PET_TRAINING_RESERVATION1 = UPD_INS_UPDATE.selectExpr( \
	"CAST(PET_TRAINING_RESERVATION_ID AS BIGINT) as PET_TRAINING_RESERVATION_ID", \
	"CAST(LOCATION_ID AS BIGINT) as LOCATION_ID", \
	"CAST(ENROLLMENT_TSTMP AS TIMESTAMP) as ENROLLMENT_TSTMP", \
	"CAST(UPC_ID as BIGINT) as UPC_ID", \
	"CAST(STORE_CLASS_TYPE_ID AS BIGINT) as STORE_CLASS_TYPE_ID", \
	"CAST(STORE_CLASS_TYPE_DESC AS STRING) as STORE_CLASS_TYPE_DESC", \
	"CAST(CLASS_START_TSTMP AS TIMESTAMP) as CLASS_START_TSTMP", \
	"CAST(CLASS_DURATION_WEEKS as INT) as CLASS_DURATION_WEEKS", \
	"CAST(PET_TRAINING_CUSTOMER_ID AS BIGINT) as PET_TRAINING_CUSTOMER_ID", \
	"CAST(CUSTOMER_FIRST_NAME AS STRING) as CUSTOMER_FIRST_NAME", \
	"CAST(CUSTOMER_LAST_NAME AS STRING) as CUSTOMER_LAST_NAME", \
	"CAST(PET_TRAINING_PET_ID AS BIGINT) as PET_TRAINING_PET_ID", \
	"CAST(PET_NAME AS STRING) as PET_NAME", \
	"CAST(PET_BREED_DESC AS STRING) as PET_BREED_DESC", \
	"CAST(PET_TRAINING_TRAINER_ID AS BIGINT) as PET_TRAINING_TRAINER_ID", \
	"CAST(TRAINER_NAME AS STRING) as TRAINER_NAME", \
	"CAST(CREATED_TSTMP AS TIMESTAMP) as CREATED_TSTMP", \
	"CAST(UPDATE_TSTMP AS TIMESTAMP) as UPDATE_TSTMP", \
	"CAST(LOAD_TSTMP AS TIMESTAMP) as LOAD_TSTMP" ,\
   "pyspark_data_action"
)
# Shortcut_to_PET_TRAINING_RESERVATION1.write.saveAsTable(f'{raw}.PET_TRAINING_RESERVATION', mode = 'overwrite')
spark.sql("""set spark.sql.legacy.timeParserPolicy = LEGACY""")

try:
  primary_key = """source.PET_TRAINING_RESERVATION_ID = target.PET_TRAINING_RESERVATION_ID"""
  refined_perf_table = f"{sensitive}.legacy_PET_TRAINING_RESERVATION"
  executeMerge(Shortcut_to_PET_TRAINING_RESERVATION1, refined_perf_table, primary_key)
  logger.info(f"Merge with {refined_perf_table} completed]")
  logPrevRunDt("legacy_PET_TRAINING_RESERVATION", "legacy_PET_TRAINING_RESERVATION", "Completed", "N/A", f"{raw}.log_run_details")
except Exception as e:
  logPrevRunDt("legacy_PET_TRAINING_RESERVATION", "legacy_PET_TRAINING_RESERVATION","Failed",str(e), f"{raw}.log_run_details", )
  raise e
	