#Code converted on 2023-08-09 16:37:36
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from Datalake.utils.genericUtilities import *
from Datalake.utils.configs import *
from Datalake.utils.mergeUtils import *
from Datalake.utils.logger import *
# COMMAND ----------

parser = argparse.ArgumentParser()
spark = SparkSession.getActiveSession()
parser.add_argument('env', type=str, help='Env Variable')
args = parser.parse_args()
env = args.env
# env = 'dev'

if env is None or env == '':
    raise ValueError('env is not set')

refine = getEnvPrefix(env) + 'refine'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'

# Set global variables
starttime = datetime.now() #start timestamp of the script


# COMMAND ----------
# Processing node SQ_Shortcut_to_TRAINING_CLASS_PROMO, type SOURCE 
# COLUMN COUNT: 10

SQ_Shortcut_to_TRAINING_CLASS_PROMO = spark.sql(f"""SELECT
TRAINING_CLASS_PROMO_ID,
TRAINING_CLASS_PROMO_NAME,
TRAINING_CLASS_PROMO_DESC,
TRAINING_CLASS_TYPE_ID,
COUNTRY_CD,
START_DT,
END_DT,
DISC_AMT,
DELETED_FLAG,
LOAD_TSTMP
FROM {legacy}.TRAINING_CLASS_PROMO""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node SQ_Shortcut_to_TRAINING_CLASS_PROMOTION_PRE, type SOURCE 
# COLUMN COUNT: 9

SQ_Shortcut_to_TRAINING_CLASS_PROMOTION_PRE = spark.sql(f"""SELECT
CLASS_PROMOTION_ID,
NAME,
DESCRIPTION,
DISCOUNT_AMOUNT,
START_DATE,
END_DATE,
CLASS_TYPE_ID,
COUNTRY_ABBREVIATION,
LOAD_TSTMP
FROM {raw}.TRAINING_CLASS_PROMOTION_PRE""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node JNR_TRAINING_CLASS_PROMO, type JOINER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 19

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_TRAINING_CLASS_PROMO_temp = SQ_Shortcut_to_TRAINING_CLASS_PROMO.toDF(*["SQ_Shortcut_to_TRAINING_CLASS_PROMO___" + col for col in SQ_Shortcut_to_TRAINING_CLASS_PROMO.columns])
SQ_Shortcut_to_TRAINING_CLASS_PROMOTION_PRE_temp = SQ_Shortcut_to_TRAINING_CLASS_PROMOTION_PRE.toDF(*["SQ_Shortcut_to_TRAINING_CLASS_PROMOTION_PRE___" + col for col in SQ_Shortcut_to_TRAINING_CLASS_PROMOTION_PRE.columns])

JNR_TRAINING_CLASS_PROMO = SQ_Shortcut_to_TRAINING_CLASS_PROMO_temp.join(SQ_Shortcut_to_TRAINING_CLASS_PROMOTION_PRE_temp,[SQ_Shortcut_to_TRAINING_CLASS_PROMO_temp.SQ_Shortcut_to_TRAINING_CLASS_PROMO___TRAINING_CLASS_PROMO_ID == SQ_Shortcut_to_TRAINING_CLASS_PROMOTION_PRE_temp.SQ_Shortcut_to_TRAINING_CLASS_PROMOTION_PRE___CLASS_PROMOTION_ID],'right_outer').selectExpr( \
	"SQ_Shortcut_to_TRAINING_CLASS_PROMOTION_PRE___CLASS_PROMOTION_ID as CLASS_PROMOTION_ID", \
	"SQ_Shortcut_to_TRAINING_CLASS_PROMOTION_PRE___NAME as NAME", \
	"SQ_Shortcut_to_TRAINING_CLASS_PROMOTION_PRE___DESCRIPTION as DESCRIPTION", \
	"SQ_Shortcut_to_TRAINING_CLASS_PROMOTION_PRE___DISCOUNT_AMOUNT as DISCOUNT_AMOUNT", \
	"SQ_Shortcut_to_TRAINING_CLASS_PROMOTION_PRE___START_DATE as START_DATE", \
	"SQ_Shortcut_to_TRAINING_CLASS_PROMOTION_PRE___END_DATE as END_DATE", \
	"SQ_Shortcut_to_TRAINING_CLASS_PROMOTION_PRE___CLASS_TYPE_ID as CLASS_TYPE_ID", \
	"SQ_Shortcut_to_TRAINING_CLASS_PROMOTION_PRE___COUNTRY_ABBREVIATION as COUNTRY_ABBREVIATION", \
	"SQ_Shortcut_to_TRAINING_CLASS_PROMOTION_PRE___LOAD_TSTMP as LOAD_TSTMP", \
	"SQ_Shortcut_to_TRAINING_CLASS_PROMO___TRAINING_CLASS_PROMO_ID as lkp_TRAINING_CLASS_PROMO_ID", \
	"SQ_Shortcut_to_TRAINING_CLASS_PROMO___TRAINING_CLASS_PROMO_NAME as lkp_TRAINING_CLASS_PROMO_NAME", \
	"SQ_Shortcut_to_TRAINING_CLASS_PROMO___TRAINING_CLASS_PROMO_DESC as lkp_TRAINING_CLASS_PROMO_DESC", \
	"SQ_Shortcut_to_TRAINING_CLASS_PROMO___TRAINING_CLASS_TYPE_ID as lkp_TRAINING_CLASS_TYPE_ID", \
	"SQ_Shortcut_to_TRAINING_CLASS_PROMO___COUNTRY_CD as lkp_COUNTRY_CD", \
	"SQ_Shortcut_to_TRAINING_CLASS_PROMO___START_DT as lkp_START_DT", \
	"SQ_Shortcut_to_TRAINING_CLASS_PROMO___END_DT as lkp_END_DT", \
	"SQ_Shortcut_to_TRAINING_CLASS_PROMO___DISC_AMT as lkp_DISC_AMT", \
	"SQ_Shortcut_to_TRAINING_CLASS_PROMO___DELETED_FLAG as lkp_DELETED_FLAG", \
	"SQ_Shortcut_to_TRAINING_CLASS_PROMO___LOAD_TSTMP as lkp_LOAD_TSTMP")

# COMMAND ----------
# Processing node FIL_UNCHANGED_RECORDS, type FILTER 
# COLUMN COUNT: 19

# for each involved DataFrame, append the dataframe name to each column
JNR_TRAINING_CLASS_PROMO_temp = JNR_TRAINING_CLASS_PROMO.toDF(*["JNR_TRAINING_CLASS_PROMO___" + col for col in JNR_TRAINING_CLASS_PROMO.columns])

FIL_UNCHANGED_RECORDS = JNR_TRAINING_CLASS_PROMO_temp.selectExpr( \
	"JNR_TRAINING_CLASS_PROMO___CLASS_PROMOTION_ID as CLASS_PROMOTION_ID", \
	"JNR_TRAINING_CLASS_PROMO___NAME as NAME", \
	"JNR_TRAINING_CLASS_PROMO___DESCRIPTION as DESCRIPTION", \
	"JNR_TRAINING_CLASS_PROMO___DISCOUNT_AMOUNT as DISCOUNT_AMOUNT", \
	"JNR_TRAINING_CLASS_PROMO___START_DATE as START_DATE", \
	"JNR_TRAINING_CLASS_PROMO___END_DATE as END_DATE", \
	"JNR_TRAINING_CLASS_PROMO___CLASS_TYPE_ID as CLASS_TYPE_ID", \
	"JNR_TRAINING_CLASS_PROMO___COUNTRY_ABBREVIATION as COUNTRY_ABBREVIATION", \
	"JNR_TRAINING_CLASS_PROMO___LOAD_TSTMP as LOAD_TSTMP", \
	"JNR_TRAINING_CLASS_PROMO___lkp_TRAINING_CLASS_PROMO_ID as lkp_TRAINING_CLASS_PROMO_ID", \
	"JNR_TRAINING_CLASS_PROMO___lkp_TRAINING_CLASS_PROMO_NAME as lkp_TRAINING_CLASS_PROMO_NAME", \
	"JNR_TRAINING_CLASS_PROMO___lkp_TRAINING_CLASS_PROMO_DESC as lkp_TRAINING_CLASS_PROMO_DESC", \
	"JNR_TRAINING_CLASS_PROMO___lkp_TRAINING_CLASS_TYPE_ID as lkp_TRAINING_CLASS_TYPE_ID", \
	"JNR_TRAINING_CLASS_PROMO___lkp_COUNTRY_CD as lkp_COUNTRY_CD", \
	"JNR_TRAINING_CLASS_PROMO___lkp_START_DT as lkp_START_DT", \
	"JNR_TRAINING_CLASS_PROMO___lkp_END_DT as lkp_END_DT", \
	"JNR_TRAINING_CLASS_PROMO___lkp_DISC_AMT as lkp_DISC_AMT", \
	"JNR_TRAINING_CLASS_PROMO___lkp_DELETED_FLAG as lkp_DELETED_FLAG", \
	"JNR_TRAINING_CLASS_PROMO___lkp_LOAD_TSTMP as lkp_LOAD_TSTMP").filter("lkp_TRAINING_CLASS_PROMO_ID IS NULL OR ( lkp_TRAINING_CLASS_PROMO_ID IS NOT NULL AND ( IF (LTRIM ( RTRIM ( NAME ) ) IS NULL, ' ', LTRIM ( RTRIM ( NAME ) )) != IF (LTRIM ( RTRIM ( lkp_TRAINING_CLASS_PROMO_NAME ) ) IS NULL, ' ', LTRIM ( RTRIM ( lkp_TRAINING_CLASS_PROMO_NAME ) )) OR IF (LTRIM ( RTRIM ( DESCRIPTION ) ) IS NULL, ' ', LTRIM ( RTRIM ( DESCRIPTION ) )) != IF (LTRIM ( RTRIM ( lkp_TRAINING_CLASS_PROMO_DESC ) ) IS NULL, ' ', LTRIM ( RTRIM ( lkp_TRAINING_CLASS_PROMO_DESC ) )) OR IF (DISCOUNT_AMOUNT IS NULL, 999, DISCOUNT_AMOUNT) != IF (lkp_DISC_AMT IS NULL, 999, lkp_DISC_AMT) OR IF (START_DATE IS NULL, To_DATE ( '12-31-9999' , 'MM-DD-YYYY' ), START_DATE) != IF (lkp_START_DT IS NULL, To_DATE ( '12-31-9999' , 'MM-DD-YYYY' ), lkp_START_DT) OR IF (END_DATE IS NULL, To_DATE ( '12-31-9999' , 'MM-DD-YYYY' ), END_DATE) != IF (lkp_END_DT IS NULL, To_DATE ( '12-31-9999' , 'MM-DD-YYYY' ), lkp_END_DT) OR IF (CLASS_TYPE_ID IS NULL, 999, CLASS_TYPE_ID) != IF (lkp_TRAINING_CLASS_TYPE_ID IS NULL, 999, lkp_TRAINING_CLASS_TYPE_ID) OR IF (LTRIM ( RTRIM ( COUNTRY_ABBREVIATION ) ) IS NULL, ' ', LTRIM ( RTRIM ( COUNTRY_ABBREVIATION ) )) != IF (LTRIM ( RTRIM ( lkp_COUNTRY_CD ) ) IS NULL, ' ', LTRIM ( RTRIM ( lkp_COUNTRY_CD ) )) ) )").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node EXP_UPDATE_VALIDATOR, type EXPRESSION 
# COLUMN COUNT: 12

# for each involved DataFrame, append the dataframe name to each column
FIL_UNCHANGED_RECORDS_temp = FIL_UNCHANGED_RECORDS.toDF(*["FIL_UNCHANGED_RECORDS___" + col for col in FIL_UNCHANGED_RECORDS.columns])

EXP_UPDATE_VALIDATOR = FIL_UNCHANGED_RECORDS_temp.selectExpr( \
	"FIL_UNCHANGED_RECORDS___sys_row_id as sys_row_id", \
	"FIL_UNCHANGED_RECORDS___CLASS_PROMOTION_ID as CLASS_PROMOTION_ID", \
	"FIL_UNCHANGED_RECORDS___NAME as NAME", \
	"FIL_UNCHANGED_RECORDS___DESCRIPTION as DESCRIPTION", \
	"FIL_UNCHANGED_RECORDS___DISCOUNT_AMOUNT as DISCOUNT_AMOUNT", \
	"FIL_UNCHANGED_RECORDS___START_DATE as START_DATE", \
	"FIL_UNCHANGED_RECORDS___END_DATE as END_DATE", \
	"FIL_UNCHANGED_RECORDS___CLASS_TYPE_ID as CLASS_TYPE_ID", \
	"FIL_UNCHANGED_RECORDS___COUNTRY_ABBREVIATION as COUNTRY_ABBREVIATION", \
	"CURRENT_TIMESTAMP as UPDATE_TSTMP", \
	"IF (FIL_UNCHANGED_RECORDS___lkp_LOAD_TSTMP IS NULL, CURRENT_TIMESTAMP, FIL_UNCHANGED_RECORDS___lkp_LOAD_TSTMP) as LOAD_TSTMP", \
	"IF (FIL_UNCHANGED_RECORDS___lkp_TRAINING_CLASS_PROMO_ID IS NULL, 1, 2) as UPDATE_FLAG", \
	"0 as DELETE_FLAG" \
)

# COMMAND ----------
# Processing node UPD_INSERT_UPDATE, type UPDATE_STRATEGY 
# COLUMN COUNT: 12

# for each involved DataFrame, append the dataframe name to each column
EXP_UPDATE_VALIDATOR_temp = EXP_UPDATE_VALIDATOR.toDF(*["EXP_UPDATE_VALIDATOR___" + col for col in EXP_UPDATE_VALIDATOR.columns])

UPD_INSERT_UPDATE = EXP_UPDATE_VALIDATOR_temp.selectExpr( \
	"EXP_UPDATE_VALIDATOR___CLASS_PROMOTION_ID as CLASS_PROMOTION_ID", \
	"EXP_UPDATE_VALIDATOR___NAME as NAME", \
	"EXP_UPDATE_VALIDATOR___DESCRIPTION as DESCRIPTION", \
	"EXP_UPDATE_VALIDATOR___DISCOUNT_AMOUNT as DISCOUNT_AMOUNT", \
	"EXP_UPDATE_VALIDATOR___START_DATE as START_DATE", \
	"EXP_UPDATE_VALIDATOR___END_DATE as END_DATE", \
	"EXP_UPDATE_VALIDATOR___CLASS_TYPE_ID as CLASS_TYPE_ID", \
	"EXP_UPDATE_VALIDATOR___COUNTRY_ABBREVIATION as COUNTRY_ABBREVIATION", \
	"EXP_UPDATE_VALIDATOR___UPDATE_TSTMP as UPDATE_TSTMP", \
	"EXP_UPDATE_VALIDATOR___LOAD_TSTMP as LOAD_TSTMP", \
	"EXP_UPDATE_VALIDATOR___UPDATE_FLAG as UPDATE_FLAG", \
	"EXP_UPDATE_VALIDATOR___DELETE_FLAG as DELETE_FLAG") \
	.withColumn('pyspark_data_action', when(col('UPDATE_FLAG') ==(lit(1)) , lit(0)) .when(col('UPDATE_FLAG') ==(lit(2)) , lit(1)))

# COMMAND ----------
# Processing node Shortcut_to_TRAINING_CLASS_PROMO1, type TARGET 
# COLUMN COUNT: 11


Shortcut_to_TRAINING_CLASS_PROMO1 = UPD_INSERT_UPDATE.selectExpr( \
	"CAST(CLASS_PROMOTION_ID AS BIGINT) as TRAINING_CLASS_PROMO_ID", \
	"CAST(NAME AS STRING) as TRAINING_CLASS_PROMO_NAME", \
	"CAST(DESCRIPTION AS STRING) as TRAINING_CLASS_PROMO_DESC", \
	"CAST(CLASS_TYPE_ID AS BIGINT) as TRAINING_CLASS_TYPE_ID", \
	"CAST(COUNTRY_ABBREVIATION AS STRING) as COUNTRY_CD", \
	"CAST(START_DATE AS DATE) as START_DT", \
	"CAST(END_DATE AS DATE) as END_DT", \
	"CAST(DISCOUNT_AMOUNT AS DECIMAL(19,4)) as DISC_AMT", \
	"CAST(DELETE_FLAG AS TINYINT) as DELETED_FLAG", \
	"CAST(UPDATE_TSTMP AS TIMESTAMP) as UPDATE_TSTMP", \
	"CAST(LOAD_TSTMP AS TIMESTAMP) as LOAD_TSTMP", \
	"pyspark_data_action as pyspark_data_action" \
)
# Shortcut_to_TRAINING_CLASS_PROMO1.write.saveAsTable(f'{raw}.TRAINING_CLASS_PROMO', mode = 'overwrite')
spark.sql("""set spark.sql.legacy.timeParserPolicy = LEGACY""")

try:
  primary_key = """source.TRAINING_CLASS_PROMO_ID = target.TRAINING_CLASS_PROMO_ID"""
  refined_perf_table = f"{legacy}.TRAINING_CLASS_PROMO"
  executeMerge(Shortcut_to_TRAINING_CLASS_PROMO1, refined_perf_table, primary_key)
  logger.info(f"Merge with {refined_perf_table} completed]")
  logPrevRunDt("TRAINING_CLASS_PROMO", "TRAINING_CLASS_PROMO", "Completed", "N/A", f"{raw}.log_run_details")
except Exception as e:
  logPrevRunDt("TRAINING_CLASS_PROMO", "TRAINING_CLASS_PROMO","Failed",str(e), f"{raw}.log_run_details", )
  raise e
	