#Code converted on 2023-08-09 10:48:08
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from Datalake.utils.genericUtilities import *
from Datalake.utils.configs import *
from Datalake.utils.mergeUtils import *
from Datalake.utils.logger import *
# COMMAND ----------

parser = argparse.ArgumentParser()
spark = SparkSession.getActiveSession()
parser.add_argument('env', type=str, help='Env Variable')
args = parser.parse_args()
env = args.env
# env = 'dev'

if env is None or env == '':
    raise ValueError('env is not set')

refine = getEnvPrefix(env) + 'refine'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'

# Set global variables
starttime = datetime.now() #start timestamp of the script


# COMMAND ----------
# Processing node SQ_Shortcut_to_TRAINING_RESERVATION_HISTORY_PRE, type SOURCE 
# COLUMN COUNT: 12

SQ_Shortcut_to_TRAINING_RESERVATION_HISTORY_PRE = spark.sql(f"""SELECT
RESERVATION_HISTORY_ID,
RESERVATION_ID,
STORE_CLASS_ID,
CLASS_START_DATE_TIME,
CLASS_TYPE_NAME,
CLASS_DURATION_WEEKS,
CLASS_PRICE,
CLASS_UPC,
TRAINER_NAME,
CREATE_DATE_TIME,
TRAINING_PACKAGE_NAME,
TRAINING_PACKAGE_OPTION_NAME
FROM {raw}.TRAINING_RESERVATION_HISTORY_PRE""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node SQ_Shortcut_to_TRAINING_RESERVATION_HISTORY, type SOURCE 
# COLUMN COUNT: 3

SQ_Shortcut_to_TRAINING_RESERVATION_HISTORY = spark.sql(f"""SELECT
TRAINING_RESERVATION_HISTORY_ID,
SRC_CREATE_TSTMP,
LOAD_TSTMP
FROM {legacy}.TRAINING_RESERVATION_HISTORY""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node JNR_TRAINING_RESERVATION_HISTORY, type JOINER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 15

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_TRAINING_RESERVATION_HISTORY_temp = SQ_Shortcut_to_TRAINING_RESERVATION_HISTORY.toDF(*["SQ_Shortcut_to_TRAINING_RESERVATION_HISTORY___" + col for col in SQ_Shortcut_to_TRAINING_RESERVATION_HISTORY.columns])
SQ_Shortcut_to_TRAINING_RESERVATION_HISTORY_PRE_temp = SQ_Shortcut_to_TRAINING_RESERVATION_HISTORY_PRE.toDF(*["SQ_Shortcut_to_TRAINING_RESERVATION_HISTORY_PRE___" + col for col in SQ_Shortcut_to_TRAINING_RESERVATION_HISTORY_PRE.columns])

JNR_TRAINING_RESERVATION_HISTORY = SQ_Shortcut_to_TRAINING_RESERVATION_HISTORY_temp.join(SQ_Shortcut_to_TRAINING_RESERVATION_HISTORY_PRE_temp,[SQ_Shortcut_to_TRAINING_RESERVATION_HISTORY_temp.SQ_Shortcut_to_TRAINING_RESERVATION_HISTORY___TRAINING_RESERVATION_HISTORY_ID == SQ_Shortcut_to_TRAINING_RESERVATION_HISTORY_PRE_temp.SQ_Shortcut_to_TRAINING_RESERVATION_HISTORY_PRE___RESERVATION_HISTORY_ID],'right_outer').selectExpr( \
	"SQ_Shortcut_to_TRAINING_RESERVATION_HISTORY_PRE___RESERVATION_HISTORY_ID as RESERVATION_HISTORY_ID", \
	"SQ_Shortcut_to_TRAINING_RESERVATION_HISTORY_PRE___RESERVATION_ID as RESERVATION_ID", \
	"SQ_Shortcut_to_TRAINING_RESERVATION_HISTORY_PRE___STORE_CLASS_ID as STORE_CLASS_ID", \
	"SQ_Shortcut_to_TRAINING_RESERVATION_HISTORY_PRE___CLASS_START_DATE_TIME as CLASS_START_DATE_TIME", \
	"SQ_Shortcut_to_TRAINING_RESERVATION_HISTORY_PRE___CLASS_TYPE_NAME as CLASS_TYPE_NAME", \
	"SQ_Shortcut_to_TRAINING_RESERVATION_HISTORY_PRE___CLASS_DURATION_WEEKS as CLASS_DURATION_WEEKS", \
	"SQ_Shortcut_to_TRAINING_RESERVATION_HISTORY_PRE___CLASS_PRICE as CLASS_PRICE", \
	"SQ_Shortcut_to_TRAINING_RESERVATION_HISTORY_PRE___CLASS_UPC as CLASS_UPC", \
	"SQ_Shortcut_to_TRAINING_RESERVATION_HISTORY_PRE___TRAINER_NAME as TRAINER_NAME", \
	"SQ_Shortcut_to_TRAINING_RESERVATION_HISTORY_PRE___CREATE_DATE_TIME as CREATE_DATE_TIME", \
	"SQ_Shortcut_to_TRAINING_RESERVATION_HISTORY_PRE___TRAINING_PACKAGE_NAME as TRAINING_PACKAGE_NAME", \
	"SQ_Shortcut_to_TRAINING_RESERVATION_HISTORY_PRE___TRAINING_PACKAGE_OPTION_NAME as TRAINING_PACKAGE_OPTION_NAME", \
	"SQ_Shortcut_to_TRAINING_RESERVATION_HISTORY___TRAINING_RESERVATION_HISTORY_ID as lkp_TRAINING_RESERVATION_HISTORY_ID", \
	"SQ_Shortcut_to_TRAINING_RESERVATION_HISTORY___SRC_CREATE_TSTMP as lkp_SRC_CREATE_TSTMP", \
	"SQ_Shortcut_to_TRAINING_RESERVATION_HISTORY___LOAD_TSTMP as lkp_LOAD_TSTMP")

# COMMAND ----------
# Processing node FIL_UNCHANGED_RECORDS, type FILTER 
# COLUMN COUNT: 15

# for each involved DataFrame, append the dataframe name to each column
JNR_TRAINING_RESERVATION_HISTORY_temp = JNR_TRAINING_RESERVATION_HISTORY.toDF(*["JNR_TRAINING_RESERVATION_HISTORY___" + col for col in JNR_TRAINING_RESERVATION_HISTORY.columns])

FIL_UNCHANGED_RECORDS = JNR_TRAINING_RESERVATION_HISTORY_temp.selectExpr( \
	"JNR_TRAINING_RESERVATION_HISTORY___RESERVATION_HISTORY_ID as RESERVATION_HISTORY_ID", \
	"JNR_TRAINING_RESERVATION_HISTORY___RESERVATION_ID as RESERVATION_ID", \
	"JNR_TRAINING_RESERVATION_HISTORY___STORE_CLASS_ID as STORE_CLASS_ID", \
	"JNR_TRAINING_RESERVATION_HISTORY___CLASS_START_DATE_TIME as CLASS_START_DATE_TIME", \
	"JNR_TRAINING_RESERVATION_HISTORY___CLASS_TYPE_NAME as CLASS_TYPE_NAME", \
	"JNR_TRAINING_RESERVATION_HISTORY___CLASS_DURATION_WEEKS as CLASS_DURATION_WEEKS", \
	"JNR_TRAINING_RESERVATION_HISTORY___CLASS_PRICE as CLASS_PRICE", \
	"JNR_TRAINING_RESERVATION_HISTORY___CLASS_UPC as CLASS_UPC", \
	"JNR_TRAINING_RESERVATION_HISTORY___TRAINER_NAME as TRAINER_NAME", \
	"JNR_TRAINING_RESERVATION_HISTORY___CREATE_DATE_TIME as CREATE_DATE_TIME", \
	"JNR_TRAINING_RESERVATION_HISTORY___TRAINING_PACKAGE_NAME as TRAINING_PACKAGE_NAME", \
	"JNR_TRAINING_RESERVATION_HISTORY___TRAINING_PACKAGE_OPTION_NAME as TRAINING_PACKAGE_OPTION_NAME", \
	"JNR_TRAINING_RESERVATION_HISTORY___lkp_TRAINING_RESERVATION_HISTORY_ID as lkp_TRAINING_RESERVATION_HISTORY_ID", \
	"JNR_TRAINING_RESERVATION_HISTORY___lkp_SRC_CREATE_TSTMP as lkp_SRC_CREATE_TSTMP", \
	"JNR_TRAINING_RESERVATION_HISTORY___lkp_LOAD_TSTMP as lkp_LOAD_TSTMP").filter("lkp_TRAINING_RESERVATION_HISTORY_ID IS NULL OR ( lkp_TRAINING_RESERVATION_HISTORY_ID IS NOT NULL AND IF (CREATE_DATE_TIME IS NULL, To_DATE ( '12-31-9999' , 'MM-DD-YYYY' ), CREATE_DATE_TIME) != IF (lkp_SRC_CREATE_TSTMP IS NULL, To_DATE ( '12-31-9999' , 'MM-DD-YYYY' ), lkp_SRC_CREATE_TSTMP) )").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node EXP_UPDATE_VALIDATOR, type EXPRESSION 
# COLUMN COUNT: 15

# for each involved DataFrame, append the dataframe name to each column
FIL_UNCHANGED_RECORDS_temp = FIL_UNCHANGED_RECORDS.toDF(*["FIL_UNCHANGED_RECORDS___" + col for col in FIL_UNCHANGED_RECORDS.columns])

EXP_UPDATE_VALIDATOR = FIL_UNCHANGED_RECORDS_temp.selectExpr( \
	"FIL_UNCHANGED_RECORDS___sys_row_id as sys_row_id", \
	"FIL_UNCHANGED_RECORDS___RESERVATION_HISTORY_ID as RESERVATION_HISTORY_ID", \
	"FIL_UNCHANGED_RECORDS___RESERVATION_ID as RESERVATION_ID", \
	"FIL_UNCHANGED_RECORDS___STORE_CLASS_ID as STORE_CLASS_ID", \
	"FIL_UNCHANGED_RECORDS___CLASS_START_DATE_TIME as CLASS_START_DATE_TIME", \
	"FIL_UNCHANGED_RECORDS___CLASS_TYPE_NAME as CLASS_TYPE_NAME", \
	"FIL_UNCHANGED_RECORDS___CLASS_DURATION_WEEKS as CLASS_DURATION_WEEKS", \
	"FIL_UNCHANGED_RECORDS___CLASS_PRICE as CLASS_PRICE", \
	"BIGINT(FIL_UNCHANGED_RECORDS___CLASS_UPC) as o_CLASS_UPC", \
	"FIL_UNCHANGED_RECORDS___TRAINER_NAME as TRAINER_NAME", \
	"FIL_UNCHANGED_RECORDS___CREATE_DATE_TIME as CREATE_DATE_TIME", \
	"FIL_UNCHANGED_RECORDS___TRAINING_PACKAGE_NAME as TRAINING_PACKAGE_NAME", \
	"FIL_UNCHANGED_RECORDS___TRAINING_PACKAGE_OPTION_NAME as TRAINING_PACKAGE_OPTION_NAME", \
	"CURRENT_TIMESTAMP as UPDATE_TSTMP", \
	"IF (FIL_UNCHANGED_RECORDS___lkp_LOAD_TSTMP IS NULL, CURRENT_TIMESTAMP, FIL_UNCHANGED_RECORDS___lkp_LOAD_TSTMP) as LOAD_TSTMP", \
	"IF (FIL_UNCHANGED_RECORDS___lkp_TRAINING_RESERVATION_HISTORY_ID IS NULL, 1, 2) as UPDATE_FLAG" \
)

# COMMAND ----------
# Processing node UPD_INSERT_UPDATE, type UPDATE_STRATEGY . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 15

# for each involved DataFrame, append the dataframe name to each column
EXP_UPDATE_VALIDATOR_temp = EXP_UPDATE_VALIDATOR.toDF(*["EXP_UPDATE_VALIDATOR___" + col for col in EXP_UPDATE_VALIDATOR.columns])

UPD_INSERT_UPDATE = EXP_UPDATE_VALIDATOR_temp.selectExpr( \
	"EXP_UPDATE_VALIDATOR___RESERVATION_HISTORY_ID as RESERVATION_HISTORY_ID", \
	"EXP_UPDATE_VALIDATOR___RESERVATION_ID as RESERVATION_ID", \
	"EXP_UPDATE_VALIDATOR___STORE_CLASS_ID as STORE_CLASS_ID", \
	"EXP_UPDATE_VALIDATOR___CLASS_START_DATE_TIME as CLASS_START_DATE_TIME", \
	"EXP_UPDATE_VALIDATOR___CLASS_TYPE_NAME as CLASS_TYPE_NAME", \
	"EXP_UPDATE_VALIDATOR___CLASS_DURATION_WEEKS as CLASS_DURATION_WEEKS", \
	"EXP_UPDATE_VALIDATOR___CLASS_PRICE as CLASS_PRICE", \
	"EXP_UPDATE_VALIDATOR___o_CLASS_UPC as CLASS_UPC", \
	"EXP_UPDATE_VALIDATOR___TRAINER_NAME as TRAINER_NAME", \
	"EXP_UPDATE_VALIDATOR___CREATE_DATE_TIME as CREATE_DATE_TIME", \
	"EXP_UPDATE_VALIDATOR___TRAINING_PACKAGE_NAME as TRAINING_PACKAGE_NAME", \
	"EXP_UPDATE_VALIDATOR___TRAINING_PACKAGE_OPTION_NAME as TRAINING_PACKAGE_OPTION_NAME", \
	"EXP_UPDATE_VALIDATOR___UPDATE_TSTMP as UPDATE_TSTMP", \
	"EXP_UPDATE_VALIDATOR___LOAD_TSTMP as LOAD_TSTMP", \
	"EXP_UPDATE_VALIDATOR___UPDATE_FLAG as UPDATE_FLAG") \
	.withColumn('pyspark_data_action', when(col('UPDATE_FLAG') ==(lit(1)) , lit(0)) .when(col('UPDATE_FLAG') ==(lit(2)) , lit(1)))

# COMMAND ----------
# Processing node Shortcut_to_TRAINING_RESERVATION_HISTORY1, type TARGET 
# COLUMN COUNT: 14


Shortcut_to_TRAINING_RESERVATION_HISTORY1 = UPD_INSERT_UPDATE.selectExpr( \
	"CAST(RESERVATION_HISTORY_ID AS INT) as TRAINING_RESERVATION_HISTORY_ID", \
	"CAST(RESERVATION_ID AS INT) as TRAINING_RESERVATION_ID", \
	"CAST(STORE_CLASS_ID AS INT) as TRAINING_STORE_CLASS_ID", \
	"CAST(TRAINING_PACKAGE_NAME AS STRING) as TRAINING_PACKAGE_NAME", \
	"CAST(TRAINING_PACKAGE_OPTION_NAME AS STRING) as TRAINING_PACKAGE_OPTION_NAME", \
	"CAST(CLASS_TYPE_NAME AS STRING) as CLASS_TYPE_NAME", \
	"CAST(TRAINER_NAME AS STRING) as TRAINER_NAME", \
	"CAST(CLASS_DURATION_WEEKS AS INT) as CLASS_DURATION_WEEKS", \
	"CAST(CLASS_START_DATE_TIME AS TIMESTAMP) as CLASS_START_TSTMP", \
	"CAST(CLASS_UPC as BIGINT) as UPC_ID", \
	"CAST(CLASS_PRICE AS DECIMAL(19,4)) as CLASS_PRICE_AMT", \
	"CAST(CREATE_DATE_TIME AS TIMESTAMP) as SRC_CREATE_TSTMP", \
	"CAST(UPDATE_TSTMP AS TIMESTAMP) as UPDATE_TSTMP", \
	"CAST(LOAD_TSTMP AS TIMESTAMP) as LOAD_TSTMP", \
	"pyspark_data_action as pyspark_data_action" \
)
# Shortcut_to_TRAINING_RESERVATION_HISTORY1.write.saveAsTable(f'{raw}.TRAINING_RESERVATION_HISTORY', mode = 'overwrite')
spark.sql("""set spark.sql.legacy.timeParserPolicy = LEGACY""")

try:
  primary_key = """source.TRAINING_RESERVATION_HISTORY_ID = target.TRAINING_RESERVATION_HISTORY_ID"""
  refined_perf_table = f"{legacy}.TRAINING_RESERVATION_HISTORY"
  executeMerge(Shortcut_to_TRAINING_RESERVATION_HISTORY1, refined_perf_table, primary_key)
  logger.info(f"Merge with {refined_perf_table} completed]")
  logPrevRunDt("TRAINING_RESERVATION_HISTORY", "TRAINING_RESERVATION_HISTORY", "Completed", "N/A", f"{raw}.log_run_details")
except Exception as e:
  logPrevRunDt("TRAINING_RESERVATION_HISTORY", "TRAINING_RESERVATION_HISTORY","Failed",str(e), f"{raw}.log_run_details", )
  raise e
	