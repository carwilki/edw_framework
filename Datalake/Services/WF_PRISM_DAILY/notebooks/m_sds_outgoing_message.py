#Code converted on 2023-07-24 08:28:26
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from Datalake.utils.genericUtilities import *
from Datalake.utils.configs import *
from Datalake.utils.mergeUtils import *
from Datalake.utils.logger import *
# COMMAND ----------

parser = argparse.ArgumentParser()
spark = SparkSession.getActiveSession()
parser.add_argument('env', type=str, help='Env Variable')
args = parser.parse_args()
env = args.env

if env is None or env == '':
    raise ValueError('env is not set')

refine = getEnvPrefix(env) + 'refine'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'


# COMMAND ----------
# Processing node SQ_Shortcut_to_SDS_OUTGOING_MESSAGE, type SOURCE 
# COLUMN COUNT: 5

SQ_Shortcut_to_SDS_OUTGOING_MESSAGE = spark.sql(f"""SELECT
SDS_OUTGOING_MESSAGE_ID,
SDS_SYSTEM_MODIFIED_TSTMP,
SDS_LAST_MODIFIED_TSTMP,
SDS_CREATED_TSTMP,
LOAD_TSTMP
FROM {legacy}.SDS_OUTGOING_MESSAGE""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_C_PRE, type SOURCE 
# COLUMN COUNT: 39

SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_C_PRE = spark.sql(f"""SELECT
ID,
OWNER_ID,
IS_DELETED,
NAME,
CURRENCY_ISO_CODE,
RECORD_TYPE_ID,
CREATED_DATE,
CREATED_BY_ID,
LAST_MODIFIED_DATE,
LAST_MODIFIED_BY_ID,
SYSTEM_MOD_STAMP,
LAST_VIEWED_DATE,
LAST_REFERENCED_DATE,
ADDITIONAL_HEADERS_C,
ALLOWED_TO_RESEND_C,
BODY_C,
CLASS_NAME_C,
CONTENT_TYPE_C,
FILE_NAME_C,
LAST_TRY_C,
MAX_NUM_OF_TRIES_C,
MESSAGE_TYPE_C,
METHOD_C,
NEXT_TRY_C,
NUMBER_OF_TRIES_C,
OBJECT_ID_C,
OBJECT_TYPE_NAME_C,
PARAM1_C,
PARAM2_C,
RESPONSE_BODY_C,
STATUS_C,
URL_PARAMETERS_C,
URL_C,
PSVC_SERVICE_APPOINTMENT_C,
PSVC_MESSAGE_LABEL_C,
GROUP_C,
IS_MASTER_C,
PARENT_OUTGOING_MESSAGE_C,
LOAD_TSTMP
FROM {raw}.SDS_OUTGOING_MESSAGE_C_PRE""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node JNR_SDS_OUTGOING_MESSAGE, type JOINER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 44

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_C_PRE_temp = SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_C_PRE.toDF(*["SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_C_PRE___" + col for col in SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_C_PRE.columns])
SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_temp = SQ_Shortcut_to_SDS_OUTGOING_MESSAGE.toDF(*["SQ_Shortcut_to_SDS_OUTGOING_MESSAGE___" + col for col in SQ_Shortcut_to_SDS_OUTGOING_MESSAGE.columns])

JNR_SDS_OUTGOING_MESSAGE = SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_temp_C_PRE_temp.join(SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_temp,[SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_C_PRE_temp.SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_C_PRE___ID == SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_temp.SQ_Shortcut_to_SDS_OUTGOING_MESSAGE___SDS_OUTGOING_MESSAGE_ID],'left_outer').selectExpr(
	"SQ_Shortcut_to_SDS_OUTGOING_MESSAGE___SDS_OUTGOING_MESSAGE_ID as i_SDS_OUTGOING_MESSAGE_ID",
	"SQ_Shortcut_to_SDS_OUTGOING_MESSAGE___SDS_SYSTEM_MODIFIED_TSTMP as i_SDS_SYSTEM_MODIFIED_TSTMP",
	"SQ_Shortcut_to_SDS_OUTGOING_MESSAGE___SDS_LAST_MODIFIED_TSTMP as i_SDS_LAST_MODIFIED_TSTMP",
	"SQ_Shortcut_to_SDS_OUTGOING_MESSAGE___SDS_CREATED_TSTMP as i_SDS_CREATED_TSTMP",
	"SQ_Shortcut_to_SDS_OUTGOING_MESSAGE___LOAD_TSTMP as i_LOAD_TSTMP",
	"SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_C_PRE___ID as ID",
	"SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_C_PRE___OWNER_ID as OWNER_ID",
	"SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_C_PRE___IS_DELETED as IS_DELETED",
	"SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_C_PRE___NAME as NAME",
	"SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_C_PRE___CURRENCY_ISO_CODE as CURRENCY_ISO_CODE",
	"SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_C_PRE___RECORD_TYPE_ID as RECORD_TYPE_ID",
	"SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_C_PRE___CREATED_DATE as CREATED_DATE",
	"SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_C_PRE___CREATED_BY_ID as CREATED_BY_ID",
	"SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_C_PRE___LAST_MODIFIED_DATE as LAST_MODIFIED_DATE",
	"SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_C_PRE___LAST_MODIFIED_BY_ID as LAST_MODIFIED_BY_ID",
	"SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_C_PRE___SYSTEM_MOD_STAMP as SYSTEM_MOD_STAMP",
	"SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_C_PRE___LAST_VIEWED_DATE as LAST_VIEWED_DATE",
	"SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_C_PRE___LAST_REFERENCED_DATE as LAST_REFERENCED_DATE",
	"SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_C_PRE___ADDITIONAL_HEADERS_C as ADDITIONAL_HEADERS_C",
	"SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_C_PRE___ALLOWED_TO_RESEND_C as ALLOWED_TO_RESEND_C",
	"SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_C_PRE___BODY_C as BODY_C",
	"SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_C_PRE___CLASS_NAME_C as CLASS_NAME_C",
	"SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_C_PRE___CONTENT_TYPE_C as CONTENT_TYPE_C",
	"SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_C_PRE___FILE_NAME_C as FILE_NAME_C",
	"SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_C_PRE___LAST_TRY_C as LAST_TRY_C",
	"SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_C_PRE___MAX_NUM_OF_TRIES_C as MAX_NUM_OF_TRIES_C",
	"SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_C_PRE___MESSAGE_TYPE_C as MESSAGE_TYPE_C",
	"SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_C_PRE___METHOD_C as METHOD_C",
	"SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_C_PRE___NEXT_TRY_C as NEXT_TRY_C",
	"SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_C_PRE___NUMBER_OF_TRIES_C as NUMBER_OF_TRIES_C",
	"SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_C_PRE___OBJECT_ID_C as OBJECT_ID_C",
	"SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_C_PRE___OBJECT_TYPE_NAME_C as OBJECT_TYPE_NAME_C",
	"SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_C_PRE___PARAM1_C as PARAM1_C",
	"SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_C_PRE___PARAM2_C as PARAM2_C",
	"SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_C_PRE___RESPONSE_BODY_C as RESPONSE_BODY_C",
	"SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_C_PRE___STATUS_C as STATUS_C",
	"SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_C_PRE___URL_PARAMETERS_C as URL_PARAMETERS_C",
	"SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_C_PRE___URL_C as URL_C",
	"SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_C_PRE___PSVC_SERVICE_APPOINTMENT_C as PSVC_SERVICE_APPOINTMENT_C",
	"SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_C_PRE___PSVC_MESSAGE_LABEL_C as PSVC_MESSAGE_LABEL_C",
	"SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_C_PRE___GROUP_C as GROUP_C",
	"SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_C_PRE___IS_MASTER_C as IS_MASTER_C",
	"SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_C_PRE___PARENT_OUTGOING_MESSAGE_C as PARENT_OUTGOING_MESSAGE_C",
	"SQ_Shortcut_to_SDS_OUTGOING_MESSAGE_C_PRE___LOAD_TSTMP as LOAD_TSTMP")

# COMMAND ----------
# Processing node FIL_SDS_OUTGOING_MESSAGE, type FILTER 
# COLUMN COUNT: 43

# for each involved DataFrame, append the dataframe name to each column
JNR_SDS_OUTGOING_MESSAGE_temp = JNR_SDS_OUTGOING_MESSAGE.toDF(*["JNR_SDS_OUTGOING_MESSAGE___" + col for col in JNR_SDS_OUTGOING_MESSAGE.columns])

FIL_SDS_OUTGOING_MESSAGE = JNR_SDS_OUTGOING_MESSAGE_temp.selectExpr(
	"JNR_SDS_OUTGOING_MESSAGE___i_SDS_OUTGOING_MESSAGE_ID as i_SDS_OUTGOING_MESSAGE_ID",
	"JNR_SDS_OUTGOING_MESSAGE___i_SDS_SYSTEM_MODIFIED_TSTMP as i_SDS_SYSTEM_MODIFIED_TSTMP",
	"JNR_SDS_OUTGOING_MESSAGE___i_SDS_LAST_MODIFIED_TSTMP as i_SDS_LAST_MODIFIED_TSTMP",
	"JNR_SDS_OUTGOING_MESSAGE___i_SDS_CREATED_TSTMP as i_SDS_CREATED_TSTMP",
	"JNR_SDS_OUTGOING_MESSAGE___i_LOAD_TSTMP as i_LOAD_TSTMP",
	"JNR_SDS_OUTGOING_MESSAGE___ID as ID",
	"JNR_SDS_OUTGOING_MESSAGE___OWNER_ID as OWNER_ID",
	"JNR_SDS_OUTGOING_MESSAGE___IS_DELETED as IS_DELETED",
	"JNR_SDS_OUTGOING_MESSAGE___NAME as NAME",
	"JNR_SDS_OUTGOING_MESSAGE___CURRENCY_ISO_CODE as CURRENCY_ISO_CODE",
	"JNR_SDS_OUTGOING_MESSAGE___RECORD_TYPE_ID as RECORD_TYPE_ID",
	"JNR_SDS_OUTGOING_MESSAGE___CREATED_DATE as CREATED_DATE",
	"JNR_SDS_OUTGOING_MESSAGE___CREATED_BY_ID as CREATED_BY_ID",
	"JNR_SDS_OUTGOING_MESSAGE___LAST_MODIFIED_DATE as LAST_MODIFIED_DATE",
	"JNR_SDS_OUTGOING_MESSAGE___LAST_MODIFIED_BY_ID as LAST_MODIFIED_BY_ID",
	"JNR_SDS_OUTGOING_MESSAGE___SYSTEM_MOD_STAMP as SYSTEM_MOD_STAMP",
	"JNR_SDS_OUTGOING_MESSAGE___LAST_VIEWED_DATE as LAST_VIEWED_DATE",
	"JNR_SDS_OUTGOING_MESSAGE___LAST_REFERENCED_DATE as LAST_REFERENCED_DATE",
	"JNR_SDS_OUTGOING_MESSAGE___ADDITIONAL_HEADERS_C as ADDITIONAL_HEADERS_C",
	"JNR_SDS_OUTGOING_MESSAGE___ALLOWED_TO_RESEND_C as ALLOWED_TO_RESEND_C",
	"JNR_SDS_OUTGOING_MESSAGE___BODY_C as BODY_C",
	"JNR_SDS_OUTGOING_MESSAGE___CLASS_NAME_C as CLASS_NAME_C",
	"JNR_SDS_OUTGOING_MESSAGE___CONTENT_TYPE_C as CONTENT_TYPE_C",
	"JNR_SDS_OUTGOING_MESSAGE___FILE_NAME_C as FILE_NAME_C",
	"JNR_SDS_OUTGOING_MESSAGE___LAST_TRY_C as LAST_TRY_C",
	"JNR_SDS_OUTGOING_MESSAGE___MAX_NUM_OF_TRIES_C as MAX_NUM_OF_TRIES_C",
	"JNR_SDS_OUTGOING_MESSAGE___MESSAGE_TYPE_C as MESSAGE_TYPE_C",
	"JNR_SDS_OUTGOING_MESSAGE___METHOD_C as METHOD_C",
	"JNR_SDS_OUTGOING_MESSAGE___NEXT_TRY_C as NEXT_TRY_C",
	"JNR_SDS_OUTGOING_MESSAGE___NUMBER_OF_TRIES_C as NUMBER_OF_TRIES_C",
	"JNR_SDS_OUTGOING_MESSAGE___OBJECT_ID_C as OBJECT_ID_C",
	"JNR_SDS_OUTGOING_MESSAGE___OBJECT_TYPE_NAME_C as OBJECT_TYPE_NAME_C",
	"JNR_SDS_OUTGOING_MESSAGE___PARAM1_C as PARAM1_C",
	"JNR_SDS_OUTGOING_MESSAGE___PARAM2_C as PARAM2_C",
	"JNR_SDS_OUTGOING_MESSAGE___RESPONSE_BODY_C as RESPONSE_BODY_C",
	"JNR_SDS_OUTGOING_MESSAGE___STATUS_C as STATUS_C",
	"JNR_SDS_OUTGOING_MESSAGE___URL_PARAMETERS_C as URL_PARAMETERS_C",
	"JNR_SDS_OUTGOING_MESSAGE___URL_C as URL_C",
	"JNR_SDS_OUTGOING_MESSAGE___PSVC_SERVICE_APPOINTMENT_C as PSVC_SERVICE_APPOINTMENT_C",
	"JNR_SDS_OUTGOING_MESSAGE___PSVC_MESSAGE_LABEL_C as PSVC_MESSAGE_LABEL_C",
	"JNR_SDS_OUTGOING_MESSAGE___GROUP_C as GROUP_C",
	"JNR_SDS_OUTGOING_MESSAGE___IS_MASTER_C as IS_MASTER_C",
	"JNR_SDS_OUTGOING_MESSAGE___PARENT_OUTGOING_MESSAGE_C as PARENT_OUTGOING_MESSAGE_C").filter("i_SDS_OUTGOING_MESSAGE_ID IS NULL OR ( i_SDS_OUTGOING_MESSAGE_ID IS NOT NULL AND ( i_SDS_SYSTEM_MODIFIED_TSTMP != SYSTEM_MOD_STAMP OR i_SDS_CREATED_TSTMP != CREATED_DATE OR i_SDS_LAST_MODIFIED_TSTMP != LAST_MODIFIED_DATE ) )").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node EXP_SDS_OUTGOING_MESSAGE, type EXPRESSION 
# COLUMN COUNT: 41

# for each involved DataFrame, append the dataframe name to each column
FIL_SDS_OUTGOING_MESSAGE_temp = FIL_SDS_OUTGOING_MESSAGE.toDF(*["FIL_SDS_OUTGOING_MESSAGE___" + col for col in FIL_SDS_OUTGOING_MESSAGE.columns])

EXP_SDS_OUTGOING_MESSAGE = FIL_SDS_OUTGOING_MESSAGE_temp.selectExpr(
	"FIL_SDS_OUTGOING_MESSAGE___sys_row_id as sys_row_id",
	"FIL_SDS_OUTGOING_MESSAGE___ID as ID",
	"FIL_SDS_OUTGOING_MESSAGE___OWNER_ID as OWNER_ID",
	"FIL_SDS_OUTGOING_MESSAGE___IS_DELETED as IS_DELETED",
	"FIL_SDS_OUTGOING_MESSAGE___NAME as NAME",
	"FIL_SDS_OUTGOING_MESSAGE___CURRENCY_ISO_CODE as CURRENCY_ISO_CODE",
	"FIL_SDS_OUTGOING_MESSAGE___RECORD_TYPE_ID as RECORD_TYPE_ID",
	"FIL_SDS_OUTGOING_MESSAGE___CREATED_DATE as CREATED_DATE",
	"FIL_SDS_OUTGOING_MESSAGE___CREATED_BY_ID as CREATED_BY_ID",
	"FIL_SDS_OUTGOING_MESSAGE___LAST_MODIFIED_DATE as LAST_MODIFIED_DATE",
	"FIL_SDS_OUTGOING_MESSAGE___LAST_MODIFIED_BY_ID as LAST_MODIFIED_BY_ID",
	"FIL_SDS_OUTGOING_MESSAGE___SYSTEM_MOD_STAMP as SYSTEM_MOD_STAMP",
	"FIL_SDS_OUTGOING_MESSAGE___LAST_VIEWED_DATE as LAST_VIEWED_DATE",
	"FIL_SDS_OUTGOING_MESSAGE___LAST_REFERENCED_DATE as LAST_REFERENCED_DATE",
	"FIL_SDS_OUTGOING_MESSAGE___ADDITIONAL_HEADERS_C as ADDITIONAL_HEADERS_C",
	"FIL_SDS_OUTGOING_MESSAGE___ALLOWED_TO_RESEND_C as ALLOWED_TO_RESEND_C",
	"FIL_SDS_OUTGOING_MESSAGE___BODY_C as BODY_C",
	"FIL_SDS_OUTGOING_MESSAGE___CLASS_NAME_C as CLASS_NAME_C",
	"FIL_SDS_OUTGOING_MESSAGE___CONTENT_TYPE_C as CONTENT_TYPE_C",
	"FIL_SDS_OUTGOING_MESSAGE___FILE_NAME_C as FILE_NAME_C",
	"FIL_SDS_OUTGOING_MESSAGE___LAST_TRY_C as LAST_TRY_C",
	"FIL_SDS_OUTGOING_MESSAGE___MAX_NUM_OF_TRIES_C as MAX_NUM_OF_TRIES_C",
	"FIL_SDS_OUTGOING_MESSAGE___MESSAGE_TYPE_C as MESSAGE_TYPE_C",
	"FIL_SDS_OUTGOING_MESSAGE___METHOD_C as METHOD_C",
	"FIL_SDS_OUTGOING_MESSAGE___NEXT_TRY_C as NEXT_TRY_C",
	"FIL_SDS_OUTGOING_MESSAGE___NUMBER_OF_TRIES_C as NUMBER_OF_TRIES_C",
	"FIL_SDS_OUTGOING_MESSAGE___OBJECT_ID_C as OBJECT_ID_C",
	"FIL_SDS_OUTGOING_MESSAGE___OBJECT_TYPE_NAME_C as OBJECT_TYPE_NAME_C",
	"FIL_SDS_OUTGOING_MESSAGE___PARAM1_C as PARAM1_C",
	"FIL_SDS_OUTGOING_MESSAGE___PARAM2_C as PARAM2_C",
	"FIL_SDS_OUTGOING_MESSAGE___RESPONSE_BODY_C as RESPONSE_BODY_C",
	"FIL_SDS_OUTGOING_MESSAGE___STATUS_C as STATUS_C",
	"FIL_SDS_OUTGOING_MESSAGE___URL_PARAMETERS_C as URL_PARAMETERS_C",
	"FIL_SDS_OUTGOING_MESSAGE___URL_C as URL_C",
	"FIL_SDS_OUTGOING_MESSAGE___PSVC_SERVICE_APPOINTMENT_C as PSVC_SERVICE_APPOINTMENT_C",
	"FIL_SDS_OUTGOING_MESSAGE___PSVC_MESSAGE_LABEL_C as PSVC_MESSAGE_LABEL_C",
	"FIL_SDS_OUTGOING_MESSAGE___GROUP_C as GROUP_C",
	"FIL_SDS_OUTGOING_MESSAGE___IS_MASTER_C as IS_MASTER_C",
	"FIL_SDS_OUTGOING_MESSAGE___PARENT_OUTGOING_MESSAGE_C as PARENT_OUTGOING_MESSAGE_C",
	"CURRENT_TIMESTAMP as UPDATE_TSTMP",
	"IF (FIL_SDS_OUTGOING_MESSAGE___i_LOAD_TSTMP IS NULL, CURRENT_TIMESTAMP, FIL_SDS_OUTGOING_MESSAGE___i_LOAD_TSTMP) as LOAD_TSTMP",
	"IF (FIL_SDS_OUTGOING_MESSAGE___i_SDS_OUTGOING_MESSAGE_ID IS NULL, 1, 2) as o_UPDATE_VALIDATOR"
)

# COMMAND ----------
# Processing node UPD_SDS_OUTGOING_MESSAGE, type UPDATE_STRATEGY 
# COLUMN COUNT: 41

# for each involved DataFrame, append the dataframe name to each column
EXP_SDS_OUTGOING_MESSAGE_temp = EXP_SDS_OUTGOING_MESSAGE.toDF(*["EXP_SDS_OUTGOING_MESSAGE___" + col for col in EXP_SDS_OUTGOING_MESSAGE.columns])

UPD_SDS_OUTGOING_MESSAGE = EXP_SDS_OUTGOING_MESSAGE_temp.selectExpr(
	"EXP_SDS_OUTGOING_MESSAGE___ID as ID",
	"EXP_SDS_OUTGOING_MESSAGE___OWNER_ID as OWNER_ID",
	"EXP_SDS_OUTGOING_MESSAGE___IS_DELETED as IS_DELETED",
	"EXP_SDS_OUTGOING_MESSAGE___NAME as NAME",
	"EXP_SDS_OUTGOING_MESSAGE___CURRENCY_ISO_CODE as CURRENCY_ISO_CODE",
	"EXP_SDS_OUTGOING_MESSAGE___RECORD_TYPE_ID as RECORD_TYPE_ID",
	"EXP_SDS_OUTGOING_MESSAGE___CREATED_DATE as CREATED_DATE",
	"EXP_SDS_OUTGOING_MESSAGE___CREATED_BY_ID as CREATED_BY_ID",
	"EXP_SDS_OUTGOING_MESSAGE___LAST_MODIFIED_DATE as LAST_MODIFIED_DATE",
	"EXP_SDS_OUTGOING_MESSAGE___LAST_MODIFIED_BY_ID as LAST_MODIFIED_BY_ID",
	"EXP_SDS_OUTGOING_MESSAGE___SYSTEM_MOD_STAMP as SYSTEM_MOD_STAMP",
	"EXP_SDS_OUTGOING_MESSAGE___LAST_VIEWED_DATE as LAST_VIEWED_DATE",
	"EXP_SDS_OUTGOING_MESSAGE___LAST_REFERENCED_DATE as LAST_REFERENCED_DATE",
	"EXP_SDS_OUTGOING_MESSAGE___ADDITIONAL_HEADERS_C as ADDITIONAL_HEADERS_C",
	"EXP_SDS_OUTGOING_MESSAGE___ALLOWED_TO_RESEND_C as ALLOWED_TO_RESEND_C",
	"EXP_SDS_OUTGOING_MESSAGE___BODY_C as BODY_C",
	"EXP_SDS_OUTGOING_MESSAGE___CLASS_NAME_C as CLASS_NAME_C",
	"EXP_SDS_OUTGOING_MESSAGE___CONTENT_TYPE_C as CONTENT_TYPE_C",
	"EXP_SDS_OUTGOING_MESSAGE___FILE_NAME_C as FILE_NAME_C",
	"EXP_SDS_OUTGOING_MESSAGE___LAST_TRY_C as LAST_TRY_C",
	"EXP_SDS_OUTGOING_MESSAGE___MAX_NUM_OF_TRIES_C as MAX_NUM_OF_TRIES_C",
	"EXP_SDS_OUTGOING_MESSAGE___MESSAGE_TYPE_C as MESSAGE_TYPE_C",
	"EXP_SDS_OUTGOING_MESSAGE___METHOD_C as METHOD_C",
	"EXP_SDS_OUTGOING_MESSAGE___NEXT_TRY_C as NEXT_TRY_C",
	"EXP_SDS_OUTGOING_MESSAGE___NUMBER_OF_TRIES_C as NUMBER_OF_TRIES_C",
	"EXP_SDS_OUTGOING_MESSAGE___OBJECT_ID_C as OBJECT_ID_C",
	"EXP_SDS_OUTGOING_MESSAGE___OBJECT_TYPE_NAME_C as OBJECT_TYPE_NAME_C",
	"EXP_SDS_OUTGOING_MESSAGE___PARAM1_C as PARAM1_C",
	"EXP_SDS_OUTGOING_MESSAGE___PARAM2_C as PARAM2_C",
	"EXP_SDS_OUTGOING_MESSAGE___RESPONSE_BODY_C as RESPONSE_BODY_C",
	"EXP_SDS_OUTGOING_MESSAGE___STATUS_C as STATUS_C",
	"EXP_SDS_OUTGOING_MESSAGE___URL_PARAMETERS_C as URL_PARAMETERS_C",
	"EXP_SDS_OUTGOING_MESSAGE___URL_C as URL_C",
	"EXP_SDS_OUTGOING_MESSAGE___PSVC_SERVICE_APPOINTMENT_C as PSVC_SERVICE_APPOINTMENT_C",
	"EXP_SDS_OUTGOING_MESSAGE___PSVC_MESSAGE_LABEL_C as PSVC_MESSAGE_LABEL_C",
	"EXP_SDS_OUTGOING_MESSAGE___GROUP_C as GROUP_C",
	"EXP_SDS_OUTGOING_MESSAGE___IS_MASTER_C as IS_MASTER_C",
	"EXP_SDS_OUTGOING_MESSAGE___PARENT_OUTGOING_MESSAGE_C as PARENT_OUTGOING_MESSAGE_C",
	"EXP_SDS_OUTGOING_MESSAGE___UPDATE_TSTMP as UPDATE_TSTMP",
	"EXP_SDS_OUTGOING_MESSAGE___LOAD_TSTMP as LOAD_TSTMP",
	"EXP_SDS_OUTGOING_MESSAGE___o_UPDATE_VALIDATOR as o_UPDATE_VALIDATOR")\
	.withColumn('pyspark_data_action', when(col('o_UPDATE_VALIDATOR') ==(lit(1)) , lit(0)) .when(col('o_UPDATE_VALIDATOR') ==(lit(2)) , lit(1)))

# COMMAND ----------
# Processing node Shortcut_to_SDS_OUTGOING_MESSAGE_1, type TARGET 
# COLUMN COUNT: 40


Shortcut_to_SDS_OUTGOING_MESSAGE_1 = UPD_SDS_OUTGOING_MESSAGE.selectExpr(
	"CAST(ID AS STRING) as SDS_OUTGOING_MESSAGE_ID",
	"CAST(NAME AS STRING) as SDS_OUTGOING_MESSAGE_NAME",
	"CAST(PSVC_MESSAGE_LABEL_C AS STRING) as SDS_OUTGOING_MESSAGE_LABEL",
	"CAST(STATUS_C AS STRING) as SDS_OUTGOING_MESSAGE_STATUS",
	"CAST(PSVC_SERVICE_APPOINTMENT_C AS STRING) as SDS_SERVICE_APPOINTMENT_ID",
	"CAST(PARENT_OUTGOING_MESSAGE_C AS STRING) as SDS_PARENT_OUTGOING_MESSAGE_ID",
	"CAST(OBJECT_ID_C AS STRING) as SDS_OBJECT_ID",
	"CAST(OBJECT_TYPE_NAME_C AS STRING) as SDS_OBJECT_TYPE_NAME",
	"CAST(CONTENT_TYPE_C AS STRING) as CONTENT_TYPE",
	"CAST(MESSAGE_TYPE_C AS STRING) as MESSAGE_TYPE",
	"CAST(GROUP_C AS STRING) as GROUP_TYPE",
	"CAST(METHOD_C AS STRING) as OUTGOING_MESSAGE_METHOD",
	"CAST(ALLOWED_TO_RESEND_C AS TINYINT) as ALLOWED_TO_RESEND_FLAG",
	"CAST(CLASS_NAME_C AS STRING) as CLASS_NAME",
	"CAST(MAX_NUM_OF_TRIES_C AS BIGINT) as MAX_NUM_OF_TRIES",
	"CAST(NUMBER_OF_TRIES_C AS BIGINT) as NUMBER_OF_TRIES",
	"CAST(NEXT_TRY_C AS TIMESTAMP) as NEXT_TRY_TSTMP",
	"CAST(LAST_TRY_C AS TIMESTAMP) as LAST_TRY_TSTMP",
	"CAST(FILE_NAME_C AS STRING) as FILE_NAME",
	"CAST(PARAM1_C AS STRING) as PARAM1",
	"CAST(PARAM2_C AS STRING) as PARAM2",
	"CAST(ADDITIONAL_HEADERS_C AS STRING) as ADDITIONAL_HEADERS",
	"CAST(BODY_C AS STRING) as MESSAGE_BODY",
	"CAST(RESPONSE_BODY_C AS STRING) as MESSAGE_RESPONSE_BODY",
	"CAST(URL_PARAMETERS_C AS STRING) as URL_PARAMETERS",
	"CAST(URL_C AS STRING) as URL",
	"CAST(RECORD_TYPE_ID AS STRING) as SDS_RECORD_TYPE_ID",
	"CAST(OWNER_ID AS STRING) as SDS_OWNER_ID",
	"CAST(CURRENCY_ISO_CODE AS STRING) as CURRENCY_ISO_CD",
	"CAST(IS_MASTER_C AS TINYINT) as MASTER_FLAG",
	"CAST(IS_DELETED AS TINYINT) as DELETED_FLAG",
	"CAST(LAST_VIEWED_DATE AS TIMESTAMP) as SDS_LAST_VIEWED_TSTMP",
	"CAST(LAST_REFERENCED_DATE AS TIMESTAMP) as SDS_LAST_REFERENCED_TSTMP",
	"CAST(SYSTEM_MOD_STAMP AS TIMESTAMP) as SDS_SYSTEM_MODIFIED_TSTMP",
	"CAST(LAST_MODIFIED_DATE AS TIMESTAMP) as SDS_LAST_MODIFIED_TSTMP",
	"CAST(LAST_MODIFIED_BY_ID AS STRING) as SDS_LAST_MODIFIED_BY_ID",
	"CAST(CREATED_DATE AS TIMESTAMP) as SDS_CREATED_TSTMP",
	"CAST(CREATED_BY_ID AS STRING) as SDS_CREATED_BY_ID",
	"CAST(UPDATE_TSTMP AS TIMESTAMP) as UPDATE_TSTMP",
	"CAST(LOAD_TSTMP AS TIMESTAMP) as LOAD_TSTMP",
	"UPD_SDS_OUTGOING_MESSAGE.pyspark_data_action as pyspark_data_action"
)

try:
  primary_key = """source.SDS_OUTGOING_MESSAGE_ID = target.SDS_OUTGOING_MESSAGE_ID"""
  refined_perf_table = f"{legacy}.SDS_OUTGOING_MESSAGE"
  executeMerge(Shortcut_to_SDS_OUTGOING_MESSAGE_1, refined_perf_table, primary_key)
  logger.info(f"Merge with {refined_perf_table} completed]")
  logPrevRunDt("SDS_OUTGOING_MESSAGE", "SDS_OUTGOING_MESSAGE", "Completed", "N/A", f"{raw}.log_run_details")
except Exception as e:
  logPrevRunDt("SDS_OUTGOING_MESSAGE", "SDS_OUTGOING_MESSAGE","Failed",str(e), f"{raw}.log_run_details", )
  raise e
	