#Code converted on 2023-07-21 10:23:22
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from Datalake.utils.genericUtilities import *
from Datalake.utils.configs import *
from Datalake.utils.mergeUtils import *
from Datalake.utils.logger import *
# COMMAND ----------

parser = argparse.ArgumentParser()
spark = SparkSession.getActiveSession()
parser.add_argument('env', type=str, help='Env Variable')
args = parser.parse_args()
env = args.env

if env is None or env == '':
    raise ValueError('env is not set')

# refine = getEnvPrefix(env) + 'refine'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'


# COMMAND ----------
# Processing node SQ_Shortcut_to_SDS_ASSIGNED_RESOURCE_PRE, type SOURCE 
# COLUMN COUNT: 23

SQ_Shortcut_to_SDS_ASSIGNED_RESOURCE_PRE = spark.sql(f"""SELECT
ID,
IS_DELETED,
ASSIGNED_RESOURCE_NUMBER,
CREATED_DATE,
CREATED_BY_ID,
LAST_MODIFIED_DATE,
LAST_MODIFIED_BY_ID,
SYSTEM_MOD_STAMP as SYSTEM_MODSTAMP ,
SERVICE_APPOINTMENT_ID,
SERVICE_RESOURCE_ID,
ESTIMATED_TRAVEL_TIME,
ACTUAL_TRAVEL_TIME,
SERVICE_CREW_ID,
FSL_ESTIMATED_TRAVEL_DISTANCE_FROM_C,
FSL_ESTIMATED_TRAVEL_DISTANCE_TO_C,
FSL_ESTIMATED_TRAVEL_TIME_FROM_C,
FSL_LAST_UPDATED_EPOCH_C,
FSL_UPDATED_BY_OPTIMIZATION_C,
FSL_CALCULATED_DURATION_C,
FSL_ESTIMATED_TRAVEL_TIME_FROM_SOURCE_C,
FSL_ESTIMATED_TRAVEL_TIME_TO_SOURCE_C,
PSVC_FOR_MIGRATION_C,
PSVC_APPOINTMENT_SMS_ID_C
FROM {raw}.SDS_ASSIGNED_RESOURCE_PRE""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node SQ_Shortcut_to_SDS_ASSIGNED_RESOURCE, type SOURCE 
# COLUMN COUNT: 5

SQ_Shortcut_to_SDS_ASSIGNED_RESOURCE = spark.sql(f"""SELECT
SDS_ASSIGNED_RESOURCE_ID,
SDS_SYSTEM_MODIFIED_TSTMP,
SDS_LAST_MODIFIED_TSTMP,
SDS_CREATED_TSTMP,
LOAD_TSTMP
FROM {legacy}.SDS_ASSIGNED_RESOURCE""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node JNR_SDS_ASSIGNED_RESOURCE, type JOINER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 28

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_SDS_ASSIGNED_RESOURCE_temp = SQ_Shortcut_to_SDS_ASSIGNED_RESOURCE.toDF(*["SQ_Shortcut_to_SDS_ASSIGNED_RESOURCE___" + col for col in SQ_Shortcut_to_SDS_ASSIGNED_RESOURCE.columns])
SQ_Shortcut_to_SDS_ASSIGNED_RESOURCE_PRE_temp = SQ_Shortcut_to_SDS_ASSIGNED_RESOURCE_PRE.toDF(*["SQ_Shortcut_to_SDS_ASSIGNED_RESOURCE_PRE___" + col for col in SQ_Shortcut_to_SDS_ASSIGNED_RESOURCE_PRE.columns])

JNR_SDS_ASSIGNED_RESOURCE = SQ_Shortcut_to_SDS_ASSIGNED_RESOURCE_temp_PRE.join(SQ_Shortcut_to_SDS_ASSIGNED_RESOURCE_temp,[SQ_Shortcut_to_SDS_ASSIGNED_RESOURCE_PRE_temp.SQ_Shortcut_to_SDS_ASSIGNED_RESOURCE_PRE___ID == SQ_Shortcut_to_SDS_ASSIGNED_RESOURCE_temp.SQ_Shortcut_to_SDS_ASSIGNED_RESOURCE___SDS_ASSIGNED_RESOURCE_ID],'left_outer').selectExpr(
	"SQ_Shortcut_to_SDS_ASSIGNED_RESOURCE___SDS_ASSIGNED_RESOURCE_ID as i_SDS_ASSIGNED_RESOURCE_ID",
	"SQ_Shortcut_to_SDS_ASSIGNED_RESOURCE___SDS_SYSTEM_MODIFIED_TSTMP as i_SDS_SYSTEM_MODIFIED_TSTMP",
	"SQ_Shortcut_to_SDS_ASSIGNED_RESOURCE___SDS_LAST_MODIFIED_TSTMP as i_SDS_LAST_MODIFIED_TSTMP",
	"SQ_Shortcut_to_SDS_ASSIGNED_RESOURCE___SDS_CREATED_TSTMP as i_SDS_CREATED_TSTMP",
	"SQ_Shortcut_to_SDS_ASSIGNED_RESOURCE___LOAD_TSTMP as i_LOAD_TSTMP",
	"SQ_Shortcut_to_SDS_ASSIGNED_RESOURCE_PRE___ID as ID",
	"SQ_Shortcut_to_SDS_ASSIGNED_RESOURCE_PRE___IS_DELETED as IS_DELETED",
	"SQ_Shortcut_to_SDS_ASSIGNED_RESOURCE_PRE___ASSIGNED_RESOURCE_NUMBER as ASSIGNED_RESOURCE_NUMBER",
	"SQ_Shortcut_to_SDS_ASSIGNED_RESOURCE_PRE___CREATED_DATE as CREATED_DATE",
	"SQ_Shortcut_to_SDS_ASSIGNED_RESOURCE_PRE___CREATED_BY_ID as CREATED_BY_ID",
	"SQ_Shortcut_to_SDS_ASSIGNED_RESOURCE_PRE___LAST_MODIFIED_DATE as LAST_MODIFIED_DATE",
	"SQ_Shortcut_to_SDS_ASSIGNED_RESOURCE_PRE___LAST_MODIFIED_BY_ID as LAST_MODIFIED_BY_ID",
	"SQ_Shortcut_to_SDS_ASSIGNED_RESOURCE_PRE___SYSTEM_MODSTAMP as SYSTEM_MOD_STAMP",
	"SQ_Shortcut_to_SDS_ASSIGNED_RESOURCE_PRE___SERVICE_APPOINTMENT_ID as SERVICE_APPOINTMENT_ID",
	"SQ_Shortcut_to_SDS_ASSIGNED_RESOURCE_PRE___SERVICE_RESOURCE_ID as SERVICE_RESOURCE_ID",
	"SQ_Shortcut_to_SDS_ASSIGNED_RESOURCE_PRE___ESTIMATED_TRAVEL_TIME as ESTIMATED_TRAVEL_TIME",
	"SQ_Shortcut_to_SDS_ASSIGNED_RESOURCE_PRE___ACTUAL_TRAVEL_TIME as ACTUAL_TRAVEL_TIME",
	"SQ_Shortcut_to_SDS_ASSIGNED_RESOURCE_PRE___SERVICE_CREW_ID as SERVICE_CREW_ID",
	"SQ_Shortcut_to_SDS_ASSIGNED_RESOURCE_PRE___FSL_ESTIMATED_TRAVEL_DISTANCE_FROM_C as FSL_ESTIMATED_TRAVEL_DISTANCE_FROM_C",
	"SQ_Shortcut_to_SDS_ASSIGNED_RESOURCE_PRE___FSL_ESTIMATED_TRAVEL_DISTANCE_TO_C as FSL_ESTIMATED_TRAVEL_DISTANCE_TO_C",
	"SQ_Shortcut_to_SDS_ASSIGNED_RESOURCE_PRE___FSL_ESTIMATED_TRAVEL_TIME_FROM_C as FSL_ESTIMATED_TRAVEL_TIME_FROM_C",
	"SQ_Shortcut_to_SDS_ASSIGNED_RESOURCE_PRE___FSL_LAST_UPDATED_EPOCH_C as FSL_LAST_UPDATED_EPOCH_C",
	"SQ_Shortcut_to_SDS_ASSIGNED_RESOURCE_PRE___FSL_UPDATED_BY_OPTIMIZATION_C as FSL_UPDATED_BY_OPTIMIZATION_C",
	"SQ_Shortcut_to_SDS_ASSIGNED_RESOURCE_PRE___FSL_CALCULATED_DURATION_C as FSL_CALCULATED_DURATION_C",
	"SQ_Shortcut_to_SDS_ASSIGNED_RESOURCE_PRE___FSL_ESTIMATED_TRAVEL_TIME_FROM_SOURCE_C as FSL_ESTIMATED_TRAVEL_TIME_FROM_SOURCE_C",
	"SQ_Shortcut_to_SDS_ASSIGNED_RESOURCE_PRE___FSL_ESTIMATED_TRAVEL_TIME_TO_SOURCE_C as FSL_ESTIMATED_TRAVEL_TIME_TO_SOURCE_C",
	"SQ_Shortcut_to_SDS_ASSIGNED_RESOURCE_PRE___PSVC_FOR_MIGRATION_C as PSVC_FOR_MIGRATION_C",
	"SQ_Shortcut_to_SDS_ASSIGNED_RESOURCE_PRE___PSVC_APPOINTMENT_SMS_ID_C as PSVC_APPOINTMENT_SMS_ID_C")

# COMMAND ----------
# Processing node FIL_SDS_ASSIGNED_RESOURCE, type FILTER 
# COLUMN COUNT: 28

# for each involved DataFrame, append the dataframe name to each column
JNR_SDS_ASSIGNED_RESOURCE_temp = JNR_SDS_ASSIGNED_RESOURCE.toDF(*["JNR_SDS_ASSIGNED_RESOURCE___" + col for col in JNR_SDS_ASSIGNED_RESOURCE.columns])

FIL_SDS_ASSIGNED_RESOURCE = JNR_SDS_ASSIGNED_RESOURCE_temp.selectExpr(
	"JNR_SDS_ASSIGNED_RESOURCE___i_SDS_ASSIGNED_RESOURCE_ID as i_SDS_ASSIGNED_RESOURCE_ID",
	"JNR_SDS_ASSIGNED_RESOURCE___i_SDS_SYSTEM_MODIFIED_TSTMP as i_SDS_SYSTEM_MODIFIED_TSTMP",
	"JNR_SDS_ASSIGNED_RESOURCE___i_SDS_LAST_MODIFIED_TSTMP as i_SDS_LAST_MODIFIED_TSTMP",
	"JNR_SDS_ASSIGNED_RESOURCE___i_SDS_CREATED_TSTMP as i_SDS_CREATED_TSTMP",
	"JNR_SDS_ASSIGNED_RESOURCE___i_LOAD_TSTMP as i_LOAD_TSTMP",
	"JNR_SDS_ASSIGNED_RESOURCE___ID as ID",
	"JNR_SDS_ASSIGNED_RESOURCE___IS_DELETED as IS_DELETED",
	"JNR_SDS_ASSIGNED_RESOURCE___ASSIGNED_RESOURCE_NUMBER as ASSIGNED_RESOURCE_NUMBER",
	"JNR_SDS_ASSIGNED_RESOURCE___CREATED_DATE as CREATED_DATE",
	"JNR_SDS_ASSIGNED_RESOURCE___CREATED_BY_ID as CREATED_BY_ID",
	"JNR_SDS_ASSIGNED_RESOURCE___LAST_MODIFIED_DATE as LAST_MODIFIED_DATE",
	"JNR_SDS_ASSIGNED_RESOURCE___LAST_MODIFIED_BY_ID as LAST_MODIFIED_BY_ID",
	"JNR_SDS_ASSIGNED_RESOURCE___SYSTEM_MOD_STAMP as SYSTEM_MOD_STAMP",
	"JNR_SDS_ASSIGNED_RESOURCE___SERVICE_APPOINTMENT_ID as SERVICE_APPOINTMENT_ID",
	"JNR_SDS_ASSIGNED_RESOURCE___SERVICE_RESOURCE_ID as SERVICE_RESOURCE_ID",
	"JNR_SDS_ASSIGNED_RESOURCE___ESTIMATED_TRAVEL_TIME as ESTIMATED_TRAVEL_TIME",
	"JNR_SDS_ASSIGNED_RESOURCE___ACTUAL_TRAVEL_TIME as ACTUAL_TRAVEL_TIME",
	"JNR_SDS_ASSIGNED_RESOURCE___SERVICE_CREW_ID as SERVICE_CREW_ID",
	"JNR_SDS_ASSIGNED_RESOURCE___FSL_ESTIMATED_TRAVEL_DISTANCE_FROM_C as FSL_ESTIMATED_TRAVEL_DISTANCE_FROM_C",
	"JNR_SDS_ASSIGNED_RESOURCE___FSL_ESTIMATED_TRAVEL_DISTANCE_TO_C as FSL_ESTIMATED_TRAVEL_DISTANCE_TO_C",
	"JNR_SDS_ASSIGNED_RESOURCE___FSL_ESTIMATED_TRAVEL_TIME_FROM_C as FSL_ESTIMATED_TRAVEL_TIME_FROM_C",
	"JNR_SDS_ASSIGNED_RESOURCE___FSL_LAST_UPDATED_EPOCH_C as FSL_LAST_UPDATED_EPOCH_C",
	"JNR_SDS_ASSIGNED_RESOURCE___FSL_UPDATED_BY_OPTIMIZATION_C as FSL_UPDATED_BY_OPTIMIZATION_C",
	"JNR_SDS_ASSIGNED_RESOURCE___FSL_CALCULATED_DURATION_C as FSL_CALCULATED_DURATION_C",
	"JNR_SDS_ASSIGNED_RESOURCE___FSL_ESTIMATED_TRAVEL_TIME_FROM_SOURCE_C as FSL_ESTIMATED_TRAVEL_TIME_FROM_SOURCE_C",
	"JNR_SDS_ASSIGNED_RESOURCE___FSL_ESTIMATED_TRAVEL_TIME_TO_SOURCE_C as FSL_ESTIMATED_TRAVEL_TIME_TO_SOURCE_C",
	"JNR_SDS_ASSIGNED_RESOURCE___PSVC_FOR_MIGRATION_C as PSVC_FOR_MIGRATION_C",
	"JNR_SDS_ASSIGNED_RESOURCE___PSVC_APPOINTMENT_SMS_ID_C as PSVC_APPOINTMENT_SMS_ID_C").filter("i_SDS_ASSIGNED_RESOURCE_ID IS NULL OR ( i_SDS_ASSIGNED_RESOURCE_ID IS NOT NULL AND ( i_SDS_SYSTEM_MODIFIED_TSTMP != SYSTEM_MOD_STAMP OR i_SDS_CREATED_TSTMP != CREATED_DATE OR i_SDS_LAST_MODIFIED_TSTMP != LAST_MODIFIED_DATE ) )").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node EXP_SDS_ASSIGNED_RESOURCE, type EXPRESSION 
# COLUMN COUNT: 26

# for each involved DataFrame, append the dataframe name to each column
FIL_SDS_ASSIGNED_RESOURCE_temp = FIL_SDS_ASSIGNED_RESOURCE.toDF(*["FIL_SDS_ASSIGNED_RESOURCE___" + col for col in FIL_SDS_ASSIGNED_RESOURCE.columns])

EXP_SDS_ASSIGNED_RESOURCE = FIL_SDS_ASSIGNED_RESOURCE_temp.selectExpr(
	"FIL_SDS_ASSIGNED_RESOURCE___sys_row_id as sys_row_id",
	"FIL_SDS_ASSIGNED_RESOURCE___ID as ID",
	"FIL_SDS_ASSIGNED_RESOURCE___IS_DELETED as IS_DELETED",
	"FIL_SDS_ASSIGNED_RESOURCE___ASSIGNED_RESOURCE_NUMBER as ASSIGNED_RESOURCE_NUMBER",
	"FIL_SDS_ASSIGNED_RESOURCE___CREATED_DATE as CREATED_DATE",
	"FIL_SDS_ASSIGNED_RESOURCE___CREATED_BY_ID as CREATED_BY_ID",
	"FIL_SDS_ASSIGNED_RESOURCE___LAST_MODIFIED_DATE as LAST_MODIFIED_DATE",
	"FIL_SDS_ASSIGNED_RESOURCE___LAST_MODIFIED_BY_ID as LAST_MODIFIED_BY_ID",
	"FIL_SDS_ASSIGNED_RESOURCE___SYSTEM_MOD_STAMP as SYSTEM_MOD_STAMP",
	"FIL_SDS_ASSIGNED_RESOURCE___SERVICE_APPOINTMENT_ID as SERVICE_APPOINTMENT_ID",
	"FIL_SDS_ASSIGNED_RESOURCE___SERVICE_RESOURCE_ID as SERVICE_RESOURCE_ID",
	"FIL_SDS_ASSIGNED_RESOURCE___ESTIMATED_TRAVEL_TIME as ESTIMATED_TRAVEL_TIME",
	"FIL_SDS_ASSIGNED_RESOURCE___ACTUAL_TRAVEL_TIME as ACTUAL_TRAVEL_TIME",
	"FIL_SDS_ASSIGNED_RESOURCE___SERVICE_CREW_ID as SERVICE_CREW_ID",
	"FIL_SDS_ASSIGNED_RESOURCE___FSL_ESTIMATED_TRAVEL_DISTANCE_FROM_C as FSL_ESTIMATED_TRAVEL_DISTANCE_FROM_C",
	"FIL_SDS_ASSIGNED_RESOURCE___FSL_ESTIMATED_TRAVEL_DISTANCE_TO_C as FSL_ESTIMATED_TRAVEL_DISTANCE_TO_C",
	"FIL_SDS_ASSIGNED_RESOURCE___FSL_ESTIMATED_TRAVEL_TIME_FROM_C as FSL_ESTIMATED_TRAVEL_TIME_FROM_C",
	"FIL_SDS_ASSIGNED_RESOURCE___FSL_LAST_UPDATED_EPOCH_C as FSL_LAST_UPDATED_EPOCH_C",
	"FIL_SDS_ASSIGNED_RESOURCE___FSL_UPDATED_BY_OPTIMIZATION_C as FSL_UPDATED_BY_OPTIMIZATION_C",
	"FIL_SDS_ASSIGNED_RESOURCE___FSL_CALCULATED_DURATION_C as FSL_CALCULATED_DURATION_C",
	"FIL_SDS_ASSIGNED_RESOURCE___FSL_ESTIMATED_TRAVEL_TIME_FROM_SOURCE_C as FSL_ESTIMATED_TRAVEL_TIME_FROM_SOURCE_C",
	"FIL_SDS_ASSIGNED_RESOURCE___FSL_ESTIMATED_TRAVEL_TIME_TO_SOURCE_C as FSL_ESTIMATED_TRAVEL_TIME_TO_SOURCE_C",
	"FIL_SDS_ASSIGNED_RESOURCE___PSVC_FOR_MIGRATION_C as PSVC_FOR_MIGRATION_C",
	"FIL_SDS_ASSIGNED_RESOURCE___PSVC_APPOINTMENT_SMS_ID_C as PSVC_APPOINTMENT_SMS_ID_C",
	"CURRENT_TIMESTAMP as UPDATE_TSTMP",
	"IF (FIL_SDS_ASSIGNED_RESOURCE___i_LOAD_TSTMP IS NULL, CURRENT_TIMESTAMP, FIL_SDS_ASSIGNED_RESOURCE___i_LOAD_TSTMP) as LOAD_TSTMP",
	"IF (FIL_SDS_ASSIGNED_RESOURCE___i_SDS_ASSIGNED_RESOURCE_ID IS NULL, 1, 2) as o_UPDATE_VALIDATOR"
)

# COMMAND ----------
# Processing node UPD_SDS_ASSIGNED_RESOURCE, type UPDATE_STRATEGY . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 26

# for each involved DataFrame, append the dataframe name to each column
EXP_SDS_ASSIGNED_RESOURCE_temp = EXP_SDS_ASSIGNED_RESOURCE.toDF(*["EXP_SDS_ASSIGNED_RESOURCE___" + col for col in EXP_SDS_ASSIGNED_RESOURCE.columns])

UPD_SDS_ASSIGNED_RESOURCE = EXP_SDS_ASSIGNED_RESOURCE_temp.selectExpr(
	"EXP_SDS_ASSIGNED_RESOURCE___ID as ID",
	"EXP_SDS_ASSIGNED_RESOURCE___IS_DELETED as IS_DELETED",
	"EXP_SDS_ASSIGNED_RESOURCE___ASSIGNED_RESOURCE_NUMBER as ASSIGNED_RESOURCE_NUMBER",
	"EXP_SDS_ASSIGNED_RESOURCE___CREATED_DATE as CREATED_DATE",
	"EXP_SDS_ASSIGNED_RESOURCE___CREATED_BY_ID as CREATED_BY_ID",
	"EXP_SDS_ASSIGNED_RESOURCE___LAST_MODIFIED_DATE as LAST_MODIFIED_DATE",
	"EXP_SDS_ASSIGNED_RESOURCE___LAST_MODIFIED_BY_ID as LAST_MODIFIED_BY_ID",
	"EXP_SDS_ASSIGNED_RESOURCE___SYSTEM_MOD_STAMP as SYSTEM_MODSTAMP",
	"EXP_SDS_ASSIGNED_RESOURCE___SERVICE_APPOINTMENT_ID as SERVICE_APPOINTMENT_ID",
	"EXP_SDS_ASSIGNED_RESOURCE___SERVICE_RESOURCE_ID as SERVICE_RESOURCE_ID",
	"EXP_SDS_ASSIGNED_RESOURCE___ESTIMATED_TRAVEL_TIME as ESTIMATED_TRAVEL_TIME",
	"EXP_SDS_ASSIGNED_RESOURCE___ACTUAL_TRAVEL_TIME as ACTUAL_TRAVEL_TIME",
	"EXP_SDS_ASSIGNED_RESOURCE___SERVICE_CREW_ID as SERVICE_CREW_ID",
	"EXP_SDS_ASSIGNED_RESOURCE___FSL_ESTIMATED_TRAVEL_DISTANCE_FROM_C as FSL_ESTIMATED_TRAVEL_DISTANCE_FROM_C",
	"EXP_SDS_ASSIGNED_RESOURCE___FSL_ESTIMATED_TRAVEL_DISTANCE_TO_C as FSL_ESTIMATED_TRAVEL_DISTANCE_TO_C",
	"EXP_SDS_ASSIGNED_RESOURCE___FSL_ESTIMATED_TRAVEL_TIME_FROM_C as FSL_ESTIMATED_TRAVEL_TIME_FROM_C",
	"EXP_SDS_ASSIGNED_RESOURCE___FSL_LAST_UPDATED_EPOCH_C as FSL_LAST_UPDATED_EPOCH_C",
	"EXP_SDS_ASSIGNED_RESOURCE___FSL_UPDATED_BY_OPTIMIZATION_C as FSL_UPDATED_BY_OPTIMIZATION_C",
	"EXP_SDS_ASSIGNED_RESOURCE___FSL_CALCULATED_DURATION_C as FSL_CALCULATED_DURATION_C",
	"EXP_SDS_ASSIGNED_RESOURCE___FSL_ESTIMATED_TRAVEL_TIME_FROM_SOURCE_C as FSL_ESTIMATED_TRAVEL_TIME_FROM_SOURCE_C",
	"EXP_SDS_ASSIGNED_RESOURCE___FSL_ESTIMATED_TRAVEL_TIME_TO_SOURCE_C as FSL_ESTIMATED_TRAVEL_TIME_TO_SOURCE_C",
	"EXP_SDS_ASSIGNED_RESOURCE___PSVC_FOR_MIGRATION_C as PSVC_FOR_MIGRATION_C",
	"EXP_SDS_ASSIGNED_RESOURCE___PSVC_APPOINTMENT_SMS_ID_C as PSVC_APPOINTMENT_SMS_ID_C",
	"EXP_SDS_ASSIGNED_RESOURCE___UPDATE_TSTMP as UPDATE_TSTMP",
	"EXP_SDS_ASSIGNED_RESOURCE___LOAD_TSTMP as LOAD_TSTMP",
	"EXP_SDS_ASSIGNED_RESOURCE___o_UPDATE_VALIDATOR as o_UPDATE_VALIDATOR")\
	.withColumn('pyspark_data_action', when(col('o_UPDATE_VALIDATOR') ==(lit(1)) , lit(0)) .when(col('o_UPDATE_VALIDATOR') ==(lit(2)) , lit(1)))

# COMMAND ----------
# Processing node Shortcut_to_SDS_ASSIGNED_RESOURCE_1, type TARGET 
# COLUMN COUNT: 25


Shortcut_to_SDS_ASSIGNED_RESOURCE_1 = UPD_SDS_ASSIGNED_RESOURCE.selectExpr(
	"CAST(ID AS STRING) as SDS_ASSIGNED_RESOURCE_ID",
	"CAST(ASSIGNED_RESOURCE_NUMBER AS STRING) as SDS_ASSIGNED_RESOURCE_NBR",
	"CAST(SERVICE_APPOINTMENT_ID AS STRING) as SDS_SERVICE_APPOINTMENT_ID",
	"CAST(SERVICE_RESOURCE_ID AS STRING) as SDS_SERVICE_RESOURCE_ID",
	"CAST(SERVICE_CREW_ID AS STRING) as SDS_SERVICE_CREW_ID",
	"CAST(ESTIMATED_TRAVEL_TIME AS DECIMAL(18,2)) as ESTIMATED_TRAVEL_TIME",
	"CAST(ACTUAL_TRAVEL_TIME AS DECIMAL(18,2)) as ACTUAL_TRAVEL_TIME",
	"CAST(FSL_ESTIMATED_TRAVEL_DISTANCE_FROM_C AS DECIMAL(18,2)) as EST_TRAVEL_DISTANCE_FROM",
	"CAST(FSL_ESTIMATED_TRAVEL_DISTANCE_TO_C AS DECIMAL(18,2)) as EST_TRAVEL_DISTANCE_TO",
	"CAST(FSL_ESTIMATED_TRAVEL_TIME_FROM_SOURCE_C AS STRING) as EST_TRAVEL_TIME_FROM_SOURCE",
	"CAST(FSL_ESTIMATED_TRAVEL_TIME_TO_SOURCE_C AS STRING) as EST_TRAVEL_TIME_TO_SOURCE",
	"CAST(FSL_ESTIMATED_TRAVEL_TIME_FROM_C AS DECIMAL(18,2)) as EST_TRAVEL_TIME_FROM",
	"CAST(FSL_CALCULATED_DURATION_C AS BIGINT) as CALCULATED_DURATION",
	"CAST(FSL_UPDATED_BY_OPTIMIZATION_C AS BIGINT) as UPDATED_BY_OPTIMIZATION",
	"CAST(FSL_LAST_UPDATED_EPOCH_C AS BIGINT) as LAST_UPDATED_EPOCH",
	"CAST(PSVC_FOR_MIGRATION_C AS TINYINT) as FOR_MIGRATION_FLAG",
	"CAST(PSVC_APPOINTMENT_SMS_ID_C AS STRING) as SMS_APPOINTMENT_ID",
	"CAST(IS_DELETED AS TINYINT) as DELETED_FLAG",
	"CAST(SYSTEM_MODSTAMP AS TIMESTAMP) as SDS_SYSTEM_MODIFIED_TSTMP",
	"CAST(LAST_MODIFIED_DATE AS TIMESTAMP) as SDS_LAST_MODIFIED_TSTMP",
	"CAST(LAST_MODIFIED_BY_ID AS STRING) as SDS_LAST_MODIFIED_BY_ID",
	"CAST(CREATED_DATE AS TIMESTAMP) as SDS_CREATED_TSTMP",
	"CAST(CREATED_BY_ID AS STRING) as SDS_CREATED_BY_ID",
	"CAST(UPDATE_TSTMP AS TIMESTAMP) as UPDATE_TSTMP",
	"CAST(LOAD_TSTMP AS TIMESTAMP) as LOAD_TSTMP",
	"UPD_SDS_ASSIGNED_RESOURCE.pyspark_data_action as pyspark_data_action"
)

try:
  primary_key = """source.SDS_ASSIGNED_RESOURCE_ID = target.SDS_ASSIGNED_RESOURCE_ID"""
  refined_perf_table = f"{legacy}.SDS_ASSIGNED_RESOURCE"
  executeMerge(Shortcut_to_SDS_ASSIGNED_RESOURCE_1, refined_perf_table, primary_key)
  logger.info(f"Merge with {refined_perf_table} completed]")
  logPrevRunDt("SDS_ASSIGNED_RESOURCE", "SDS_ASSIGNED_RESOURCE", "Completed", "N/A", f"{raw}.log_run_details")
except Exception as e:
  logPrevRunDt("SDS_ASSIGNED_RESOURCE", "SDS_ASSIGNED_RESOURCE","Failed",str(e), f"{raw}.log_run_details", )
  raise e
	