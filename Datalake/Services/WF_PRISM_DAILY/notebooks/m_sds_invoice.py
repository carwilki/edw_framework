#Code converted on 2023-07-21 14:35:32
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from Datalake.utils.genericUtilities import *
from Datalake.utils.configs import *
from Datalake.utils.mergeUtils import *
from Datalake.utils.logger import *
# COMMAND ----------

parser = argparse.ArgumentParser()
spark = SparkSession.getActiveSession()
parser.add_argument('env', type=str, help='Env Variable')
args = parser.parse_args()
env = args.env

if env is None or env == '':
    raise ValueError('env is not set')

refine = getEnvPrefix(env) + 'refine'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'cust_sensitive'


# COMMAND ----------
# Processing node SQ_Shortcut_to_SDS_INVOICE, type SOURCE 
# COLUMN COUNT: 5

SQ_Shortcut_to_SDS_INVOICE = spark.sql(f"""SELECT
SDS_INVOICE_ID,
SDS_SYSTEM_MODIFIED_TSTMP,
SDS_LAST_MODIFIED_TSTMP,
SDS_CREATED_TSTMP,
LOAD_TSTMP
FROM {legacy}.legacy_SDS_INVOICE""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node SQ_Shortcut_to_SDS_ORDER, type SOURCE 
# COLUMN COUNT: 1

SQ_Shortcut_to_SDS_ORDER = spark.sql(f"""SELECT
SDS_INVOICE_ID
FROM {legacy}.SDS_ORDER
WHERE SMS_ORDER_ID like 'F%' OR

SMS_ORDER_ID IS NULL""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node SQ_Shortcut_to_SDS_PSVC_INVOICE_C_PRE, type SOURCE 
# COLUMN COUNT: 20

SQ_Shortcut_to_SDS_PSVC_INVOICE_C_PRE = spark.sql(f"""SELECT
ID,
OWNER_ID,
IS_DELETED,
NAME,
CURRENCY_ISO_CODE,
RECORD_TYPE_ID,
CREATED_DATE,
CREATED_BY_ID,
LAST_MODIFIED_DATE,
LAST_MODIFIED_BY_ID,
SYSTEM_MOD_STAMP,
LAST_VIEWED_DATE,
LAST_REFERENCED_DATE,
PSVC_INVOICE_NUMBER_C,
PSVC_PAID_C,
PSVC_EXTERNAL_URL_C,
PSVC_PAYMENT_ORIGIN_C,
PSVC_TRANSACTION_DATE_TIME_C,
PSVC_PARENT_INVOICE_C,
PSVC_PAYMENT_DUE_INVOICE_NUMBER_C
FROM {raw}.SDS_PSVC_INVOICE_C_PRE""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node JNR_SDS_ORDER, type JOINER 
# COLUMN COUNT: 21

JNR_SDS_ORDER = SQ_Shortcut_to_SDS_ORDER.join(SQ_Shortcut_to_SDS_PSVC_INVOICE_C_PRE,[SQ_Shortcut_to_SDS_ORDER.SDS_INVOICE_ID == SQ_Shortcut_to_SDS_PSVC_INVOICE_C_PRE.ID],'inner')

# COMMAND ----------
# Processing node JNR_SDS_INVOICE, type JOINER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 25

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_SDS_INVOICE_temp = SQ_Shortcut_to_SDS_INVOICE.toDF(*["SQ_Shortcut_to_SDS_INVOICE___" + col for col in SQ_Shortcut_to_SDS_INVOICE.columns])
JNR_SDS_ORDER_temp = JNR_SDS_ORDER.toDF(*["JNR_SDS_ORDER___" + col for col in JNR_SDS_ORDER.columns])

JNR_SDS_INVOICE = JNR_SDS_ORDER_temp.join(SQ_Shortcut_to_SDS_INVOICE_temp,[JNR_SDS_ORDER_temp.JNR_SDS_ORDER___ID == SQ_Shortcut_to_SDS_INVOICE_temp.SQ_Shortcut_to_SDS_INVOICE___SDS_INVOICE_ID],'left_outer').selectExpr(
	"SQ_Shortcut_to_SDS_INVOICE___SDS_INVOICE_ID as i_SDS_INVOICE_ID",
	"SQ_Shortcut_to_SDS_INVOICE___SDS_SYSTEM_MODIFIED_TSTMP as i_SDS_SYSTEM_MODIFIED_TSTMP",
	"SQ_Shortcut_to_SDS_INVOICE___SDS_LAST_MODIFIED_TSTMP as i_SDS_LAST_MODIFIED_TSTMP",
	"SQ_Shortcut_to_SDS_INVOICE___SDS_CREATED_TSTMP as i_SDS_CREATED_TSTMP",
	"SQ_Shortcut_to_SDS_INVOICE___LOAD_TSTMP as i_LOAD_TSTMP",
	"JNR_SDS_ORDER___ID as ID",
	"JNR_SDS_ORDER___OWNER_ID as OWNER_ID",
	"JNR_SDS_ORDER___IS_DELETED as IS_DELETED",
	"JNR_SDS_ORDER___NAME as NAME",
	"JNR_SDS_ORDER___CURRENCY_ISO_CODE as CURRENCY_ISO_CODE",
	"JNR_SDS_ORDER___RECORD_TYPE_ID as RECORD_TYPE_ID",
	"JNR_SDS_ORDER___CREATED_DATE as CREATED_DATE",
	"JNR_SDS_ORDER___CREATED_BY_ID as CREATED_BY_ID",
	"JNR_SDS_ORDER___LAST_MODIFIED_DATE as LAST_MODIFIED_DATE",
	"JNR_SDS_ORDER___LAST_MODIFIED_BY_ID as LAST_MODIFIED_BY_ID",
	"JNR_SDS_ORDER___SYSTEM_MOD_STAMP as SYSTEM_MOD_STAMP",
	"JNR_SDS_ORDER___LAST_VIEWED_DATE as LAST_VIEWED_DATE",
	"JNR_SDS_ORDER___LAST_REFERENCED_DATE as LAST_REFERENCED_DATE",
	"JNR_SDS_ORDER___PSVC_INVOICE_NUMBER_C as PSVC_INVOICE_NUMBER_C",
	"JNR_SDS_ORDER___PSVC_PAID_C as PSVC_PAID_C",
	"JNR_SDS_ORDER___PSVC_EXTERNAL_URL_C as PSVC_EXTERNAL_URL_C",
	"JNR_SDS_ORDER___PSVC_PAYMENT_ORIGIN_C as PSVC_PAYMENT_ORIGIN_C",
	"JNR_SDS_ORDER___PSVC_TRANSACTION_DATE_TIME_C as PSVC_TRANSACTION_DATE_TIME_C",
	"JNR_SDS_ORDER___PSVC_PARENT_INVOICE_C as PSVC_PARENT_INVOICE_C",
	"JNR_SDS_ORDER___PSVC_PAYMENT_DUE_INVOICE_NUMBER_C as PSVC_PAYMENT_DUE_INVOICE_NUMBER_C")

# COMMAND ----------
# Processing node FIL_SDS_INVOICE, type FILTER 
# COLUMN COUNT: 25

# for each involved DataFrame, append the dataframe name to each column
JNR_SDS_INVOICE_temp = JNR_SDS_INVOICE.toDF(*["JNR_SDS_INVOICE___" + col for col in JNR_SDS_INVOICE.columns])

FIL_SDS_INVOICE = JNR_SDS_INVOICE_temp.selectExpr(
	"JNR_SDS_INVOICE___i_SDS_INVOICE_ID as i_SDS_INVOICE_ID",
	"JNR_SDS_INVOICE___i_SDS_SYSTEM_MODIFIED_TSTMP as i_SDS_SYSTEM_MODIFIED_TSTMP",
	"JNR_SDS_INVOICE___i_SDS_LAST_MODIFIED_TSTMP as i_SDS_LAST_MODIFIED_TSTMP",
	"JNR_SDS_INVOICE___i_SDS_CREATED_TSTMP as i_SDS_CREATED_TSTMP",
	"JNR_SDS_INVOICE___i_LOAD_TSTMP as i_LOAD_TSTMP",
	"JNR_SDS_INVOICE___ID as ID",
	"JNR_SDS_INVOICE___OWNER_ID as OWNER_ID",
	"JNR_SDS_INVOICE___IS_DELETED as IS_DELETED",
	"JNR_SDS_INVOICE___NAME as NAME",
	"JNR_SDS_INVOICE___CURRENCY_ISO_CODE as CURRENCY_ISO_CODE",
	"JNR_SDS_INVOICE___RECORD_TYPE_ID as RECORD_TYPE_ID",
	"JNR_SDS_INVOICE___CREATED_DATE as CREATED_DATE",
	"JNR_SDS_INVOICE___CREATED_BY_ID as CREATED_BY_ID",
	"JNR_SDS_INVOICE___LAST_MODIFIED_DATE as LAST_MODIFIED_DATE",
	"JNR_SDS_INVOICE___LAST_MODIFIED_BY_ID as LAST_MODIFIED_BY_ID",
	"JNR_SDS_INVOICE___SYSTEM_MOD_STAMP as SYSTEM_MOD_STAMP",
	"JNR_SDS_INVOICE___LAST_VIEWED_DATE as LAST_VIEWED_DATE",
	"JNR_SDS_INVOICE___LAST_REFERENCED_DATE as LAST_REFERENCED_DATE",
	"JNR_SDS_INVOICE___PSVC_INVOICE_NUMBER_C as PSVC_INVOICE_NUMBER_C",
	"JNR_SDS_INVOICE___PSVC_PAID_C as PSVC_PAID_C",
	"JNR_SDS_INVOICE___PSVC_EXTERNAL_URL_C as PSVC_EXTERNAL_URL_C",
	"JNR_SDS_INVOICE___PSVC_PAYMENT_ORIGIN_C as PSVC_PAYMENT_ORIGIN_C",
	"JNR_SDS_INVOICE___PSVC_TRANSACTION_DATE_TIME_C as PSVC_TRANSACTION_DATE_TIME_C",
	"JNR_SDS_INVOICE___PSVC_PARENT_INVOICE_C as PSVC_PARENT_INVOICE_C",
	"JNR_SDS_INVOICE___PSVC_PAYMENT_DUE_INVOICE_NUMBER_C as PSVC_PAYMENT_DUE_INVOICE_NUMBER_C").filter("i_SDS_INVOICE_ID IS NULL OR ( i_SDS_INVOICE_ID IS NOT NULL AND ( i_SDS_SYSTEM_MODIFIED_TSTMP != SYSTEM_MOD_STAMP OR i_SDS_CREATED_TSTMP != CREATED_DATE OR i_SDS_LAST_MODIFIED_TSTMP != LAST_MODIFIED_DATE ) )").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node EXP_SDS_INVOICE, type EXPRESSION 
# COLUMN COUNT: 23

# for each involved DataFrame, append the dataframe name to each column
FIL_SDS_INVOICE_temp = FIL_SDS_INVOICE.toDF(*["FIL_SDS_INVOICE___" + col for col in FIL_SDS_INVOICE.columns])

EXP_SDS_INVOICE = FIL_SDS_INVOICE_temp.selectExpr(
	"FIL_SDS_INVOICE___sys_row_id as sys_row_id",
	"FIL_SDS_INVOICE___ID as ID",
	"FIL_SDS_INVOICE___OWNER_ID as OWNER_ID",
	"FIL_SDS_INVOICE___IS_DELETED as IS_DELETED",
	"FIL_SDS_INVOICE___NAME as NAME",
	"FIL_SDS_INVOICE___CURRENCY_ISO_CODE as CURRENCY_ISO_CODE",
	"FIL_SDS_INVOICE___RECORD_TYPE_ID as RECORD_TYPE_ID",
	"FIL_SDS_INVOICE___CREATED_DATE as CREATED_DATE",
	"FIL_SDS_INVOICE___CREATED_BY_ID as CREATED_BY_ID",
	"FIL_SDS_INVOICE___LAST_MODIFIED_DATE as LAST_MODIFIED_DATE",
	"FIL_SDS_INVOICE___LAST_MODIFIED_BY_ID as LAST_MODIFIED_BY_ID",
	"FIL_SDS_INVOICE___SYSTEM_MOD_STAMP as SYSTEM_MOD_STAMP",
	"FIL_SDS_INVOICE___LAST_VIEWED_DATE as LAST_VIEWED_DATE",
	"FIL_SDS_INVOICE___LAST_REFERENCED_DATE as LAST_REFERENCED_DATE",
	"FIL_SDS_INVOICE___PSVC_INVOICE_NUMBER_C as PSVC_INVOICE_NUMBER_C",
	"FIL_SDS_INVOICE___PSVC_PAID_C as PSVC_PAID_C",
	"FIL_SDS_INVOICE___PSVC_EXTERNAL_URL_C as PSVC_EXTERNAL_URL_C",
	"FIL_SDS_INVOICE___PSVC_PAYMENT_ORIGIN_C as PSVC_PAYMENT_ORIGIN_C",
	"FIL_SDS_INVOICE___PSVC_TRANSACTION_DATE_TIME_C as PSVC_TRANSACTION_DATE_TIME_C",
	"FIL_SDS_INVOICE___PSVC_PARENT_INVOICE_C as PSVC_PARENT_INVOICE_C",
	"FIL_SDS_INVOICE___PSVC_PAYMENT_DUE_INVOICE_NUMBER_C as PSVC_PAYMENT_DUE_INVOICE_NUMBER_C",
	"CURRENT_TIMESTAMP as UPDATE_TSTMP",
	"IF (FIL_SDS_INVOICE___i_LOAD_TSTMP IS NULL, CURRENT_TIMESTAMP, FIL_SDS_INVOICE___i_LOAD_TSTMP) as LOAD_TSTMP",
	"IF (FIL_SDS_INVOICE___i_SDS_INVOICE_ID IS NULL, 1, 2) as o_UPDATE_VALIDATOR"
)

# COMMAND ----------
# Processing node UPD_SDS_INVOICE, type UPDATE_STRATEGY 
# COLUMN COUNT: 23

# for each involved DataFrame, append the dataframe name to each column
EXP_SDS_INVOICE_temp = EXP_SDS_INVOICE.toDF(*["EXP_SDS_INVOICE___" + col for col in EXP_SDS_INVOICE.columns])

UPD_SDS_INVOICE = EXP_SDS_INVOICE_temp.selectExpr(
	"EXP_SDS_INVOICE___ID as ID",
	"EXP_SDS_INVOICE___OWNER_ID as OWNER_ID",
	"EXP_SDS_INVOICE___IS_DELETED as IS_DELETED",
	"EXP_SDS_INVOICE___NAME as NAME",
	"EXP_SDS_INVOICE___CURRENCY_ISO_CODE as CURRENCY_ISO_CODE",
	"EXP_SDS_INVOICE___RECORD_TYPE_ID as RECORD_TYPE_ID",
	"EXP_SDS_INVOICE___CREATED_DATE as CREATED_DATE",
	"EXP_SDS_INVOICE___CREATED_BY_ID as CREATED_BY_ID",
	"EXP_SDS_INVOICE___LAST_MODIFIED_DATE as LAST_MODIFIED_DATE",
	"EXP_SDS_INVOICE___LAST_MODIFIED_BY_ID as LAST_MODIFIED_BY_ID",
	"EXP_SDS_INVOICE___SYSTEM_MOD_STAMP as SYSTEM_MOD_STAMP",
	"EXP_SDS_INVOICE___LAST_VIEWED_DATE as LAST_VIEWED_DATE",
	"EXP_SDS_INVOICE___LAST_REFERENCED_DATE as LAST_REFERENCED_DATE",
	"EXP_SDS_INVOICE___PSVC_INVOICE_NUMBER_C as PSVC_INVOICE_NUMBER_C",
	"EXP_SDS_INVOICE___PSVC_PAID_C as PSVC_PAID_C",
	"EXP_SDS_INVOICE___PSVC_EXTERNAL_URL_C as PSVC_EXTERNAL_URL_C",
	"EXP_SDS_INVOICE___PSVC_PAYMENT_ORIGIN_C as PSVC_PAYMENT_ORIGIN_C",
	"EXP_SDS_INVOICE___PSVC_TRANSACTION_DATE_TIME_C as PSVC_TRANSACTION_DATE_TIME_C",
	"EXP_SDS_INVOICE___PSVC_PARENT_INVOICE_C as PSVC_PARENT_INVOICE_C",
	"EXP_SDS_INVOICE___PSVC_PAYMENT_DUE_INVOICE_NUMBER_C as PSVC_PAYMENT_DUE_INVOICE_NUMBER_C",
	"EXP_SDS_INVOICE___UPDATE_TSTMP as UPDATE_TSTMP",
	"EXP_SDS_INVOICE___LOAD_TSTMP as LOAD_TSTMP",
	"EXP_SDS_INVOICE___o_UPDATE_VALIDATOR as o_UPDATE_VALIDATOR")\
	.withColumn('pyspark_data_action', when(col('o_UPDATE_VALIDATOR') ==(lit(1)) , lit(0)) .when(col('o_UPDATE_VALIDATOR') ==(lit(2)) , lit(1)))

# COMMAND ----------
# Processing node Shortcut_to_SDS_INVOICE_1, type TARGET 
# COLUMN COUNT: 22


Shortcut_to_SDS_INVOICE_1 = UPD_SDS_INVOICE.selectExpr(
	"CAST(ID AS STRING) as SDS_INVOICE_ID",
	"CAST(NAME AS STRING) as SDS_INVOICE_NAME",
	"CAST(PSVC_INVOICE_NUMBER_C AS STRING) as SDS_INVOICE_NBR",
	"CAST(PSVC_PARENT_INVOICE_C AS STRING) as SDS_PARENT_INVOICE_ID",
	"CAST(PSVC_PAYMENT_DUE_INVOICE_NUMBER_C AS STRING) as SDS_PAYMENT_DUE_INVOICE_NBR",
	"CAST(PSVC_TRANSACTION_DATE_TIME_C AS TIMESTAMP) as SDS_TXN_TSTMP",
	"CAST(PSVC_PAID_C AS TINYINT) as PAID_FLAG",
	"CAST(PSVC_PAYMENT_ORIGIN_C AS STRING) as PAYMENT_ORIGIN",
	"CAST(LAST_VIEWED_DATE AS TIMESTAMP) as SDS_LAST_VIEWED_TSTMP",
	"CAST(LAST_REFERENCED_DATE AS TIMESTAMP) as SDS_LAST_REFERENCED_TSTMP",
	"CAST(RECORD_TYPE_ID AS STRING) as SDS_RECORD_TYPE_ID",
	"CAST(OWNER_ID AS STRING) as SDS_OWNER_ID",
	"CAST(PSVC_EXTERNAL_URL_C AS STRING) as EXTERNAL_URL",
	"CAST(CURRENCY_ISO_CODE AS STRING) as CURRENCY_ISO_CD",
	"CAST(IS_DELETED AS TINYINT) as DELETED_FLAG",
	"CAST(SYSTEM_MOD_STAMP AS TIMESTAMP) as SDS_SYSTEM_MODIFIED_TSTMP",
	"CAST(LAST_MODIFIED_DATE AS TIMESTAMP) as SDS_LAST_MODIFIED_TSTMP",
	"CAST(LAST_MODIFIED_BY_ID AS STRING) as SDS_LAST_MODIFIED_BY_ID",
	"CAST(CREATED_DATE AS TIMESTAMP) as SDS_CREATED_TSTMP",
	"CAST(CREATED_BY_ID AS STRING) as SDS_CREATED_BY_ID",
	"CAST(UPDATE_TSTMP AS TIMESTAMP) as UPDATE_TSTMP",
	"CAST(LOAD_TSTMP AS TIMESTAMP) as LOAD_TSTMP",
	"UPD_SDS_INVOICE.pyspark_data_action as pyspark_data_action"
)

try:
  primary_key = """source.SDS_INVOICE_ID = target.SDS_INVOICE_ID"""
  refined_perf_table = f"{legacy}.SDS_INVOICE"
  executeMerge(Shortcut_to_SDS_INVOICE_1, refined_perf_table, primary_key)
  logger.info(f"Merge with {refined_perf_table} completed]")
  logPrevRunDt("SDS_INVOICE", "SDS_INVOICE", "Completed", "N/A", f"{raw}.log_run_details")
except Exception as e:
  logPrevRunDt("SDS_INVOICE", "SDS_INVOICE","Failed",str(e), f"{raw}.log_run_details", )
  raise e
	