#Code converted on 2023-07-24 08:17:21
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from Datalake.utils.genericUtilities import *
from Datalake.utils.configs import *
from Datalake.utils.mergeUtils import *
from Datalake.utils.logger import *
# COMMAND ----------

parser = argparse.ArgumentParser()
spark = SparkSession.getActiveSession()
parser.add_argument('env', type=str, help='Env Variable')
args = parser.parse_args()
env = args.env

if env is None or env == '':
    raise ValueError('env is not set')

refine = getEnvPrefix(env) + 'refine'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'


# COMMAND ----------
# Processing node SQ_Shortcut_to_SDS_PSVC_CLASS_SESSION_C_PRE, type SOURCE 
# COLUMN COUNT: 18

SQ_Shortcut_to_SDS_PSVC_CLASS_SESSION_C_PRE = spark.sql(f"""SELECT
ID,
ISDELETED,
NAME,
CURRENCYISOCODE,
CREATEDDATE,
CREATEDBYID,
LASTMODIFIEDDATE,
LASTMODIFIEDBYID,
SYSTEMMODSTAMP,
LASTVIEWEDDATE,
LASTREFERENCEDDATE,
PSVC_SERVICE_RESOURCE_C,
PSVC_SERVICE_TYPE_C,
PSVC_CLASS_END_TIME_C,
PSVC_CLASS_START_TIME_C,
PSVC_SERVICE_LOCATION_C,
PSVC_CLASS_STATUS_C,
LOAD_TSTMP
FROM {raw}.SDS_PSVC_CLASS_SESSION_C_PRE""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node SQ_Shortcut_to_SDS_CLASS_SESSION, type SOURCE 
# COLUMN COUNT: 5

SQ_Shortcut_to_SDS_CLASS_SESSION = spark.sql(f"""SELECT
SDS_CLASS_SESSION_ID,
SDS_SYSTEM_MODIFIED_TSTMP,
SDS_LAST_MODIFIED_TSTMP,
SDS_CREATED_TSTMP,
LOAD_TSTMP
FROM {legacy}.SDS_CLASS_SESSION""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node JNR_SDS_CLASS_SESSION, type JOINER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 25

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_SDS_CLASS_SESSION_temp = SQ_Shortcut_to_SDS_CLASS_SESSION.toDF(*["SQ_Shortcut_to_SDS_CLASS_SESSION___" + col for col in SQ_Shortcut_to_SDS_CLASS_SESSION.columns])
SQ_Shortcut_to_SDS_PSVC_CLASS_SESSION_C_PRE_temp = SQ_Shortcut_to_SDS_PSVC_CLASS_SESSION_C_PRE.toDF(*["SQ_Shortcut_to_SDS_PSVC_CLASS_SESSION_C_PRE___" + col for col in SQ_Shortcut_to_SDS_PSVC_CLASS_SESSION_C_PRE.columns])

JNR_SDS_CLASS_SESSION = SQ_Shortcut_to_SDS_CLASS_SESSION_temp.join(SQ_Shortcut_to_SDS_PSVC_CLASS_SESSION_C_PRE_temp,[SQ_Shortcut_to_SDS_CLASS_SESSION_temp.SQ_Shortcut_to_SDS_CLASS_SESSION___SDS_CLASS_SESSION_ID == SQ_Shortcut_to_SDS_PSVC_CLASS_SESSION_C_PRE_temp.SQ_Shortcut_to_SDS_PSVC_CLASS_SESSION_C_PRE___ID],'right_outer').selectExpr(
	"SQ_Shortcut_to_SDS_PSVC_CLASS_SESSION_C_PRE___ID as ID",
	"SQ_Shortcut_to_SDS_PSVC_CLASS_SESSION_C_PRE___ISDELETED as ISDELETED",
	"SQ_Shortcut_to_SDS_PSVC_CLASS_SESSION_C_PRE___NAME as NAME",
	"SQ_Shortcut_to_SDS_PSVC_CLASS_SESSION_C_PRE___CURRENCYISOCODE as CURRENCYISOCODE",
	"SQ_Shortcut_to_SDS_PSVC_CLASS_SESSION_C_PRE___CREATEDDATE as CREATEDDATE",
	"SQ_Shortcut_to_SDS_PSVC_CLASS_SESSION_C_PRE___CREATEDBYID as CREATEDBYID",
	"SQ_Shortcut_to_SDS_PSVC_CLASS_SESSION_C_PRE___LASTMODIFIEDDATE as LASTMODIFIEDDATE",
	"SQ_Shortcut_to_SDS_PSVC_CLASS_SESSION_C_PRE___LASTMODIFIEDBYID as LASTMODIFIEDBYID",
	"SQ_Shortcut_to_SDS_PSVC_CLASS_SESSION_C_PRE___SYSTEMMODSTAMP as SYSTEMMODSTAMP",
	"SQ_Shortcut_to_SDS_PSVC_CLASS_SESSION_C_PRE___LASTVIEWEDDATE as LASTVIEWEDDATE",
	"SQ_Shortcut_to_SDS_PSVC_CLASS_SESSION_C_PRE___LASTREFERENCEDDATE as LASTREFERENCEDDATE",
	"SQ_Shortcut_to_SDS_PSVC_CLASS_SESSION_C_PRE___PSVC_SERVICE_RESOURCE_C as PSVC_SERVICE_RESOURCE_C",
	"SQ_Shortcut_to_SDS_PSVC_CLASS_SESSION_C_PRE___PSVC_SERVICE_TYPE_C as PSVC_SERVICE_TYPE_C",
	"SQ_Shortcut_to_SDS_PSVC_CLASS_SESSION_C_PRE___PSVC_CLASS_END_TIME_C as PSVC_CLASS_END_TIME_C",
	"SQ_Shortcut_to_SDS_PSVC_CLASS_SESSION_C_PRE___PSVC_CLASS_START_TIME_C as PSVC_CLASS_START_TIME_C",
	"SQ_Shortcut_to_SDS_PSVC_CLASS_SESSION_C_PRE___PSVC_SERVICE_LOCATION_C as PSVC_SERVICE_LOCATION_C",
	"SQ_Shortcut_to_SDS_PSVC_CLASS_SESSION_C_PRE___PSVC_CLASS_STATUS_C as PSVC_CLASS_STATUS_C",
	"SQ_Shortcut_to_SDS_PSVC_CLASS_SESSION_C_PRE___LOAD_TSTMP as LOAD_TSTMP",
	"SQ_Shortcut_to_SDS_CLASS_SESSION___SDS_CLASS_SESSION_ID as i_SDS_CLASS_SESSION_ID",
	"SQ_Shortcut_to_SDS_CLASS_SESSION___SDS_CREATED_TSTMP as i_SDS_CREATED_TSTMP",
	"SQ_Shortcut_to_SDS_CLASS_SESSION___SDS_SYSTEM_MODIFIED_TSTMP as i_SDS_SYSTEM_MODIFIED_TSTMP",
	"SQ_Shortcut_to_SDS_CLASS_SESSION___SDS_LAST_MODIFIED_TSTMP as i_SDS_LAST_MODIFIED_TSTMP",
	"SQ_Shortcut_to_SDS_CLASS_SESSION___LOAD_TSTMP as i_LOAD_TSTMP")\
	.withColumn('PSVC_MEETING_ID_C', lit(None))\
	.withColumn('PSVC_MEETING_LINK_C', lit(None))
	

# COMMAND ----------
# Processing node FIL_SDS_CLASS_SESSION, type FILTER 
# COLUMN COUNT: 25

# for each involved DataFrame, append the dataframe name to each column
JNR_SDS_CLASS_SESSION_temp = JNR_SDS_CLASS_SESSION.toDF(*["JNR_SDS_CLASS_SESSION___" + col for col in JNR_SDS_CLASS_SESSION.columns])

FIL_SDS_CLASS_SESSION = JNR_SDS_CLASS_SESSION_temp.selectExpr(
	"JNR_SDS_CLASS_SESSION___ID as ID",
	"JNR_SDS_CLASS_SESSION___ISDELETED as ISDELETED",
	"JNR_SDS_CLASS_SESSION___NAME as NAME",
	"JNR_SDS_CLASS_SESSION___CURRENCYISOCODE as CURRENCYISOCODE",
	"JNR_SDS_CLASS_SESSION___CREATEDDATE as CREATEDDATE",
	"JNR_SDS_CLASS_SESSION___CREATEDBYID as CREATEDBYID",
	"JNR_SDS_CLASS_SESSION___LASTMODIFIEDDATE as LASTMODIFIEDDATE",
	"JNR_SDS_CLASS_SESSION___LASTMODIFIEDBYID as LASTMODIFIEDBYID",
	"JNR_SDS_CLASS_SESSION___SYSTEMMODSTAMP as SYSTEMMODSTAMP",
	"JNR_SDS_CLASS_SESSION___LASTVIEWEDDATE as LASTVIEWEDDATE",
	"JNR_SDS_CLASS_SESSION___LASTREFERENCEDDATE as LASTREFERENCEDDATE",
	"JNR_SDS_CLASS_SESSION___PSVC_SERVICE_RESOURCE_C as PSVC_SERVICE_RESOURCE_C",
	"JNR_SDS_CLASS_SESSION___PSVC_SERVICE_TYPE_C as PSVC_SERVICE_TYPE_C",
	"JNR_SDS_CLASS_SESSION___PSVC_CLASS_END_TIME_C as PSVC_CLASS_END_TIME_C",
	"JNR_SDS_CLASS_SESSION___PSVC_CLASS_START_TIME_C as PSVC_CLASS_START_TIME_C",
	"JNR_SDS_CLASS_SESSION___PSVC_SERVICE_LOCATION_C as PSVC_SERVICE_LOCATION_C",
	"JNR_SDS_CLASS_SESSION___PSVC_CLASS_STATUS_C as PSVC_CLASS_STATUS_C",
	"JNR_SDS_CLASS_SESSION___PSVC_MEETING_ID_C as PSVC_MEETING_ID_C",
	"JNR_SDS_CLASS_SESSION___PSVC_MEETING_LINK_C as PSVC_MEETING_LINK_C",
	"JNR_SDS_CLASS_SESSION___LOAD_TSTMP as LOAD_TSTMP",
	"JNR_SDS_CLASS_SESSION___i_SDS_CLASS_SESSION_ID as i_SDS_CLASS_SESSION_ID",
	"JNR_SDS_CLASS_SESSION___i_SDS_CREATED_TSTMP as i_SDS_CREATED_TSTMP",
	"JNR_SDS_CLASS_SESSION___i_SDS_SYSTEM_MODIFIED_TSTMP as i_SDS_SYSTEM_MODIFIED_TSTMP",
	"JNR_SDS_CLASS_SESSION___i_SDS_LAST_MODIFIED_TSTMP as i_SDS_LAST_MODIFIED_TSTMP",
	"JNR_SDS_CLASS_SESSION___i_LOAD_TSTMP as i_LOAD_TSTMP").filter("i_SDS_CLASS_SESSION_ID IS NULL OR i_SDS_CLASS_SESSION_ID IS NOT NULL AND ( i_SDS_SYSTEM_MODIFIED_TSTMP != SYSTEMMODSTAMP OR i_SDS_CREATED_TSTMP != CREATEDDATE OR i_SDS_LAST_MODIFIED_TSTMP != LASTMODIFIEDDATE )").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node EXP_CLASS_SESSION, type EXPRESSION 
# COLUMN COUNT: 27

# for each involved DataFrame, append the dataframe name to each column
FIL_SDS_CLASS_SESSION_temp = FIL_SDS_CLASS_SESSION.toDF(*["FIL_SDS_CLASS_SESSION___" + col for col in FIL_SDS_CLASS_SESSION.columns])

EXP_CLASS_SESSION = FIL_SDS_CLASS_SESSION_temp.selectExpr(
	"FIL_SDS_CLASS_SESSION___sys_row_id as sys_row_id",
	"FIL_SDS_CLASS_SESSION___ID as ID",
	"FIL_SDS_CLASS_SESSION___ISDELETED as ISDELETED",
	"FIL_SDS_CLASS_SESSION___NAME as NAME",
	"FIL_SDS_CLASS_SESSION___CURRENCYISOCODE as CURRENCYISOCODE",
	"FIL_SDS_CLASS_SESSION___CREATEDDATE as CREATEDDATE",
	"FIL_SDS_CLASS_SESSION___CREATEDBYID as CREATEDBYID",
	"FIL_SDS_CLASS_SESSION___LASTMODIFIEDDATE as LASTMODIFIEDDATE",
	"FIL_SDS_CLASS_SESSION___LASTMODIFIEDBYID as LASTMODIFIEDBYID",
	"FIL_SDS_CLASS_SESSION___SYSTEMMODSTAMP as SYSTEMMODSTAMP",
	"FIL_SDS_CLASS_SESSION___LASTVIEWEDDATE as LASTVIEWEDDATE",
	"FIL_SDS_CLASS_SESSION___LASTREFERENCEDDATE as LASTREFERENCEDDATE",
	"FIL_SDS_CLASS_SESSION___PSVC_SERVICE_RESOURCE_C as PSVC_SERVICE_RESOURCE_C",
	"FIL_SDS_CLASS_SESSION___PSVC_SERVICE_TYPE_C as PSVC_SERVICE_TYPE_C",
	"FIL_SDS_CLASS_SESSION___PSVC_CLASS_END_TIME_C as PSVC_CLASS_END_TIME_C",
	"FIL_SDS_CLASS_SESSION___PSVC_CLASS_START_TIME_C as PSVC_CLASS_START_TIME_C",
	"FIL_SDS_CLASS_SESSION___PSVC_SERVICE_LOCATION_C as PSVC_SERVICE_LOCATION_C",
	"FIL_SDS_CLASS_SESSION___PSVC_CLASS_STATUS_C as PSVC_CLASS_STATUS_C",
	"FIL_SDS_CLASS_SESSION___PSVC_MEETING_ID_C as PSVC_MEETING_ID_C",
	"FIL_SDS_CLASS_SESSION___PSVC_MEETING_LINK_C as PSVC_MEETING_LINK_C",
	"FIL_SDS_CLASS_SESSION___i_SDS_CLASS_SESSION_ID as i_SDS_CLASS_SESSION_ID",
	"FIL_SDS_CLASS_SESSION___i_SDS_CREATED_TSTMP as i_SDS_CREATED_TSTMP",
	"FIL_SDS_CLASS_SESSION___i_SDS_SYSTEM_MODIFIED_TSTMP as i_SDS_SYSTEM_MODIFIED_TSTMP",
	"FIL_SDS_CLASS_SESSION___i_SDS_LAST_MODIFIED_TSTMP as i_SDS_LAST_MODIFIED_TSTMP",
	"FIL_SDS_CLASS_SESSION___i_LOAD_TSTMP as i_LOAD_TSTMP",
	"CURRENT_TIMESTAMP as UPDATE_TSTMP",
	"IF (FIL_SDS_CLASS_SESSION___i_LOAD_TSTMP IS NULL, CURRENT_TIMESTAMP, FIL_SDS_CLASS_SESSION___i_LOAD_TSTMP) as LOAD_TSTMP",
	"IF (FIL_SDS_CLASS_SESSION___i_SDS_CLASS_SESSION_ID IS NULL, 1, 2) as o_UPDATE_VALIDATOR"
)

# COMMAND ----------
# Processing node UPD_CLASS_SESSION, type UPDATE_STRATEGY 
# COLUMN COUNT: 22

# for each involved DataFrame, append the dataframe name to each column
EXP_CLASS_SESSION_temp = EXP_CLASS_SESSION.toDF(*["EXP_CLASS_SESSION___" + col for col in EXP_CLASS_SESSION.columns])

UPD_CLASS_SESSION = EXP_CLASS_SESSION_temp.selectExpr(
	"EXP_CLASS_SESSION___ID as ID",
	"EXP_CLASS_SESSION___ISDELETED as ISDELETED",
	"EXP_CLASS_SESSION___NAME as NAME",
	"EXP_CLASS_SESSION___CURRENCYISOCODE as CURRENCYISOCODE",
	"EXP_CLASS_SESSION___CREATEDDATE as CREATEDDATE",
	"EXP_CLASS_SESSION___CREATEDBYID as CREATEDBYID",
	"EXP_CLASS_SESSION___LASTMODIFIEDDATE as LASTMODIFIEDDATE",
	"EXP_CLASS_SESSION___LASTMODIFIEDBYID as LASTMODIFIEDBYID",
	"EXP_CLASS_SESSION___SYSTEMMODSTAMP as SYSTEMMODSTAMP",
	"EXP_CLASS_SESSION___LASTVIEWEDDATE as LASTVIEWEDDATE",
	"EXP_CLASS_SESSION___LASTREFERENCEDDATE as LASTREFERENCEDDATE",
	"EXP_CLASS_SESSION___PSVC_SERVICE_RESOURCE_C as PSVC_SERVICE_RESOURCE_C",
	"EXP_CLASS_SESSION___PSVC_SERVICE_TYPE_C as PSVC_SERVICE_TYPE_C",
	"EXP_CLASS_SESSION___PSVC_CLASS_END_TIME_C as PSVC_CLASS_END_TIME_C",
	"EXP_CLASS_SESSION___PSVC_CLASS_START_TIME_C as PSVC_CLASS_START_TIME_C",
	"EXP_CLASS_SESSION___PSVC_SERVICE_LOCATION_C as PSVC_SERVICE_LOCATION_C",
	"EXP_CLASS_SESSION___PSVC_CLASS_STATUS_C as PSVC_CLASS_STATUS_C",
	"EXP_CLASS_SESSION___PSVC_MEETING_ID_C as PSVC_MEETING_ID_C",
	"EXP_CLASS_SESSION___PSVC_MEETING_LINK_C as PSVC_MEETING_LINK_C",
	"EXP_CLASS_SESSION___UPDATE_TSTMP as UPDATE_TSTMP",
	"EXP_CLASS_SESSION___LOAD_TSTMP as LOAD_TSTMP",
	"EXP_CLASS_SESSION___o_UPDATE_VALIDATOR as o_UPDATE_VALIDATOR")\
	.withColumn('pyspark_data_action', when(col('o_UPDATE_VALIDATOR') ==(lit(1)) , lit(0)) .when(col('o_UPDATE_VALIDATOR') ==(lit(2)) , lit(1)))

# COMMAND ----------
# Processing node Shortcut_to_SDS_CLASS_SESSION_INSERT, type TARGET 
# COLUMN COUNT: 17


Shortcut_to_SDS_CLASS_SESSION_INSERT = UPD_CLASS_SESSION.selectExpr(
	"CAST(ID AS STRING) as SDS_CLASS_SESSION_ID",
	"CAST(NAME AS STRING) as SDS_CLASS_SESSION_NAME",
	"CAST(PSVC_SERVICE_LOCATION_C AS STRING) as SDS_SERVICE_TERRITORY_ID",
	"CAST(PSVC_SERVICE_RESOURCE_C AS STRING) as SDS_SERVICE_RESOURCE_ID",
	"CAST(PSVC_SERVICE_TYPE_C AS STRING) as SDS_WORK_TYPE_ID",
	"CAST(PSVC_CLASS_END_TIME_C AS TIMESTAMP) as CLASS_END_TIME",
	"CAST(PSVC_CLASS_START_TIME_C AS TIMESTAMP) as CLASS_START_TIME",
	"CAST(PSVC_CLASS_STATUS_C AS STRING) as CLASS_STATUS",
	"CAST(LASTVIEWEDDATE AS TIMESTAMP) as SDS_LAST_VIEWED_TSTMP",
	"CAST(LASTREFERENCEDDATE AS TIMESTAMP) as SDS_LAST_REFERENCED_TSTMP",
	"CAST(SYSTEMMODSTAMP AS TIMESTAMP) as SDS_SYSTEM_MODIFIED_TSTMP",
	"CAST(LASTMODIFIEDDATE AS TIMESTAMP) as SDS_LAST_MODIFIED_TSTMP",
	"CAST(LASTMODIFIEDBYID AS STRING) as SDS_LAST_MODIFIED_BY_ID",
	"CAST(CREATEDDATE AS TIMESTAMP) as SDS_CREATED_TSTMP",
	"CAST(CREATEDBYID AS STRING) as SDS_CREATED_BY_ID",
	"CAST(UPDATE_TSTMP AS TIMESTAMP) as UPDATE_TSTMP",
	"CAST(LOAD_TSTMP AS TIMESTAMP) as LOAD_TSTMP",
	"UPD_CLASS_SESSION.pyspark_data_action as pyspark_data_action"
)

try:
  primary_key = """source.SDS_CLASS_SESSION_ID = target.SDS_CLASS_SESSION_ID"""
  refined_perf_table = f"{legacy}.SDS_CLASS_SESSION"
  executeMerge(Shortcut_to_SDS_CLASS_SESSION_INSERT, refined_perf_table, primary_key)
  logger.info(f"Merge with {refined_perf_table} completed]")
  logPrevRunDt("SDS_CLASS_SESSION", "SDS_CLASS_SESSION", "Completed", "N/A", f"{raw}.log_run_details")
except Exception as e:
  logPrevRunDt("SDS_CLASS_SESSION", "SDS_CLASS_SESSION","Failed",str(e), f"{raw}.log_run_details", )
  raise e
	