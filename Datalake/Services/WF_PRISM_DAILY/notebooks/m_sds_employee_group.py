#Code converted on 2023-07-24 08:20:30
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from Datalake.utils.genericUtilities import *
from Datalake.utils.configs import *
from Datalake.utils.mergeUtils import *
from Datalake.utils.logger import *
# COMMAND ----------

parser = argparse.ArgumentParser()
spark = SparkSession.getActiveSession()
parser.add_argument('env', type=str, help='Env Variable')
args = parser.parse_args()
env = args.env

if env is None or env == '':
    raise ValueError('env is not set')

refine = getEnvPrefix(env) + 'refine'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'


# COMMAND ----------
# Processing node SQ_Shortcut_to_SDS_EMPLOYEE_GROUP, type SOURCE 
# COLUMN COUNT: 5

SQ_Shortcut_to_SDS_EMPLOYEE_GROUP = spark.sql(f"""SELECT
SDS_EMPLOYEE_GROUP_ID,
SDS_SYSTEM_MODIFIED_TSTMP,
SDS_LAST_MODIFIED_TSTMP,
SDS_CREATED_TSTMP,
LOAD_TSTMP
FROM {legacy}.SDS_EMPLOYEE_GROUP""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node SQ_Shortcut_to_SDS_PSVC_EMPLOYEE_GROUP_C_PRE, type SOURCE 
# COLUMN COUNT: 19

SQ_Shortcut_to_SDS_PSVC_EMPLOYEE_GROUP_C_PRE = spark.sql(f"""SELECT
ID,
OWNER_ID,
IS_DELETED,
NAME,
CURRENCY_ISO_CODE,
CREATED_DATE,
CREATED_BY_ID,
LAST_MODIFIED_DATE,
LAST_MODIFIED_BY_ID,
SYSTEM_MOD_STAMP,
LAST_VIEWED_DATE,
LAST_REFERENCED_DATE,
PSVC_ACTIVE_C,
PSVC_COMMISSION_C,
PSVC_DESCRIPTION_C,
PSVC_EFFICIENCY_C,
PSVC_SAP_JOB_CODE_C,
PSVC_AVAILABLE_ONLINE_C,
PSVC_EMPLOYEE_GROUP_TYPE_C
FROM {raw}.SDS_PSVC_EMPLOYEE_GROUP_C_PRE""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node JNR_SDS_EMPLOYEE_GROUP, type JOINER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 24

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_SDS_EMPLOYEE_GROUP_temp = SQ_Shortcut_to_SDS_EMPLOYEE_GROUP.toDF(*["SQ_Shortcut_to_SDS_EMPLOYEE_GROUP___" + col for col in SQ_Shortcut_to_SDS_EMPLOYEE_GROUP.columns])
SQ_Shortcut_to_SDS_PSVC_EMPLOYEE_GROUP_C_PRE_temp = SQ_Shortcut_to_SDS_PSVC_EMPLOYEE_GROUP_C_PRE.toDF(*["SQ_Shortcut_to_SDS_PSVC_EMPLOYEE_GROUP_C_PRE___" + col for col in SQ_Shortcut_to_SDS_PSVC_EMPLOYEE_GROUP_C_PRE.columns])

JNR_SDS_EMPLOYEE_GROUP = SQ_Shortcut_to_SDS_PSVC_EMPLOYEE_GROUP_C_PRE_temp.join(SQ_Shortcut_to_SDS_EMPLOYEE_GROUP_temp,[SQ_Shortcut_to_SDS_PSVC_EMPLOYEE_GROUP_C_PRE_temp.SQ_Shortcut_to_SDS_PSVC_EMPLOYEE_GROUP_C_PRE___ID == SQ_Shortcut_to_SDS_EMPLOYEE_GROUP_temp.SQ_Shortcut_to_SDS_EMPLOYEE_GROUP___SDS_EMPLOYEE_GROUP_ID],'left_outer').selectExpr(
	"SQ_Shortcut_to_SDS_EMPLOYEE_GROUP___SDS_EMPLOYEE_GROUP_ID as i_SDS_EMPLOYEE_GROUP_ID",
	"SQ_Shortcut_to_SDS_EMPLOYEE_GROUP___SDS_SYSTEM_MODIFIED_TSTMP as i_SDS_SYSTEM_MODIFIED_TSTMP",
	"SQ_Shortcut_to_SDS_EMPLOYEE_GROUP___SDS_LAST_MODIFIED_TSTMP as i_SDS_LAST_MODIFIED_TSTMP",
	"SQ_Shortcut_to_SDS_EMPLOYEE_GROUP___SDS_CREATED_TSTMP as i_SDS_CREATED_TSTMP",
	"SQ_Shortcut_to_SDS_EMPLOYEE_GROUP___LOAD_TSTMP as i_LOAD_TSTMP",
	"SQ_Shortcut_to_SDS_PSVC_EMPLOYEE_GROUP_C_PRE___ID as ID",
	"SQ_Shortcut_to_SDS_PSVC_EMPLOYEE_GROUP_C_PRE___OWNER_ID as OWNER_ID",
	"SQ_Shortcut_to_SDS_PSVC_EMPLOYEE_GROUP_C_PRE___IS_DELETED as IS_DELETED",
	"SQ_Shortcut_to_SDS_PSVC_EMPLOYEE_GROUP_C_PRE___NAME as NAME",
	"SQ_Shortcut_to_SDS_PSVC_EMPLOYEE_GROUP_C_PRE___CURRENCY_ISO_CODE as CURRENCY_ISO_CODE",
	"SQ_Shortcut_to_SDS_PSVC_EMPLOYEE_GROUP_C_PRE___CREATED_DATE as CREATED_DATE",
	"SQ_Shortcut_to_SDS_PSVC_EMPLOYEE_GROUP_C_PRE___CREATED_BY_ID as CREATED_BY_ID",
	"SQ_Shortcut_to_SDS_PSVC_EMPLOYEE_GROUP_C_PRE___LAST_MODIFIED_DATE as LAST_MODIFIED_DATE",
	"SQ_Shortcut_to_SDS_PSVC_EMPLOYEE_GROUP_C_PRE___LAST_MODIFIED_BY_ID as LAST_MODIFIED_BY_ID",
	"SQ_Shortcut_to_SDS_PSVC_EMPLOYEE_GROUP_C_PRE___SYSTEM_MOD_STAMP as SYSTEM_MOD_STAMP",
	"SQ_Shortcut_to_SDS_PSVC_EMPLOYEE_GROUP_C_PRE___LAST_VIEWED_DATE as LAST_VIEWED_DATE",
	"SQ_Shortcut_to_SDS_PSVC_EMPLOYEE_GROUP_C_PRE___LAST_REFERENCED_DATE as LAST_REFERENCED_DATE",
	"SQ_Shortcut_to_SDS_PSVC_EMPLOYEE_GROUP_C_PRE___PSVC_ACTIVE_C as PSVC_ACTIVE_C",
	"SQ_Shortcut_to_SDS_PSVC_EMPLOYEE_GROUP_C_PRE___PSVC_COMMISSION_C as PSVC_COMMISSION_C",
	"SQ_Shortcut_to_SDS_PSVC_EMPLOYEE_GROUP_C_PRE___PSVC_DESCRIPTION_C as PSVC_DESCRIPTION_C",
	"SQ_Shortcut_to_SDS_PSVC_EMPLOYEE_GROUP_C_PRE___PSVC_EFFICIENCY_C as PSVC_EFFICIENCY_C",
	"SQ_Shortcut_to_SDS_PSVC_EMPLOYEE_GROUP_C_PRE___PSVC_SAP_JOB_CODE_C as PSVC_SAP_JOB_CODE_C",
	"SQ_Shortcut_to_SDS_PSVC_EMPLOYEE_GROUP_C_PRE___PSVC_AVAILABLE_ONLINE_C as PSVC_AVAILABLE_ONLINE_C",
	"SQ_Shortcut_to_SDS_PSVC_EMPLOYEE_GROUP_C_PRE___PSVC_EMPLOYEE_GROUP_TYPE_C as PSVC_EMPLOYEE_GROUP_TYPE_C")

# COMMAND ----------
# Processing node FIL_SDS_EMPLOYEE_GROUP, type FILTER 
# COLUMN COUNT: 24

# for each involved DataFrame, append the dataframe name to each column
JNR_SDS_EMPLOYEE_GROUP_temp = JNR_SDS_EMPLOYEE_GROUP.toDF(*["JNR_SDS_EMPLOYEE_GROUP___" + col for col in JNR_SDS_EMPLOYEE_GROUP.columns])

FIL_SDS_EMPLOYEE_GROUP = JNR_SDS_EMPLOYEE_GROUP_temp.selectExpr(
	"JNR_SDS_EMPLOYEE_GROUP___i_SDS_EMPLOYEE_GROUP_ID as i_SDS_EMPLOYEE_GROUP_ID",
	"JNR_SDS_EMPLOYEE_GROUP___i_SDS_SYSTEM_MODIFIED_TSTMP as i_SDS_SYSTEM_MODIFIED_TSTMP",
	"JNR_SDS_EMPLOYEE_GROUP___i_SDS_LAST_MODIFIED_TSTMP as i_SDS_LAST_MODIFIED_TSTMP",
	"JNR_SDS_EMPLOYEE_GROUP___i_SDS_CREATED_TSTMP as i_SDS_CREATED_TSTMP",
	"JNR_SDS_EMPLOYEE_GROUP___i_LOAD_TSTMP as i_LOAD_TSTMP",
	"JNR_SDS_EMPLOYEE_GROUP___ID as ID",
	"JNR_SDS_EMPLOYEE_GROUP___OWNER_ID as OWNER_ID",
	"JNR_SDS_EMPLOYEE_GROUP___IS_DELETED as IS_DELETED",
	"JNR_SDS_EMPLOYEE_GROUP___NAME as NAME",
	"JNR_SDS_EMPLOYEE_GROUP___CURRENCY_ISO_CODE as CURRENCY_ISO_CODE",
	"JNR_SDS_EMPLOYEE_GROUP___CREATED_DATE as CREATED_DATE",
	"JNR_SDS_EMPLOYEE_GROUP___CREATED_BY_ID as CREATED_BY_ID",
	"JNR_SDS_EMPLOYEE_GROUP___LAST_MODIFIED_DATE as LAST_MODIFIED_DATE",
	"JNR_SDS_EMPLOYEE_GROUP___LAST_MODIFIED_BY_ID as LAST_MODIFIED_BY_ID",
	"JNR_SDS_EMPLOYEE_GROUP___SYSTEM_MOD_STAMP as SYSTEM_MOD_STAMP",
	"JNR_SDS_EMPLOYEE_GROUP___LAST_VIEWED_DATE as LAST_VIEWED_DATE",
	"JNR_SDS_EMPLOYEE_GROUP___LAST_REFERENCED_DATE as LAST_REFERENCED_DATE",
	"JNR_SDS_EMPLOYEE_GROUP___PSVC_ACTIVE_C as PSVC_ACTIVE_C",
	"JNR_SDS_EMPLOYEE_GROUP___PSVC_COMMISSION_C as PSVC_COMMISSION_C",
	"JNR_SDS_EMPLOYEE_GROUP___PSVC_DESCRIPTION_C as PSVC_DESCRIPTION_C",
	"JNR_SDS_EMPLOYEE_GROUP___PSVC_EFFICIENCY_C as PSVC_EFFICIENCY_C",
	"JNR_SDS_EMPLOYEE_GROUP___PSVC_SAP_JOB_CODE_C as PSVC_SAP_JOB_CODE_C",
	"JNR_SDS_EMPLOYEE_GROUP___PSVC_AVAILABLE_ONLINE_C as PSVC_AVAILABLE_ONLINE_C",
	"JNR_SDS_EMPLOYEE_GROUP___PSVC_EMPLOYEE_GROUP_TYPE_C as PSVC_EMPLOYEE_GROUP_TYPE_C").filter("i_SDS_EMPLOYEE_GROUP_ID IS NULL OR ( i_SDS_EMPLOYEE_GROUP_ID IS NOT NULL AND ( i_SDS_SYSTEM_MODIFIED_TSTMP != SYSTEM_MOD_STAMP OR i_SDS_CREATED_TSTMP != CREATED_DATE OR i_SDS_LAST_MODIFIED_TSTMP != LAST_MODIFIED_DATE ) )").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node EXP_SDS_EMPLOYEE_GROUP, type EXPRESSION 
# COLUMN COUNT: 22

# for each involved DataFrame, append the dataframe name to each column
FIL_SDS_EMPLOYEE_GROUP_temp = FIL_SDS_EMPLOYEE_GROUP.toDF(*["FIL_SDS_EMPLOYEE_GROUP___" + col for col in FIL_SDS_EMPLOYEE_GROUP.columns])

EXP_SDS_EMPLOYEE_GROUP = FIL_SDS_EMPLOYEE_GROUP_temp.selectExpr(
	"FIL_SDS_EMPLOYEE_GROUP___sys_row_id as sys_row_id",
	"FIL_SDS_EMPLOYEE_GROUP___ID as ID",
	"FIL_SDS_EMPLOYEE_GROUP___OWNER_ID as OWNER_ID",
	"FIL_SDS_EMPLOYEE_GROUP___IS_DELETED as IS_DELETED",
	"FIL_SDS_EMPLOYEE_GROUP___NAME as NAME",
	"FIL_SDS_EMPLOYEE_GROUP___CURRENCY_ISO_CODE as CURRENCY_ISO_CODE",
	"FIL_SDS_EMPLOYEE_GROUP___CREATED_DATE as CREATED_DATE",
	"FIL_SDS_EMPLOYEE_GROUP___CREATED_BY_ID as CREATED_BY_ID",
	"FIL_SDS_EMPLOYEE_GROUP___LAST_MODIFIED_DATE as LAST_MODIFIED_DATE",
	"FIL_SDS_EMPLOYEE_GROUP___LAST_MODIFIED_BY_ID as LAST_MODIFIED_BY_ID",
	"FIL_SDS_EMPLOYEE_GROUP___SYSTEM_MOD_STAMP as SYSTEM_MOD_STAMP",
	"FIL_SDS_EMPLOYEE_GROUP___LAST_VIEWED_DATE as LAST_VIEWED_DATE",
	"FIL_SDS_EMPLOYEE_GROUP___LAST_REFERENCED_DATE as LAST_REFERENCED_DATE",
	"FIL_SDS_EMPLOYEE_GROUP___PSVC_ACTIVE_C as PSVC_ACTIVE_C",
	"FIL_SDS_EMPLOYEE_GROUP___PSVC_COMMISSION_C as PSVC_COMMISSION_C",
	"FIL_SDS_EMPLOYEE_GROUP___PSVC_DESCRIPTION_C as PSVC_DESCRIPTION_C",
	"FIL_SDS_EMPLOYEE_GROUP___PSVC_EFFICIENCY_C as PSVC_EFFICIENCY_C",
	"FIL_SDS_EMPLOYEE_GROUP___PSVC_SAP_JOB_CODE_C as PSVC_SAP_JOB_CODE_C",
	"FIL_SDS_EMPLOYEE_GROUP___PSVC_AVAILABLE_ONLINE_C as PSVC_AVAILABLE_ONLINE_C",
	"FIL_SDS_EMPLOYEE_GROUP___PSVC_EMPLOYEE_GROUP_TYPE_C as PSVC_EMPLOYEE_GROUP_TYPE_C",
	"CURRENT_TIMESTAMP as UPDATE_TSTMP",
	"IF (FIL_SDS_EMPLOYEE_GROUP___i_LOAD_TSTMP IS NULL, CURRENT_TIMESTAMP, FIL_SDS_EMPLOYEE_GROUP___i_LOAD_TSTMP) as LOAD_TSTMP",
	"IF (FIL_SDS_EMPLOYEE_GROUP___i_SDS_EMPLOYEE_GROUP_ID IS NULL, 1, 2) as o_UPDATE_VALIDATOR"
)

# COMMAND ----------
# Processing node RTR_SDS_EMPLOYEE_GROUP, type ROUTER 
# COLUMN COUNT: 66


# Creating output dataframe for RTR_SDS_EMPLOYEE_GROUP, output group INSERT
RTR_SDS_EMPLOYEE_GROUP_INSERT = EXP_SDS_EMPLOYEE_GROUP.select(EXP_SDS_EMPLOYEE_GROUP.sys_row_id.alias('sys_row_id'),
	EXP_SDS_EMPLOYEE_GROUP.ID.alias('ID1'),
	EXP_SDS_EMPLOYEE_GROUP.OWNER_ID.alias('OWNER_ID1'),
	EXP_SDS_EMPLOYEE_GROUP.IS_DELETED.alias('IS_DELETED1'),
	EXP_SDS_EMPLOYEE_GROUP.NAME.alias('NAME1'),
	EXP_SDS_EMPLOYEE_GROUP.CURRENCY_ISO_CODE.alias('CURRENCY_ISO_CODE1'),
	EXP_SDS_EMPLOYEE_GROUP.CREATED_DATE.alias('CREATED_DATE1'),
	EXP_SDS_EMPLOYEE_GROUP.CREATED_BY_ID.alias('CREATED_BY_ID1'),
	EXP_SDS_EMPLOYEE_GROUP.LAST_MODIFIED_DATE.alias('LAST_MODIFIED_DATE1'),
	EXP_SDS_EMPLOYEE_GROUP.LAST_MODIFIED_BY_ID.alias('LAST_MODIFIED_BY_ID1'),
	EXP_SDS_EMPLOYEE_GROUP.SYSTEM_MOD_STAMP.alias('SYSTEM_MOD_STAMP1'),
	EXP_SDS_EMPLOYEE_GROUP.LAST_VIEWED_DATE.alias('LAST_VIEWED_DATE1'),
	EXP_SDS_EMPLOYEE_GROUP.LAST_REFERENCED_DATE.alias('LAST_REFERENCED_DATE1'),
	EXP_SDS_EMPLOYEE_GROUP.PSVC_ACTIVE_C.alias('PSVC_ACTIVE_C1'),
	EXP_SDS_EMPLOYEE_GROUP.PSVC_COMMISSION_C.alias('PSVC_COMMISSION_C1'),
	EXP_SDS_EMPLOYEE_GROUP.PSVC_DESCRIPTION_C.alias('PSVC_DESCRIPTION_C1'),
	EXP_SDS_EMPLOYEE_GROUP.PSVC_EFFICIENCY_C.alias('PSVC_EFFICIENCY_C1'),
	EXP_SDS_EMPLOYEE_GROUP.PSVC_SAP_JOB_CODE_C.alias('PSVC_SAP_JOB_CODE_C1'),
	EXP_SDS_EMPLOYEE_GROUP.PSVC_AVAILABLE_ONLINE_C.alias('PSVC_AVAILABLE_ONLINE_C1'),
	EXP_SDS_EMPLOYEE_GROUP.PSVC_EMPLOYEE_GROUP_TYPE_C.alias('PSVC_EMPLOYEE_GROUP_TYPE_C1'),
	EXP_SDS_EMPLOYEE_GROUP.UPDATE_TSTMP.alias('UPDATE_TSTMP1'),
	EXP_SDS_EMPLOYEE_GROUP.LOAD_TSTMP.alias('LOAD_TSTMP1'),
	EXP_SDS_EMPLOYEE_GROUP.o_UPDATE_VALIDATOR.alias('o_UPDATE_VALIDATOR1')).filter("o_UPDATE_VALIDATOR=1")

# Creating output dataframe for RTR_SDS_EMPLOYEE_GROUP, output group UPDATE
RTR_SDS_EMPLOYEE_GROUP_UPDATE = EXP_SDS_EMPLOYEE_GROUP.select(EXP_SDS_EMPLOYEE_GROUP.sys_row_id.alias('sys_row_id'),
	EXP_SDS_EMPLOYEE_GROUP.ID.alias('ID3'),
	EXP_SDS_EMPLOYEE_GROUP.OWNER_ID.alias('OWNER_ID3'),
	EXP_SDS_EMPLOYEE_GROUP.IS_DELETED.alias('IS_DELETED3'),
	EXP_SDS_EMPLOYEE_GROUP.NAME.alias('NAME3'),
	EXP_SDS_EMPLOYEE_GROUP.CURRENCY_ISO_CODE.alias('CURRENCY_ISO_CODE3'),
	EXP_SDS_EMPLOYEE_GROUP.CREATED_DATE.alias('CREATED_DATE3'),
	EXP_SDS_EMPLOYEE_GROUP.CREATED_BY_ID.alias('CREATED_BY_ID3'),
	EXP_SDS_EMPLOYEE_GROUP.LAST_MODIFIED_DATE.alias('LAST_MODIFIED_DATE3'),
	EXP_SDS_EMPLOYEE_GROUP.LAST_MODIFIED_BY_ID.alias('LAST_MODIFIED_BY_ID3'),
	EXP_SDS_EMPLOYEE_GROUP.SYSTEM_MOD_STAMP.alias('SYSTEM_MOD_STAMP3'),
	EXP_SDS_EMPLOYEE_GROUP.LAST_VIEWED_DATE.alias('LAST_VIEWED_DATE3'),
	EXP_SDS_EMPLOYEE_GROUP.LAST_REFERENCED_DATE.alias('LAST_REFERENCED_DATE3'),
	EXP_SDS_EMPLOYEE_GROUP.PSVC_ACTIVE_C.alias('PSVC_ACTIVE_C3'),
	EXP_SDS_EMPLOYEE_GROUP.PSVC_COMMISSION_C.alias('PSVC_COMMISSION_C3'),
	EXP_SDS_EMPLOYEE_GROUP.PSVC_DESCRIPTION_C.alias('PSVC_DESCRIPTION_C3'),
	EXP_SDS_EMPLOYEE_GROUP.PSVC_EFFICIENCY_C.alias('PSVC_EFFICIENCY_C3'),
	EXP_SDS_EMPLOYEE_GROUP.PSVC_SAP_JOB_CODE_C.alias('PSVC_SAP_JOB_CODE_C3'),
	EXP_SDS_EMPLOYEE_GROUP.PSVC_AVAILABLE_ONLINE_C.alias('PSVC_AVAILABLE_ONLINE_C3'),
	EXP_SDS_EMPLOYEE_GROUP.PSVC_EMPLOYEE_GROUP_TYPE_C.alias('PSVC_EMPLOYEE_GROUP_TYPE_C3'),
	EXP_SDS_EMPLOYEE_GROUP.UPDATE_TSTMP.alias('UPDATE_TSTMP3'),
	EXP_SDS_EMPLOYEE_GROUP.LOAD_TSTMP.alias('LOAD_TSTMP3'),
	EXP_SDS_EMPLOYEE_GROUP.o_UPDATE_VALIDATOR.alias('o_UPDATE_VALIDATOR3')).filter("o_UPDATE_VALIDATOR=2")


# COMMAND ----------
# Processing node UPD_SDS_EMPLOYEE_GROUP, type UPDATE_STRATEGY . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 21

# for each involved DataFrame, append the dataframe name to each column
RTR_SDS_EMPLOYEE_GROUP_UPDATE_temp = RTR_SDS_EMPLOYEE_GROUP_UPDATE.toDF(*["RTR_SDS_EMPLOYEE_GROUP_UPDATE___" + col for col in RTR_SDS_EMPLOYEE_GROUP_UPDATE.columns])

UPD_SDS_EMPLOYEE_GROUP = RTR_SDS_EMPLOYEE_GROUP_UPDATE_temp.selectExpr(
	"RTR_SDS_EMPLOYEE_GROUP_UPDATE___ID3 as ID",
	"RTR_SDS_EMPLOYEE_GROUP_UPDATE___OWNER_ID3 as OWNER_ID",
	"RTR_SDS_EMPLOYEE_GROUP_UPDATE___IS_DELETED3 as IS_DELETED",
	"RTR_SDS_EMPLOYEE_GROUP_UPDATE___NAME3 as NAME",
	"RTR_SDS_EMPLOYEE_GROUP_UPDATE___CURRENCY_ISO_CODE3 as CURRENCY_ISO_CODE",
	"RTR_SDS_EMPLOYEE_GROUP_UPDATE___CREATED_DATE3 as CREATED_DATE",
	"RTR_SDS_EMPLOYEE_GROUP_UPDATE___CREATED_BY_ID3 as CREATED_BY_ID",
	"RTR_SDS_EMPLOYEE_GROUP_UPDATE___LAST_MODIFIED_DATE3 as LAST_MODIFIED_DATE",
	"RTR_SDS_EMPLOYEE_GROUP_UPDATE___LAST_MODIFIED_BY_ID3 as LAST_MODIFIED_BY_ID",
	"RTR_SDS_EMPLOYEE_GROUP_UPDATE___SYSTEM_MOD_STAMP3 as SYSTEM_MOD_STAMP",
	"RTR_SDS_EMPLOYEE_GROUP_UPDATE___LAST_VIEWED_DATE3 as LAST_VIEWED_DATE",
	"RTR_SDS_EMPLOYEE_GROUP_UPDATE___LAST_REFERENCED_DATE3 as LAST_REFERENCED_DATE",
	"RTR_SDS_EMPLOYEE_GROUP_UPDATE___PSVC_ACTIVE_C3 as PSVC_ACTIVE_C",
	"RTR_SDS_EMPLOYEE_GROUP_UPDATE___PSVC_COMMISSION_C3 as PSVC_COMMISSION_C",
	"RTR_SDS_EMPLOYEE_GROUP_UPDATE___PSVC_DESCRIPTION_C3 as PSVC_DESCRIPTION_C",
	"RTR_SDS_EMPLOYEE_GROUP_UPDATE___PSVC_EFFICIENCY_C3 as PSVC_EFFICIENCY_C",
	"RTR_SDS_EMPLOYEE_GROUP_UPDATE___PSVC_SAP_JOB_CODE_C3 as PSVC_SAP_JOB_CODE_C",
	"RTR_SDS_EMPLOYEE_GROUP_UPDATE___PSVC_AVAILABLE_ONLINE_C3 as PSVC_AVAILABLE_ONLINE_C",
	"RTR_SDS_EMPLOYEE_GROUP_UPDATE___PSVC_EMPLOYEE_GROUP_TYPE_C3 as PSVC_EMPLOYEE_GROUP_TYPE_C",
	"RTR_SDS_EMPLOYEE_GROUP_UPDATE___UPDATE_TSTMP3 as UPDATE_TSTMP",
	"RTR_SDS_EMPLOYEE_GROUP_UPDATE___LOAD_TSTMP3 as LOAD_TSTMP")\
	.withColumn('pyspark_data_action', lit(1))

# COMMAND ----------
# Processing node Shortcut_to_SDS_EMPLOYEE_GROUP_UPD, type TARGET 
# COLUMN COUNT: 22
#TODO review this should it be a merge ?

Shortcut_to_SDS_EMPLOYEE_GROUP_UPD = UPD_SDS_EMPLOYEE_GROUP.selectExpr(
	"CAST(ID AS STRING) as SDS_EMPLOYEE_GROUP_ID",
	"SDS_EMPLOYEE_GROUP_GID as SDS_EMPLOYEE_GROUP_GID",
	"CAST(NAME AS STRING) as SDS_EMPLOYEE_GROUP_NAME",
	"CAST(PSVC_DESCRIPTION_C AS STRING) as SDS_EMPLOYEE_GROUP_DESC",
	"CAST(PSVC_EMPLOYEE_GROUP_TYPE_C AS STRING) as SDS_EMPLOYEE_GROUP_TYPE",
	"CAST(PSVC_SAP_JOB_CODE_C AS STRING) as SAP_JOB_CD",
	"CAST(PSVC_COMMISSION_C AS DECIMAL(18,1)) as EMPLOYEE_GROUP_COMMISSION",
	"CAST(PSVC_EFFICIENCY_C AS DECIMAL(18,2)) as EMPLOYEE_GROUP_EFFICIENCY",
	"CAST(PSVC_AVAILABLE_ONLINE_C AS TINYINT) as AVAILABLE_ONLINE_FLAG",
	"CAST(OWNER_ID AS STRING) as SDS_OWNER_ID",
	"CAST(CURRENCY_ISO_CODE AS STRING) as CURRENCY_ISO_CD",
	"CAST(PSVC_ACTIVE_C AS TINYINT) as ACTIVE_FLAG",
	"CAST(IS_DELETED AS TINYINT) as DELETED_FLAG",
	"CAST(LAST_VIEWED_DATE AS TIMESTAMP) as SDS_LAST_VIEWED_TSTMP",
	"CAST(LAST_REFERENCED_DATE AS TIMESTAMP) as SDS_LAST_REFERENCED_TSTMP",
	"CAST(SYSTEM_MOD_STAMP AS TIMESTAMP) as SDS_SYSTEM_MODIFIED_TSTMP",
	"CAST(LAST_MODIFIED_DATE AS TIMESTAMP) as SDS_LAST_MODIFIED_TSTMP",
	"CAST(LAST_MODIFIED_BY_ID AS STRING) as SDS_LAST_MODIFIED_BY_ID",
	"CAST(CREATED_DATE AS TIMESTAMP) as SDS_CREATED_TSTMP",
	"CAST(CREATED_BY_ID AS STRING) as SDS_CREATED_BY_ID",
	"CAST(UPDATE_TSTMP AS TIMESTAMP) as UPDATE_TSTMP",
	"CAST(LOAD_TSTMP AS TIMESTAMP) as LOAD_TSTMP",
	"UPD_SDS_EMPLOYEE_GROUP.pyspark_data_action as pyspark_data_action"
)
Shortcut_to_SDS_EMPLOYEE_GROUP_UPD.write.saveAsTable(f'{raw}.SDS_EMPLOYEE_GROUP')

# COMMAND ----------
# Processing node INS_SDS_EMPLOYEE_GROUP, type UPDATE_STRATEGY . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 21

# for each involved DataFrame, append the dataframe name to each column
RTR_SDS_EMPLOYEE_GROUP_INSERT_temp = RTR_SDS_EMPLOYEE_GROUP_INSERT.toDF(*["RTR_SDS_EMPLOYEE_GROUP_INSERT___" + col for col in RTR_SDS_EMPLOYEE_GROUP_INSERT.columns])

INS_SDS_EMPLOYEE_GROUP = RTR_SDS_EMPLOYEE_GROUP_INSERT_temp.selectExpr(
	"RTR_SDS_EMPLOYEE_GROUP_INSERT___ID1 as ID",
	"RTR_SDS_EMPLOYEE_GROUP_INSERT___OWNER_ID1 as OWNER_ID",
	"RTR_SDS_EMPLOYEE_GROUP_INSERT___IS_DELETED1 as IS_DELETED",
	"RTR_SDS_EMPLOYEE_GROUP_INSERT___NAME1 as NAME",
	"RTR_SDS_EMPLOYEE_GROUP_INSERT___CURRENCY_ISO_CODE1 as CURRENCY_ISO_CODE",
	"RTR_SDS_EMPLOYEE_GROUP_INSERT___CREATED_DATE1 as CREATED_DATE",
	"RTR_SDS_EMPLOYEE_GROUP_INSERT___CREATED_BY_ID1 as CREATED_BY_ID",
	"RTR_SDS_EMPLOYEE_GROUP_INSERT___LAST_MODIFIED_DATE1 as LAST_MODIFIED_DATE",
	"RTR_SDS_EMPLOYEE_GROUP_INSERT___LAST_MODIFIED_BY_ID1 as LAST_MODIFIED_BY_ID",
	"RTR_SDS_EMPLOYEE_GROUP_INSERT___SYSTEM_MOD_STAMP1 as SYSTEM_MOD_STAMP",
	"RTR_SDS_EMPLOYEE_GROUP_INSERT___LAST_VIEWED_DATE1 as LAST_VIEWED_DATE",
	"RTR_SDS_EMPLOYEE_GROUP_INSERT___LAST_REFERENCED_DATE1 as LAST_REFERENCED_DATE",
	"RTR_SDS_EMPLOYEE_GROUP_INSERT___PSVC_ACTIVE_C1 as PSVC_ACTIVE_C",
	"RTR_SDS_EMPLOYEE_GROUP_INSERT___PSVC_COMMISSION_C1 as PSVC_COMMISSION_C",
	"RTR_SDS_EMPLOYEE_GROUP_INSERT___PSVC_DESCRIPTION_C1 as PSVC_DESCRIPTION_C",
	"RTR_SDS_EMPLOYEE_GROUP_INSERT___PSVC_EFFICIENCY_C1 as PSVC_EFFICIENCY_C",
	"RTR_SDS_EMPLOYEE_GROUP_INSERT___PSVC_SAP_JOB_CODE_C1 as PSVC_SAP_JOB_CODE_C",
	"RTR_SDS_EMPLOYEE_GROUP_INSERT___PSVC_AVAILABLE_ONLINE_C1 as PSVC_AVAILABLE_ONLINE_C",
	"RTR_SDS_EMPLOYEE_GROUP_INSERT___PSVC_EMPLOYEE_GROUP_TYPE_C1 as PSVC_EMPLOYEE_GROUP_TYPE_C",
	"RTR_SDS_EMPLOYEE_GROUP_INSERT___UPDATE_TSTMP1 as UPDATE_TSTMP",
	"RTR_SDS_EMPLOYEE_GROUP_INSERT___LOAD_TSTMP1 as LOAD_TSTMP")\
	.withColumn('pyspark_data_action', lit(0))

# COMMAND ----------
# Processing node Shortcut_to_SDS_EMPLOYEE_GROUP_INS, type TARGET 
# COLUMN COUNT: 22


Shortcut_to_SDS_EMPLOYEE_GROUP_INS = INS_SDS_EMPLOYEE_GROUP.selectExpr(
	"CAST(ID AS STRING) as SDS_EMPLOYEE_GROUP_ID",
	"SDS_EMPLOYEE_GROUP_GID SDS_EMPLOYEE_GROUP_GID",
	"CAST(NAME AS STRING) as SDS_EMPLOYEE_GROUP_NAME",
	"CAST(PSVC_DESCRIPTION_C AS STRING) as SDS_EMPLOYEE_GROUP_DESC",
	"CAST(PSVC_EMPLOYEE_GROUP_TYPE_C AS STRING) as SDS_EMPLOYEE_GROUP_TYPE",
	"CAST(PSVC_SAP_JOB_CODE_C AS STRING) as SAP_JOB_CD",
	"CAST(PSVC_COMMISSION_C AS DECIMAL(18,1)) as EMPLOYEE_GROUP_COMMISSION",
	"CAST(PSVC_EFFICIENCY_C AS DECIMAL(18,2)) as EMPLOYEE_GROUP_EFFICIENCY",
	"CAST(PSVC_AVAILABLE_ONLINE_C AS TINYINT) as AVAILABLE_ONLINE_FLAG",
	"CAST(OWNER_ID AS STRING) as SDS_OWNER_ID",
	"CAST(CURRENCY_ISO_CODE AS STRING) as CURRENCY_ISO_CD",
	"CAST(PSVC_ACTIVE_C AS TINYINT) as ACTIVE_FLAG",
	"CAST(IS_DELETED AS TINYINT) as DELETED_FLAG",
	"CAST(LAST_VIEWED_DATE AS TIMESTAMP) as SDS_LAST_VIEWED_TSTMP",
	"CAST(LAST_REFERENCED_DATE AS TIMESTAMP) as SDS_LAST_REFERENCED_TSTMP",
	"CAST(SYSTEM_MOD_STAMP AS TIMESTAMP) as SDS_SYSTEM_MODIFIED_TSTMP",
	"CAST(LAST_MODIFIED_DATE AS TIMESTAMP) as SDS_LAST_MODIFIED_TSTMP",
	"CAST(LAST_MODIFIED_BY_ID AS STRING) as SDS_LAST_MODIFIED_BY_ID",
	"CAST(CREATED_DATE AS TIMESTAMP) as SDS_CREATED_TSTMP",
	"CAST(CREATED_BY_ID AS STRING) as SDS_CREATED_BY_ID",
	"CAST(UPDATE_TSTMP AS TIMESTAMP) as UPDATE_TSTMP",
	"CAST(LOAD_TSTMP AS TIMESTAMP) as LOAD_TSTMP"
)
Shortcut_to_SDS_EMPLOYEE_GROUP_INS.write.saveAsTable(f'{raw}.SDS_EMPLOYEE_GROUP')