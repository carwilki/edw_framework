#Code converted on 2023-07-24 08:24:21
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from Datalake.utils.genericUtilities import *
from Datalake.utils.configs import *
from Datalake.utils.mergeUtils import *
from Datalake.utils.logger import *
# COMMAND ----------

parser = argparse.ArgumentParser()
spark = SparkSession.getActiveSession()
parser.add_argument('env', type=str, help='Env Variable')
args = parser.parse_args()
env = args.env

if env is None or env == '':
    raise ValueError('env is not set')

refine = getEnvPrefix(env) + 'refine'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'


# COMMAND ----------
# Processing node SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE, type SOURCE 
# COLUMN COUNT: 50

SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE = spark.sql(f"""SELECT
SDS_WORK_ORDER_ID,
SDS_ORDER_ITEM_ID,
STORE_NBR,
TIME_ZONE_ID,
CONVERSION_HOUR,
ORDER_CREATE_TSTMP,
ORDER_CREATE_TSTMP_UTC,
ORDER_VOID_TSTMP,
ORDER_VOID_TSTMP_UTC,
APPT_CREATE_TSTMP,
APPT_CREATE_TSTMP_UTC,
APPT_LAST_MODIFY_TSTMP,
APPT_LAST_MODIFY_TSTMP_UTC,
APPT_TSTMP,
APPT_TSTMP_UTC,
SCHED_APPT_START_TSTMP,
SCHED_APPT_START_TSTMP_UTC,
SCHED_APPT_END_TSTMP,
SCHED_APPT_END_TSTMP_UTC,
APPT_CONFIRMED_TSTMP,
APPT_CONFIRMED_TSTMP_UTC,
APPT_CHECK_IN_TSTMP,
APPT_CHECK_IN_TSTMP_UTC,
APPT_CHECK_OUT_TSTMP,
APPT_CHECK_OUT_TSTMP_UTC,
APPT_CANCEL_TSTMP,
APPT_CANCEL_TSTMP_UTC,
APPT_PAYMENT_TSTMP,
APPT_PAYMENT_TSTMP_UTC,
APPT_SERVICE_CREATE_TSTMP,
APPT_SERVICE_CREATE_TSTMP_UTC,
APPT_SERVICE_LAST_MODIFY_TSTMP,
APPT_SERVICE_LAST_MODIFY_TSTMP_UTC,
SCHED_APPT_SERVICE_START_TSTMP,
SCHED_APPT_SERVICE_START_TSTMP_UTC,
SCHED_APPT_SERVICE_END_TSTMP,
SCHED_APPT_SERVICE_END_TSTMP_UTC,
APPT_SERVICE_START_TSTMP,
APPT_SERVICE_START_TSTMP_UTC,
APPT_SERVICE_END_TSTMP,
APPT_SERVICE_END_TSTMP_UTC,
APPT_SERVICE_CANCEL_TSTMP,
APPT_SERVICE_CANCEL_TSTMP_UTC,
APPT_SERVICE_PRICE_OVERRIDE_TSTMP,
APPT_SERVICE_PRICE_OVERRIDE_TSTMP_UTC,
HARD_DELETED_FLAG,
UPDATE_VALIDATOR_FLAG,
LOAD_TSTMP,
INVOICE_CREATE_TSTMP,
INVOICE_CREATE_TSTMP_UTC
FROM {raw}.SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node EXPTRANS, type EXPRESSION 
# COLUMN COUNT: 51

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE_temp = SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE.toDF(*["SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___" + col for col in SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE.columns])

EXPTRANS = SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE_temp.selectExpr(
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___sys_row_id as sys_row_id",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___SDS_WORK_ORDER_ID as SDS_WORK_ORDER_ID",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___SDS_ORDER_ITEM_ID as SDS_ORDER_ITEM_ID",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___STORE_NBR as STORE_NBR",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___TIME_ZONE_ID as TIME_ZONE_ID",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___CONVERSION_HOUR as CONVERSION_HOUR",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___ORDER_CREATE_TSTMP as ORDER_CREATE_TSTMP",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___ORDER_CREATE_TSTMP_UTC as ORDER_CREATE_TSTMP_UTC",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___ORDER_VOID_TSTMP as ORDER_VOID_TSTMP",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___ORDER_VOID_TSTMP_UTC as ORDER_VOID_TSTMP_UTC",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___APPT_CREATE_TSTMP as APPT_CREATE_TSTMP",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___APPT_CREATE_TSTMP_UTC as APPT_CREATE_TSTMP_UTC",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___APPT_LAST_MODIFY_TSTMP as APPT_LAST_MODIFY_TSTMP",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___APPT_LAST_MODIFY_TSTMP_UTC as APPT_LAST_MODIFY_TSTMP_UTC",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___APPT_TSTMP as APPT_TSTMP",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___APPT_TSTMP_UTC as APPT_TSTMP_UTC",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___SCHED_APPT_START_TSTMP as SCHED_APPT_START_TSTMP",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___SCHED_APPT_START_TSTMP_UTC as SCHED_APPT_START_TSTMP_UTC",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___SCHED_APPT_END_TSTMP as SCHED_APPT_END_TSTMP",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___SCHED_APPT_END_TSTMP_UTC as SCHED_APPT_END_TSTMP_UTC",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___APPT_CONFIRMED_TSTMP as APPT_CONFIRMED_TSTMP",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___APPT_CONFIRMED_TSTMP_UTC as APPT_CONFIRMED_TSTMP_UTC",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___APPT_CHECK_IN_TSTMP as APPT_CHECK_IN_TSTMP",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___APPT_CHECK_IN_TSTMP_UTC as APPT_CHECK_IN_TSTMP_UTC",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___APPT_CHECK_OUT_TSTMP as APPT_CHECK_OUT_TSTMP",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___APPT_CHECK_OUT_TSTMP_UTC as APPT_CHECK_OUT_TSTMP_UTC",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___APPT_CANCEL_TSTMP as APPT_CANCEL_TSTMP",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___APPT_CANCEL_TSTMP_UTC as APPT_CANCEL_TSTMP_UTC",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___APPT_PAYMENT_TSTMP as APPT_PAYMENT_TSTMP",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___APPT_PAYMENT_TSTMP_UTC as APPT_PAYMENT_TSTMP_UTC",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___APPT_SERVICE_CREATE_TSTMP as APPT_SERVICE_CREATE_TSTMP",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___APPT_SERVICE_CREATE_TSTMP_UTC as APPT_SERVICE_CREATE_TSTMP_UTC",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___APPT_SERVICE_LAST_MODIFY_TSTMP as APPT_SERVICE_LAST_MODIFY_TSTMP",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___APPT_SERVICE_LAST_MODIFY_TSTMP_UTC as APPT_SERVICE_LAST_MODIFY_TSTMP_UTC",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___SCHED_APPT_SERVICE_START_TSTMP as SCHED_APPT_SERVICE_START_TSTMP",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___SCHED_APPT_SERVICE_START_TSTMP_UTC as SCHED_APPT_SERVICE_START_TSTMP_UTC",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___SCHED_APPT_SERVICE_END_TSTMP as SCHED_APPT_SERVICE_END_TSTMP",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___SCHED_APPT_SERVICE_END_TSTMP_UTC as SCHED_APPT_SERVICE_END_TSTMP_UTC",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___APPT_SERVICE_START_TSTMP as APPT_SERVICE_START_TSTMP",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___APPT_SERVICE_START_TSTMP_UTC as APPT_SERVICE_START_TSTMP_UTC",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___APPT_SERVICE_END_TSTMP as APPT_SERVICE_END_TSTMP",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___APPT_SERVICE_END_TSTMP_UTC as APPT_SERVICE_END_TSTMP_UTC",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___APPT_SERVICE_CANCEL_TSTMP as APPT_SERVICE_CANCEL_TSTMP",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___APPT_SERVICE_CANCEL_TSTMP_UTC as APPT_SERVICE_CANCEL_TSTMP_UTC",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___APPT_SERVICE_PRICE_OVERRIDE_TSTMP as APPT_SERVICE_PRICE_OVERRIDE_TSTMP",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___APPT_SERVICE_PRICE_OVERRIDE_TSTMP_UTC as APPT_SERVICE_PRICE_OVERRIDE_TSTMP_UTC",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___HARD_DELETED_FLAG as HARD_DELETED_FLAG",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___UPDATE_VALIDATOR_FLAG as UPDATE_VALIDATOR_FLAG",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___LOAD_TSTMP as LOAD_TSTMP",
	"CURRENT_TIMESTAMP as UPDATE_TSTMP",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___INVOICE_CREATE_TSTMP as INVOICE_CREATE_TSTMP",
	"SQ_Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT_DELTA_PRE___INVOICE_CREATE_TSTMP_UTC as INVOICE_CREATE_TSTMP_UTC"
)

# COMMAND ----------
# Processing node UPDTRANS, type UPDATE_STRATEGY 
# COLUMN COUNT: 51

# for each involved DataFrame, append the dataframe name to each column
EXPTRANS_temp = EXPTRANS.toDF(*["EXPTRANS___" + col for col in EXPTRANS.columns])

UPDTRANS = EXPTRANS_temp.selectExpr(
	"EXPTRANS___SDS_WORK_ORDER_ID as SDS_WORK_ORDER_ID",
	"EXPTRANS___SDS_ORDER_ITEM_ID as SDS_ORDER_ITEM_ID",
	"EXPTRANS___STORE_NBR as STORE_NBR",
	"EXPTRANS___TIME_ZONE_ID as TIME_ZONE_ID",
	"EXPTRANS___CONVERSION_HOUR as CONVERSION_HOUR",
	"EXPTRANS___ORDER_CREATE_TSTMP as ORDER_CREATE_TSTMP",
	"EXPTRANS___ORDER_CREATE_TSTMP_UTC as ORDER_CREATE_TSTMP_UTC",
	"EXPTRANS___ORDER_VOID_TSTMP as ORDER_VOID_TSTMP",
	"EXPTRANS___ORDER_VOID_TSTMP_UTC as ORDER_VOID_TSTMP_UTC",
	"EXPTRANS___APPT_CREATE_TSTMP as APPT_CREATE_TSTMP",
	"EXPTRANS___APPT_CREATE_TSTMP_UTC as APPT_CREATE_TSTMP_UTC",
	"EXPTRANS___APPT_LAST_MODIFY_TSTMP as APPT_LAST_MODIFY_TSTMP",
	"EXPTRANS___APPT_LAST_MODIFY_TSTMP_UTC as APPT_LAST_MODIFY_TSTMP_UTC",
	"EXPTRANS___APPT_TSTMP as APPT_TSTMP",
	"EXPTRANS___APPT_TSTMP_UTC as APPT_TSTMP_UTC",
	"EXPTRANS___SCHED_APPT_START_TSTMP as SCHED_APPT_START_TSTMP",
	"EXPTRANS___SCHED_APPT_START_TSTMP_UTC as SCHED_APPT_START_TSTMP_UTC",
	"EXPTRANS___SCHED_APPT_END_TSTMP as SCHED_APPT_END_TSTMP",
	"EXPTRANS___SCHED_APPT_END_TSTMP_UTC as SCHED_APPT_END_TSTMP_UTC",
	"EXPTRANS___APPT_CONFIRMED_TSTMP as APPT_CONFIRMED_TSTMP",
	"EXPTRANS___APPT_CONFIRMED_TSTMP_UTC as APPT_CONFIRMED_TSTMP_UTC",
	"EXPTRANS___APPT_CHECK_IN_TSTMP as APPT_CHECK_IN_TSTMP",
	"EXPTRANS___APPT_CHECK_IN_TSTMP_UTC as APPT_CHECK_IN_TSTMP_UTC",
	"EXPTRANS___APPT_CHECK_OUT_TSTMP as APPT_CHECK_OUT_TSTMP",
	"EXPTRANS___APPT_CHECK_OUT_TSTMP_UTC as APPT_CHECK_OUT_TSTMP_UTC",
	"EXPTRANS___APPT_CANCEL_TSTMP as APPT_CANCEL_TSTMP",
	"EXPTRANS___APPT_CANCEL_TSTMP_UTC as APPT_CANCEL_TSTMP_UTC",
	"EXPTRANS___APPT_PAYMENT_TSTMP as APPT_PAYMENT_TSTMP",
	"EXPTRANS___APPT_PAYMENT_TSTMP_UTC as APPT_PAYMENT_TSTMP_UTC",
	"EXPTRANS___APPT_SERVICE_CREATE_TSTMP as APPT_SERVICE_CREATE_TSTMP",
	"EXPTRANS___APPT_SERVICE_CREATE_TSTMP_UTC as APPT_SERVICE_CREATE_TSTMP_UTC",
	"EXPTRANS___APPT_SERVICE_LAST_MODIFY_TSTMP as APPT_SERVICE_LAST_MODIFY_TSTMP",
	"EXPTRANS___APPT_SERVICE_LAST_MODIFY_TSTMP_UTC as APPT_SERVICE_LAST_MODIFY_TSTMP_UTC",
	"EXPTRANS___SCHED_APPT_SERVICE_START_TSTMP as SCHED_APPT_SERVICE_START_TSTMP",
	"EXPTRANS___SCHED_APPT_SERVICE_START_TSTMP_UTC as SCHED_APPT_SERVICE_START_TSTMP_UTC",
	"EXPTRANS___SCHED_APPT_SERVICE_END_TSTMP as SCHED_APPT_SERVICE_END_TSTMP",
	"EXPTRANS___SCHED_APPT_SERVICE_END_TSTMP_UTC as SCHED_APPT_SERVICE_END_TSTMP_UTC",
	"EXPTRANS___APPT_SERVICE_START_TSTMP as APPT_SERVICE_START_TSTMP",
	"EXPTRANS___APPT_SERVICE_START_TSTMP_UTC as APPT_SERVICE_START_TSTMP_UTC",
	"EXPTRANS___APPT_SERVICE_END_TSTMP as APPT_SERVICE_END_TSTMP",
	"EXPTRANS___APPT_SERVICE_END_TSTMP_UTC as APPT_SERVICE_END_TSTMP_UTC",
	"EXPTRANS___APPT_SERVICE_CANCEL_TSTMP as APPT_SERVICE_CANCEL_TSTMP",
	"EXPTRANS___APPT_SERVICE_CANCEL_TSTMP_UTC as APPT_SERVICE_CANCEL_TSTMP_UTC",
	"EXPTRANS___APPT_SERVICE_PRICE_OVERRIDE_TSTMP as APPT_SERVICE_PRICE_OVERRIDE_TSTMP",
	"EXPTRANS___APPT_SERVICE_PRICE_OVERRIDE_TSTMP_UTC as APPT_SERVICE_PRICE_OVERRIDE_TSTMP_UTC",
	"EXPTRANS___HARD_DELETED_FLAG as HARD_DELETED_FLAG",
	"EXPTRANS___UPDATE_VALIDATOR_FLAG as UPDATE_VALIDATOR_FLAG",
	"EXPTRANS___LOAD_TSTMP as LOAD_TSTMP",
	"EXPTRANS___UPDATE_TSTMP as UPDATE_TSTMP",
	"EXPTRANS___INVOICE_CREATE_TSTMP as INVOICE_CREATE_TSTMP",
	"EXPTRANS___INVOICE_CREATE_TSTMP_UTC as INVOICE_CREATE_TSTMP_UTC")\
	.withColumn('pyspark_data_action', when(col('UPDATE_VALIDATOR_FLAG') ==(lit('I')) , lit(0)) .when(col('UPDATE_VALIDATOR_FLAG') ==(lit('U')) , lit(1)))

# COMMAND ----------
# Processing node Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT, type TARGET 
# COLUMN COUNT: 50


Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT = UPDTRANS.selectExpr(
	"CAST(SDS_ORDER_ITEM_ID AS STRING) as SDS_ORDER_ITEM_ID",
	"CAST(SDS_WORK_ORDER_ID AS STRING) as SDS_WORK_ORDER_ID",
	"CAST(STORE_NBR AS BIGINT) as STORE_NBR",
	"CAST(TIME_ZONE_ID AS STRING) as TIME_ZONE_ID",
	"CAST(CONVERSION_HOUR AS DECIMAL(4,2)) as CONVERSION_HOUR",
	"CAST(ORDER_CREATE_TSTMP AS TIMESTAMP) as ORDER_CREATE_TSTMP",
	"CAST(ORDER_CREATE_TSTMP_UTC AS TIMESTAMP) as ORDER_CREATE_TSTMP_UTC",
	"CAST(ORDER_VOID_TSTMP AS TIMESTAMP) as ORDER_VOID_TSTMP",
	"CAST(ORDER_VOID_TSTMP_UTC AS TIMESTAMP) as ORDER_VOID_TSTMP_UTC",
	"CAST(INVOICE_CREATE_TSTMP AS TIMESTAMP) as INVOICE_CREATE_TSTMP",
	"CAST(INVOICE_CREATE_TSTMP_UTC AS TIMESTAMP) as INVOICE_CREATE_TSTMP_UTC",
	"CAST(APPT_CREATE_TSTMP AS TIMESTAMP) as APPT_CREATE_TSTMP",
	"CAST(APPT_CREATE_TSTMP_UTC AS TIMESTAMP) as APPT_CREATE_TSTMP_UTC",
	"CAST(APPT_LAST_MODIFY_TSTMP AS TIMESTAMP) as APPT_LAST_MODIFY_TSTMP",
	"CAST(APPT_LAST_MODIFY_TSTMP_UTC AS TIMESTAMP) as APPT_LAST_MODIFY_TSTMP_UTC",
	"CAST(APPT_TSTMP AS TIMESTAMP) as APPT_TSTMP",
	"CAST(APPT_TSTMP_UTC AS TIMESTAMP) as APPT_TSTMP_UTC",
	"CAST(SCHED_APPT_START_TSTMP AS TIMESTAMP) as SCHED_APPT_START_TSTMP",
	"CAST(SCHED_APPT_START_TSTMP_UTC AS TIMESTAMP) as SCHED_APPT_START_TSTMP_UTC",
	"CAST(SCHED_APPT_END_TSTMP AS TIMESTAMP) as SCHED_APPT_END_TSTMP",
	"CAST(SCHED_APPT_END_TSTMP_UTC AS TIMESTAMP) as SCHED_APPT_END_TSTMP_UTC",
	"CAST(APPT_CONFIRMED_TSTMP AS TIMESTAMP) as APPT_CONFIRMED_TSTMP",
	"CAST(APPT_CONFIRMED_TSTMP_UTC AS TIMESTAMP) as APPT_CONFIRMED_TSTMP_UTC",
	"CAST(APPT_CHECK_IN_TSTMP AS TIMESTAMP) as APPT_CHECK_IN_TSTMP",
	"CAST(APPT_CHECK_IN_TSTMP_UTC AS TIMESTAMP) as APPT_CHECK_IN_TSTMP_UTC",
	"CAST(APPT_CHECK_OUT_TSTMP AS TIMESTAMP) as APPT_CHECK_OUT_TSTMP",
	"CAST(APPT_CHECK_OUT_TSTMP_UTC AS TIMESTAMP) as APPT_CHECK_OUT_TSTMP_UTC",
	"CAST(APPT_CANCEL_TSTMP AS TIMESTAMP) as APPT_CANCEL_TSTMP",
	"CAST(APPT_CANCEL_TSTMP_UTC AS TIMESTAMP) as APPT_CANCEL_TSTMP_UTC",
	"CAST(APPT_PAYMENT_TSTMP AS TIMESTAMP) as APPT_PAYMENT_TSTMP",
	"CAST(APPT_PAYMENT_TSTMP_UTC AS TIMESTAMP) as APPT_PAYMENT_TSTMP_UTC",
	"CAST(APPT_SERVICE_CREATE_TSTMP AS TIMESTAMP) as APPT_SERVICE_CREATE_TSTMP",
	"CAST(APPT_SERVICE_CREATE_TSTMP_UTC AS TIMESTAMP) as APPT_SERVICE_CREATE_TSTMP_UTC",
	"CAST(APPT_SERVICE_LAST_MODIFY_TSTMP AS TIMESTAMP) as APPT_SERVICE_LAST_MODIFY_TSTMP",
	"CAST(APPT_SERVICE_LAST_MODIFY_TSTMP_UTC AS TIMESTAMP) as APPT_SERVICE_LAST_MODIFY_TSTMP_UTC",
	"CAST(SCHED_APPT_SERVICE_START_TSTMP AS TIMESTAMP) as SCHED_APPT_SERVICE_START_TSTMP",
	"CAST(SCHED_APPT_SERVICE_START_TSTMP_UTC AS TIMESTAMP) as SCHED_APPT_SERVICE_START_TSTMP_UTC",
	"CAST(SCHED_APPT_SERVICE_END_TSTMP AS TIMESTAMP) as SCHED_APPT_SERVICE_END_TSTMP",
	"CAST(SCHED_APPT_SERVICE_END_TSTMP_UTC AS TIMESTAMP) as SCHED_APPT_SERVICE_END_TSTMP_UTC",
	"CAST(APPT_SERVICE_START_TSTMP AS TIMESTAMP) as APPT_SERVICE_START_TSTMP",
	"CAST(APPT_SERVICE_START_TSTMP_UTC AS TIMESTAMP) as APPT_SERVICE_START_TSTMP_UTC",
	"CAST(APPT_SERVICE_END_TSTMP AS TIMESTAMP) as APPT_SERVICE_END_TSTMP",
	"CAST(APPT_SERVICE_END_TSTMP_UTC AS TIMESTAMP) as APPT_SERVICE_END_TSTMP_UTC",
	"CAST(APPT_SERVICE_CANCEL_TSTMP AS TIMESTAMP) as APPT_SERVICE_CANCEL_TSTMP",
	"CAST(APPT_SERVICE_CANCEL_TSTMP_UTC AS TIMESTAMP) as APPT_SERVICE_CANCEL_TSTMP_UTC",
	"CAST(APPT_SERVICE_PRICE_OVERRIDE_TSTMP AS TIMESTAMP) as APPT_SERVICE_PRICE_OVERRIDE_TSTMP",
	"CAST(APPT_SERVICE_PRICE_OVERRIDE_TSTMP_UTC AS TIMESTAMP) as APPT_SERVICE_PRICE_OVERRIDE_TSTMP_UTC",
	"CAST(HARD_DELETED_FLAG AS TINYINT) as HARD_DELETED_FLAG",
	"CAST(UPDATE_TSTMP AS TIMESTAMP) as UPDATE_TSTMP",
	"CAST(LOAD_TSTMP AS TIMESTAMP) as LOAD_TSTMP",
	"UPDTRANS.pyspark_data_action as pyspark_data_action"
)

try:
  primary_key = """source.SDS_ORDER_ITEM_ID = target.SDS_ORDER_ITEM_ID AND source.SDS_WORK_ORDER_ID = target.SDS_WORK_ORDER_ID"""
  refined_perf_table = f"{legacy}.SDS_ORDER_ITEM_DATETIME_RPT"
  executeMerge(Shortcut_to_SDS_ORDER_ITEM_DATETIME_RPT, refined_perf_table, primary_key)
  logger.info(f"Merge with {refined_perf_table} completed]")
  logPrevRunDt("SDS_ORDER_ITEM_DATETIME_RPT", "SDS_ORDER_ITEM_DATETIME_RPT", "Completed", "N/A", f"{raw}.log_run_details")
except Exception as e:
  logPrevRunDt("SDS_ORDER_ITEM_DATETIME_RPT", "SDS_ORDER_ITEM_DATETIME_RPT","Failed",str(e), f"{raw}.log_run_details", )
  raise e
	