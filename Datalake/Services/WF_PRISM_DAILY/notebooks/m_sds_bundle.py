#Code converted on 2023-07-20 17:39:34
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from Datalake.utils.genericUtilities import *
from Datalake.utils.configs import *
from Datalake.utils.mergeUtils import *
from Datalake.utils.logger import *
# COMMAND ----------

parser = argparse.ArgumentParser()
spark = SparkSession.getActiveSession()
parser.add_argument('env', type=str, help='Env Variable')
args = parser.parse_args()
env = args.env

if env is None or env == '':
    raise ValueError('env is not set')

refine = getEnvPrefix(env) + 'refine'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'


# COMMAND ----------
# Processing node SQ_Shortcut_to_SDS_BUNDLE, type SOURCE 
# COLUMN COUNT: 5

SQ_Shortcut_to_SDS_BUNDLE = spark.sql(f"""SELECT
SDS_BUNDLE_ID,
SDS_SYSTEM_MODIFIED_TSTMP,
SDS_CREATED_TSTMP,
SDS_LAST_MODIFIED_TSTMP,
LOAD_TSTMP
FROM {legacy}.SDS_BUNDLE""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node SQ_Shortcut_to_SDS_PSVC_BUNDLE_C_PRE, type SOURCE 
# COLUMN COUNT: 35

SQ_Shortcut_to_SDS_PSVC_BUNDLE_C_PRE = spark.sql(f"""SELECT
ID,
OWNER_ID,
IS_DELETED,
NAME,
CURRENCY_ISO_CODE,
CREATED_DATE,
CREATED_BY_ID,
LAST_MODIFIED_DATE,
LAST_MODIFIED_BY_ID,
SYSTEM_MOD_STAMP,
LAST_VIEWED_DATE,
LAST_REFERENCED_DATE,
PSVC_AVAILABLE_UNITS_C,
PSVC_BUNDLE_CONFIGURATION_C,
PSVC_BUNDLE_EXPIRATION_DATE_C,
PSVC_PET_C,
PSVC_PRIMARY_SERVICE_C,
PSVC_PRODUCT_C,
PSVC_PURCHASED_UNITS_C,
PSVC_REDEEMED_UNITS_C,
PSVC_RESERVED_UNITS_C,
PSVC_IS_EXPIRED_C,
PSVC_BUNDLE_DISPLAY_NAME_C,
PSVC_ORDER_C,
PSVC_PRIMARY_SERVICE_ORIGINAL_UNIT_PRICE_C,
PSVC_PURCHASED_DATE_C,
PSVC_REFUNDED_DATE_C,
PSVC_STATUS_C,
PSVC_SAVINGS_AMOUNT_C,
PSVC_SAVINGS_PERCENTAGE_C,
PSVC_EXPIRED_UNITS_C,
PSVC_REFUNDED_UNITS_C,
PSVC_BASE_UNIT_EXPIRATION_C,
PSVC_FREE_UNIT_EXPIRATION_C,
PSVC_REFUNDED_BY_C
FROM {raw}.SDS_PSVC_BUNDLE_C_PRE""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node JNR_SDS_BUNDLE, type JOINER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 40

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_SDS_PSVC_BUNDLE_C_PRE_temp = SQ_Shortcut_to_SDS_PSVC_BUNDLE_C_PRE.toDF(*["SQ_Shortcut_to_SDS_PSVC_BUNDLE_C_PRE___" + col for col in SQ_Shortcut_to_SDS_PSVC_BUNDLE_C_PRE.columns])
SQ_Shortcut_to_SDS_BUNDLE_temp = SQ_Shortcut_to_SDS_BUNDLE.toDF(*["SQ_Shortcut_to_SDS_BUNDLE___" + col for col in SQ_Shortcut_to_SDS_BUNDLE.columns])

JNR_SDS_BUNDLE = SQ_Shortcut_to_SDS_PSVC_BUNDLE_C_PRE_temp.join(SQ_Shortcut_to_SDS_BUNDLE_temp,[SQ_Shortcut_to_SDS_PSVC_BUNDLE_C_PRE_temp.SQ_Shortcut_to_SDS_PSVC_BUNDLE_C_PRE___ID == SQ_Shortcut_to_SDS_BUNDLE_temp.SQ_Shortcut_to_SDS_BUNDLE___SDS_BUNDLE_ID],'left_outer').selectExpr(
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_C_PRE___ID as ID",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_C_PRE___OWNER_ID as OWNER_ID",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_C_PRE___IS_DELETED as IS_DELETED",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_C_PRE___NAME as NAME",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_C_PRE___CURRENCY_ISO_CODE as CURRENCY_ISO_CODE",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_C_PRE___CREATED_DATE as CREATED_DATE",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_C_PRE___CREATED_BY_ID as CREATED_BY_ID",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_C_PRE___LAST_MODIFIED_DATE as LAST_MODIFIED_DATE",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_C_PRE___LAST_MODIFIED_BY_ID as LAST_MODIFIED_BY_ID",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_C_PRE___SYSTEM_MOD_STAMP as SYSTEM_MOD_STAMP",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_C_PRE___LAST_VIEWED_DATE as LAST_VIEWED_DATE",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_C_PRE___LAST_REFERENCED_DATE as LAST_REFERENCED_DATE",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_C_PRE___PSVC_AVAILABLE_UNITS_C as PSVC_AVAILABLE_UNITS_C",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_C_PRE___PSVC_BUNDLE_CONFIGURATION_C as PSVC_BUNDLE_CONFIGURATION_C",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_C_PRE___PSVC_BUNDLE_EXPIRATION_DATE_C as PSVC_BUNDLE_EXPIRATION_DATE_C",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_C_PRE___PSVC_PET_C as PSVC_PET_C",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_C_PRE___PSVC_PRIMARY_SERVICE_C as PSVC_PRIMARY_SERVICE_C",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_C_PRE___PSVC_PRODUCT_C as PSVC_PRODUCT_C",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_C_PRE___PSVC_PURCHASED_UNITS_C as PSVC_PURCHASED_UNITS_C",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_C_PRE___PSVC_REDEEMED_UNITS_C as PSVC_REDEEMED_UNITS_C",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_C_PRE___PSVC_RESERVED_UNITS_C as PSVC_RESERVED_UNITS_C",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_C_PRE___PSVC_IS_EXPIRED_C as PSVC_IS_EXPIRED_C",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_C_PRE___PSVC_BUNDLE_DISPLAY_NAME_C as PSVC_BUNDLE_DISPLAY_NAME_C",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_C_PRE___PSVC_ORDER_C as PSVC_ORDER_C",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_C_PRE___PSVC_PRIMARY_SERVICE_ORIGINAL_UNIT_PRICE_C as PSVC_PRIMARY_SERVICE_ORIGINAL_UNIT_PRICE_C",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_C_PRE___PSVC_PURCHASED_DATE_C as PSVC_PURCHASED_DATE_C",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_C_PRE___PSVC_REFUNDED_DATE_C as PSVC_REFUNDED_DATE_C",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_C_PRE___PSVC_STATUS_C as PSVC_STATUS_C",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_C_PRE___PSVC_SAVINGS_AMOUNT_C as PSVC_SAVINGS_AMOUNT_C",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_C_PRE___PSVC_SAVINGS_PERCENTAGE_C as PSVC_SAVINGS_PERCENTAGE_C",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_C_PRE___PSVC_EXPIRED_UNITS_C as PSVC_EXPIRED_UNITS_C",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_C_PRE___PSVC_REFUNDED_UNITS_C as PSVC_REFUNDED_UNITS_C",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_C_PRE___PSVC_BASE_UNIT_EXPIRATION_C as PSVC_BASE_UNIT_EXPIRATION_C",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_C_PRE___PSVC_FREE_UNIT_EXPIRATION_C as PSVC_FREE_UNIT_EXPIRATION_C",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_C_PRE___PSVC_REFUNDED_BY_C as PSVC_REFUNDED_BY_C",
	"SQ_Shortcut_to_SDS_BUNDLE___SDS_BUNDLE_ID as i_SDS_BUNDLE_ID",
	"SQ_Shortcut_to_SDS_BUNDLE___SDS_SYSTEM_MODIFIED_TSTMP as i_SDS_SYSTEM_MODIFIED_TSTMP",
	"SQ_Shortcut_to_SDS_BUNDLE___SDS_CREATED_TSTMP as i_SDS_CREATED_TSTMP",
	"SQ_Shortcut_to_SDS_BUNDLE___SDS_LAST_MODIFIED_TSTMP as i_SDS_LAST_MODIFIED_TSTMP",
	"SQ_Shortcut_to_SDS_BUNDLE___LOAD_TSTMP as i_LOAD_TSTMP")

# COMMAND ----------
# Processing node FIL_SDS_BUNDLE, type FILTER 
# COLUMN COUNT: 40

# for each involved DataFrame, append the dataframe name to each column
JNR_SDS_BUNDLE_temp = JNR_SDS_BUNDLE.toDF(*["JNR_SDS_BUNDLE___" + col for col in JNR_SDS_BUNDLE.columns])

FIL_SDS_BUNDLE = JNR_SDS_BUNDLE_temp.selectExpr(
	"JNR_SDS_BUNDLE___ID as ID",
	"JNR_SDS_BUNDLE___OWNER_ID as OWNER_ID",
	"JNR_SDS_BUNDLE___IS_DELETED as IS_DELETED",
	"JNR_SDS_BUNDLE___NAME as NAME",
	"JNR_SDS_BUNDLE___CURRENCY_ISO_CODE as CURRENCY_ISO_CODE",
	"JNR_SDS_BUNDLE___CREATED_DATE as CREATED_DATE",
	"JNR_SDS_BUNDLE___CREATED_BY_ID as CREATED_BY_ID",
	"JNR_SDS_BUNDLE___LAST_MODIFIED_DATE as LAST_MODIFIED_DATE",
	"JNR_SDS_BUNDLE___LAST_MODIFIED_BY_ID as LAST_MODIFIED_BY_ID",
	"JNR_SDS_BUNDLE___SYSTEM_MOD_STAMP as SYSTEM_MOD_STAMP",
	"JNR_SDS_BUNDLE___LAST_VIEWED_DATE as LAST_VIEWED_DATE",
	"JNR_SDS_BUNDLE___LAST_REFERENCED_DATE as LAST_REFERENCED_DATE",
	"JNR_SDS_BUNDLE___PSVC_AVAILABLE_UNITS_C as PSVC_AVAILABLE_UNITS_C",
	"JNR_SDS_BUNDLE___PSVC_BUNDLE_CONFIGURATION_C as PSVC_BUNDLE_CONFIGURATION_C",
	"JNR_SDS_BUNDLE___PSVC_BUNDLE_EXPIRATION_DATE_C as PSVC_BUNDLE_EXPIRATION_DATE_C",
	"JNR_SDS_BUNDLE___PSVC_PET_C as PSVC_PET_C",
	"JNR_SDS_BUNDLE___PSVC_PRIMARY_SERVICE_C as PSVC_PRIMARY_SERVICE_C",
	"JNR_SDS_BUNDLE___PSVC_PRODUCT_C as PSVC_PRODUCT_C",
	"JNR_SDS_BUNDLE___PSVC_PURCHASED_UNITS_C as PSVC_PURCHASED_UNITS_C",
	"JNR_SDS_BUNDLE___PSVC_REDEEMED_UNITS_C as PSVC_REDEEMED_UNITS_C",
	"JNR_SDS_BUNDLE___PSVC_RESERVED_UNITS_C as PSVC_RESERVED_UNITS_C",
	"JNR_SDS_BUNDLE___PSVC_IS_EXPIRED_C as PSVC_IS_EXPIRED_C",
	"JNR_SDS_BUNDLE___PSVC_BUNDLE_DISPLAY_NAME_C as PSVC_BUNDLE_DISPLAY_NAME_C",
	"JNR_SDS_BUNDLE___PSVC_ORDER_C as PSVC_ORDER_C",
	"JNR_SDS_BUNDLE___PSVC_PRIMARY_SERVICE_ORIGINAL_UNIT_PRICE_C as PSVC_PRIMARY_SERVICE_ORIGINAL_UNIT_PRICE_C",
	"JNR_SDS_BUNDLE___PSVC_PURCHASED_DATE_C as PSVC_PURCHASED_DATE_C",
	"JNR_SDS_BUNDLE___PSVC_REFUNDED_DATE_C as PSVC_REFUNDED_DATE_C",
	"JNR_SDS_BUNDLE___PSVC_STATUS_C as PSVC_STATUS_C",
	"JNR_SDS_BUNDLE___PSVC_SAVINGS_AMOUNT_C as PSVC_SAVINGS_AMOUNT_C",
	"JNR_SDS_BUNDLE___PSVC_SAVINGS_PERCENTAGE_C as PSVC_SAVINGS_PERCENTAGE_C",
	"JNR_SDS_BUNDLE___PSVC_EXPIRED_UNITS_C as PSVC_EXPIRED_UNITS_C",
	"JNR_SDS_BUNDLE___PSVC_REFUNDED_UNITS_C as PSVC_REFUNDED_UNITS_C",
	"JNR_SDS_BUNDLE___PSVC_BASE_UNIT_EXPIRATION_C as PSVC_BASE_UNIT_EXPIRATION_C",
	"JNR_SDS_BUNDLE___PSVC_FREE_UNIT_EXPIRATION_C as PSVC_FREE_UNIT_EXPIRATION_C",
	"JNR_SDS_BUNDLE___PSVC_REFUNDED_BY_C as PSVC_REFUNDED_BY_C",
	"JNR_SDS_BUNDLE___i_SDS_BUNDLE_ID as i_SDS_BUNDLE_ID",
	"JNR_SDS_BUNDLE___i_SDS_SYSTEM_MODIFIED_TSTMP as i_SDS_SYSTEM_MODIFIED_TSTMP",
	"JNR_SDS_BUNDLE___i_SDS_CREATED_TSTMP as i_SDS_CREATED_TSTMP",
	"JNR_SDS_BUNDLE___i_SDS_LAST_MODIFIED_TSTMP as i_SDS_LAST_MODIFIED_TSTMP",
	"JNR_SDS_BUNDLE___i_LOAD_TSTMP as i_LOAD_TSTMP").filter("i_SDS_BUNDLE_ID IS NULL OR ( i_SDS_BUNDLE_ID IS NOT NULL AND ( i_SDS_SYSTEM_MODIFIED_TSTMP != SYSTEM_MOD_STAMP OR i_SDS_CREATED_TSTMP != CREATED_DATE OR i_SDS_LAST_MODIFIED_TSTMP != LAST_MODIFIED_DATE ) )").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node EXP_SDS_BUNDLE, type EXPRESSION 
# COLUMN COUNT: 38

# for each involved DataFrame, append the dataframe name to each column
FIL_SDS_BUNDLE_temp = FIL_SDS_BUNDLE.toDF(*["FIL_SDS_BUNDLE___" + col for col in FIL_SDS_BUNDLE.columns])

EXP_SDS_BUNDLE = FIL_SDS_BUNDLE_temp.selectExpr(
	"FIL_SDS_BUNDLE___sys_row_id as sys_row_id",
	"FIL_SDS_BUNDLE___ID as ID",
	"FIL_SDS_BUNDLE___OWNER_ID as OWNER_ID",
	"FIL_SDS_BUNDLE___IS_DELETED as IS_DELETED",
	"FIL_SDS_BUNDLE___NAME as NAME",
	"FIL_SDS_BUNDLE___CURRENCY_ISO_CODE as CURRENCY_ISO_CODE",
	"FIL_SDS_BUNDLE___CREATED_DATE as CREATED_DATE",
	"FIL_SDS_BUNDLE___CREATED_BY_ID as CREATED_BY_ID",
	"FIL_SDS_BUNDLE___LAST_MODIFIED_DATE as LAST_MODIFIED_DATE",
	"FIL_SDS_BUNDLE___LAST_MODIFIED_BY_ID as LAST_MODIFIED_BY_ID",
	"FIL_SDS_BUNDLE___SYSTEM_MOD_STAMP as SYSTEM_MOD_STAMP",
	"FIL_SDS_BUNDLE___LAST_VIEWED_DATE as LAST_VIEWED_DATE",
	"FIL_SDS_BUNDLE___LAST_REFERENCED_DATE as LAST_REFERENCED_DATE",
	"FIL_SDS_BUNDLE___PSVC_AVAILABLE_UNITS_C as PSVC_AVAILABLE_UNITS_C",
	"FIL_SDS_BUNDLE___PSVC_BUNDLE_CONFIGURATION_C as PSVC_BUNDLE_CONFIGURATION_C",
	"FIL_SDS_BUNDLE___PSVC_BUNDLE_EXPIRATION_DATE_C as PSVC_BUNDLE_EXPIRATION_DATE_C",
	"FIL_SDS_BUNDLE___PSVC_PET_C as PSVC_PET_C",
	"FIL_SDS_BUNDLE___PSVC_PRIMARY_SERVICE_C as PSVC_PRIMARY_SERVICE_C",
	"FIL_SDS_BUNDLE___PSVC_PRODUCT_C as PSVC_PRODUCT_C",
	"FIL_SDS_BUNDLE___PSVC_PURCHASED_UNITS_C as PSVC_PURCHASED_UNITS_C",
	"FIL_SDS_BUNDLE___PSVC_REDEEMED_UNITS_C as PSVC_REDEEMED_UNITS_C",
	"FIL_SDS_BUNDLE___PSVC_RESERVED_UNITS_C as PSVC_RESERVED_UNITS_C",
	"FIL_SDS_BUNDLE___PSVC_IS_EXPIRED_C as PSVC_IS_EXPIRED_C",
	"FIL_SDS_BUNDLE___PSVC_BUNDLE_DISPLAY_NAME_C as PSVC_BUNDLE_DISPLAY_NAME_C",
	"FIL_SDS_BUNDLE___PSVC_ORDER_C as PSVC_ORDER_C",
	"FIL_SDS_BUNDLE___PSVC_PRIMARY_SERVICE_ORIGINAL_UNIT_PRICE_C as PSVC_PRIMARY_SERVICE_ORIGINAL_UNIT_PRICE_C",
	"FIL_SDS_BUNDLE___PSVC_PURCHASED_DATE_C as PSVC_PURCHASED_DATE_C",
	"FIL_SDS_BUNDLE___PSVC_REFUNDED_DATE_C as PSVC_REFUNDED_DATE_C",
	"FIL_SDS_BUNDLE___PSVC_STATUS_C as PSVC_STATUS_C",
	"FIL_SDS_BUNDLE___PSVC_SAVINGS_AMOUNT_C as PSVC_SAVINGS_AMOUNT_C",
	"FIL_SDS_BUNDLE___PSVC_SAVINGS_PERCENTAGE_C as PSVC_SAVINGS_PERCENTAGE_C",
	"FIL_SDS_BUNDLE___PSVC_EXPIRED_UNITS_C as PSVC_EXPIRED_UNITS_C",
	"FIL_SDS_BUNDLE___PSVC_REFUNDED_UNITS_C as PSVC_REFUNDED_UNITS_C",
	"FIL_SDS_BUNDLE___PSVC_BASE_UNIT_EXPIRATION_C as PSVC_BASE_UNIT_EXPIRATION_C",
	"FIL_SDS_BUNDLE___PSVC_FREE_UNIT_EXPIRATION_C as PSVC_FREE_UNIT_EXPIRATION_C",
	"FIL_SDS_BUNDLE___PSVC_REFUNDED_BY_C as PSVC_REFUNDED_BY_C",
	"CURRENT_TIMESTAMP as UPDATE_TSTMP",
	"IF (FIL_SDS_BUNDLE___i_LOAD_TSTMP IS NULL, CURRENT_TIMESTAMP, FIL_SDS_BUNDLE___i_LOAD_TSTMP) as LOAD_TSTMP",
	"IF (FIL_SDS_BUNDLE___i_SDS_BUNDLE_ID IS NULL, 1, 2) as o_UPDATE_VALIDATOR"
)

# COMMAND ----------
# Processing node UPD_SDS_BUNDLE, type UPDATE_STRATEGY 
# COLUMN COUNT: 38

# for each involved DataFrame, append the dataframe name to each column
EXP_SDS_BUNDLE_temp = EXP_SDS_BUNDLE.toDF(*["EXP_SDS_BUNDLE___" + col for col in EXP_SDS_BUNDLE.columns])

UPD_SDS_BUNDLE = EXP_SDS_BUNDLE_temp.selectExpr(
	"EXP_SDS_BUNDLE___ID as ID",
	"EXP_SDS_BUNDLE___OWNER_ID as OWNER_ID",
	"EXP_SDS_BUNDLE___IS_DELETED as IS_DELETED",
	"EXP_SDS_BUNDLE___NAME as NAME",
	"EXP_SDS_BUNDLE___CURRENCY_ISO_CODE as CURRENCY_ISO_CODE",
	"EXP_SDS_BUNDLE___CREATED_DATE as CREATED_DATE",
	"EXP_SDS_BUNDLE___CREATED_BY_ID as CREATED_BY_ID",
	"EXP_SDS_BUNDLE___LAST_MODIFIED_DATE as LAST_MODIFIED_DATE",
	"EXP_SDS_BUNDLE___LAST_MODIFIED_BY_ID as LAST_MODIFIED_BY_ID",
	"EXP_SDS_BUNDLE___SYSTEM_MOD_STAMP as SYSTEM_MOD_STAMP",
	"EXP_SDS_BUNDLE___LAST_VIEWED_DATE as LAST_VIEWED_DATE",
	"EXP_SDS_BUNDLE___LAST_REFERENCED_DATE as LAST_REFERENCED_DATE",
	"EXP_SDS_BUNDLE___PSVC_AVAILABLE_UNITS_C as PSVC_AVAILABLE_UNITS_C",
	"EXP_SDS_BUNDLE___PSVC_BUNDLE_CONFIGURATION_C as PSVC_BUNDLE_CONFIGURATION_C",
	"EXP_SDS_BUNDLE___PSVC_BUNDLE_EXPIRATION_DATE_C as PSVC_BUNDLE_EXPIRATION_DATE_C",
	"EXP_SDS_BUNDLE___PSVC_PET_C as PSVC_PET_C",
	"EXP_SDS_BUNDLE___PSVC_PRIMARY_SERVICE_C as PSVC_PRIMARY_SERVICE_C",
	"EXP_SDS_BUNDLE___PSVC_PRODUCT_C as PSVC_PRODUCT_C",
	"EXP_SDS_BUNDLE___PSVC_PURCHASED_UNITS_C as PSVC_PURCHASED_UNITS_C",
	"EXP_SDS_BUNDLE___PSVC_REDEEMED_UNITS_C as PSVC_REDEEMED_UNITS_C",
	"EXP_SDS_BUNDLE___PSVC_RESERVED_UNITS_C as PSVC_RESERVED_UNITS_C",
	"EXP_SDS_BUNDLE___PSVC_IS_EXPIRED_C as PSVC_IS_EXPIRED_C",
	"EXP_SDS_BUNDLE___PSVC_BUNDLE_DISPLAY_NAME_C as PSVC_BUNDLE_DISPLAY_NAME_C",
	"EXP_SDS_BUNDLE___PSVC_ORDER_C as PSVC_ORDER_C",
	"EXP_SDS_BUNDLE___PSVC_PRIMARY_SERVICE_ORIGINAL_UNIT_PRICE_C as PSVC_PRIMARY_SERVICE_ORIGINAL_UNIT_PRICE_C",
	"EXP_SDS_BUNDLE___PSVC_PURCHASED_DATE_C as PSVC_PURCHASED_DATE_C",
	"EXP_SDS_BUNDLE___PSVC_REFUNDED_DATE_C as PSVC_REFUNDED_DATE_C",
	"EXP_SDS_BUNDLE___PSVC_STATUS_C as PSVC_STATUS_C",
	"EXP_SDS_BUNDLE___PSVC_SAVINGS_AMOUNT_C as PSVC_SAVINGS_AMOUNT_C",
	"EXP_SDS_BUNDLE___PSVC_SAVINGS_PERCENTAGE_C as PSVC_SAVINGS_PERCENTAGE_C",
	"EXP_SDS_BUNDLE___PSVC_EXPIRED_UNITS_C as PSVC_EXPIRED_UNITS_C",
	"EXP_SDS_BUNDLE___PSVC_REFUNDED_UNITS_C as PSVC_REFUNDED_UNITS_C",
	"EXP_SDS_BUNDLE___PSVC_BASE_UNIT_EXPIRATION_C as PSVC_BASE_UNIT_EXPIRATION_C",
	"EXP_SDS_BUNDLE___PSVC_FREE_UNIT_EXPIRATION_C as PSVC_FREE_UNIT_EXPIRATION_C",
	"EXP_SDS_BUNDLE___PSVC_REFUNDED_BY_C as PSVC_REFUNDED_BY_C",
	"EXP_SDS_BUNDLE___UPDATE_TSTMP as UPDATE_TSTMP",
	"EXP_SDS_BUNDLE___LOAD_TSTMP as LOAD_TSTMP",
	"EXP_SDS_BUNDLE___o_UPDATE_VALIDATOR as o_UPDATE_VALIDATOR")\
	.withColumn('pyspark_data_action', when(col('o_UPDATE_VALIDATOR') ==(lit(1)) , lit(0)).when(col('o_UPDATE_VALIDATOR') ==(lit(2)) , lit(1)))

# COMMAND ----------
# Processing node Shortcut_to_SDS_BUNDLE1, type TARGET 
# COLUMN COUNT: 37


Shortcut_to_SDS_BUNDLE1 = UPD_SDS_BUNDLE.selectExpr(
	"CAST(ID AS STRING) as SDS_BUNDLE_ID",
	"CAST(NAME AS STRING) as SDS_BUNDLE_NAME",
	"CAST(PSVC_BUNDLE_DISPLAY_NAME_C AS STRING) as SDS_BUNDLE_DISPLAY_NAME",
	"CAST(PSVC_BUNDLE_CONFIGURATION_C AS STRING) as SDS_BUNDLE_CONFIG_ID",
	"CAST(PSVC_STATUS_C AS STRING) as SDS_BUNDLE_STATUS",
	"CAST(PSVC_ORDER_C AS STRING) as SDS_ORDER_ID",
	"CAST(PSVC_PET_C AS STRING) as SDS_PET_ID",
	"CAST(PSVC_PURCHASED_DATE_C AS TIMESTAMP) as SDS_PURCHASED_TSTMP",
	"CAST(PSVC_REFUNDED_DATE_C AS TIMESTAMP) as SDS_REFUNDED_TSTMP",
	"CAST(PSVC_BUNDLE_EXPIRATION_DATE_C AS DATE) as SDS_BUNDLE_EXP_DT",
	"CAST(PSVC_BASE_UNIT_EXPIRATION_C AS DATE) as SDS_BASE_UNIT_EXP_DT",
	"CAST(PSVC_FREE_UNIT_EXPIRATION_C AS DATE) as SDS_FREE_UNIT_EXP_DT",
	"CAST(PSVC_IS_EXPIRED_C AS TINYINT) as EXPIRED_FLAG",
	"CAST(PSVC_PRIMARY_SERVICE_C AS STRING) as SDS_PRIMARY_SERVICE_WORK_TYPE_ID",
	"CAST(PSVC_PRODUCT_C AS STRING) as SDS_PRODUCT_ID",
	"CAST(PSVC_PURCHASED_UNITS_C AS INT) as PURCHASED_QTY",
	"CAST(PSVC_REDEEMED_UNITS_C AS INT) as REDEEMED_QTY",
	"CAST(PSVC_RESERVED_UNITS_C AS INT) as RESERVED_QTY",
	"CAST(PSVC_AVAILABLE_UNITS_C AS INT) as AVAILABLE_QTY",
	"CAST(PSVC_REFUNDED_UNITS_C AS INT) as REFUNDED_QTY",
	"CAST(PSVC_EXPIRED_UNITS_C AS INT) as EXPIRED_QTY",
	"CAST(PSVC_PRIMARY_SERVICE_ORIGINAL_UNIT_PRICE_C AS DECIMAL(10,2)) as PRIMARY_SERVICE_ORIG_UNIT_PRICE_AMT",
	"CAST(PSVC_SAVINGS_AMOUNT_C AS DECIMAL(10,2)) as SAVINGS_AMT",
	"CAST(PSVC_SAVINGS_PERCENTAGE_C AS DECIMAL(6,2)) as SAVINGS_PCT",
	"CAST(PSVC_REFUNDED_BY_C AS STRING) as SDS_REFUNDED_BY_ID",
	"CAST(OWNER_ID AS STRING) as SDS_OWNER_ID",
	"CAST(CURRENCY_ISO_CODE AS STRING) as CURRENCY_ISO_CD",
	"CAST(IS_DELETED AS TINYINT) as DELETED_FLAG",
	"CAST(LAST_VIEWED_DATE AS TIMESTAMP) as SDS_LAST_VIEWED_TSTMP",
	"CAST(LAST_REFERENCED_DATE AS TIMESTAMP) as SDS_LAST_REFERENCED_TSTMP",
	"CAST(SYSTEM_MOD_STAMP AS TIMESTAMP) as SDS_SYSTEM_MODIFIED_TSTMP",
	"CAST(CREATED_DATE AS TIMESTAMP) as SDS_CREATED_TSTMP",
	"CAST(CREATED_BY_ID AS STRING) as SDS_CREATED_BY_ID",
	"CAST(LAST_MODIFIED_DATE AS TIMESTAMP) as SDS_LAST_MODIFIED_TSTMP",
	"CAST(LAST_MODIFIED_BY_ID AS STRING) as SDS_LAST_MODIFIED_BY_ID",
	"CAST(UPDATE_TSTMP AS TIMESTAMP) as UPDATE_TSTMP",
	"CAST(LOAD_TSTMP AS TIMESTAMP) as LOAD_TSTMP",
	"UPD_SDS_BUNDLE.pyspark_data_action as pyspark_data_action"
)

try:
  primary_key = """source.SDS_BUNDLE_ID = target.SDS_BUNDLE_ID"""
  refined_perf_table = f"{legacy}.SDS_BUNDLE"
  executeMerge(Shortcut_to_SDS_BUNDLE1, refined_perf_table, primary_key)
  logger.info(f"Merge with {refined_perf_table} completed]")
  logPrevRunDt("SDS_BUNDLE", "SDS_BUNDLE", "Completed", "N/A", f"{raw}.log_run_details")
except Exception as e:
  logPrevRunDt("SDS_BUNDLE", "SDS_BUNDLE","Failed",str(e), f"{raw}.log_run_details", )
  raise e
	