#Code converted on 2023-07-24 08:28:48
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from Datalake.utils.genericUtilities import *
from Datalake.utils.configs import *
from Datalake.utils.mergeUtils import *
from Datalake.utils.logger import *
# COMMAND ----------

parser = argparse.ArgumentParser()
spark = SparkSession.getActiveSession()
parser.add_argument('env', type=str, help='Env Variable')
args = parser.parse_args()
env = args.env

if env is None or env == '':
    raise ValueError('env is not set')

refine = getEnvPrefix(env) + 'refine'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'


# COMMAND ----------
# Processing node SQ_Shortcut_to_SDS_PACKAGE_PRODUCT, type SOURCE 
# COLUMN COUNT: 5

SQ_Shortcut_to_SDS_PACKAGE_PRODUCT = spark.sql(f"""SELECT
SDS_PACKAGE_PRODUCT_ID,
SDS_SYSTEM_MODIFIED_TSTMP,
SDS_LAST_MODIFIED_TSTMP,
SDS_CREATED_TSTMP,
LOAD_TSTMP
FROM {legacy}.SDS_PACKAGE_PRODUCT""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node SQ_Shortcut_to_SDS_PSVC_PACKAGE_PRODUCT_C_PRE, type SOURCE 
# COLUMN COUNT: 14

SQ_Shortcut_to_SDS_PSVC_PACKAGE_PRODUCT_C_PRE = spark.sql(f"""SELECT
ID,
OWNER_ID,
IS_DELETED,
NAME,
CURRENCY_ISO_CODE,
RECORD_TYPE_ID,
CREATED_DATE,
CREATED_BY_ID,
LAST_MODIFIED_DATE,
LAST_MODIFIED_BY_ID,
SYSTEM_MOD_STAMP,
PSVC_PACKAGE_C,
PSVC_PRODUCT_C,
LOAD_TSTMP
FROM {raw}.SDS_PSVC_PACKAGE_PRODUCT_C_PRE""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node JNR_SDS_PACKAGE_PRODUCT, type JOINER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 19

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_SDS_PSVC_PACKAGE_PRODUCT_C_PRE_temp = SQ_Shortcut_to_SDS_PSVC_PACKAGE_PRODUCT_C_PRE.toDF(*["SQ_Shortcut_to_SDS_PSVC_PACKAGE_PRODUCT_C_PRE___" + col for col in SQ_Shortcut_to_SDS_PSVC_PACKAGE_PRODUCT_C_PRE.columns])
SQ_Shortcut_to_SDS_PACKAGE_PRODUCT_temp = SQ_Shortcut_to_SDS_PACKAGE_PRODUCT.toDF(*["SQ_Shortcut_to_SDS_PACKAGE_PRODUCT___" + col for col in SQ_Shortcut_to_SDS_PACKAGE_PRODUCT.columns])

JNR_SDS_PACKAGE_PRODUCT = SQ_Shortcut_to_SDS_PSVC_PACKAGE_PRODUCT_C_PRE_temp.join(SQ_Shortcut_to_SDS_PACKAGE_PRODUCT_temp,[SQ_Shortcut_to_SDS_PSVC_PACKAGE_PRODUCT_C_PRE_temp.SQ_Shortcut_to_SDS_PSVC_PACKAGE_PRODUCT_C_PRE___ID == SQ_Shortcut_to_SDS_PACKAGE_PRODUCT_temp.SQ_Shortcut_to_SDS_PACKAGE_PRODUCT___SDS_PACKAGE_PRODUCT_ID],'left_outer').selectExpr(
	"SQ_Shortcut_to_SDS_PACKAGE_PRODUCT___SDS_PACKAGE_PRODUCT_ID as i_SDS_PACKAGE_PRODUCT_ID",
	"SQ_Shortcut_to_SDS_PACKAGE_PRODUCT___SDS_SYSTEM_MODIFIED_TSTMP as i_SDS_SYSTEM_MODIFIED_TSTMP",
	"SQ_Shortcut_to_SDS_PACKAGE_PRODUCT___SDS_LAST_MODIFIED_TSTMP as i_SDS_LAST_MODIFIED_TSTMP",
	"SQ_Shortcut_to_SDS_PACKAGE_PRODUCT___SDS_CREATED_TSTMP as i_SDS_CREATED_TSTMP",
	"SQ_Shortcut_to_SDS_PACKAGE_PRODUCT___LOAD_TSTMP as i_LOAD_TSTMP",
	"SQ_Shortcut_to_SDS_PSVC_PACKAGE_PRODUCT_C_PRE___ID as ID",
	"SQ_Shortcut_to_SDS_PSVC_PACKAGE_PRODUCT_C_PRE___OWNER_ID as OWNER_ID",
	"SQ_Shortcut_to_SDS_PSVC_PACKAGE_PRODUCT_C_PRE___IS_DELETED as IS_DELETED",
	"SQ_Shortcut_to_SDS_PSVC_PACKAGE_PRODUCT_C_PRE___NAME as NAME",
	"SQ_Shortcut_to_SDS_PSVC_PACKAGE_PRODUCT_C_PRE___CURRENCY_ISO_CODE as CURRENCY_ISO_CODE",
	"SQ_Shortcut_to_SDS_PSVC_PACKAGE_PRODUCT_C_PRE___RECORD_TYPE_ID as RECORD_TYPE_ID",
	"SQ_Shortcut_to_SDS_PSVC_PACKAGE_PRODUCT_C_PRE___CREATED_DATE as CREATED_DATE",
	"SQ_Shortcut_to_SDS_PSVC_PACKAGE_PRODUCT_C_PRE___CREATED_BY_ID as CREATED_BY_ID",
	"SQ_Shortcut_to_SDS_PSVC_PACKAGE_PRODUCT_C_PRE___LAST_MODIFIED_DATE as LAST_MODIFIED_DATE",
	"SQ_Shortcut_to_SDS_PSVC_PACKAGE_PRODUCT_C_PRE___LAST_MODIFIED_BY_ID as LAST_MODIFIED_BY_ID",
	"SQ_Shortcut_to_SDS_PSVC_PACKAGE_PRODUCT_C_PRE___SYSTEM_MOD_STAMP as SYSTEM_MOD_STAMP",
	"SQ_Shortcut_to_SDS_PSVC_PACKAGE_PRODUCT_C_PRE___PSVC_PACKAGE_C as PSVC_PACKAGE_C",
	"SQ_Shortcut_to_SDS_PSVC_PACKAGE_PRODUCT_C_PRE___PSVC_PRODUCT_C as PSVC_PRODUCT_C",
	"SQ_Shortcut_to_SDS_PSVC_PACKAGE_PRODUCT_C_PRE___LOAD_TSTMP as LOAD_TSTMP")

# COMMAND ----------
# Processing node EXP_SDS_PACKAGE_PRODUCT, type EXPRESSION 
# COLUMN COUNT: 16

# for each involved DataFrame, append the dataframe name to each column
JNR_SDS_PACKAGE_PRODUCT_temp = JNR_SDS_PACKAGE_PRODUCT.toDF(*["JNR_SDS_PACKAGE_PRODUCT___" + col for col in JNR_SDS_PACKAGE_PRODUCT.columns])

EXP_SDS_PACKAGE_PRODUCT = JNR_SDS_PACKAGE_PRODUCT_temp.selectExpr(
	"JNR_SDS_PACKAGE_PRODUCT___sys_row_id as sys_row_id",
	"JNR_SDS_PACKAGE_PRODUCT___ID as ID",
	"JNR_SDS_PACKAGE_PRODUCT___OWNER_ID as OWNER_ID",
	"JNR_SDS_PACKAGE_PRODUCT___IS_DELETED as IS_DELETED",
	"JNR_SDS_PACKAGE_PRODUCT___NAME as NAME",
	"JNR_SDS_PACKAGE_PRODUCT___CURRENCY_ISO_CODE as CURRENCY_ISO_CODE",
	"JNR_SDS_PACKAGE_PRODUCT___RECORD_TYPE_ID as RECORD_TYPE_ID",
	"JNR_SDS_PACKAGE_PRODUCT___CREATED_DATE as CREATED_DATE",
	"JNR_SDS_PACKAGE_PRODUCT___CREATED_BY_ID as CREATED_BY_ID",
	"JNR_SDS_PACKAGE_PRODUCT___LAST_MODIFIED_DATE as LAST_MODIFIED_DATE",
	"JNR_SDS_PACKAGE_PRODUCT___LAST_MODIFIED_BY_ID as LAST_MODIFIED_BY_ID",
	"JNR_SDS_PACKAGE_PRODUCT___SYSTEM_MOD_STAMP as SYSTEM_MOD_STAMP",
	"JNR_SDS_PACKAGE_PRODUCT___PSVC_PACKAGE_C as PSVC_PACKAGE_C",
	"JNR_SDS_PACKAGE_PRODUCT___PSVC_PRODUCT_C as PSVC_PRODUCT_C",
	"CURRENT_TIMESTAMP as UPDATE_TSTMP",
	"IF (JNR_SDS_PACKAGE_PRODUCT___i_LOAD_TSTMP IS NULL, CURRENT_TIMESTAMP, JNR_SDS_PACKAGE_PRODUCT___i_LOAD_TSTMP) as LOAD_TSTMP",
	"IF (JNR_SDS_PACKAGE_PRODUCT___i_SDS_PACKAGE_PRODUCT_ID IS NULL, 1, IF (JNR_SDS_PACKAGE_PRODUCT___i_SDS_PACKAGE_PRODUCT_ID IS NOT NULL AND ( JNR_SDS_PACKAGE_PRODUCT___i_SDS_SYSTEM_MODIFIED_TSTMP != JNR_SDS_PACKAGE_PRODUCT___SYSTEM_MOD_STAMP OR JNR_SDS_PACKAGE_PRODUCT___i_SDS_CREATED_TSTMP != JNR_SDS_PACKAGE_PRODUCT___CREATED_DATE OR JNR_SDS_PACKAGE_PRODUCT___i_SDS_LAST_MODIFIED_TSTMP != JNR_SDS_PACKAGE_PRODUCT___LAST_MODIFIED_DATE ), 2, 3)) as o_UPDATE_VALIDATOR"
)

# COMMAND ----------
# Processing node UPD_SDS_PACKAGE_PRODUCT, type UPDATE_STRATEGY 
# COLUMN COUNT: 16

# for each involved DataFrame, append the dataframe name to each column
EXP_SDS_PACKAGE_PRODUCT_temp = EXP_SDS_PACKAGE_PRODUCT.toDF(*["EXP_SDS_PACKAGE_PRODUCT___" + col for col in EXP_SDS_PACKAGE_PRODUCT.columns])

UPD_SDS_PACKAGE_PRODUCT = EXP_SDS_PACKAGE_PRODUCT_temp.selectExpr(
	"EXP_SDS_PACKAGE_PRODUCT___ID as ID",
	"EXP_SDS_PACKAGE_PRODUCT___OWNER_ID as OWNER_ID",
	"EXP_SDS_PACKAGE_PRODUCT___IS_DELETED as IS_DELETED",
	"EXP_SDS_PACKAGE_PRODUCT___NAME as NAME",
	"EXP_SDS_PACKAGE_PRODUCT___CURRENCY_ISO_CODE as CURRENCY_ISO_CODE",
	"EXP_SDS_PACKAGE_PRODUCT___RECORD_TYPE_ID as RECORD_TYPE_ID",
	"EXP_SDS_PACKAGE_PRODUCT___CREATED_DATE as CREATED_DATE",
	"EXP_SDS_PACKAGE_PRODUCT___CREATED_BY_ID as CREATED_BY_ID",
	"EXP_SDS_PACKAGE_PRODUCT___LAST_MODIFIED_DATE as LAST_MODIFIED_DATE",
	"EXP_SDS_PACKAGE_PRODUCT___LAST_MODIFIED_BY_ID as LAST_MODIFIED_BY_ID",
	"EXP_SDS_PACKAGE_PRODUCT___SYSTEM_MOD_STAMP as SYSTEM_MOD_STAMP",
	"EXP_SDS_PACKAGE_PRODUCT___PSVC_PACKAGE_C as PSVC_PACKAGE_C",
	"EXP_SDS_PACKAGE_PRODUCT___PSVC_PRODUCT_C as PSVC_PRODUCT_C",
	"EXP_SDS_PACKAGE_PRODUCT___UPDATE_TSTMP as UPDATE_TSTMP",
	"EXP_SDS_PACKAGE_PRODUCT___LOAD_TSTMP as LOAD_TSTMP",
	"EXP_SDS_PACKAGE_PRODUCT___o_UPDATE_VALIDATOR as o_UPDATE_VALIDATOR")\
	.withColumn('pyspark_data_action', when(col('o_UPDATE_VALIDATOR') ==(lit(1)) , lit(0)) .when(col('o_UPDATE_VALIDATOR') ==(lit(2)) , lit(1)) .when(EXP_SDS_PACKAGE_PRODUCT_temp.o_UPDATE_VALIDATOR ==(lit(3)) , lit(3)))

# COMMAND ----------
# Processing node Shortcut_to_SDS_PACKAGE_PRODUCT_2, type TARGET 
# COLUMN COUNT: 15


Shortcut_to_SDS_PACKAGE_PRODUCT_2 = UPD_SDS_PACKAGE_PRODUCT.selectExpr(
	"CAST(ID AS STRING) as SDS_PACKAGE_PRODUCT_ID",
	"CAST(NAME AS STRING) as PACKAGE_PRODUCT_NAME",
	"CAST(PSVC_PACKAGE_C AS STRING) as SDS_PACKAGE_ID",
	"CAST(PSVC_PRODUCT_C AS STRING) as SDS_PRODUCT_ID",
	"CAST(RECORD_TYPE_ID AS STRING) as SDS_RECORD_TYPE_ID",
	"CAST(OWNER_ID AS STRING) as SDS_OWNER_ID",
	"CAST(CURRENCY_ISO_CODE AS STRING) as CURRENCY_ISO_CD",
	"CAST(IS_DELETED AS TINYINT) as DELETED_FLAG",
	"CAST(SYSTEM_MOD_STAMP AS TIMESTAMP) as SDS_SYSTEM_MODIFIED_TSTMP",
	"CAST(LAST_MODIFIED_DATE AS TIMESTAMP) as SDS_LAST_MODIFIED_TSTMP",
	"CAST(LAST_MODIFIED_BY_ID AS STRING) as SDS_LAST_MODIFIED_BY_ID",
	"CAST(CREATED_DATE AS TIMESTAMP) as SDS_CREATED_TSTMP",
	"CAST(CREATED_BY_ID AS STRING) as SDS_CREATED_BY_ID",
	"CAST(UPDATE_TSTMP AS TIMESTAMP) as UPDATE_TSTMP",
	"CAST(LOAD_TSTMP AS TIMESTAMP) as LOAD_TSTMP",
	"UPD_SDS_PACKAGE_PRODUCT.pyspark_data_action as pyspark_data_action"
)

try:
  primary_key = """source.SDS_PACKAGE_PRODUCT_ID = target.SDS_PACKAGE_PRODUCT_ID"""
  refined_perf_table = f"{legacy}.SDS_PACKAGE_PRODUCT"
  executeMerge(Shortcut_to_SDS_PACKAGE_PRODUCT_2, refined_perf_table, primary_key)
  logger.info(f"Merge with {refined_perf_table} completed]")
  logPrevRunDt("SDS_PACKAGE_PRODUCT", "SDS_PACKAGE_PRODUCT", "Completed", "N/A", f"{raw}.log_run_details")
except Exception as e:
  logPrevRunDt("SDS_PACKAGE_PRODUCT", "SDS_PACKAGE_PRODUCT","Failed",str(e), f"{raw}.log_run_details", )
  raise e
	