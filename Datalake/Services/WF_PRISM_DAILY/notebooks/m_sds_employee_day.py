#Code converted on 2023-07-24 08:20:20
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from Datalake.utils.genericUtilities import *
from Datalake.utils.configs import *
from Datalake.utils.mergeUtils import *
from Datalake.utils.logger import *
# COMMAND ----------

parser = argparse.ArgumentParser()
spark = SparkSession.getActiveSession()
parser.add_argument('env', type=str, help='Env Variable')
args = parser.parse_args()
env = args.env

if env is None or env == '':
    raise ValueError('env is not set')

refine = getEnvPrefix(env) + 'refine'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'


# COMMAND ----------
# Processing node SQ_Shortcut_to_SDS_EMPLOYEE, type SOURCE 
# COLUMN COUNT: 21

SQ_Shortcut_to_SDS_EMPLOYEE = spark.sql(f"""SELECT
SDS_EMPLOYEE_ID,
SDS_LOCATION_ID,
LOCATION_ID,
SDS_USER_ID,
EMPLOYEE_ID,
SDS_EMPLOYEE_GROUP_GID,
SDS_EMPLOYEE_GROUP_NAME,
SDS_EMPLOYEE_DISPLAY_NAME,
EMPLOYEE_FIRST_NAME,
EMPLOYEE_LAST_NAME,
EMPLOYEE_STATUS_CD,
EMPLOYEE_STATUS_DESC,
MAX_BLOCK_1_CAPACITY,
MAX_BLOCK_2_CAPACITY,
MAX_CHECK_IN_PER_HOUR,
EMPLOYEE_TERM_DT,
UPDATE_TSTMP,
LOAD_TSTMP,
SDS_EMPLOYEE_ACTIVE_FLAG,
MAX_WEIGHT,
OLD_MAX_WEIGHT
FROM {legacy}.SDS_EMPLOYEE""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node EXP_SDS_EMPLOYEE_DAY, type EXPRESSION 
# COLUMN COUNT: 22

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_SDS_EMPLOYEE_temp = SQ_Shortcut_to_SDS_EMPLOYEE.toDF(*["SQ_Shortcut_to_SDS_EMPLOYEE___" + col for col in SQ_Shortcut_to_SDS_EMPLOYEE.columns])
# TODO review TRUNC ( DATE_ADD(- 1, CURRENT_TIMESTAMP) ) as DAY_DT
EXP_SDS_EMPLOYEE_DAY = SQ_Shortcut_to_SDS_EMPLOYEE_temp.selectExpr(
	"SQ_Shortcut_to_SDS_EMPLOYEE___sys_row_id as sys_row_id",
	"TRUNC ( DATE_ADD(- 1, CURRENT_TIMESTAMP) ) as DAY_DT",
	"SQ_Shortcut_to_SDS_EMPLOYEE___SDS_EMPLOYEE_ID as SDS_EMPLOYEE_ID",
	"SQ_Shortcut_to_SDS_EMPLOYEE___SDS_LOCATION_ID as SDS_LOCATION_ID",
	"SQ_Shortcut_to_SDS_EMPLOYEE___LOCATION_ID as LOCATION_ID",
	"SQ_Shortcut_to_SDS_EMPLOYEE___SDS_USER_ID as SDS_USER_ID",
	"SQ_Shortcut_to_SDS_EMPLOYEE___EMPLOYEE_ID as EMPLOYEE_ID",
	"SQ_Shortcut_to_SDS_EMPLOYEE___SDS_EMPLOYEE_GROUP_GID as SDS_EMPLOYEE_GROUP_GID",
	"SQ_Shortcut_to_SDS_EMPLOYEE___SDS_EMPLOYEE_GROUP_NAME as SDS_EMPLOYEE_GROUP_NAME",
	"SQ_Shortcut_to_SDS_EMPLOYEE___SDS_EMPLOYEE_DISPLAY_NAME as SDS_EMPLOYEE_DISPLAY_NAME",
	"SQ_Shortcut_to_SDS_EMPLOYEE___EMPLOYEE_FIRST_NAME as EMPLOYEE_FIRST_NAME",
	"SQ_Shortcut_to_SDS_EMPLOYEE___EMPLOYEE_LAST_NAME as EMPLOYEE_LAST_NAME",
	"SQ_Shortcut_to_SDS_EMPLOYEE___EMPLOYEE_STATUS_CD as EMPLOYEE_STATUS_CD",
	"SQ_Shortcut_to_SDS_EMPLOYEE___EMPLOYEE_STATUS_DESC as EMPLOYEE_STATUS_DESC",
	"SQ_Shortcut_to_SDS_EMPLOYEE___MAX_BLOCK_1_CAPACITY as MAX_BLOCK_1_CAPACITY",
	"SQ_Shortcut_to_SDS_EMPLOYEE___MAX_BLOCK_2_CAPACITY as MAX_BLOCK_2_CAPACITY",
	"SQ_Shortcut_to_SDS_EMPLOYEE___MAX_CHECK_IN_PER_HOUR as MAX_CHECK_IN_PER_HOUR",
	"SQ_Shortcut_to_SDS_EMPLOYEE___EMPLOYEE_TERM_DT as EMPLOYEE_TERM_DT",
	"SQ_Shortcut_to_SDS_EMPLOYEE___UPDATE_TSTMP as UPDATE_TSTMP",
	"SQ_Shortcut_to_SDS_EMPLOYEE___LOAD_TSTMP as LOAD_TSTMP",
	"SQ_Shortcut_to_SDS_EMPLOYEE___SDS_EMPLOYEE_ACTIVE_FLAG as SDS_EMPLOYEE_ACTIVE_FLAG",
	"SQ_Shortcut_to_SDS_EMPLOYEE___MAX_WEIGHT as MAX_WEIGHT",
	"SQ_Shortcut_to_SDS_EMPLOYEE___OLD_MAX_WEIGHT as OLD_MAX_WEIGHT"
)

# COMMAND ----------
# Processing node Shortcut_to_SDS_EMPLOYEE_DAY, type TARGET 
# COLUMN COUNT: 22


Shortcut_to_SDS_EMPLOYEE_DAY = EXP_SDS_EMPLOYEE_DAY.selectExpr(
	"CAST(DAY_DT AS DATE) as DAY_DT",
	"CAST(SDS_EMPLOYEE_ID AS STRING) as SDS_EMPLOYEE_ID",
	"CAST(SDS_LOCATION_ID AS STRING) as SDS_LOCATION_ID",
	"CAST(LOCATION_ID AS BIGINT) as LOCATION_ID",
	"CAST(SDS_USER_ID AS STRING) as SDS_USER_ID",
	"CAST(EMPLOYEE_ID AS BIGINT) as EMPLOYEE_ID",
	"CAST(SDS_EMPLOYEE_GROUP_GID AS BIGINT) as SDS_EMPLOYEE_GROUP_GID",
	"CAST(SDS_EMPLOYEE_GROUP_NAME AS STRING) as SDS_EMPLOYEE_GROUP_NAME",
	"CAST(SDS_EMPLOYEE_DISPLAY_NAME AS STRING) as SDS_EMPLOYEE_DISPLAY_NAME",
	"CAST(EMPLOYEE_FIRST_NAME AS STRING) as EMPLOYEE_FIRST_NAME",
	"CAST(EMPLOYEE_LAST_NAME AS STRING) as EMPLOYEE_LAST_NAME",
	"CAST(EMPLOYEE_STATUS_CD AS STRING) as EMPLOYEE_STATUS_CD",
	"CAST(EMPLOYEE_STATUS_DESC AS STRING) as EMPLOYEE_STATUS_DESC",
	"CAST(EMPLOYEE_TERM_DT AS DATE) as EMPLOYEE_TERM_DT",
	"CAST(SDS_EMPLOYEE_ACTIVE_FLAG AS TINYINT) as SDS_EMPLOYEE_ACTIVE_FLAG",
	"CAST(MAX_BLOCK_1_CAPACITY AS BIGINT) as MAX_BLOCK_1_CAPACITY",
	"CAST(MAX_BLOCK_2_CAPACITY AS BIGINT) as MAX_BLOCK_2_CAPACITY",
	"CAST(MAX_CHECK_IN_PER_HOUR AS BIGINT) as MAX_CHECK_IN_PER_HOUR",
	"CAST(UPDATE_TSTMP AS TIMESTAMP) as UPDATE_TSTMP",
	"CAST(LOAD_TSTMP AS TIMESTAMP) as LOAD_TSTMP",
	"CAST(MAX_WEIGHT AS DECIMAL(18,3)) as MAX_WEIGHT",
	"CAST(OLD_MAX_WEIGHT AS DECIMAL(18,3)) as OLD_MAX_WEIGHT"
)
Shortcut_to_SDS_EMPLOYEE_DAY.write.saveAsTable(f'{raw}.SDS_EMPLOYEE_DAY')