#Code converted on 2023-07-24 08:32:09
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from Datalake.utils.genericUtilities import *
from Datalake.utils.configs import *
from Datalake.utils.mergeUtils import *
from Datalake.utils.logger import *
# COMMAND ----------

parser = argparse.ArgumentParser()
spark = SparkSession.getActiveSession()
parser.add_argument('env', type=str, help='Env Variable')
args = parser.parse_args()
env = args.env

if env is None or env == '':
    raise ValueError('env is not set')

refine = getEnvPrefix(env) + 'refine'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'


# COMMAND ----------
# Processing node SQ_Shortcut_to_SDS_PRODUCT2_PRE, type SOURCE 
# COLUMN COUNT: 34

SQ_Shortcut_to_SDS_PRODUCT2_PRE = spark.sql(f"""SELECT
ID,
NAME,
PRODUCT_CODE,
DESCRIPTION,
IS_ACTIVE,
CREATED_DATE,
CREATED_BY_ID,
LAST_MODIFIED_DATE,
LAST_MODIFIED_BY_ID,
SYSTEM_MOD_STAMP,
FAMILY,
CURRENCY_ISO_CODE,
RECORD_TYPE_ID,
EXTERNAL_DATA_SOURCE_ID,
EXTERNAL_ID,
DISPLAY_URL,
QUANTITY_UNIT_OF_MEASURE,
IS_DELETED,
LAST_VIEWED_DATE,
LAST_REFERENCED_DATE,
STOCK_KEEPING_UNIT,
PSVC_AVAILABLE_ONLINE_C,
PSVC_ONLINE_DISPLAY_NAME_C,
PSVC_SERVICE_TYPE_C,
PSVC_PRODUCT_NUMBER_C,
PSVC_SUBCATEGORY_C,
PSVC_IS_HIDDEN_C,
PSVC_THUMBNAIL_URL_C,
PSVC_EXPRESS_C,
PSVC_IS_STANDALONE_C,
PSVC_EXTERNAL_TAX_CODE_C,
PSVC_INTERNAL_TAX_CODE_C,
PSVC_IS_BUNDLEABLE_C,
LOAD_TSTMP
FROM {raw}.SDS_PRODUCT2_PRE""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node SQ_Shortcut_to_SDS_PRODUCT, type SOURCE 
# COLUMN COUNT: 5

SQ_Shortcut_to_SDS_PRODUCT = spark.sql(f"""SELECT
SDS_PRODUCT_ID,
SDS_SYSTEM_MODIFIED_TSTMP,
SDS_LAST_MODIFIED_TSTMP,
SDS_CREATED_TSTMP,
LOAD_TSTMP
FROM {legacy}.SDS_PRODUCT""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node JNR_SDS_PRODUCT, type JOINER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 39

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_SDS_PRODUCT2_PRE_temp = SQ_Shortcut_to_SDS_PRODUCT2_PRE.toDF(*["SQ_Shortcut_to_SDS_PRODUCT2_PRE___" + col for col in SQ_Shortcut_to_SDS_PRODUCT2_PRE.columns])
SQ_Shortcut_to_SDS_PRODUCT_temp = SQ_Shortcut_to_SDS_PRODUCT.toDF(*["SQ_Shortcut_to_SDS_PRODUCT___" + col for col in SQ_Shortcut_to_SDS_PRODUCT.columns])

JNR_SDS_PRODUCT = SQ_Shortcut_to_SDS_PRODUCT_temp2_PRE_temp.join(SQ_Shortcut_to_SDS_PRODUCT_temp,[SQ_Shortcut_to_SDS_PRODUCT2_PRE_temp.SQ_Shortcut_to_SDS_PRODUCT2_PRE___ID == SQ_Shortcut_to_SDS_PRODUCT_temp.SQ_Shortcut_to_SDS_PRODUCT___SDS_PRODUCT_ID],'left_outer').selectExpr(
	"SQ_Shortcut_to_SDS_PRODUCT___SDS_PRODUCT_ID as i_SDS_PRODUCT_ID",
	"SQ_Shortcut_to_SDS_PRODUCT___SDS_SYSTEM_MODIFIED_TSTMP as i_SDS_SYSTEM_MODIFIED_TSTMP",
	"SQ_Shortcut_to_SDS_PRODUCT___SDS_LAST_MODIFIED_TSTMP as i_SDS_LAST_MODIFIED_TSTMP",
	"SQ_Shortcut_to_SDS_PRODUCT___SDS_CREATED_TSTMP as i_SDS_CREATED_TSTMP",
	"SQ_Shortcut_to_SDS_PRODUCT___LOAD_TSTMP as i_LOAD_TSTMP",
	"SQ_Shortcut_to_SDS_PRODUCT2_PRE___ID as ID",
	"SQ_Shortcut_to_SDS_PRODUCT2_PRE___NAME as NAME",
	"SQ_Shortcut_to_SDS_PRODUCT2_PRE___PRODUCT_CODE as PRODUCT_CODE",
	"SQ_Shortcut_to_SDS_PRODUCT2_PRE___DESCRIPTION as DESCRIPTION",
	"SQ_Shortcut_to_SDS_PRODUCT2_PRE___IS_ACTIVE as IS_ACTIVE",
	"SQ_Shortcut_to_SDS_PRODUCT2_PRE___CREATED_DATE as CREATED_DATE",
	"SQ_Shortcut_to_SDS_PRODUCT2_PRE___CREATED_BY_ID as CREATED_BY_ID",
	"SQ_Shortcut_to_SDS_PRODUCT2_PRE___LAST_MODIFIED_DATE as LAST_MODIFIED_DATE",
	"SQ_Shortcut_to_SDS_PRODUCT2_PRE___LAST_MODIFIED_BY_ID as LAST_MODIFIED_BY_ID",
	"SQ_Shortcut_to_SDS_PRODUCT2_PRE___SYSTEM_MOD_STAMP as SYSTEM_MOD_STAMP",
	"SQ_Shortcut_to_SDS_PRODUCT2_PRE___FAMILY as FAMILY",
	"SQ_Shortcut_to_SDS_PRODUCT2_PRE___CURRENCY_ISO_CODE as CURRENCY_ISO_CODE",
	"SQ_Shortcut_to_SDS_PRODUCT2_PRE___RECORD_TYPE_ID as RECORD_TYPE_ID",
	"SQ_Shortcut_to_SDS_PRODUCT2_PRE___EXTERNAL_DATA_SOURCE_ID as EXTERNAL_DATA_SOURCE_ID",
	"SQ_Shortcut_to_SDS_PRODUCT2_PRE___EXTERNAL_ID as EXTERNAL_ID",
	"SQ_Shortcut_to_SDS_PRODUCT2_PRE___DISPLAY_URL as DISPLAY_URL",
	"SQ_Shortcut_to_SDS_PRODUCT2_PRE___QUANTITY_UNIT_OF_MEASURE as QUANTITY_UNIT_OF_MEASURE",
	"SQ_Shortcut_to_SDS_PRODUCT2_PRE___IS_DELETED as IS_DELETED",
	"SQ_Shortcut_to_SDS_PRODUCT2_PRE___LAST_VIEWED_DATE as LAST_VIEWED_DATE",
	"SQ_Shortcut_to_SDS_PRODUCT2_PRE___LAST_REFERENCED_DATE as LAST_REFERENCED_DATE",
	"SQ_Shortcut_to_SDS_PRODUCT2_PRE___STOCK_KEEPING_UNIT as STOCK_KEEPING_UNIT",
	"SQ_Shortcut_to_SDS_PRODUCT2_PRE___PSVC_AVAILABLE_ONLINE_C as PSVC_AVAILABLE_ONLINE_C",
	"SQ_Shortcut_to_SDS_PRODUCT2_PRE___PSVC_ONLINE_DISPLAY_NAME_C as PSVC_ONLINE_DISPLAY_NAME_C",
	"SQ_Shortcut_to_SDS_PRODUCT2_PRE___PSVC_SERVICE_TYPE_C as PSVC_SERVICE_TYPE_C",
	"SQ_Shortcut_to_SDS_PRODUCT2_PRE___PSVC_PRODUCT_NUMBER_C as PSVC_PRODUCT_NUMBER_C",
	"SQ_Shortcut_to_SDS_PRODUCT2_PRE___PSVC_SUBCATEGORY_C as PSVC_SUBCATEGORY_C",
	"SQ_Shortcut_to_SDS_PRODUCT2_PRE___PSVC_IS_HIDDEN_C as PSVC_IS_HIDDEN_C",
	"SQ_Shortcut_to_SDS_PRODUCT2_PRE___PSVC_THUMBNAIL_URL_C as PSVC_THUMBNAIL_URL_C",
	"SQ_Shortcut_to_SDS_PRODUCT2_PRE___PSVC_EXPRESS_C as PSVC_EXPRESS_C",
	"SQ_Shortcut_to_SDS_PRODUCT2_PRE___PSVC_IS_STANDALONE_C as PSVC_IS_STANDALONE_C",
	"SQ_Shortcut_to_SDS_PRODUCT2_PRE___PSVC_EXTERNAL_TAX_CODE_C as PSVC_EXTERNAL_TAX_CODE_C",
	"SQ_Shortcut_to_SDS_PRODUCT2_PRE___PSVC_INTERNAL_TAX_CODE_C as PSVC_INTERNAL_TAX_CODE_C",
	"SQ_Shortcut_to_SDS_PRODUCT2_PRE___PSVC_IS_BUNDLEABLE_C as PSVC_IS_BUNDLEABLE_C",
	"SQ_Shortcut_to_SDS_PRODUCT2_PRE___LOAD_TSTMP as LOAD_TSTMP")

# COMMAND ----------
# Processing node FIL_SDS_PRODUCT, type FILTER 
# COLUMN COUNT: 38

# for each involved DataFrame, append the dataframe name to each column
JNR_SDS_PRODUCT_temp = JNR_SDS_PRODUCT.toDF(*["JNR_SDS_PRODUCT___" + col for col in JNR_SDS_PRODUCT.columns])

FIL_SDS_PRODUCT = JNR_SDS_PRODUCT_temp.selectExpr(
	"JNR_SDS_PRODUCT___i_SDS_PRODUCT_ID as i_SDS_PRODUCT_ID",
	"JNR_SDS_PRODUCT___i_SDS_SYSTEM_MODIFIED_TSTMP as i_SDS_SYSTEM_MODIFIED_TSTMP",
	"JNR_SDS_PRODUCT___i_SDS_LAST_MODIFIED_TSTMP as i_SDS_LAST_MODIFIED_TSTMP",
	"JNR_SDS_PRODUCT___i_SDS_CREATED_TSTMP as i_SDS_CREATED_TSTMP",
	"JNR_SDS_PRODUCT___i_LOAD_TSTMP as i_LOAD_TSTMP",
	"JNR_SDS_PRODUCT___ID as ID",
	"JNR_SDS_PRODUCT___NAME as NAME",
	"JNR_SDS_PRODUCT___PRODUCT_CODE as PRODUCT_CODE",
	"JNR_SDS_PRODUCT___DESCRIPTION as DESCRIPTION",
	"JNR_SDS_PRODUCT___IS_ACTIVE as IS_ACTIVE",
	"JNR_SDS_PRODUCT___CREATED_DATE as CREATED_DATE",
	"JNR_SDS_PRODUCT___CREATED_BY_ID as CREATED_BY_ID",
	"JNR_SDS_PRODUCT___LAST_MODIFIED_DATE as LAST_MODIFIED_DATE",
	"JNR_SDS_PRODUCT___LAST_MODIFIED_BY_ID as LAST_MODIFIED_BY_ID",
	"JNR_SDS_PRODUCT___SYSTEM_MOD_STAMP as SYSTEM_MOD_STAMP",
	"JNR_SDS_PRODUCT___FAMILY as FAMILY",
	"JNR_SDS_PRODUCT___CURRENCY_ISO_CODE as CURRENCY_ISO_CODE",
	"JNR_SDS_PRODUCT___RECORD_TYPE_ID as RECORD_TYPE_ID",
	"JNR_SDS_PRODUCT___EXTERNAL_DATA_SOURCE_ID as EXTERNAL_DATA_SOURCE_ID",
	"JNR_SDS_PRODUCT___EXTERNAL_ID as EXTERNAL_ID",
	"JNR_SDS_PRODUCT___DISPLAY_URL as DISPLAY_URL",
	"JNR_SDS_PRODUCT___QUANTITY_UNIT_OF_MEASURE as QUANTITY_UNIT_OF_MEASURE",
	"JNR_SDS_PRODUCT___IS_DELETED as IS_DELETED",
	"JNR_SDS_PRODUCT___LAST_VIEWED_DATE as LAST_VIEWED_DATE",
	"JNR_SDS_PRODUCT___LAST_REFERENCED_DATE as LAST_REFERENCED_DATE",
	"JNR_SDS_PRODUCT___STOCK_KEEPING_UNIT as STOCK_KEEPING_UNIT",
	"JNR_SDS_PRODUCT___PSVC_AVAILABLE_ONLINE_C as PSVC_AVAILABLE_ONLINE_C",
	"JNR_SDS_PRODUCT___PSVC_ONLINE_DISPLAY_NAME_C as PSVC_ONLINE_DISPLAY_NAME_C",
	"JNR_SDS_PRODUCT___PSVC_SERVICE_TYPE_C as PSVC_SERVICE_TYPE_C",
	"JNR_SDS_PRODUCT___PSVC_PRODUCT_NUMBER_C as PSVC_PRODUCT_NUMBER_C",
	"JNR_SDS_PRODUCT___PSVC_SUBCATEGORY_C as PSVC_SUBCATEGORY_C",
	"JNR_SDS_PRODUCT___PSVC_IS_HIDDEN_C as PSVC_IS_HIDDEN_C",
	"JNR_SDS_PRODUCT___PSVC_THUMBNAIL_URL_C as PSVC_THUMBNAIL_URL_C",
	"JNR_SDS_PRODUCT___PSVC_EXPRESS_C as PSVC_EXPRESS_C",
	"JNR_SDS_PRODUCT___PSVC_IS_STANDALONE_C as PSVC_IS_STANDALONE_C",
	"JNR_SDS_PRODUCT___PSVC_EXTERNAL_TAX_CODE_C as PSVC_EXTERNAL_TAX_CODE_C",
	"JNR_SDS_PRODUCT___PSVC_INTERNAL_TAX_CODE_C as PSVC_INTERNAL_TAX_CODE_C",
	"JNR_SDS_PRODUCT___PSVC_IS_BUNDLEABLE_C as PSVC_IS_BUNDLEABLE_C").filter("i_SDS_PRODUCT_ID IS NULL OR ( i_SDS_PRODUCT_ID IS NOT NULL AND ( i_SDS_SYSTEM_MODIFIED_TSTMP != SYSTEM_MOD_STAMP OR i_SDS_CREATED_TSTMP != CREATED_DATE OR i_SDS_LAST_MODIFIED_TSTMP != LAST_MODIFIED_DATE ) )").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node EXP_SDS_PRODUCT, type EXPRESSION 
# COLUMN COUNT: 36

# for each involved DataFrame, append the dataframe name to each column
FIL_SDS_PRODUCT_temp = FIL_SDS_PRODUCT.toDF(*["FIL_SDS_PRODUCT___" + col for col in FIL_SDS_PRODUCT.columns])

EXP_SDS_PRODUCT = FIL_SDS_PRODUCT_temp.selectExpr(
	"FIL_SDS_PRODUCT___sys_row_id as sys_row_id",
	"FIL_SDS_PRODUCT___ID as ID",
	"FIL_SDS_PRODUCT___NAME as NAME",
	"FIL_SDS_PRODUCT___PRODUCT_CODE as PRODUCT_CODE",
	"FIL_SDS_PRODUCT___DESCRIPTION as DESCRIPTION",
	"FIL_SDS_PRODUCT___IS_ACTIVE as IS_ACTIVE",
	"FIL_SDS_PRODUCT___CREATED_DATE as CREATED_DATE",
	"FIL_SDS_PRODUCT___CREATED_BY_ID as CREATED_BY_ID",
	"FIL_SDS_PRODUCT___LAST_MODIFIED_DATE as LAST_MODIFIED_DATE",
	"FIL_SDS_PRODUCT___LAST_MODIFIED_BY_ID as LAST_MODIFIED_BY_ID",
	"FIL_SDS_PRODUCT___SYSTEM_MOD_STAMP as SYSTEM_MOD_STAMP",
	"FIL_SDS_PRODUCT___FAMILY as FAMILY",
	"FIL_SDS_PRODUCT___CURRENCY_ISO_CODE as CURRENCY_ISO_CODE",
	"FIL_SDS_PRODUCT___RECORD_TYPE_ID as RECORD_TYPE_ID",
	"FIL_SDS_PRODUCT___EXTERNAL_DATA_SOURCE_ID as EXTERNAL_DATA_SOURCE_ID",
	"FIL_SDS_PRODUCT___EXTERNAL_ID as EXTERNAL_ID",
	"FIL_SDS_PRODUCT___DISPLAY_URL as DISPLAY_URL",
	"FIL_SDS_PRODUCT___QUANTITY_UNIT_OF_MEASURE as QUANTITY_UNIT_OF_MEASURE",
	"FIL_SDS_PRODUCT___IS_DELETED as IS_DELETED",
	"FIL_SDS_PRODUCT___LAST_VIEWED_DATE as LAST_VIEWED_DATE",
	"FIL_SDS_PRODUCT___STOCK_KEEPING_UNIT as STOCK_KEEPING_UNIT",
	"FIL_SDS_PRODUCT___PSVC_AVAILABLE_ONLINE_C as PSVC_AVAILABLE_ONLINE_C",
	"FIL_SDS_PRODUCT___PSVC_ONLINE_DISPLAY_NAME_C as PSVC_ONLINE_DISPLAY_NAME_C",
	"FIL_SDS_PRODUCT___PSVC_SERVICE_TYPE_C as PSVC_SERVICE_TYPE_C",
	"FIL_SDS_PRODUCT___PSVC_PRODUCT_NUMBER_C as PSVC_PRODUCT_NUMBER_C",
	"FIL_SDS_PRODUCT___LAST_REFERENCED_DATE as LAST_REFERENCED_DATE",
	"FIL_SDS_PRODUCT___PSVC_SUBCATEGORY_C as PSVC_SUBCATEGORY_C",
	"FIL_SDS_PRODUCT___PSVC_IS_HIDDEN_C as PSVC_IS_HIDDEN_C",
	"FIL_SDS_PRODUCT___PSVC_THUMBNAIL_URL_C as PSVC_THUMBNAIL_URL_C",
	"FIL_SDS_PRODUCT___PSVC_EXPRESS_C as PSVC_EXPRESS_C",
	"FIL_SDS_PRODUCT___PSVC_IS_STANDALONE_C as PSVC_IS_STANDALONE_C",
	"FIL_SDS_PRODUCT___PSVC_EXTERNAL_TAX_CODE_C as PSVC_EXTERNAL_TAX_CODE_C",
	"FIL_SDS_PRODUCT___PSVC_INTERNAL_TAX_CODE_C as PSVC_INTERNAL_TAX_CODE_C",
	"FIL_SDS_PRODUCT___PSVC_IS_BUNDLEABLE_C as PSVC_IS_BUNDLEABLE_C",
	"CURRENT_TIMESTAMP as UPDATE_TSTMP",
	"IF (FIL_SDS_PRODUCT___i_LOAD_TSTMP IS NULL, CURRENT_TIMESTAMP, FIL_SDS_PRODUCT___i_LOAD_TSTMP) as LOAD_TSTMP",
	"IF (FIL_SDS_PRODUCT___i_SDS_PRODUCT_ID IS NULL, 1, 2) as o_UPDATE_VALIDATOR"
)

# COMMAND ----------
# Processing node UPD_SDS_PRODUCT, type UPDATE_STRATEGY 
# COLUMN COUNT: 36

# for each involved DataFrame, append the dataframe name to each column
EXP_SDS_PRODUCT_temp = EXP_SDS_PRODUCT.toDF(*["EXP_SDS_PRODUCT___" + col for col in EXP_SDS_PRODUCT.columns])

UPD_SDS_PRODUCT = EXP_SDS_PRODUCT_temp.selectExpr(
	"EXP_SDS_PRODUCT___ID as ID",
	"EXP_SDS_PRODUCT___NAME as NAME",
	"EXP_SDS_PRODUCT___PRODUCT_CODE as PRODUCT_CODE",
	"EXP_SDS_PRODUCT___DESCRIPTION as DESCRIPTION",
	"EXP_SDS_PRODUCT___IS_ACTIVE as IS_ACTIVE",
	"EXP_SDS_PRODUCT___CREATED_DATE as CREATED_DATE",
	"EXP_SDS_PRODUCT___CREATED_BY_ID as CREATED_BY_ID",
	"EXP_SDS_PRODUCT___LAST_MODIFIED_DATE as LAST_MODIFIED_DATE",
	"EXP_SDS_PRODUCT___LAST_MODIFIED_BY_ID as LAST_MODIFIED_BY_ID",
	"EXP_SDS_PRODUCT___SYSTEM_MOD_STAMP as SYSTEM_MOD_STAMP",
	"EXP_SDS_PRODUCT___FAMILY as FAMILY",
	"EXP_SDS_PRODUCT___CURRENCY_ISO_CODE as CURRENCY_ISO_CODE",
	"EXP_SDS_PRODUCT___RECORD_TYPE_ID as RECORD_TYPE_ID",
	"EXP_SDS_PRODUCT___EXTERNAL_DATA_SOURCE_ID as EXTERNAL_DATA_SOURCE_ID",
	"EXP_SDS_PRODUCT___EXTERNAL_ID as EXTERNAL_ID",
	"EXP_SDS_PRODUCT___DISPLAY_URL as DISPLAY_URL",
	"EXP_SDS_PRODUCT___QUANTITY_UNIT_OF_MEASURE as QUANTITY_UNIT_OF_MEASURE",
	"EXP_SDS_PRODUCT___IS_DELETED as IS_DELETED",
	"EXP_SDS_PRODUCT___LAST_VIEWED_DATE as LAST_VIEWED_DATE",
	"EXP_SDS_PRODUCT___LAST_REFERENCED_DATE as LAST_REFERENCED_DATE",
	"EXP_SDS_PRODUCT___STOCK_KEEPING_UNIT as STOCK_KEEPING_UNIT",
	"EXP_SDS_PRODUCT___PSVC_AVAILABLE_ONLINE_C as PSVC_AVAILABLE_ONLINE_C",
	"EXP_SDS_PRODUCT___PSVC_ONLINE_DISPLAY_NAME_C as PSVC_ONLINE_DISPLAY_NAME_C",
	"EXP_SDS_PRODUCT___PSVC_SERVICE_TYPE_C as PSVC_SERVICE_TYPE_C",
	"EXP_SDS_PRODUCT___PSVC_PRODUCT_NUMBER_C as PSVC_PRODUCT_NUMBER_C",
	"EXP_SDS_PRODUCT___PSVC_SUBCATEGORY_C as PSVC_SUBCATEGORY_C",
	"EXP_SDS_PRODUCT___PSVC_IS_HIDDEN_C as PSVC_IS_HIDDEN_C",
	"EXP_SDS_PRODUCT___PSVC_THUMBNAIL_URL_C as PSVC_THUMBNAIL_URL_C",
	"EXP_SDS_PRODUCT___PSVC_EXPRESS_C as PSVC_EXPRESS_C",
	"EXP_SDS_PRODUCT___PSVC_IS_STANDALONE_C as PSVC_IS_STANDALONE_C",
	"EXP_SDS_PRODUCT___PSVC_EXTERNAL_TAX_CODE_C as PSVC_EXTERNAL_TAX_CODE_C",
	"EXP_SDS_PRODUCT___PSVC_INTERNAL_TAX_CODE_C as PSVC_INTERNAL_TAX_CODE_C",
	"EXP_SDS_PRODUCT___PSVC_IS_BUNDLEABLE_C as PSVC_IS_BUNDLEABLE_C",
	"EXP_SDS_PRODUCT___UPDATE_TSTMP as UPDATE_TSTMP",
	"EXP_SDS_PRODUCT___LOAD_TSTMP as LOAD_TSTMP",
	"EXP_SDS_PRODUCT___o_UPDATE_VALIDATOR as o_UPDATE_VALIDATOR")\
	.withColumn('pyspark_data_action', when(col('o_UPDATE_VALIDATOR') ==(lit(1)) , lit(0)) .when(col('o_UPDATE_VALIDATOR') ==(lit(2)) , lit(1)))

# COMMAND ----------
# Processing node Shortcut_to_SDS_PRODUCT, type TARGET 
# COLUMN COUNT: 35


Shortcut_to_SDS_PRODUCT = UPD_SDS_PRODUCT.selectExpr(
	"CAST(ID AS STRING) as SDS_PRODUCT_ID",
	"CAST(NAME AS STRING) as SDS_PRODUCT_NAME",
	"CAST(DESCRIPTION AS STRING) as SDS_PRODUCT_DESC",
	"CAST(PRODUCT_CODE AS STRING) as SDS_PRODUCT_CD",
	"CAST(PSVC_PRODUCT_NUMBER_C AS STRING) as SDS_PRODUCT_NBR",
	"CAST(FAMILY AS STRING) as SDS_PRODUCT_FAMILY",
	"CAST(PSVC_SUBCATEGORY_C AS STRING) as SDS_SUB_CATEGORY",
	"CAST(STOCK_KEEPING_UNIT AS STRING) as STOCK_KEEPING_UNIT",
	"CAST(QUANTITY_UNIT_OF_MEASURE AS STRING) as QUANTITY_UOM",
	"CAST(PSVC_INTERNAL_TAX_CODE_C AS STRING) as INTERNAL_TAX_CLASS",
	"CAST(PSVC_EXTERNAL_TAX_CODE_C AS STRING) as EXTERNAL_TAX_CD",
	"CAST(PSVC_AVAILABLE_ONLINE_C AS TINYINT) as AVAILABLE_ONLINE_FLAG",
	"CAST(PSVC_ONLINE_DISPLAY_NAME_C AS STRING) as ONLINE_DISPLAY_NAME",
	"CAST(EXTERNAL_DATA_SOURCE_ID AS STRING) as SDS_EXTERNAL_DATA_SOURCE_ID",
	"CAST(EXTERNAL_ID AS STRING) as SDS_EXTERNAL_ID",
	"CAST(DISPLAY_URL AS STRING) as DISPLAY_URL",
	"CAST(PSVC_THUMBNAIL_URL_C AS STRING) as THUMBNAIL_URL",
	"CAST(PSVC_EXPRESS_C AS TINYINT) as EXPRESS_FLAG",
	"CAST(PSVC_IS_HIDDEN_C AS TINYINT) as HIDDEN_FLAG",
	"CAST(PSVC_IS_STANDALONE_C AS TINYINT) as STANDALONE_FLAG",
	"CAST(PSVC_IS_BUNDLEABLE_C AS TINYINT) as BUNDLEABLE_FLAG",
	"CAST(PSVC_SERVICE_TYPE_C AS STRING) as SDS_SERVICE_TYPE_ID",
	"CAST(RECORD_TYPE_ID AS STRING) as SDS_RECORD_TYPE_ID",
	"CAST(CURRENCY_ISO_CODE AS STRING) as CURRENCY_ISO_CD",
	"CAST(IS_ACTIVE AS TINYINT) as ACTIVE_FLAG",
	"CAST(IS_DELETED AS TINYINT) as DELETED_FLAG",
	"CAST(LAST_VIEWED_DATE AS TIMESTAMP) as SDS_LAST_VIEWED_TSTMP",
	"CAST(LAST_REFERENCED_DATE AS TIMESTAMP) as SDS_LAST_REFERENCED_TSTMP",
	"CAST(SYSTEM_MOD_STAMP AS TIMESTAMP) as SDS_SYSTEM_MODIFIED_TSTMP",
	"CAST(LAST_MODIFIED_DATE AS TIMESTAMP) as SDS_LAST_MODIFIED_TSTMP",
	"CAST(LAST_MODIFIED_BY_ID AS STRING) as SDS_LAST_MODIFIED_BY_ID",
	"CAST(CREATED_DATE AS TIMESTAMP) as SDS_CREATED_TSTMP",
	"CAST(CREATED_BY_ID AS STRING) as SDS_CREATED_BY_ID",
	"CAST(UPDATE_TSTMP AS TIMESTAMP) as UPDATE_TSTMP",
	"CAST(LOAD_TSTMP AS TIMESTAMP) as LOAD_TSTMP",
	"UPD_SDS_PRODUCT.pyspark_data_action as pyspark_data_action"
)

try:
  primary_key = """source.SDS_PRODUCT_ID = target.SDS_PRODUCT_ID"""
  refined_perf_table = f"{legacy}.SDS_PRODUCT"
  executeMerge(Shortcut_to_SDS_PRODUCT, refined_perf_table, primary_key)
  logger.info(f"Merge with {refined_perf_table} completed]")
  logPrevRunDt("SDS_PRODUCT", "SDS_PRODUCT", "Completed", "N/A", f"{raw}.log_run_details")
except Exception as e:
  logPrevRunDt("SDS_PRODUCT", "SDS_PRODUCT","Failed",str(e), f"{raw}.log_run_details", )
  raise e
	