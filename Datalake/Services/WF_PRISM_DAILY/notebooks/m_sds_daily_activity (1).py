#Code converted on 2023-07-24 08:18:21
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from Datalake.utils.genericUtilities import *
from Datalake.utils.configs import *
from Datalake.utils.mergeUtils import *
from Datalake.utils.logger import *
# COMMAND ----------

parser = argparse.ArgumentParser()
spark = SparkSession.getActiveSession()
parser.add_argument('env', type=str, help='Env Variable')
args = parser.parse_args()
env = args.env

if env is None or env == '':
    raise ValueError('env is not set')

refine = getEnvPrefix(env) + 'refine'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'


# COMMAND ----------
# Processing node SQ_Shortcut_to_SDS_PSVC_DAILY_ACIVITY_C_PRE, type SOURCE 
# COLUMN COUNT: 18

SQ_Shortcut_to_SDS_PSVC_DAILY_ACIVITY_C_PRE = spark.sql(f"""SELECT
ID,
IS_DELETED,
NAME,
CURRENCY_ISO_CODE,
RECORD_TYPE_ID,
CREATED_DATE,
CREATED_BY_ID,
LAST_MODIFIED_DATE,
LAST_MODIFIED_BY_ID,
SYSTEM_MOD_STAMP,
PSVC_SCHEDULE_TEMPLATE_C,
PSVC_ABSENCE_REASON_C,
PSVC_DAY_OF_THE_WEEK_C,
PSVC_EFFECTIVE_END_TIME_C,
PSVC_EFFECTIVE_START_TIME_C,
PSVC_RELOCATION_TO_C,
PSVC_WEEK_C,
PSVC_PET_SUPPORTED_TYPE
FROM {raw}.SDS_PSVC_DAILY_ACTIVITY_C_PRE""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node SQ_Shortcut_to_SDS_DAILY_ACTIVITY, type SOURCE 
# COLUMN COUNT: 6

SQ_Shortcut_to_SDS_DAILY_ACTIVITY = spark.sql(f"""SELECT
SDS_DAILY_ACTIVITY_ID,
SDS_SYSTEM_MODIFIED_TSTMP,
SDS_LAST_MODIFIED_TSTMP,
SDS_CREATED_TSTMP,
LOAD_TSTMP,
PSVC_PET_SUPPORTED_TYPE
FROM {legacy}.SDS_DAILY_ACTIVITY""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node JNR_SDS_DAILY_ACTIVITY, type JOINER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 24

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_SDS_DAILY_ACTIVITY_temp = SQ_Shortcut_to_SDS_DAILY_ACTIVITY.toDF(*["SQ_Shortcut_to_SDS_DAILY_ACTIVITY___" + col for col in SQ_Shortcut_to_SDS_DAILY_ACTIVITY.columns])
SQ_Shortcut_to_SDS_PSVC_DAILY_ACIVITY_C_PRE_temp = SQ_Shortcut_to_SDS_PSVC_DAILY_ACIVITY_C_PRE.toDF(*["SQ_Shortcut_to_SDS_PSVC_DAILY_ACIVITY_C_PRE___" + col for col in SQ_Shortcut_to_SDS_PSVC_DAILY_ACIVITY_C_PRE.columns])

JNR_SDS_DAILY_ACTIVITY = SQ_Shortcut_to_SDS_DAILY_ACTIVITY_temp.join(SQ_Shortcut_to_SDS_PSVC_DAILY_ACIVITY_C_PRE_temp,[SQ_Shortcut_to_SDS_DAILY_ACTIVITY_temp.SQ_Shortcut_to_SDS_DAILY_ACTIVITY___SDS_DAILY_ACTIVITY_ID == SQ_Shortcut_to_SDS_PSVC_DAILY_ACIVITY_C_PRE_temp.SQ_Shortcut_to_SDS_PSVC_DAILY_ACIVITY_C_PRE___ID],'right_outer').selectExpr(
	"SQ_Shortcut_to_SDS_PSVC_DAILY_ACIVITY_C_PRE___ID as ID",
	"SQ_Shortcut_to_SDS_PSVC_DAILY_ACIVITY_C_PRE___IS_DELETED as IS_DELETED",
	"SQ_Shortcut_to_SDS_PSVC_DAILY_ACIVITY_C_PRE___NAME as NAME",
	"SQ_Shortcut_to_SDS_PSVC_DAILY_ACIVITY_C_PRE___CURRENCY_ISO_CODE as CURRENCY_ISO_CODE",
	"SQ_Shortcut_to_SDS_PSVC_DAILY_ACIVITY_C_PRE___RECORD_TYPE_ID as RECORD_TYPE_ID",
	"SQ_Shortcut_to_SDS_PSVC_DAILY_ACIVITY_C_PRE___CREATED_DATE as CREATED_DATE",
	"SQ_Shortcut_to_SDS_PSVC_DAILY_ACIVITY_C_PRE___CREATED_BY_ID as CREATED_BY_ID",
	"SQ_Shortcut_to_SDS_PSVC_DAILY_ACIVITY_C_PRE___LAST_MODIFIED_DATE as LAST_MODIFIED_DATE",
	"SQ_Shortcut_to_SDS_PSVC_DAILY_ACIVITY_C_PRE___LAST_MODIFIED_BY_ID as LAST_MODIFIED_BY_ID",
	"SQ_Shortcut_to_SDS_PSVC_DAILY_ACIVITY_C_PRE___SYSTEM_MOD_STAMP as SYSTEM_MOD_STAMP",
	"SQ_Shortcut_to_SDS_PSVC_DAILY_ACIVITY_C_PRE___PSVC_SCHEDULE_TEMPLATE_C as PSVC_SCHEDULE_TEMPLATE_C",
	"SQ_Shortcut_to_SDS_PSVC_DAILY_ACIVITY_C_PRE___PSVC_ABSENCE_REASON_C as PSVC_ABSENCE_REASON_C",
	"SQ_Shortcut_to_SDS_PSVC_DAILY_ACIVITY_C_PRE___PSVC_DAY_OF_THE_WEEK_C as PSVC_DAY_OF_THE_WEEK_C",
	"SQ_Shortcut_to_SDS_PSVC_DAILY_ACIVITY_C_PRE___PSVC_EFFECTIVE_END_TIME_C as PSVC_EFFECTIVE_END_TIME_C",
	"SQ_Shortcut_to_SDS_PSVC_DAILY_ACIVITY_C_PRE___PSVC_EFFECTIVE_START_TIME_C as PSVC_EFFECTIVE_START_TIME_C",
	"SQ_Shortcut_to_SDS_PSVC_DAILY_ACIVITY_C_PRE___PSVC_RELOCATION_TO_C as PSVC_RELOCATION_TO_C",
	"SQ_Shortcut_to_SDS_PSVC_DAILY_ACIVITY_C_PRE___PSVC_WEEK_C as PSVC_WEEK_C",
	"SQ_Shortcut_to_SDS_DAILY_ACTIVITY___SDS_DAILY_ACTIVITY_ID as SDS_DAILY_ACTIVITY_ID",
	"SQ_Shortcut_to_SDS_DAILY_ACTIVITY___SDS_SYSTEM_MODIFIED_TSTMP as SDS_SYSTEM_MODIFIED_TSTMP",
	"SQ_Shortcut_to_SDS_DAILY_ACTIVITY___SDS_LAST_MODIFIED_TSTMP as SDS_LAST_MODIFIED_TSTMP",
	"SQ_Shortcut_to_SDS_DAILY_ACTIVITY___SDS_CREATED_TSTMP as SDS_CREATED_TSTMP",
	"SQ_Shortcut_to_SDS_DAILY_ACTIVITY___LOAD_TSTMP as i_LOAD_TSTMP",
	"SQ_Shortcut_to_SDS_PSVC_DAILY_ACIVITY_C_PRE___PSVC_PET_SUPPORTED_TYPE as PSVC_PET_SUPPORTED_TYPE",
	"SQ_Shortcut_to_SDS_DAILY_ACTIVITY___PSVC_PET_SUPPORTED_TYPE as PSVC_PET_SUPPORTED_TYPE1")

# COMMAND ----------
# Processing node FIL_SDS_DAILY_ACTIVITY, type FILTER 
# COLUMN COUNT: 23

# for each involved DataFrame, append the dataframe name to each column
JNR_SDS_DAILY_ACTIVITY_temp = JNR_SDS_DAILY_ACTIVITY.toDF(*["JNR_SDS_DAILY_ACTIVITY___" + col for col in JNR_SDS_DAILY_ACTIVITY.columns])

FIL_SDS_DAILY_ACTIVITY = JNR_SDS_DAILY_ACTIVITY_temp.selectExpr(
	"JNR_SDS_DAILY_ACTIVITY___ID as ID",
	"JNR_SDS_DAILY_ACTIVITY___IS_DELETED as IS_DELETED",
	"JNR_SDS_DAILY_ACTIVITY___NAME as NAME",
	"JNR_SDS_DAILY_ACTIVITY___CURRENCY_ISO_CODE as CURRENCY_ISO_CODE",
	"JNR_SDS_DAILY_ACTIVITY___RECORD_TYPE_ID as RECORD_TYPE_ID",
	"JNR_SDS_DAILY_ACTIVITY___CREATED_DATE as CREATED_DATE",
	"JNR_SDS_DAILY_ACTIVITY___CREATED_BY_ID as CREATED_BY_ID",
	"JNR_SDS_DAILY_ACTIVITY___LAST_MODIFIED_DATE as LAST_MODIFIED_DATE",
	"JNR_SDS_DAILY_ACTIVITY___LAST_MODIFIED_BY_ID as LAST_MODIFIED_BY_ID",
	"JNR_SDS_DAILY_ACTIVITY___SYSTEM_MOD_STAMP as SYSTEM_MOD_STAMP",
	"JNR_SDS_DAILY_ACTIVITY___PSVC_SCHEDULE_TEMPLATE_C as PSVC_SCHEDULE_TEMPLATE_C",
	"JNR_SDS_DAILY_ACTIVITY___PSVC_ABSENCE_REASON_C as PSVC_ABSENCE_REASON_C",
	"JNR_SDS_DAILY_ACTIVITY___PSVC_DAY_OF_THE_WEEK_C as PSVC_DAY_OF_THE_WEEK_C",
	"JNR_SDS_DAILY_ACTIVITY___PSVC_EFFECTIVE_END_TIME_C as PSVC_EFFECTIVE_END_TIME_C",
	"JNR_SDS_DAILY_ACTIVITY___PSVC_EFFECTIVE_START_TIME_C as PSVC_EFFECTIVE_START_TIME_C",
	"JNR_SDS_DAILY_ACTIVITY___PSVC_RELOCATION_TO_C as PSVC_RELOCATION_TO_C",
	"JNR_SDS_DAILY_ACTIVITY___PSVC_WEEK_C as PSVC_WEEK_C",
	"JNR_SDS_DAILY_ACTIVITY___SDS_DAILY_ACTIVITY_ID as SDS_DAILY_ACTIVITY_ID",
	"JNR_SDS_DAILY_ACTIVITY___SDS_SYSTEM_MODIFIED_TSTMP as SDS_SYSTEM_MODIFIED_TSTMP",
	"JNR_SDS_DAILY_ACTIVITY___SDS_LAST_MODIFIED_TSTMP as SDS_LAST_MODIFIED_TSTMP",
	"JNR_SDS_DAILY_ACTIVITY___SDS_CREATED_TSTMP as SDS_CREATED_TSTMP",
	"JNR_SDS_DAILY_ACTIVITY___i_LOAD_TSTMP as i_LOAD_TSTMP",
	"JNR_SDS_DAILY_ACTIVITY___PSVC_PET_SUPPORTED_TYPE as PSVC_PET_SUPPORTED_TYPE").filter("SDS_DAILY_ACTIVITY_ID IS NULL OR ( SDS_DAILY_ACTIVITY_ID IS NOT NULL AND ( SDS_SYSTEM_MODIFIED_TSTMP != SYSTEM_MOD_STAMP OR SDS_LAST_MODIFIED_TSTMP != LAST_MODIFIED_DATE OR CREATED_DATE != SDS_CREATED_TSTMP ) )").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node EXP_SDS_DAILY_ACTIVITY, type EXPRESSION . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 21

# for each involved DataFrame, append the dataframe name to each column
FIL_SDS_DAILY_ACTIVITY_temp = FIL_SDS_DAILY_ACTIVITY.toDF(*["FIL_SDS_DAILY_ACTIVITY___" + col for col in FIL_SDS_DAILY_ACTIVITY.columns])

EXP_SDS_DAILY_ACTIVITY = FIL_SDS_DAILY_ACTIVITY_temp.selectExpr(
	"FIL_SDS_DAILY_ACTIVITY___sys_row_id as sys_row_id",
	"FIL_SDS_DAILY_ACTIVITY___ID as ID",
	"FIL_SDS_DAILY_ACTIVITY___IS_DELETED as IS_DELETED",
	"FIL_SDS_DAILY_ACTIVITY___NAME as NAME",
	"FIL_SDS_DAILY_ACTIVITY___CURRENCY_ISO_CODE as CURRENCY_ISO_CODE",
	"FIL_SDS_DAILY_ACTIVITY___RECORD_TYPE_ID as RECORD_TYPE_ID",
	"FIL_SDS_DAILY_ACTIVITY___CREATED_DATE as CREATED_DATE",
	"FIL_SDS_DAILY_ACTIVITY___CREATED_BY_ID as CREATED_BY_ID",
	"FIL_SDS_DAILY_ACTIVITY___LAST_MODIFIED_DATE as LAST_MODIFIED_DATE",
	"FIL_SDS_DAILY_ACTIVITY___LAST_MODIFIED_BY_ID as LAST_MODIFIED_BY_ID",
	"FIL_SDS_DAILY_ACTIVITY___SYSTEM_MOD_STAMP as SYSTEM_MOD_STAMP",
	"FIL_SDS_DAILY_ACTIVITY___PSVC_SCHEDULE_TEMPLATE_C as PSVC_SCHEDULE_TEMPLATE_C",
	"FIL_SDS_DAILY_ACTIVITY___PSVC_ABSENCE_REASON_C as PSVC_ABSENCE_REASON_C",
	"FIL_SDS_DAILY_ACTIVITY___PSVC_DAY_OF_THE_WEEK_C as PSVC_DAY_OF_THE_WEEK_C",
	"FIL_SDS_DAILY_ACTIVITY___PSVC_EFFECTIVE_END_TIME_C as PSVC_EFFECTIVE_END_TIME_C",
	"FIL_SDS_DAILY_ACTIVITY___PSVC_EFFECTIVE_START_TIME_C as PSVC_EFFECTIVE_START_TIME_C",
	"FIL_SDS_DAILY_ACTIVITY___PSVC_RELOCATION_TO_C as PSVC_RELOCATION_TO_C",
	"FIL_SDS_DAILY_ACTIVITY___PSVC_WEEK_C as PSVC_WEEK_C",
	"CURRENT_TIMESTAMP as UPDATE_TSTMP",
	"IF (FIL_SDS_DAILY_ACTIVITY___i_LOAD_TSTMP IS NULL, CURRENT_TIMESTAMP, FIL_SDS_DAILY_ACTIVITY___i_LOAD_TSTMP) as LOAD_TSTMP",
	"IF (FIL_SDS_DAILY_ACTIVITY___i_SDS_DAILY_ACTIVITY_ID IS NULL, 1, 2) as o_UPDATE_VALIDATOR",
	"FIL_SDS_DAILY_ACTIVITY___PSVC_PET_SUPPORTED_TYPE as PSVC_PET_SUPPORTED_TYPE"
)

# COMMAND ----------
# Processing node UPD_SDS_DAILY_ACTIVITY, type UPDATE_STRATEGY 
# COLUMN COUNT: 21

# for each involved DataFrame, append the dataframe name to each column
EXP_SDS_DAILY_ACTIVITY_temp = EXP_SDS_DAILY_ACTIVITY.toDF(*["EXP_SDS_DAILY_ACTIVITY___" + col for col in EXP_SDS_DAILY_ACTIVITY.columns])

UPD_SDS_DAILY_ACTIVITY = EXP_SDS_DAILY_ACTIVITY_temp.selectExpr(
	"EXP_SDS_DAILY_ACTIVITY___ID as ID",
	"EXP_SDS_DAILY_ACTIVITY___NAME as NAME",
	"EXP_SDS_DAILY_ACTIVITY___PSVC_SCHEDULE_TEMPLATE_C as PSVC_SCHEDULE_TEMPLATE_C",
	"EXP_SDS_DAILY_ACTIVITY___PSVC_RELOCATION_TO_C as PSVC_RELOCATION_TO_C",
	"EXP_SDS_DAILY_ACTIVITY___PSVC_WEEK_C as PSVC_WEEK_C",
	"EXP_SDS_DAILY_ACTIVITY___PSVC_DAY_OF_THE_WEEK_C as PSVC_DAY_OF_THE_WEEK_C",
	"EXP_SDS_DAILY_ACTIVITY___PSVC_EFFECTIVE_START_TIME_C as PSVC_EFFECTIVE_START_TIME_C",
	"EXP_SDS_DAILY_ACTIVITY___PSVC_EFFECTIVE_END_TIME_C as PSVC_EFFECTIVE_END_TIME_C",
	"EXP_SDS_DAILY_ACTIVITY___PSVC_ABSENCE_REASON_C as PSVC_ABSENCE_REASON_C",
	"EXP_SDS_DAILY_ACTIVITY___RECORD_TYPE_ID as RECORD_TYPE_ID",
	"EXP_SDS_DAILY_ACTIVITY___CURRENCY_ISO_CODE as CURRENCY_ISO_CODE",
	"EXP_SDS_DAILY_ACTIVITY___IS_DELETED as IS_DELETED",
	"EXP_SDS_DAILY_ACTIVITY___SYSTEM_MOD_STAMP as SYSTEM_MOD_STAMP",
	"EXP_SDS_DAILY_ACTIVITY___LAST_MODIFIED_DATE as LAST_MODIFIED_DATE",
	"EXP_SDS_DAILY_ACTIVITY___LAST_MODIFIED_BY_ID as LAST_MODIFIED_BY_ID",
	"EXP_SDS_DAILY_ACTIVITY___CREATED_DATE as CREATED_DATE",
	"EXP_SDS_DAILY_ACTIVITY___CREATED_BY_ID as CREATED_BY_ID",
	"EXP_SDS_DAILY_ACTIVITY___UPDATE_TSTMP as UPDATE_TSTMP",
	"EXP_SDS_DAILY_ACTIVITY___LOAD_TSTMP as LOAD_TSTMP",
	"EXP_SDS_DAILY_ACTIVITY___o_UPDATE_VALIDATOR as o_UPDATE_VALIDATOR",
	"EXP_SDS_DAILY_ACTIVITY___PSVC_PET_SUPPORTED_TYPE as PSVC_PET_SUPPORTED_TYPE")\
	.withColumn('pyspark_data_action', when(col('o_UPDATE_VALIDATOR') ==(lit(1)) , lit(0)).when(col('o_UPDATE_VALIDATOR') ==(lit(2)) , lit(1)))

# COMMAND ----------
# Processing node Shortcut_to_SDS_DAILY_ACTIVITY, type TARGET 
# COLUMN COUNT: 20


Shortcut_to_SDS_DAILY_ACTIVITY = UPD_SDS_DAILY_ACTIVITY.selectExpr(
	"CAST(ID AS STRING) as SDS_DAILY_ACTIVITY_ID",
	"CAST(NAME AS STRING) as SDS_DAILY_ACTIVITY_NAME",
	"CAST(PSVC_SCHEDULE_TEMPLATE_C AS STRING) as SDS_SCHEDULE_TEMPLATE_ID",
	"CAST(PSVC_RELOCATION_TO_C AS STRING) as SDS_SERVICE_TERRITORY_ID",
	"CAST(PSVC_WEEK_C AS STRING) as WEEK_NAME",
	"CAST(PSVC_DAY_OF_THE_WEEK_C AS STRING) as DAY_OF_WEEK",
	"CAST(PSVC_EFFECTIVE_START_TIME_C AS TIMESTAMP) as EFFECTIVE_START_TSTMP",
	"CAST(PSVC_EFFECTIVE_END_TIME_C AS TIMESTAMP) as EFFECTIVE_END_TSTMP",
	"CAST(PSVC_ABSENCE_REASON_C AS STRING) as ABSENCE_REASON",
	"CAST(RECORD_TYPE_ID AS STRING) as SDS_RECORD_TYPE_ID",
	"CAST(CURRENCY_ISO_CODE AS STRING) as CURRENCY_ISO_CD",
	"CAST(IS_DELETED AS TINYINT) as DELETED_FLAG",
	"CAST(SYSTEM_MOD_STAMP AS TIMESTAMP) as SDS_SYSTEM_MODIFIED_TSTMP",
	"CAST(LAST_MODIFIED_DATE AS TIMESTAMP) as SDS_LAST_MODIFIED_TSTMP",
	"CAST(LAST_MODIFIED_BY_ID AS STRING) as SDS_LAST_MODIFIED_BY_ID",
	"CAST(CREATED_DATE AS TIMESTAMP) as SDS_CREATED_TSTMP",
	"CAST(CREATED_BY_ID AS STRING) as SDS_CREATED_BY_ID",
	"CAST(UPDATE_TSTMP AS TIMESTAMP) as UPDATE_TSTMP",
	"CAST(LOAD_TSTMP AS TIMESTAMP) as LOAD_TSTMP",
	"CAST(PSVC_PET_SUPPORTED_TYPE AS STRING) as PSVC_PET_SUPPORTED_TYPE",
	"UPD_SDS_DAILY_ACTIVITY.pyspark_data_action as pyspark_data_action"
)

try:
  primary_key = """source.SDS_DAILY_ACTIVITY_ID = target.SDS_DAILY_ACTIVITY_ID"""
  refined_perf_table = f"{legacy}.SDS_DAILY_ACTIVITY"
  executeMerge(Shortcut_to_SDS_DAILY_ACTIVITY, refined_perf_table, primary_key)
  logger.info(f"Merge with {refined_perf_table} completed]")
  logPrevRunDt("SDS_DAILY_ACTIVITY", "SDS_DAILY_ACTIVITY", "Completed", "N/A", f"{raw}.log_run_details")
except Exception as e:
  logPrevRunDt("SDS_DAILY_ACTIVITY", "SDS_DAILY_ACTIVITY","Failed",str(e), f"{raw}.log_run_details", )
  raise e
	