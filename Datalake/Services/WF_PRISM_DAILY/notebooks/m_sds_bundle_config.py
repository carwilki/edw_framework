#Code converted on 2023-07-21 10:23:45
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from Datalake.utils.genericUtilities import *
from Datalake.utils.configs import *
from Datalake.utils.mergeUtils import *
from Datalake.utils.logger import *
# COMMAND ----------

parser = argparse.ArgumentParser()
spark = SparkSession.getActiveSession()
parser.add_argument('env', type=str, help='Env Variable')
args = parser.parse_args()
env = args.env

if env is None or env == '':
    raise ValueError('env is not set')

refine = getEnvPrefix(env) + 'refine'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'


# COMMAND ----------
# Processing node SQ_Shortcut_to_SDS_PSVC_BUNDLE_CONFIGURATION_C_PRE, type SOURCE 
# COLUMN COUNT: 22

SQ_Shortcut_to_SDS_PSVC_BUNDLE_CONFIGURATION_C_PRE = spark.sql(f"""SELECT
ID,
OWNER_ID,
IS_DELETED,
NAME,
CURRENCY_ISO_CODE,
RECORD_TYPE_ID,
CREATED_DATE,
CREATED_BY_ID,
LAST_MODIFIED_DATE,
LAST_MODIFIED_BY_ID,
SYSTEM_MOD_STAMP,
LAST_VIEWED_DATE,
LAST_REFERENCED_DATE,
PSVC_QUANTITY_PURCHASED_C,
PSVC_QUANTITY_RECEIVED_C,
PSVC_SPECIAL_C,
PSVC_HAS_ADD_ONS_C,
PSVC_BUNDLE_DISPLAY_NAME_C,
PSVC_BASE_UNIT_EXPIRATION_MEASUREMENT_C,
PSVC_BASE_UNIT_TIME_TO_EXPIRATION_C,
PSVC_FREE_UNIT_EXPIRATION_MEASUREMENT_C,
PSVC_FREE_UNIT_TIME_TO_EXPIRATION_C
FROM {raw}.SDS_PSVC_BUNDLE_CONFIGURATION_C_PRE""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node SQ_Shortcut_to_SDS_BUNDLE_CONFIG, type SOURCE 
# COLUMN COUNT: 5

SQ_Shortcut_to_SDS_BUNDLE_CONFIG = spark.sql(f"""SELECT
SDS_BUNDLE_CONFIG_ID,
SDS_SYSTEM_MODIFIED_TSTMP,
SDS_LAST_MODIFIED_TSTMP,
SDS_CREATED_TSTMP,
LOAD_TSTMP
FROM {legacy}.SDS_BUNDLE_CONFIG""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node JNR_SDS_BUNDLE_CONFIG, type JOINER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 27

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_SDS_BUNDLE_CONFIG_temp = SQ_Shortcut_to_SDS_BUNDLE_CONFIG.toDF(*["SQ_Shortcut_to_SDS_BUNDLE_CONFIG___" + col for col in SQ_Shortcut_to_SDS_BUNDLE_CONFIG.columns])
SQ_Shortcut_to_SDS_PSVC_BUNDLE_CONFIGURATION_C_PRE_temp = SQ_Shortcut_to_SDS_PSVC_BUNDLE_CONFIGURATION_C_PRE.toDF(*["SQ_Shortcut_to_SDS_PSVC_BUNDLE_CONFIGURATION_C_PRE___" + col for col in SQ_Shortcut_to_SDS_PSVC_BUNDLE_CONFIGURATION_C_PRE.columns])

JNR_SDS_BUNDLE_CONFIG = SQ_Shortcut_to_SDS_PSVC_BUNDLE_CONFIGURATION_C_PRE_temp.join(SQ_Shortcut_to_SDS_BUNDLE_CONFIG_temp,[SQ_Shortcut_to_SDS_PSVC_BUNDLE_CONFIGURATION_C_PRE_temp.SQ_Shortcut_to_SDS_PSVC_BUNDLE_CONFIGURATION_C_PRE___ID == SQ_Shortcut_to_SDS_BUNDLE_CONFIG_temp.SQ_Shortcut_to_SDS_BUNDLE_CONFIG___SDS_BUNDLE_CONFIG_ID],'left_outer').selectExpr(
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_CONFIGURATION_C_PRE___ID as ID",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_CONFIGURATION_C_PRE___OWNER_ID as OWNER_ID",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_CONFIGURATION_C_PRE___IS_DELETED as IS_DELETED",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_CONFIGURATION_C_PRE___NAME as NAME",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_CONFIGURATION_C_PRE___CURRENCY_ISO_CODE as CURRENCY_ISO_CODE",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_CONFIGURATION_C_PRE___RECORD_TYPE_ID as RECORD_TYPE_ID",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_CONFIGURATION_C_PRE___CREATED_DATE as CREATED_DATE",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_CONFIGURATION_C_PRE___CREATED_BY_ID as CREATED_BY_ID",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_CONFIGURATION_C_PRE___LAST_MODIFIED_DATE as LAST_MODIFIED_DATE",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_CONFIGURATION_C_PRE___LAST_MODIFIED_BY_ID as LAST_MODIFIED_BY_ID",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_CONFIGURATION_C_PRE___SYSTEM_MOD_STAMP as SYSTEM_MOD_STAMP",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_CONFIGURATION_C_PRE___LAST_VIEWED_DATE as LAST_VIEWED_DATE",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_CONFIGURATION_C_PRE___LAST_REFERENCED_DATE as LAST_REFERENCED_DATE",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_CONFIGURATION_C_PRE___PSVC_QUANTITY_PURCHASED_C as PSVC_QUANTITY_PURCHASED_C",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_CONFIGURATION_C_PRE___PSVC_QUANTITY_RECEIVED_C as PSVC_QUANTITY_RECEIVED_C",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_CONFIGURATION_C_PRE___PSVC_SPECIAL_C as PSVC_SPECIAL_C",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_CONFIGURATION_C_PRE___PSVC_HAS_ADD_ONS_C as PSVC_HAS_ADD_ONS_C",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_CONFIGURATION_C_PRE___PSVC_BUNDLE_DISPLAY_NAME_C as PSVC_BUNDLE_DISPLAY_NAME_C",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_CONFIGURATION_C_PRE___PSVC_BASE_UNIT_EXPIRATION_MEASUREMENT_C as PSVC_BASE_UNIT_EXPIRATION_MEASUREMENT_C",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_CONFIGURATION_C_PRE___PSVC_BASE_UNIT_TIME_TO_EXPIRATION_C as PSVC_BASE_UNIT_TIME_TO_EXPIRATION_C",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_CONFIGURATION_C_PRE___PSVC_FREE_UNIT_EXPIRATION_MEASUREMENT_C as PSVC_FREE_UNIT_EXPIRATION_MEASUREMENT_C",
	"SQ_Shortcut_to_SDS_PSVC_BUNDLE_CONFIGURATION_C_PRE___PSVC_FREE_UNIT_TIME_TO_EXPIRATION_C as PSVC_FREE_UNIT_TIME_TO_EXPIRATION_C",
	"SQ_Shortcut_to_SDS_BUNDLE_CONFIG___SDS_BUNDLE_CONFIG_ID as i_SDS_BUNDLE_CONFIG_ID",
	"SQ_Shortcut_to_SDS_BUNDLE_CONFIG___SDS_SYSTEM_MODIFIED_TSTMP as i_SDS_SYSTEM_MODIFIED_TSTMP",
	"SQ_Shortcut_to_SDS_BUNDLE_CONFIG___SDS_LAST_MODIFIED_TSTMP as i_SDS_LAST_MODIFIED_TSTMP",
	"SQ_Shortcut_to_SDS_BUNDLE_CONFIG___SDS_CREATED_TSTMP as i_SDS_CREATED_TSTMP",
	"SQ_Shortcut_to_SDS_BUNDLE_CONFIG___LOAD_TSTMP as i_LOAD_TSTMP")

# COMMAND ----------
# Processing node FIL_SDS_BUNDLE_CONFIG, type FILTER 
# COLUMN COUNT: 27

# for each involved DataFrame, append the dataframe name to each column
JNR_SDS_BUNDLE_CONFIG_temp = JNR_SDS_BUNDLE_CONFIG.toDF(*["JNR_SDS_BUNDLE_CONFIG___" + col for col in JNR_SDS_BUNDLE_CONFIG.columns])

FIL_SDS_BUNDLE_CONFIG = JNR_SDS_BUNDLE_CONFIG_temp.selectExpr(
	"JNR_SDS_BUNDLE_CONFIG___ID as ID",
	"JNR_SDS_BUNDLE_CONFIG___OWNER_ID as OWNER_ID",
	"JNR_SDS_BUNDLE_CONFIG___IS_DELETED as IS_DELETED",
	"JNR_SDS_BUNDLE_CONFIG___NAME as NAME",
	"JNR_SDS_BUNDLE_CONFIG___CURRENCY_ISO_CODE as CURRENCY_ISO_CODE",
	"JNR_SDS_BUNDLE_CONFIG___RECORD_TYPE_ID as RECORD_TYPE_ID",
	"JNR_SDS_BUNDLE_CONFIG___CREATED_DATE as CREATED_DATE",
	"JNR_SDS_BUNDLE_CONFIG___CREATED_BY_ID as CREATED_BY_ID",
	"JNR_SDS_BUNDLE_CONFIG___LAST_MODIFIED_DATE as LAST_MODIFIED_DATE",
	"JNR_SDS_BUNDLE_CONFIG___LAST_MODIFIED_BY_ID as LAST_MODIFIED_BY_ID",
	"JNR_SDS_BUNDLE_CONFIG___SYSTEM_MOD_STAMP as SYSTEM_MOD_STAMP",
	"JNR_SDS_BUNDLE_CONFIG___LAST_VIEWED_DATE as LAST_VIEWED_DATE",
	"JNR_SDS_BUNDLE_CONFIG___LAST_REFERENCED_DATE as LAST_REFERENCED_DATE",
	"JNR_SDS_BUNDLE_CONFIG___PSVC_QUANTITY_PURCHASED_C as PSVC_QUANTITY_PURCHASED_C",
	"JNR_SDS_BUNDLE_CONFIG___PSVC_QUANTITY_RECEIVED_C as PSVC_QUANTITY_RECEIVED_C",
	"JNR_SDS_BUNDLE_CONFIG___PSVC_SPECIAL_C as PSVC_SPECIAL_C",
	"JNR_SDS_BUNDLE_CONFIG___PSVC_HAS_ADD_ONS_C as PSVC_HAS_ADD_ONS_C",
	"JNR_SDS_BUNDLE_CONFIG___PSVC_BUNDLE_DISPLAY_NAME_C as PSVC_BUNDLE_DISPLAY_NAME_C",
	"JNR_SDS_BUNDLE_CONFIG___PSVC_BASE_UNIT_EXPIRATION_MEASUREMENT_C as PSVC_BASE_UNIT_EXPIRATION_MEASUREMENT_C",
	"JNR_SDS_BUNDLE_CONFIG___PSVC_BASE_UNIT_TIME_TO_EXPIRATION_C as PSVC_BASE_UNIT_TIME_TO_EXPIRATION_C",
	"JNR_SDS_BUNDLE_CONFIG___PSVC_FREE_UNIT_EXPIRATION_MEASUREMENT_C as PSVC_FREE_UNIT_EXPIRATION_MEASUREMENT_C",
	"JNR_SDS_BUNDLE_CONFIG___PSVC_FREE_UNIT_TIME_TO_EXPIRATION_C as PSVC_FREE_UNIT_TIME_TO_EXPIRATION_C",
	"JNR_SDS_BUNDLE_CONFIG___i_SDS_BUNDLE_CONFIG_ID as i_SDS_BUNDLE_CONFIG_ID",
	"JNR_SDS_BUNDLE_CONFIG___i_SDS_SYSTEM_MODIFIED_TSTMP as i_SDS_SYSTEM_MODIFIED_TSTMP",
	"JNR_SDS_BUNDLE_CONFIG___i_SDS_LAST_MODIFIED_TSTMP as i_SDS_LAST_MODIFIED_TSTMP",
	"JNR_SDS_BUNDLE_CONFIG___i_SDS_CREATED_TSTMP as i_SDS_CREATED_TSTMP",
	"JNR_SDS_BUNDLE_CONFIG___i_LOAD_TSTMP as i_LOAD_TSTMP").filter("i_SDS_BUNDLE_CONFIG_ID IS NULL OR ( i_SDS_BUNDLE_CONFIG_ID IS NOT NULL AND ( i_SDS_SYSTEM_MODIFIED_TSTMP != SYSTEM_MOD_STAMP OR i_SDS_CREATED_TSTMP != CREATED_DATE OR i_SDS_LAST_MODIFIED_TSTMP != LAST_MODIFIED_DATE ) )").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node EXP_SDS_BUNDLE_CONFIG, type EXPRESSION 
# COLUMN COUNT: 25

# for each involved DataFrame, append the dataframe name to each column
FIL_SDS_BUNDLE_CONFIG_temp = FIL_SDS_BUNDLE_CONFIG.toDF(*["FIL_SDS_BUNDLE_CONFIG___" + col for col in FIL_SDS_BUNDLE_CONFIG.columns])

EXP_SDS_BUNDLE_CONFIG = FIL_SDS_BUNDLE_CONFIG_temp.selectExpr(
	"FIL_SDS_BUNDLE_CONFIG___sys_row_id as sys_row_id",
	"FIL_SDS_BUNDLE_CONFIG___ID as ID",
	"FIL_SDS_BUNDLE_CONFIG___OWNER_ID as OWNER_ID",
	"FIL_SDS_BUNDLE_CONFIG___IS_DELETED as IS_DELETED",
	"FIL_SDS_BUNDLE_CONFIG___NAME as NAME",
	"FIL_SDS_BUNDLE_CONFIG___CURRENCY_ISO_CODE as CURRENCY_ISO_CODE",
	"FIL_SDS_BUNDLE_CONFIG___RECORD_TYPE_ID as RECORD_TYPE_ID",
	"FIL_SDS_BUNDLE_CONFIG___CREATED_DATE as CREATED_DATE",
	"FIL_SDS_BUNDLE_CONFIG___CREATED_BY_ID as CREATED_BY_ID",
	"FIL_SDS_BUNDLE_CONFIG___LAST_MODIFIED_DATE as LAST_MODIFIED_DATE",
	"FIL_SDS_BUNDLE_CONFIG___LAST_MODIFIED_BY_ID as LAST_MODIFIED_BY_ID",
	"FIL_SDS_BUNDLE_CONFIG___SYSTEM_MOD_STAMP as SYSTEM_MOD_STAMP",
	"FIL_SDS_BUNDLE_CONFIG___LAST_VIEWED_DATE as LAST_VIEWED_DATE",
	"FIL_SDS_BUNDLE_CONFIG___LAST_REFERENCED_DATE as LAST_REFERENCED_DATE",
	"FIL_SDS_BUNDLE_CONFIG___PSVC_QUANTITY_PURCHASED_C as PSVC_QUANTITY_PURCHASED_C",
	"FIL_SDS_BUNDLE_CONFIG___PSVC_QUANTITY_RECEIVED_C as PSVC_QUANTITY_RECEIVED_C",
	"FIL_SDS_BUNDLE_CONFIG___PSVC_SPECIAL_C as PSVC_SPECIAL_C",
	"FIL_SDS_BUNDLE_CONFIG___PSVC_HAS_ADD_ONS_C as PSVC_HAS_ADD_ONS_C",
	"FIL_SDS_BUNDLE_CONFIG___PSVC_BUNDLE_DISPLAY_NAME_C as PSVC_BUNDLE_DISPLAY_NAME_C",
	"FIL_SDS_BUNDLE_CONFIG___PSVC_BASE_UNIT_EXPIRATION_MEASUREMENT_C as PSVC_BASE_UNIT_EXPIRATION_MEASUREMENT_C",
	"FIL_SDS_BUNDLE_CONFIG___PSVC_BASE_UNIT_TIME_TO_EXPIRATION_C as PSVC_BASE_UNIT_TIME_TO_EXPIRATION_C",
	"FIL_SDS_BUNDLE_CONFIG___PSVC_FREE_UNIT_EXPIRATION_MEASUREMENT_C as PSVC_FREE_UNIT_EXPIRATION_MEASUREMENT_C",
	"FIL_SDS_BUNDLE_CONFIG___PSVC_FREE_UNIT_TIME_TO_EXPIRATION_C as PSVC_FREE_UNIT_TIME_TO_EXPIRATION_C",
	"CURRENT_TIMESTAMP as UPDATE_TSTMP",
	"IF (FIL_SDS_BUNDLE_CONFIG___i_LOAD_TSTMP IS NULL, CURRENT_TIMESTAMP, FIL_SDS_BUNDLE_CONFIG___i_LOAD_TSTMP) as LOAD_TSTMP",
	"IF (FIL_SDS_BUNDLE_CONFIG___i_SDS_BUNDLE_CONFIG_ID IS NULL, 1, 2) as o_UPDATE_VALIDATOR"
)

# COMMAND ----------
# Processing node UPD_SDS_BUNDLE_CONFIG, type UPDATE_STRATEGY 
# COLUMN COUNT: 25

# for each involved DataFrame, append the dataframe name to each column
EXP_SDS_BUNDLE_CONFIG_temp = EXP_SDS_BUNDLE_CONFIG.toDF(*["EXP_SDS_BUNDLE_CONFIG___" + col for col in EXP_SDS_BUNDLE_CONFIG.columns])

UPD_SDS_BUNDLE_CONFIG = EXP_SDS_BUNDLE_CONFIG_temp.selectExpr(
	"EXP_SDS_BUNDLE_CONFIG___ID as ID",
	"EXP_SDS_BUNDLE_CONFIG___OWNER_ID as OWNER_ID",
	"EXP_SDS_BUNDLE_CONFIG___IS_DELETED as IS_DELETED",
	"EXP_SDS_BUNDLE_CONFIG___NAME as NAME",
	"EXP_SDS_BUNDLE_CONFIG___CURRENCY_ISO_CODE as CURRENCY_ISO_CODE",
	"EXP_SDS_BUNDLE_CONFIG___RECORD_TYPE_ID as RECORD_TYPE_ID",
	"EXP_SDS_BUNDLE_CONFIG___CREATED_DATE as CREATED_DATE",
	"EXP_SDS_BUNDLE_CONFIG___CREATED_BY_ID as CREATED_BY_ID",
	"EXP_SDS_BUNDLE_CONFIG___LAST_MODIFIED_DATE as LAST_MODIFIED_DATE",
	"EXP_SDS_BUNDLE_CONFIG___LAST_MODIFIED_BY_ID as LAST_MODIFIED_BY_ID",
	"EXP_SDS_BUNDLE_CONFIG___SYSTEM_MOD_STAMP as SYSTEM_MOD_STAMP",
	"EXP_SDS_BUNDLE_CONFIG___LAST_VIEWED_DATE as LAST_VIEWED_DATE",
	"EXP_SDS_BUNDLE_CONFIG___LAST_REFERENCED_DATE as LAST_REFERENCED_DATE",
	"EXP_SDS_BUNDLE_CONFIG___PSVC_QUANTITY_PURCHASED_C as PSVC_QUANTITY_PURCHASED_C",
	"EXP_SDS_BUNDLE_CONFIG___PSVC_QUANTITY_RECEIVED_C as PSVC_QUANTITY_RECEIVED_C",
	"EXP_SDS_BUNDLE_CONFIG___PSVC_SPECIAL_C as PSVC_SPECIAL_C",
	"EXP_SDS_BUNDLE_CONFIG___PSVC_HAS_ADD_ONS_C as PSVC_HAS_ADD_ONS_C",
	"EXP_SDS_BUNDLE_CONFIG___PSVC_BUNDLE_DISPLAY_NAME_C as PSVC_BUNDLE_DISPLAY_NAME_C",
	"EXP_SDS_BUNDLE_CONFIG___PSVC_BASE_UNIT_EXPIRATION_MEASUREMENT_C as PSVC_BASE_UNIT_EXPIRATION_MEASUREMENT_C",
	"EXP_SDS_BUNDLE_CONFIG___PSVC_BASE_UNIT_TIME_TO_EXPIRATION_C as PSVC_BASE_UNIT_TIME_TO_EXPIRATION_C",
	"EXP_SDS_BUNDLE_CONFIG___PSVC_FREE_UNIT_EXPIRATION_MEASUREMENT_C as PSVC_FREE_UNIT_EXPIRATION_MEASUREMENT_C",
	"EXP_SDS_BUNDLE_CONFIG___PSVC_FREE_UNIT_TIME_TO_EXPIRATION_C as PSVC_FREE_UNIT_TIME_TO_EXPIRATION_C",
	"EXP_SDS_BUNDLE_CONFIG___UPDATE_TSTMP as UPDATE_TSTMP",
	"EXP_SDS_BUNDLE_CONFIG___LOAD_TSTMP as LOAD_TSTMP",
	"EXP_SDS_BUNDLE_CONFIG___o_UPDATE_VALIDATOR as o_UPDATE_VALIDATOR")\
	.withColumn('pyspark_data_action', when(col('o_UPDATE_VALIDATOR') ==(lit(1)) , lit(0)).when(col('o_UPDATE_VALIDATOR') ==(lit(2)) , lit(1)))

# COMMAND ----------
# Processing node Shortcut_to_SDS_BUNDLE_CONFIG1, type TARGET 
# COLUMN COUNT: 24


Shortcut_to_SDS_BUNDLE_CONFIG1 = UPD_SDS_BUNDLE_CONFIG.selectExpr(
	"CAST(ID AS STRING) as SDS_BUNDLE_CONFIG_ID",
	"CAST(NAME AS STRING) as SDS_BUNDLE_CONFIG_NAME",
	"CAST(PSVC_BUNDLE_DISPLAY_NAME_C AS STRING) as SDS_BUNDLE_DISPLAY_NAME",
	"CAST(PSVC_SPECIAL_C AS STRING) as SDS_SPECIAL_ID",
	"CAST(PSVC_HAS_ADD_ONS_C AS TINYINT) as HAS_ADD_ON_FLAG",
	"CAST(PSVC_QUANTITY_PURCHASED_C AS BIGINT) as PURCHASED_QTY",
	"CAST(PSVC_QUANTITY_RECEIVED_C AS BIGINT) as RECEIVED_QTY",
	"CAST(PSVC_BASE_UNIT_EXPIRATION_MEASUREMENT_C AS STRING) as SDS_BASE_UNIT_EXP_MEASUREMENT",
	"CAST(PSVC_BASE_UNIT_TIME_TO_EXPIRATION_C AS BIGINT) as SDS_BASE_UNIT_TIME_TO_EXP",
	"CAST(PSVC_FREE_UNIT_EXPIRATION_MEASUREMENT_C AS STRING) as SDS_FREE_UNIT_EXP_MEASUREMENT",
	"CAST(PSVC_FREE_UNIT_TIME_TO_EXPIRATION_C AS BIGINT) as SDS_FREE_UNIT_TIME_TO_EXP",
	"CAST(RECORD_TYPE_ID AS STRING) as SDS_RECORD_TYPE_ID",
	"CAST(OWNER_ID AS STRING) as SDS_OWNER_ID",
	"CAST(CURRENCY_ISO_CODE AS STRING) as CURRENCY_ISO_CD",
	"CAST(IS_DELETED AS TINYINT) as DELETED_FLAG",
	"CAST(LAST_VIEWED_DATE AS TIMESTAMP) as SDS_LAST_VIEWED_TSTMP",
	"CAST(LAST_REFERENCED_DATE AS TIMESTAMP) as SDS_LAST_REFERENCED_TSTMP",
	"CAST(SYSTEM_MOD_STAMP AS TIMESTAMP) as SDS_SYSTEM_MODIFIED_TSTMP",
	"CAST(LAST_MODIFIED_DATE AS TIMESTAMP) as SDS_LAST_MODIFIED_TSTMP",
	"CAST(LAST_MODIFIED_BY_ID AS STRING) as SDS_LAST_MODIFIED_BY_ID",
	"CAST(CREATED_DATE AS TIMESTAMP) as SDS_CREATED_TSTMP",
	"CAST(CREATED_BY_ID AS STRING) as SDS_CREATED_BY_ID",
	"CAST(UPDATE_TSTMP AS TIMESTAMP) as UPDATE_TSTMP",
	"CAST(LOAD_TSTMP AS TIMESTAMP) as LOAD_TSTMP",
	"UPD_SDS_BUNDLE_CONFIG.pyspark_data_action as pyspark_data_action"
)

try:
  primary_key = """source.SDS_BUNDLE_CONFIG_ID = target.SDS_BUNDLE_CONFIG_ID"""
  refined_perf_table = "{legacy}.SDS_BUNDLE_CONFIG"
  executeMerge(Shortcut_to_SDS_BUNDLE_CONFIG1, refined_perf_table, primary_key)
  logger.info(f"Merge with {refined_perf_table} completed]")
  logPrevRunDt("SDS_BUNDLE_CONFIG", "SDS_BUNDLE_CONFIG", "Completed", "N/A", f"{raw}.log_run_details")
except Exception as e:
  logPrevRunDt("SDS_BUNDLE_CONFIG", "SDS_BUNDLE_CONFIG","Failed",str(e), f"{raw}.log_run_details", )
  raise e
	