#Code converted on 2023-07-21 14:35:07
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from Datalake.utils.genericUtilities import *
from Datalake.utils.configs import *
from Datalake.utils.mergeUtils import *
from Datalake.utils.logger import *
# COMMAND ----------

parser = argparse.ArgumentParser()
spark = SparkSession.getActiveSession()
parser.add_argument('env', type=str, help='Env Variable')
args = parser.parse_args()
env = args.env

if env is None or env == '':
    raise ValueError('env is not set')

refine = getEnvPrefix(env) + 'refine'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'


# COMMAND ----------
# Processing node SQ_Shortcut_to_SDS_CUSTOMER_RPT_DELTA_PRE, type SOURCE 
# COLUMN COUNT: 28

SQ_Shortcut_to_SDS_CUSTOMER_RPT_DELTA_PRE = spark.sql(f"""SELECT
SDS_ACCOUNT_ID,
PODS_CUSTOMER_ID,
FIRST_NAME,
MIDDLE_NAME,
LAST_NAME,
EMAIL_ADDR,
PHONE_NBR,
ADDR1,
ADDR2,
CITY,
STATE,
POSTAL_CD,
POSTAL_CD_EXT,
COUNTRY_CD,
DO_NOT_BOOKED_FLAG,
DO_NOT_BOOKED_REASON,
CUSTOMER_LOYALTY_FLAG,
DIGITAL_LOYALTY_CUSTOMER_FLAG,
RECEIVE_EMAIL_NOTIFICATIONS_FLAG,
RECEIVE_TEXT_NOTIFICATION_FLAG,
RECEIVE_PUSH_NOTIFICATION_FLAG,
REMINDER_CALL_FLAG,
GROOMING_NEW_FLAG,
HOTEL_NEW_FLAG,
DDC_NEW_FLAG,
TRAINING_NEW_FLAG,
UPDATE_VALIDATOR_FLAG,
LOAD_TSTMP
FROM {raw}.SDS_CUSTOMER_RPT_DELTA_PRE""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node EXP_SDS_CUSTOMER_RPT, type EXPRESSION 
# COLUMN COUNT: 29

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_SDS_CUSTOMER_RPT_DELTA_PRE_temp = SQ_Shortcut_to_SDS_CUSTOMER_RPT_DELTA_PRE.toDF(*["SQ_Shortcut_to_SDS_CUSTOMER_RPT_DELTA_PRE___" + col for col in SQ_Shortcut_to_SDS_CUSTOMER_RPT_DELTA_PRE.columns])

EXP_SDS_CUSTOMER_RPT = SQ_Shortcut_to_SDS_CUSTOMER_RPT_DELTA_PRE_temp.selectExpr(
	"SQ_Shortcut_to_SDS_CUSTOMER_RPT_DELTA_PRE___sys_row_id as sys_row_id",
	"SQ_Shortcut_to_SDS_CUSTOMER_RPT_DELTA_PRE___SDS_ACCOUNT_ID as SDS_ACCOUNT_ID",
	"SQ_Shortcut_to_SDS_CUSTOMER_RPT_DELTA_PRE___PODS_CUSTOMER_ID as PODS_CUSTOMER_ID",
	"SQ_Shortcut_to_SDS_CUSTOMER_RPT_DELTA_PRE___FIRST_NAME as FIRST_NAME",
	"SQ_Shortcut_to_SDS_CUSTOMER_RPT_DELTA_PRE___MIDDLE_NAME as MIDDLE_NAME",
	"SQ_Shortcut_to_SDS_CUSTOMER_RPT_DELTA_PRE___LAST_NAME as LAST_NAME",
	"SQ_Shortcut_to_SDS_CUSTOMER_RPT_DELTA_PRE___EMAIL_ADDR as EMAIL_ADDR",
	"SQ_Shortcut_to_SDS_CUSTOMER_RPT_DELTA_PRE___PHONE_NBR as PHONE_NBR",
	"SQ_Shortcut_to_SDS_CUSTOMER_RPT_DELTA_PRE___ADDR1 as ADDR1",
	"SQ_Shortcut_to_SDS_CUSTOMER_RPT_DELTA_PRE___ADDR2 as ADDR2",
	"SQ_Shortcut_to_SDS_CUSTOMER_RPT_DELTA_PRE___CITY as CITY",
	"SQ_Shortcut_to_SDS_CUSTOMER_RPT_DELTA_PRE___STATE as STATE",
	"SQ_Shortcut_to_SDS_CUSTOMER_RPT_DELTA_PRE___POSTAL_CD as POSTAL_CD",
	"SQ_Shortcut_to_SDS_CUSTOMER_RPT_DELTA_PRE___POSTAL_CD_EXT as POSTAL_CD_EXT",
	"SQ_Shortcut_to_SDS_CUSTOMER_RPT_DELTA_PRE___COUNTRY_CD as COUNTRY_CD",
	"SQ_Shortcut_to_SDS_CUSTOMER_RPT_DELTA_PRE___DO_NOT_BOOKED_FLAG as DO_NOT_BOOKED_FLAG",
	"SQ_Shortcut_to_SDS_CUSTOMER_RPT_DELTA_PRE___DO_NOT_BOOKED_REASON as DO_NOT_BOOKED_REASON",
	"SQ_Shortcut_to_SDS_CUSTOMER_RPT_DELTA_PRE___CUSTOMER_LOYALTY_FLAG as CUSTOMER_LOYALTY_FLAG",
	"SQ_Shortcut_to_SDS_CUSTOMER_RPT_DELTA_PRE___DIGITAL_LOYALTY_CUSTOMER_FLAG as DIGITAL_LOYALTY_CUSTOMER_FLAG",
	"SQ_Shortcut_to_SDS_CUSTOMER_RPT_DELTA_PRE___RECEIVE_EMAIL_NOTIFICATIONS_FLAG as RECEIVE_EMAIL_NOTIFICATIONS_FLAG",
	"SQ_Shortcut_to_SDS_CUSTOMER_RPT_DELTA_PRE___RECEIVE_TEXT_NOTIFICATION_FLAG as RECEIVE_TEXT_NOTIFICATION_FLAG",
	"SQ_Shortcut_to_SDS_CUSTOMER_RPT_DELTA_PRE___RECEIVE_PUSH_NOTIFICATION_FLAG as RECEIVE_PUSH_NOTIFICATION_FLAG",
	"SQ_Shortcut_to_SDS_CUSTOMER_RPT_DELTA_PRE___REMINDER_CALL_FLAG as REMINDER_CALL_FLAG",
	"SQ_Shortcut_to_SDS_CUSTOMER_RPT_DELTA_PRE___GROOMING_NEW_FLAG as GROOMING_NEW_FLAG",
	"SQ_Shortcut_to_SDS_CUSTOMER_RPT_DELTA_PRE___HOTEL_NEW_FLAG as HOTEL_NEW_FLAG",
	"SQ_Shortcut_to_SDS_CUSTOMER_RPT_DELTA_PRE___DDC_NEW_FLAG as DDC_NEW_FLAG",
	"SQ_Shortcut_to_SDS_CUSTOMER_RPT_DELTA_PRE___TRAINING_NEW_FLAG as TRAINING_NEW_FLAG",
	"SQ_Shortcut_to_SDS_CUSTOMER_RPT_DELTA_PRE___UPDATE_VALIDATOR_FLAG as UPDATE_VALIDATOR_FLAG",
	"SQ_Shortcut_to_SDS_CUSTOMER_RPT_DELTA_PRE___LOAD_TSTMP as LOAD_TSTMP",
	"CURRENT_TIMESTAMP as UPDATE_TSTMP"
)

# COMMAND ----------
# Processing node UPD_SDS_CUSTOMER_RPT, type UPDATE_STRATEGY 
# COLUMN COUNT: 29

# for each involved DataFrame, append the dataframe name to each column
EXP_SDS_CUSTOMER_RPT_temp = EXP_SDS_CUSTOMER_RPT.toDF(*["EXP_SDS_CUSTOMER_RPT___" + col for col in EXP_SDS_CUSTOMER_RPT.columns])

UPD_SDS_CUSTOMER_RPT = EXP_SDS_CUSTOMER_RPT_temp.selectExpr(
	"EXP_SDS_CUSTOMER_RPT___SDS_ACCOUNT_ID as SDS_ACCOUNT_ID",
	"EXP_SDS_CUSTOMER_RPT___PODS_CUSTOMER_ID as PODS_CUSTOMER_ID",
	"EXP_SDS_CUSTOMER_RPT___FIRST_NAME as FIRST_NAME",
	"EXP_SDS_CUSTOMER_RPT___MIDDLE_NAME as MIDDLE_NAME",
	"EXP_SDS_CUSTOMER_RPT___LAST_NAME as LAST_NAME",
	"EXP_SDS_CUSTOMER_RPT___EMAIL_ADDR as EMAIL_ADDR",
	"EXP_SDS_CUSTOMER_RPT___PHONE_NBR as PHONE_NBR",
	"EXP_SDS_CUSTOMER_RPT___ADDR1 as ADDR1",
	"EXP_SDS_CUSTOMER_RPT___ADDR2 as ADDR2",
	"EXP_SDS_CUSTOMER_RPT___CITY as CITY",
	"EXP_SDS_CUSTOMER_RPT___STATE as STATE",
	"EXP_SDS_CUSTOMER_RPT___POSTAL_CD as POSTAL_CD",
	"EXP_SDS_CUSTOMER_RPT___POSTAL_CD_EXT as POSTAL_CD_EXT",
	"EXP_SDS_CUSTOMER_RPT___COUNTRY_CD as COUNTRY_CD",
	"EXP_SDS_CUSTOMER_RPT___DO_NOT_BOOKED_FLAG as DO_NOT_BOOKED_FLAG",
	"EXP_SDS_CUSTOMER_RPT___DO_NOT_BOOKED_REASON as DO_NOT_BOOKED_REASON",
	"EXP_SDS_CUSTOMER_RPT___CUSTOMER_LOYALTY_FLAG as CUSTOMER_LOYALTY_FLAG",
	"EXP_SDS_CUSTOMER_RPT___DIGITAL_LOYALTY_CUSTOMER_FLAG as DIGITAL_LOYALTY_CUSTOMER_FLAG",
	"EXP_SDS_CUSTOMER_RPT___RECEIVE_EMAIL_NOTIFICATIONS_FLAG as RECEIVE_EMAIL_NOTIFICATIONS_FLAG",
	"EXP_SDS_CUSTOMER_RPT___RECEIVE_TEXT_NOTIFICATION_FLAG as RECEIVE_TEXT_NOTIFICATION_FLAG",
	"EXP_SDS_CUSTOMER_RPT___RECEIVE_PUSH_NOTIFICATION_FLAG as RECEIVE_PUSH_NOTIFICATION_FLAG",
	"EXP_SDS_CUSTOMER_RPT___REMINDER_CALL_FLAG as REMINDER_CALL_FLAG",
	"EXP_SDS_CUSTOMER_RPT___GROOMING_NEW_FLAG as GROOMING_NEW_FLAG",
	"EXP_SDS_CUSTOMER_RPT___HOTEL_NEW_FLAG as HOTEL_NEW_FLAG",
	"EXP_SDS_CUSTOMER_RPT___DDC_NEW_FLAG as DDC_NEW_FLAG",
	"EXP_SDS_CUSTOMER_RPT___TRAINING_NEW_FLAG as TRAINING_NEW_FLAG",
	"EXP_SDS_CUSTOMER_RPT___UPDATE_VALIDATOR_FLAG as UPDATE_VALIDATOR_FLAG",
	"EXP_SDS_CUSTOMER_RPT___LOAD_TSTMP as LOAD_TSTMP",
	"EXP_SDS_CUSTOMER_RPT___UPDATE_TSTMP as UPDATE_TSTMP")\
	.withColumn('pyspark_data_action', when(col('UPDATE_VALIDATOR_FLAG') ==(lit('I')) , lit(0)) .when(col('UPDATE_VALIDATOR_FLAG') ==(lit('U')) , lit(1)))

# COMMAND ----------
# Processing node Shortcut_to_SDS_CUSTOMER_RPT, type TARGET 
# COLUMN COUNT: 28


Shortcut_to_SDS_CUSTOMER_RPT = UPD_SDS_CUSTOMER_RPT.selectExpr(
	"CAST(SDS_ACCOUNT_ID AS STRING) as SDS_ACCOUNT_ID",
	"PODS_CUSTOMER_ID as PODS_CUSTOMER_ID",
	"CAST(FIRST_NAME AS STRING) as FIRST_NAME",
	"CAST(MIDDLE_NAME AS STRING) as MIDDLE_NAME",
	"CAST(LAST_NAME AS STRING) as LAST_NAME",
	"CAST(EMAIL_ADDR AS STRING) as EMAIL_ADDR",
	"CAST(PHONE_NBR AS STRING) as PHONE_NBR",
	"CAST(ADDR1 AS STRING) as ADDR1",
	"CAST(ADDR2 AS STRING) as ADDR2",
	"CAST(CITY AS STRING) as CITY",
	"CAST(STATE AS STRING) as STATE",
	"CAST(POSTAL_CD AS STRING) as POSTAL_CD",
	"CAST(POSTAL_CD_EXT AS STRING) as POSTAL_CD_EXT",
	"CAST(COUNTRY_CD AS STRING) as COUNTRY_CD",
	"CAST(DO_NOT_BOOKED_FLAG AS TINYINT) as DO_NOT_BOOKED_FLAG",
	"CAST(DO_NOT_BOOKED_REASON AS STRING) as DO_NOT_BOOKED_REASON",
	"CAST(CUSTOMER_LOYALTY_FLAG AS TINYINT) as CUSTOMER_LOYALTY_FLAG",
	"CAST(DIGITAL_LOYALTY_CUSTOMER_FLAG AS TINYINT) as DIGITAL_LOYALTY_CUSTOMER_FLAG",
	"CAST(RECEIVE_EMAIL_NOTIFICATIONS_FLAG AS TINYINT) as RECEIVE_EMAIL_NOTIFICATIONS_FLAG",
	"CAST(RECEIVE_TEXT_NOTIFICATION_FLAG AS TINYINT) as RECEIVE_TEXT_NOTIFICATION_FLAG",
	"CAST(RECEIVE_PUSH_NOTIFICATION_FLAG AS TINYINT) as RECEIVE_PUSH_NOTIFICATION_FLAG",
	"CAST(REMINDER_CALL_FLAG AS TINYINT) as REMINDER_CALL_FLAG",
	"CAST(GROOMING_NEW_FLAG AS TINYINT) as GROOMING_NEW_FLAG",
	"CAST(HOTEL_NEW_FLAG AS TINYINT) as HOTEL_NEW_FLAG",
	"CAST(DDC_NEW_FLAG AS TINYINT) as DDC_NEW_FLAG",
	"CAST(TRAINING_NEW_FLAG AS TINYINT) as TRAINING_NEW_FLAG",
	"CAST(UPDATE_TSTMP AS TIMESTAMP) as UPDATE_TSTMP",
	"CAST(LOAD_TSTMP AS TIMESTAMP) as LOAD_TSTMP",
	"UPD_SDS_CUSTOMER_RPT.pyspark_data_action as pyspark_data_action"
)

try:
  primary_key = """source.SDS_ACCOUNT_ID = target.SDS_ACCOUNT_ID"""
  refined_perf_table = f"{legacy}.SDS_CUSTOMER_RPT"
  executeMerge(Shortcut_to_SDS_CUSTOMER_RPT, refined_perf_table, primary_key)
  logger.info(f"Merge with {refined_perf_table} completed]")
  logPrevRunDt("SDS_CUSTOMER_RPT", "SDS_CUSTOMER_RPT", "Completed", "N/A", f"{raw}.log_run_details")
except Exception as e:
  logPrevRunDt("SDS_CUSTOMER_RPT", "SDS_CUSTOMER_RPT","Failed",str(e), f"{raw}.log_run_details", )
  raise e
	