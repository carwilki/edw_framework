#Code converted on 2023-07-28 07:59:21
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from Datalake.utils.genericUtilities import *
from Datalake.utils.configs import *
from Datalake.utils.mergeUtils import *
from Datalake.utils.logger import *
# COMMAND ----------

parser = argparse.ArgumentParser()
spark = SparkSession.getActiveSession()
parser.add_argument('env', type=str, help='Env Variable')

args = parser.parse_args()
env = args.env

if env is None or env == '':
    raise ValueError('env is not set')

refine = getEnvPrefix(env) + 'refine'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'


# COMMAND ----------
# Processing node SQ_Shortcut_to_GS_PT_TRAVEL, type SOURCE 
# COLUMN COUNT: 20

SQ_Shortcut_to_GS_PT_TRAVEL = spark.sql(f"""SELECT * FROM {legacy}.GS_PT_TRAVEL""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node SQ_Shortcut_to_GS_PT_TRAVEL_PRE, type SOURCE 
# COLUMN COUNT: 19

SQ_Shortcut_to_GS_PT_TRAVEL_PRE = spark.sql(f"""SELECT * FROM {raw}.GS_PT_TRAVEL_PRE""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node JNRTRANS, type JOINER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 39

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_GS_PT_TRAVEL_temp = SQ_Shortcut_to_GS_PT_TRAVEL.toDF(*["SQ_Shortcut_to_GS_PT_TRAVEL___" + col for col in SQ_Shortcut_to_GS_PT_TRAVEL.columns])
SQ_Shortcut_to_GS_PT_TRAVEL_PRE_temp = SQ_Shortcut_to_GS_PT_TRAVEL_PRE.toDF(*["SQ_Shortcut_to_GS_PT_TRAVEL_PRE___" + col for col in SQ_Shortcut_to_GS_PT_TRAVEL_PRE.columns])

JNRTRANS = SQ_Shortcut_to_GS_PT_TRAVEL_temp.join(SQ_Shortcut_to_GS_PT_TRAVEL_PRE_temp,[SQ_Shortcut_to_GS_PT_TRAVEL_temp.SQ_Shortcut_to_GS_PT_TRAVEL___GS_PT_TRAVEL_ID == SQ_Shortcut_to_GS_PT_TRAVEL_PRE_temp.SQ_Shortcut_to_GS_PT_TRAVEL_PRE___GS_PT_TRAVEL_ID],'right_outer').selectExpr(
	"SQ_Shortcut_to_GS_PT_TRAVEL_PRE___GS_PT_TRAVEL_ID as GS_PT_TRAVEL_ID",
	"SQ_Shortcut_to_GS_PT_TRAVEL_PRE___AIRLINE_DEPART_DT as AIRLINE_DEPART_DT",
	"SQ_Shortcut_to_GS_PT_TRAVEL_PRE___AIRLINE_DEPART_TIME as AIRLINE_DEPART_TIME",
	"SQ_Shortcut_to_GS_PT_TRAVEL_PRE___AIRLINE_RETURN_DT as AIRLINE_RETURN_DT",
	"SQ_Shortcut_to_GS_PT_TRAVEL_PRE___AIRLINE_RETURN_TIME as AIRLINE_RETURN_TIME",
	"SQ_Shortcut_to_GS_PT_TRAVEL_PRE___AIRLINE_SEAT_PREFERENCE as AIRLINE_SEAT_PREFERENCE",
	"SQ_Shortcut_to_GS_PT_TRAVEL_PRE___HOTEL_CHECKIN_DT as HOTEL_CHECKIN_DT",
	"SQ_Shortcut_to_GS_PT_TRAVEL_PRE___HOTEL_CHECKOUT_DT as HOTEL_CHECKOUT_DT",
	"SQ_Shortcut_to_GS_PT_TRAVEL_PRE___LEGAL_NAME as LEGAL_NAME",
	"SQ_Shortcut_to_GS_PT_TRAVEL_PRE___BIRTHDATE as BIRTHDATE",
	"SQ_Shortcut_to_GS_PT_TRAVEL_PRE___GENDER as GENDER",
	"SQ_Shortcut_to_GS_PT_TRAVEL_PRE___PREFERRED_HOTEL as PREFERRED_HOTEL",
	"SQ_Shortcut_to_GS_PT_TRAVEL_PRE___PREFERRED_HOTEL_ADDRESS as PREFERRED_HOTEL_ADDRESS",
	"SQ_Shortcut_to_GS_PT_TRAVEL_PRE___PREFERRED_HOTEL_PHONE as PREFERRED_HOTEL_PHONE",
	"SQ_Shortcut_to_GS_PT_TRAVEL_PRE___PREFERRED_HOTEL_CONTACT as PREFERRED_HOTEL_CONTACT",
	"SQ_Shortcut_to_GS_PT_TRAVEL_PRE___PREFERRED_HOTEL_RATE as PREFERRED_HOTEL_RATE",
	"SQ_Shortcut_to_GS_PT_TRAVEL_PRE___HOTEL_ROOM_TYPE as HOTEL_ROOM_TYPE",
	"SQ_Shortcut_to_GS_PT_TRAVEL_PRE___PREFERRED_ROOMMATE as PREFERRED_ROOMMATE",
	"SQ_Shortcut_to_GS_PT_TRAVEL_PRE___MODIFIED_BY as MODIFIED_BY",
	"SQ_Shortcut_to_GS_PT_TRAVEL___GS_PT_TRAVEL_ID as GS_PT_TRAVEL_ID1",
	"SQ_Shortcut_to_GS_PT_TRAVEL___AIRLINE_DEPART_DT as AIRLINE_DEPART_DT1",
	"SQ_Shortcut_to_GS_PT_TRAVEL___AIRLINE_DEPART_TIME as AIRLINE_DEPART_TIME1",
	"SQ_Shortcut_to_GS_PT_TRAVEL___AIRLINE_RETURN_DT as AIRLINE_RETURN_DT1",
	"SQ_Shortcut_to_GS_PT_TRAVEL___AIRLINE_RETURN_TIME as AIRLINE_RETURN_TIME1",
	"SQ_Shortcut_to_GS_PT_TRAVEL___AIRLINE_SEAT_PREFERENCE as AIRLINE_SEAT_PREFERENCE1",
	"SQ_Shortcut_to_GS_PT_TRAVEL___HOTEL_CHECKIN_DT as HOTEL_CHECKIN_DT1",
	"SQ_Shortcut_to_GS_PT_TRAVEL___HOTEL_CHECKOUT_DT as HOTEL_CHECKOUT_DT1",
	"SQ_Shortcut_to_GS_PT_TRAVEL___LEGAL_NAME as LEGAL_NAME1",
	"SQ_Shortcut_to_GS_PT_TRAVEL___BIRTHDATE as BIRTHDATE1",
	"SQ_Shortcut_to_GS_PT_TRAVEL___GENDER as GENDER1",
	"SQ_Shortcut_to_GS_PT_TRAVEL___PREFERRED_HOTEL as PREFERRED_HOTEL1",
	"SQ_Shortcut_to_GS_PT_TRAVEL___PREFERRED_HOTEL_ADDRESS as PREFERRED_HOTEL_ADDRESS1",
	"SQ_Shortcut_to_GS_PT_TRAVEL___PREFERRED_HOTEL_PHONE as PREFERRED_HOTEL_PHONE1",
	"SQ_Shortcut_to_GS_PT_TRAVEL___PREFERRED_HOTEL_CONTACT as PREFERRED_HOTEL_CONTACT1",
	"SQ_Shortcut_to_GS_PT_TRAVEL___PREFERRED_HOTEL_RATE as PREFERRED_HOTEL_RATE1",
	"SQ_Shortcut_to_GS_PT_TRAVEL___HOTEL_ROOM_TYPE as HOTEL_ROOM_TYPE1",
	"SQ_Shortcut_to_GS_PT_TRAVEL___PREFERRED_ROOMMATE as PREFERRED_ROOMMATE1",
	"SQ_Shortcut_to_GS_PT_TRAVEL___MODIFIED_BY as MODIFIED_BY1",
	"SQ_Shortcut_to_GS_PT_TRAVEL___LOAD_TSTMP as LOAD_TSTMP")

# COMMAND ----------
# Processing node EXP_MD5_UPD_FLAG, type EXPRESSION . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 42

# for each involved DataFrame, append the dataframe name to each column
JNRTRANS_temp = JNRTRANS.toDF(*["JNRTRANS___" + col for col in JNRTRANS.columns])

JNRTRANS_temp = JNRTRANS_temp.selectExpr('*', '''md5(concat ( ifnull(JNRTRANS___AIRLINE_DEPART_DT  , "") 
, ifnull(JNRTRANS___AIRLINE_DEPART_TIME , "") 
, ifnull(JNRTRANS___AIRLINE_RETURN_DT , "") 
, ifnull(JNRTRANS___AIRLINE_RETURN_TIME , "") 
, ifnull(JNRTRANS___AIRLINE_SEAT_PREFERENCE , "") 
, ifnull(JNRTRANS___HOTEL_CHECKIN_DT , "") 
, ifnull(JNRTRANS___HOTEL_CHECKOUT_DT , "") 
, ifnull(JNRTRANS___LEGAL_NAME , "") 
, ifnull(JNRTRANS___BIRTHDATE , "") 
, ifnull(JNRTRANS___GENDER , "") 
, ifnull(JNRTRANS___PREFERRED_HOTEL , "") 
, ifnull(JNRTRANS___PREFERRED_HOTEL_ADDRESS, "") 
, ifnull(JNRTRANS___PREFERRED_HOTEL_PHONE, "") 
, ifnull(JNRTRANS___PREFERRED_HOTEL_CONTACT, "") 
, ifnull(JNRTRANS___PREFERRED_HOTEL_RATE, "") 
, ifnull(JNRTRANS___HOTEL_ROOM_TYPE, "") 
, ifnull(JNRTRANS___PREFERRED_ROOMMATE, "") 
, ifnull(JNRTRANS___MODIFIED_BY, "")
)) as md5pre''',
'''md5(concat( ifnull(JNRTRANS___AIRLINE_DEPART_DT1 , "") 
, ifnull(JNRTRANS___AIRLINE_DEPART_TIME1 , "") 
, ifnull(JNRTRANS___AIRLINE_RETURN_DT1 , "") 
, ifnull(JNRTRANS___AIRLINE_RETURN_TIME1 , "") 
, ifnull(JNRTRANS___AIRLINE_SEAT_PREFERENCE1 , "") 
, ifnull(JNRTRANS___HOTEL_CHECKIN_DT1 , "") 
, ifnull(JNRTRANS___HOTEL_CHECKOUT_DT1 , "") 
, ifnull(JNRTRANS___LEGAL_NAME1 , "") 
, ifnull(JNRTRANS___BIRTHDATE1 , "") 
, ifnull(JNRTRANS___GENDER1 , "") 
, ifnull(JNRTRANS___PREFERRED_HOTEL1 , "") 
, ifnull(JNRTRANS___PREFERRED_HOTEL_ADDRESS1 , "")
, ifnull(JNRTRANS___PREFERRED_HOTEL_PHONE1 , "")
, ifnull(JNRTRANS___PREFERRED_HOTEL_CONTACT1 , "")
, ifnull(JNRTRANS___PREFERRED_HOTEL_RATE1 , "")
, ifnull(JNRTRANS___HOTEL_ROOM_TYPE1 , "")
, ifnull(JNRTRANS___PREFERRED_ROOMMATE1 , "")
, ifnull(JNRTRANS___MODIFIED_BY1 , "")
)) as md5base''')


EXP_MD5_UPD_FLAG = JNRTRANS_temp\
	.withColumn("MD5_RESULTS", expr("""IF (md5pre != md5base, 1, 0)""")) \
	.withColumn("v_UPD_FLAG", expr("""IF (JNRTRANS___GS_PT_TRAVEL_ID1 IS NULL, 0, IF (MD5_RESULTS = 1, 1, 3))""")).selectExpr(
	"JNRTRANS___LOAD_TSTMP as i_LOAD_TSTMP",
	"JNRTRANS___GS_PT_TRAVEL_ID as GS_PT_TRAVEL_ID",
	"JNRTRANS___AIRLINE_DEPART_DT as AIRLINE_DEPART_DT",
	"JNRTRANS___AIRLINE_DEPART_TIME as AIRLINE_DEPART_TIME",
	"JNRTRANS___AIRLINE_RETURN_DT as AIRLINE_RETURN_DT",
	"JNRTRANS___AIRLINE_RETURN_TIME as AIRLINE_RETURN_TIME",
	"JNRTRANS___AIRLINE_SEAT_PREFERENCE as AIRLINE_SEAT_PREFERENCE",
	"JNRTRANS___HOTEL_CHECKIN_DT as HOTEL_CHECKIN_DT",
	"JNRTRANS___HOTEL_CHECKOUT_DT as HOTEL_CHECKOUT_DT",
	"JNRTRANS___LEGAL_NAME as LEGAL_NAME",
	"JNRTRANS___BIRTHDATE as BIRTHDATE",
	"JNRTRANS___GENDER as GENDER",
	"JNRTRANS___PREFERRED_HOTEL as PREFERRED_HOTEL",
	"JNRTRANS___PREFERRED_HOTEL_ADDRESS as PREFERRED_HOTEL_ADDRESS",
	"JNRTRANS___PREFERRED_HOTEL_PHONE as PREFERRED_HOTEL_PHONE",
	"JNRTRANS___PREFERRED_HOTEL_CONTACT as PREFERRED_HOTEL_CONTACT",
	"JNRTRANS___PREFERRED_HOTEL_RATE as PREFERRED_HOTEL_RATE",
	"JNRTRANS___HOTEL_ROOM_TYPE as HOTEL_ROOM_TYPE",
	"JNRTRANS___PREFERRED_ROOMMATE as PREFERRED_ROOMMATE",
	"JNRTRANS___MODIFIED_BY as MODIFIED_BY",
	"JNRTRANS___GS_PT_TRAVEL_ID1 as GS_PT_TRAVEL_ID1",
	"JNRTRANS___AIRLINE_DEPART_DT1 as AIRLINE_DEPART_DT1",
	"JNRTRANS___AIRLINE_DEPART_TIME1 as AIRLINE_DEPART_TIME1",
	"JNRTRANS___AIRLINE_RETURN_DT1 as AIRLINE_RETURN_DT1",
	"JNRTRANS___AIRLINE_RETURN_TIME1 as AIRLINE_RETURN_TIME1",
	"JNRTRANS___AIRLINE_SEAT_PREFERENCE1 as AIRLINE_SEAT_PREFERENCE1",
	"JNRTRANS___HOTEL_CHECKIN_DT1 as HOTEL_CHECKIN_DT1",
	"JNRTRANS___HOTEL_CHECKOUT_DT1 as HOTEL_CHECKOUT_DT1",
	"JNRTRANS___LEGAL_NAME1 as LEGAL_NAME1",
	"JNRTRANS___BIRTHDATE1 as BIRTHDATE1",
	"JNRTRANS___GENDER1 as GENDER1",
	"JNRTRANS___PREFERRED_HOTEL1 as PREFERRED_HOTEL1",
	"JNRTRANS___PREFERRED_HOTEL_ADDRESS1 as PREFERRED_HOTEL_ADDRESS1",
	"JNRTRANS___PREFERRED_HOTEL_PHONE1 as PREFERRED_HOTEL_PHONE1",
	"JNRTRANS___PREFERRED_HOTEL_CONTACT1 as PREFERRED_HOTEL_CONTACT1",
	"JNRTRANS___PREFERRED_HOTEL_RATE1 as PREFERRED_HOTEL_RATE1",
	"JNRTRANS___HOTEL_ROOM_TYPE1 as HOTEL_ROOM_TYPE1",
	"JNRTRANS___PREFERRED_ROOMMATE1 as PREFERRED_ROOMMATE1",
	"JNRTRANS___MODIFIED_BY1 as MODIFIED_BY1",
 	"v_UPD_FLAG as v_UPD_FLAG").selectExpr(
	"i_LOAD_TSTMP as i_LOAD_TSTMP",
	"v_UPD_FLAG as o_UPD_FLAG",
	"CURRENT_TIMESTAMP as UPDATE_TSTMP",
	"IF (v_UPD_FLAG = 1, i_LOAD_TSTMP, CURRENT_TIMESTAMP) as o_LOAD_TSTMP",
	"GS_PT_TRAVEL_ID as GS_PT_TRAVEL_ID",
	"AIRLINE_DEPART_DT as AIRLINE_DEPART_DT",
	"AIRLINE_DEPART_TIME as AIRLINE_DEPART_TIME",
	"AIRLINE_RETURN_DT as AIRLINE_RETURN_DT",
	"AIRLINE_RETURN_TIME as AIRLINE_RETURN_TIME",
	"AIRLINE_SEAT_PREFERENCE as AIRLINE_SEAT_PREFERENCE",
	"HOTEL_CHECKIN_DT as HOTEL_CHECKIN_DT",
	"HOTEL_CHECKOUT_DT as HOTEL_CHECKOUT_DT",
	"LEGAL_NAME as LEGAL_NAME",
	"BIRTHDATE as BIRTHDATE",
	"GENDER as GENDER",
	"PREFERRED_HOTEL as PREFERRED_HOTEL",
	"PREFERRED_HOTEL_ADDRESS as PREFERRED_HOTEL_ADDRESS",
	"PREFERRED_HOTEL_PHONE as PREFERRED_HOTEL_PHONE",
	"PREFERRED_HOTEL_CONTACT as PREFERRED_HOTEL_CONTACT",
	"PREFERRED_HOTEL_RATE as PREFERRED_HOTEL_RATE",
	"HOTEL_ROOM_TYPE as HOTEL_ROOM_TYPE",
	"PREFERRED_ROOMMATE as PREFERRED_ROOMMATE",
	"MODIFIED_BY as MODIFIED_BY",
	"GS_PT_TRAVEL_ID1 as GS_PT_TRAVEL_ID1",
	"AIRLINE_DEPART_DT1 as AIRLINE_DEPART_DT1",
	"AIRLINE_DEPART_TIME1 as AIRLINE_DEPART_TIME1",
	"AIRLINE_RETURN_DT1 as AIRLINE_RETURN_DT1",
	"AIRLINE_RETURN_TIME1 as AIRLINE_RETURN_TIME1",
	"AIRLINE_SEAT_PREFERENCE1 as AIRLINE_SEAT_PREFERENCE1",
	"HOTEL_CHECKIN_DT1 as HOTEL_CHECKIN_DT1",
	"HOTEL_CHECKOUT_DT1 as HOTEL_CHECKOUT_DT1",
	"LEGAL_NAME1 as LEGAL_NAME1",
	"BIRTHDATE1 as BIRTHDATE1",
	"GENDER1 as GENDER1",
	"PREFERRED_HOTEL1 as PREFERRED_HOTEL1",
	"PREFERRED_HOTEL_ADDRESS1 as PREFERRED_HOTEL_ADDRESS1",
	"PREFERRED_HOTEL_PHONE1 as PREFERRED_HOTEL_PHONE1",
	"PREFERRED_HOTEL_CONTACT1 as PREFERRED_HOTEL_CONTACT1",
	"PREFERRED_HOTEL_RATE1 as PREFERRED_HOTEL_RATE1",
	"HOTEL_ROOM_TYPE1 as HOTEL_ROOM_TYPE1",
	"PREFERRED_ROOMMATE1 as PREFERRED_ROOMMATE1",
	"MODIFIED_BY1 as MODIFIED_BY1"
)

# COMMAND ----------
# Processing node FIL_UPD_FLAG, type FILTER 
# COLUMN COUNT: 22

# for each involved DataFrame, append the dataframe name to each column
EXP_MD5_UPD_FLAG_temp = EXP_MD5_UPD_FLAG.toDF(*["EXP_MD5_UPD_FLAG___" + col for col in EXP_MD5_UPD_FLAG.columns])

FIL_UPD_FLAG = EXP_MD5_UPD_FLAG_temp.selectExpr(
	"EXP_MD5_UPD_FLAG___UPDATE_TSTMP as UPDATE_TSTMP",
	"EXP_MD5_UPD_FLAG___o_LOAD_TSTMP as o_LOAD_TSTMP",
	"EXP_MD5_UPD_FLAG___o_UPD_FLAG as o_UPD_FLAG",
	"EXP_MD5_UPD_FLAG___GS_PT_TRAVEL_ID as GS_PT_TRAVEL_ID",
	"EXP_MD5_UPD_FLAG___AIRLINE_DEPART_DT as AIRLINE_DEPART_DT",
	"EXP_MD5_UPD_FLAG___AIRLINE_DEPART_TIME as AIRLINE_DEPART_TIME",
	"EXP_MD5_UPD_FLAG___AIRLINE_RETURN_DT as AIRLINE_RETURN_DT",
	"EXP_MD5_UPD_FLAG___AIRLINE_RETURN_TIME as AIRLINE_RETURN_TIME",
	"EXP_MD5_UPD_FLAG___AIRLINE_SEAT_PREFERENCE as AIRLINE_SEAT_PREFERENCE",
	"EXP_MD5_UPD_FLAG___HOTEL_CHECKIN_DT as HOTEL_CHECKIN_DT",
	"EXP_MD5_UPD_FLAG___HOTEL_CHECKOUT_DT as HOTEL_CHECKOUT_DT",
	"EXP_MD5_UPD_FLAG___LEGAL_NAME as LEGAL_NAME",
	"EXP_MD5_UPD_FLAG___BIRTHDATE as BIRTHDATE",
	"EXP_MD5_UPD_FLAG___GENDER as GENDER",
	"EXP_MD5_UPD_FLAG___PREFERRED_HOTEL as PREFERRED_HOTEL",
	"EXP_MD5_UPD_FLAG___PREFERRED_HOTEL_ADDRESS as PREFERRED_HOTEL_ADDRESS",
	"EXP_MD5_UPD_FLAG___PREFERRED_HOTEL_PHONE as PREFERRED_HOTEL_PHONE",
	"EXP_MD5_UPD_FLAG___PREFERRED_HOTEL_CONTACT as PREFERRED_HOTEL_CONTACT",
	"EXP_MD5_UPD_FLAG___PREFERRED_HOTEL_RATE as PREFERRED_HOTEL_RATE",
	"EXP_MD5_UPD_FLAG___HOTEL_ROOM_TYPE as HOTEL_ROOM_TYPE",
	"EXP_MD5_UPD_FLAG___PREFERRED_ROOMMATE as PREFERRED_ROOMMATE",
	"EXP_MD5_UPD_FLAG___MODIFIED_BY as MODIFIED_BY").filter("o_UPD_FLAG != 3").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node UPD_UPD_FLAG, type UPDATE_STRATEGY 
# COLUMN COUNT: 22

# for each involved DataFrame, append the dataframe name to each column
FIL_UPD_FLAG_temp = FIL_UPD_FLAG.toDF(*["FIL_UPD_FLAG___" + col for col in FIL_UPD_FLAG.columns])

UPD_UPD_FLAG = FIL_UPD_FLAG_temp.selectExpr(
	"FIL_UPD_FLAG___UPDATE_TSTMP as UPDATE_TSTMP",
	"FIL_UPD_FLAG___o_LOAD_TSTMP as o_LOAD_TSTMP",
	"FIL_UPD_FLAG___o_UPD_FLAG as o_UPD_FLAG",
	"FIL_UPD_FLAG___GS_PT_TRAVEL_ID as GS_PT_TRAVEL_ID",
	"FIL_UPD_FLAG___AIRLINE_DEPART_DT as AIRLINE_DEPART_DT",
	"FIL_UPD_FLAG___AIRLINE_DEPART_TIME as AIRLINE_DEPART_TIME",
	"FIL_UPD_FLAG___AIRLINE_RETURN_DT as AIRLINE_RETURN_DT",
	"FIL_UPD_FLAG___AIRLINE_RETURN_TIME as AIRLINE_RETURN_TIME",
	"FIL_UPD_FLAG___AIRLINE_SEAT_PREFERENCE as AIRLINE_SEAT_PREFERENCE",
	"FIL_UPD_FLAG___HOTEL_CHECKIN_DT as HOTEL_CHECKIN_DT",
	"FIL_UPD_FLAG___HOTEL_CHECKOUT_DT as HOTEL_CHECKOUT_DT",
	"FIL_UPD_FLAG___LEGAL_NAME as LEGAL_NAME",
	"FIL_UPD_FLAG___BIRTHDATE as BIRTHDATE",
	"FIL_UPD_FLAG___GENDER as GENDER",
	"FIL_UPD_FLAG___PREFERRED_HOTEL as PREFERRED_HOTEL",
	"FIL_UPD_FLAG___PREFERRED_HOTEL_ADDRESS as PREFERRED_HOTEL_ADDRESS",
	"FIL_UPD_FLAG___PREFERRED_HOTEL_PHONE as PREFERRED_HOTEL_PHONE",
	"FIL_UPD_FLAG___PREFERRED_HOTEL_CONTACT as PREFERRED_HOTEL_CONTACT",
	"FIL_UPD_FLAG___PREFERRED_HOTEL_RATE as PREFERRED_HOTEL_RATE",
	"FIL_UPD_FLAG___HOTEL_ROOM_TYPE as HOTEL_ROOM_TYPE",
	"FIL_UPD_FLAG___PREFERRED_ROOMMATE as PREFERRED_ROOMMATE",
	"FIL_UPD_FLAG___MODIFIED_BY as MODIFIED_BY") \
	.withColumn('pyspark_data_action', col('o_UPD_FLAG'))

# COMMAND ----------
# Processing node Shortcut_to_GS_PT_TRAVEL, type TARGET 
# COLUMN COUNT: 21


Shortcut_to_GS_PT_TRAVEL = UPD_UPD_FLAG.selectExpr(
	"GS_PT_TRAVEL_ID as GS_PT_TRAVEL_ID",
	"CAST(AIRLINE_DEPART_DT AS TIMESTAMP) as AIRLINE_DEPART_DT",
	"CAST(AIRLINE_DEPART_TIME AS STRING) as AIRLINE_DEPART_TIME",
	"CAST(AIRLINE_RETURN_DT AS TIMESTAMP) as AIRLINE_RETURN_DT",
	"CAST(AIRLINE_RETURN_TIME AS STRING) as AIRLINE_RETURN_TIME",
	"CAST(AIRLINE_SEAT_PREFERENCE AS STRING) as AIRLINE_SEAT_PREFERENCE",
	"CAST(HOTEL_CHECKIN_DT AS TIMESTAMP) as HOTEL_CHECKIN_DT",
	"CAST(HOTEL_CHECKOUT_DT AS TIMESTAMP) as HOTEL_CHECKOUT_DT",
	"CAST(LEGAL_NAME AS STRING) as LEGAL_NAME",
	"CAST(BIRTHDATE AS TIMESTAMP) as BIRTHDATE",
	"GENDER as GENDER",
	"CAST(PREFERRED_HOTEL AS STRING) as PREFERRED_HOTEL",
	"CAST(PREFERRED_HOTEL_ADDRESS AS STRING) as PREFERRED_HOTEL_ADDRESS",
	"CAST(PREFERRED_HOTEL_PHONE AS STRING) as PREFERRED_HOTEL_PHONE",
	"CAST(PREFERRED_HOTEL_CONTACT AS STRING) as PREFERRED_HOTEL_CONTACT",
	"CAST(PREFERRED_HOTEL_RATE AS STRING) as PREFERRED_HOTEL_RATE",
	"HOTEL_ROOM_TYPE as HOTEL_ROOM_TYPE",
	"CAST(PREFERRED_ROOMMATE AS STRING) as PREFERRED_ROOMMATE",
	"CAST(MODIFIED_BY AS STRING) as MODIFIED_BY",
	"CAST(UPDATE_TSTMP AS TIMESTAMP) as UPDATE_TSTMP",
	"CAST(o_LOAD_TSTMP AS TIMESTAMP) as LOAD_TSTMP",
	"pyspark_data_action as pyspark_data_action"
)

try:
	primary_key = """source.GS_PT_TRAVEL_ID = target.GS_PT_TRAVEL_ID"""
	refined_perf_table = f"{legacy}.GS_PT_TRAVEL"
	executeMerge(Shortcut_to_GS_PT_TRAVEL, refined_perf_table, primary_key)
	logger.info(f"Merge with {refined_perf_table} completed]")
	logPrevRunDt("GS_PT_TRAVEL", "GS_PT_TRAVEL", "Completed", "N/A", f"{raw}.log_run_details")
except Exception as e:
	logPrevRunDt("GS_PT_TRAVEL", "GS_PT_TRAVEL","Failed",str(e), f"{raw}.log_run_details")
	raise e
		