# Databricks notebook source
#Code converted on 2023-08-24 12:25:55
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from Datalake.utils.genericUtilities import *
from Datalake.utils.configs import *
from Datalake.utils.mergeUtils import *
from Datalake.utils.logger import *

# COMMAND ----------

# parser = argparse.ArgumentParser()
# parser.add_argument('env', type=str, help='Env Variable')
# args = parser.parse_args()
# env = args.env

spark = SparkSession.getActiveSession()
dbutils = DBUtils(spark)

dbutils.widgets.text(name='env', defaultValue='dev')
env = dbutils.widgets.get('env')

if env is None or env == '':
    raise ValueError('env is not set')

refine = getEnvPrefix(env) + 'refine'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'


# COMMAND ----------

# Processing node SQ_Shortcut_to_RFX_STORE_WALK_PRE, type SOURCE 
# COLUMN COUNT: 17

SQ_Shortcut_to_RFX_STORE_WALK_PRE = spark.sql(f"""SELECT
WALK_ID,
STORE_ID,
STORE_NAME,
WALK_DATE_TIME,
SUBMISSION_DATE_TIME,
WALK_TYPE_ID,
WALK_TYPE,
WALK_PARTICIPANTS,
PASS_STATUS,
POINTS_SCORED,
TOTAL_POINTS,
TARGET_POINTS,
SCORE_PCT,
TASK_COUNT,
WALK_OWNER_ID,
WALK_OWNER,
WALK_PROJECT_ID
FROM {raw}.RFX_STORE_WALK_PRE""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------

# Processing node SQ_Shortcut_to_RFX_SWA_STORE_WALK, type SOURCE 
# COLUMN COUNT: 21

SQ_Shortcut_to_RFX_SWA_STORE_WALK = spark.sql(f"""SELECT
RFX_WALK_ID,
RFX_WALK_TSTMP,
RFX_SUBMISSION_TSTMP,
LOCATION_ID,
RFX_STORE_ID,
STORE_NAME,
RFX_WALK_PROJECT_ID,
RFX_WALK_TYPE_ID,
RFX_WALK_TYPE_NAME,
SITE_MANAGER_ID,
SITE_MANAGER_NAME,
RFX_TASK_CNT,
RFX_PASS_STATUS_CD,
POINTS_SCORED,
TOTAL_POINTS,
TARGET_POINTS,
SCORE_PCT,
RFX_WALK_PARTICIPANTS_NAME,
RFX_WALK_OWNER_ID,
RFX_WALK_OWNER_NAME,
LOAD_TSTMP
FROM {legacy}.RFX_SWA_STORE_WALK""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------

# Processing node SQ_Shortcut_to_SITE_PROFILE_RPT, type SOURCE 
# COLUMN COUNT: 4

SQ_Shortcut_to_SITE_PROFILE_RPT = spark.sql(f"""SELECT DISTINCT
LOCATION_ID,
STORE_NBR,
SITE_MANAGER_ID,
SITE_MANAGER_NAME
FROM {legacy}.SITE_PROFILE_RPT""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------

# Processing node JNR_RFX_STORE_WALK_PRE, type JOINER 
# COLUMN COUNT: 21

JNR_RFX_STORE_WALK_PRE = SQ_Shortcut_to_RFX_STORE_WALK_PRE.join(SQ_Shortcut_to_SITE_PROFILE_RPT,[SQ_Shortcut_to_RFX_STORE_WALK_PRE.STORE_ID == SQ_Shortcut_to_SITE_PROFILE_RPT.STORE_NBR],'left_outer')

# COMMAND ----------

# Processing node JNR_RFX_SWA_STORE_WALK, type JOINER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 45

# for each involved DataFrame, append the dataframe name to each column
JNR_RFX_STORE_WALK_PRE_temp = JNR_RFX_STORE_WALK_PRE.toDF(*["JNR_RFX_STORE_WALK_PRE___" + col for col in JNR_RFX_STORE_WALK_PRE.columns])
SQ_Shortcut_to_RFX_SWA_STORE_WALK_temp = SQ_Shortcut_to_RFX_SWA_STORE_WALK.toDF(*["SQ_Shortcut_to_RFX_SWA_STORE_WALK___" + col for col in SQ_Shortcut_to_RFX_SWA_STORE_WALK.columns])

JNR_RFX_SWA_STORE_WALK = JNR_RFX_STORE_WALK_PRE_temp.join(SQ_Shortcut_to_RFX_SWA_STORE_WALK_temp,[JNR_RFX_STORE_WALK_PRE_temp.JNR_RFX_STORE_WALK_PRE___WALK_ID == SQ_Shortcut_to_RFX_SWA_STORE_WALK_temp.SQ_Shortcut_to_RFX_SWA_STORE_WALK___RFX_WALK_ID, JNR_RFX_STORE_WALK_PRE_temp.JNR_RFX_STORE_WALK_PRE___WALK_TYPE_ID == SQ_Shortcut_to_RFX_SWA_STORE_WALK_temp.SQ_Shortcut_to_RFX_SWA_STORE_WALK___RFX_WALK_TYPE_ID],'left_outer').selectExpr(
	"JNR_RFX_STORE_WALK_PRE___WALK_ID as WALK_ID",
	"JNR_RFX_STORE_WALK_PRE___STORE_ID as STORE_ID",
	"JNR_RFX_STORE_WALK_PRE___STORE_NAME as STORE_NAME",
	"JNR_RFX_STORE_WALK_PRE___WALK_DATE_TIME as WALK_DATE_TIME",
	"JNR_RFX_STORE_WALK_PRE___WALK_TYPE_ID as WALK_TYPE_ID",
	"JNR_RFX_STORE_WALK_PRE___WALK_TYPE as WALK_TYPE",
	"JNR_RFX_STORE_WALK_PRE___WALK_PARTICIPANTS as WALK_PARTICIPANTS",
	"JNR_RFX_STORE_WALK_PRE___PASS_STATUS as PASS_STATUS",
	"JNR_RFX_STORE_WALK_PRE___POINTS_SCORED as POINTS_SCORED",
	"JNR_RFX_STORE_WALK_PRE___TOTAL_POINTS as TOTAL_POINTS",
	"JNR_RFX_STORE_WALK_PRE___SCORE_PCT as SCORE_PCT",
	"JNR_RFX_STORE_WALK_PRE___TASK_COUNT as TASK_COUNT",
	"JNR_RFX_STORE_WALK_PRE___WALK_OWNER_ID as WALK_OWNER_ID",
	"JNR_RFX_STORE_WALK_PRE___WALK_OWNER as WALK_OWNER",
	"JNR_RFX_STORE_WALK_PRE___WALK_PROJECT_ID as WALK_PROJECT_ID",
	"SQ_Shortcut_to_RFX_SWA_STORE_WALK___RFX_WALK_ID as i_RFX_WALK_ID",
	"SQ_Shortcut_to_RFX_SWA_STORE_WALK___RFX_WALK_TSTMP as i_RFX_WALK_TSTMP",
	"SQ_Shortcut_to_RFX_SWA_STORE_WALK___LOCATION_ID as i_LOCATION_ID",
	"SQ_Shortcut_to_RFX_SWA_STORE_WALK___RFX_STORE_ID as i_RFX_STORE_ID",
	"SQ_Shortcut_to_RFX_SWA_STORE_WALK___STORE_NAME as i_STORE_NAME1",
	"SQ_Shortcut_to_RFX_SWA_STORE_WALK___RFX_WALK_PROJECT_ID as i_RFX_WALK_PROJECT_ID",
	"SQ_Shortcut_to_RFX_SWA_STORE_WALK___RFX_WALK_TYPE_ID as i_RFX_WALK_TYPE_ID",
	"SQ_Shortcut_to_RFX_SWA_STORE_WALK___RFX_WALK_TYPE_NAME as i_RFX_WALK_TYPE_NAME",
	"SQ_Shortcut_to_RFX_SWA_STORE_WALK___RFX_TASK_CNT as i_RFX_TASK_CNT",
	"SQ_Shortcut_to_RFX_SWA_STORE_WALK___RFX_PASS_STATUS_CD as i_RFX_PASS_STATUS_CD",
	"SQ_Shortcut_to_RFX_SWA_STORE_WALK___POINTS_SCORED as i_POINTS_SCORED1",
	"SQ_Shortcut_to_RFX_SWA_STORE_WALK___TOTAL_POINTS as i_TOTAL_POINTS",
	"SQ_Shortcut_to_RFX_SWA_STORE_WALK___SCORE_PCT as i_SCORE_PCT1",
	"SQ_Shortcut_to_RFX_SWA_STORE_WALK___RFX_WALK_PARTICIPANTS_NAME as i_RFX_WALK_PARTICIPANTS_NAME",
	"SQ_Shortcut_to_RFX_SWA_STORE_WALK___RFX_WALK_OWNER_ID as i_RFX_WALK_OWNER_ID",
	"SQ_Shortcut_to_RFX_SWA_STORE_WALK___RFX_WALK_OWNER_NAME as i_RFX_WALK_OWNER_NAME",
	"SQ_Shortcut_to_RFX_SWA_STORE_WALK___LOAD_TSTMP as i_LOAD_TSTMP",
	"JNR_RFX_STORE_WALK_PRE___LOCATION_ID as LOCATION_ID",
	"SQ_Shortcut_to_RFX_SWA_STORE_WALK___TARGET_POINTS as i_TARGET_POINTS",
	"JNR_RFX_STORE_WALK_PRE___TARGET_POINTS as TARGET_POINTS",
	"JNR_RFX_STORE_WALK_PRE___SUBMISSION_DATE_TIME as SUBMISSION_DATE_TIME",
	"SQ_Shortcut_to_RFX_SWA_STORE_WALK___RFX_SUBMISSION_TSTMP as i_RFX_SUBMISSION_TSTMP",
	"JNR_RFX_STORE_WALK_PRE___SITE_MANAGER_ID as SITE_MANAGER_ID",
	"JNR_RFX_STORE_WALK_PRE___SITE_MANAGER_NAME as SITE_MANAGER_NAME",
	"SQ_Shortcut_to_RFX_SWA_STORE_WALK___SITE_MANAGER_ID as i_SITE_MANAGER_ID",
	"SQ_Shortcut_to_RFX_SWA_STORE_WALK___SITE_MANAGER_NAME as i_SITE_MANAGER_NAME") \
	.withColumn('AUDITOR_ID', lit(None)) \
	.withColumn('AUDITOR', lit(None)) \
	.withColumn('i_RFX_AUDITOR_ID', lit(None)) \
	.withColumn('i_RFX_AUDITOR_NAME', lit(None))
	

# COMMAND ----------

# Processing node FIL_RFX_SWA_STORE_WALK, type FILTER 
# COLUMN COUNT: 41

# for each involved DataFrame, append the dataframe name to each column
JNR_RFX_SWA_STORE_WALK_temp = JNR_RFX_SWA_STORE_WALK.toDF(*["JNR_RFX_SWA_STORE_WALK___" + col for col in JNR_RFX_SWA_STORE_WALK.columns])

FIL_RFX_SWA_STORE_WALK = JNR_RFX_SWA_STORE_WALK_temp.selectExpr(
	"JNR_RFX_SWA_STORE_WALK___WALK_ID as WALK_ID",
	"JNR_RFX_SWA_STORE_WALK___LOCATION_ID as LOCATION_ID",
	"JNR_RFX_SWA_STORE_WALK___STORE_ID as STORE_ID",
	"JNR_RFX_SWA_STORE_WALK___STORE_NAME as STORE_NAME",
	"JNR_RFX_SWA_STORE_WALK___WALK_DATE_TIME as WALK_DATE_TIME",
	"JNR_RFX_SWA_STORE_WALK___WALK_TYPE_ID as WALK_TYPE_ID",
	"JNR_RFX_SWA_STORE_WALK___WALK_TYPE as WALK_TYPE",
	"JNR_RFX_SWA_STORE_WALK___WALK_PARTICIPANTS as WALK_PARTICIPANTS",
	"JNR_RFX_SWA_STORE_WALK___PASS_STATUS as PASS_STATUS",
	"JNR_RFX_SWA_STORE_WALK___POINTS_SCORED as POINTS_SCORED",
	"JNR_RFX_SWA_STORE_WALK___TOTAL_POINTS as TOTAL_POINTS",
	"JNR_RFX_SWA_STORE_WALK___SCORE_PCT as SCORE_PCT",
	"JNR_RFX_SWA_STORE_WALK___TASK_COUNT as TASK_COUNT",
	"JNR_RFX_SWA_STORE_WALK___WALK_OWNER_ID as WALK_OWNER_ID",
	"JNR_RFX_SWA_STORE_WALK___WALK_OWNER as WALK_OWNER",
	"JNR_RFX_SWA_STORE_WALK___WALK_PROJECT_ID as WALK_PROJECT_ID",
	"JNR_RFX_SWA_STORE_WALK___i_RFX_WALK_ID as i_RFX_WALK_ID",
	"JNR_RFX_SWA_STORE_WALK___i_RFX_WALK_TSTMP as i_RFX_WALK_TSTMP",
	"JNR_RFX_SWA_STORE_WALK___i_LOCATION_ID as i_LOCATION_ID",
	"JNR_RFX_SWA_STORE_WALK___i_RFX_STORE_ID as i_RFX_STORE_ID",
	"JNR_RFX_SWA_STORE_WALK___i_STORE_NAME1 as i_STORE_NAME1",
	"JNR_RFX_SWA_STORE_WALK___i_RFX_WALK_PROJECT_ID as i_RFX_WALK_PROJECT_ID",
	"JNR_RFX_SWA_STORE_WALK___i_RFX_WALK_TYPE_ID as i_RFX_WALK_TYPE_ID",
	"JNR_RFX_SWA_STORE_WALK___i_RFX_WALK_TYPE_NAME as i_RFX_WALK_TYPE_NAME",
	"JNR_RFX_SWA_STORE_WALK___i_RFX_TASK_CNT as i_RFX_TASK_CNT",
	"JNR_RFX_SWA_STORE_WALK___i_RFX_PASS_STATUS_CD as i_RFX_PASS_STATUS_CD",
	"JNR_RFX_SWA_STORE_WALK___i_POINTS_SCORED1 as i_POINTS_SCORED1",
	"JNR_RFX_SWA_STORE_WALK___i_TOTAL_POINTS as i_TOTAL_POINTS",
	"JNR_RFX_SWA_STORE_WALK___i_SCORE_PCT1 as i_SCORE_PCT1",
	"JNR_RFX_SWA_STORE_WALK___i_RFX_WALK_PARTICIPANTS_NAME as i_RFX_WALK_PARTICIPANTS_NAME",
	"JNR_RFX_SWA_STORE_WALK___i_RFX_WALK_OWNER_ID as i_RFX_WALK_OWNER_ID",
	"JNR_RFX_SWA_STORE_WALK___i_RFX_WALK_OWNER_NAME as i_RFX_WALK_OWNER_NAME",
	"JNR_RFX_SWA_STORE_WALK___i_LOAD_TSTMP as i_LOAD_TSTMP",
	"JNR_RFX_SWA_STORE_WALK___i_TARGET_POINTS as i_TARGET_POINTS",
	"JNR_RFX_SWA_STORE_WALK___TARGET_POINTS as TARGET_POINTS",
	"JNR_RFX_SWA_STORE_WALK___SUBMISSION_DATE_TIME as SUBMISSION_DATE_TIME",
	"JNR_RFX_SWA_STORE_WALK___i_RFX_SUBMISSION_TSTMP as i_RFX_SUBMISSION_TSTMP",
	"JNR_RFX_SWA_STORE_WALK___SITE_MANAGER_ID as SITE_MANAGER_ID",
	"JNR_RFX_SWA_STORE_WALK___SITE_MANAGER_NAME as SITE_MANAGER_NAME",
	"JNR_RFX_SWA_STORE_WALK___i_SITE_MANAGER_ID as i_SITE_MANAGER_ID",
	"JNR_RFX_SWA_STORE_WALK___i_SITE_MANAGER_NAME as i_SITE_MANAGER_NAME").filter("i_RFX_WALK_ID IS NULL OR ( i_RFX_WALK_ID IS NOT NULL AND ( IF (i_RFX_WALK_TSTMP IS NULL, date'1901-01-01', i_RFX_WALK_TSTMP) != IF (WALK_DATE_TIME IS NULL, date'1901-01-01', WALK_DATE_TIME) OR IF (i_RFX_SUBMISSION_TSTMP IS NULL, date'1901-01-01', i_RFX_SUBMISSION_TSTMP) != IF (SUBMISSION_DATE_TIME IS NULL, date'1901-01-01', SUBMISSION_DATE_TIME) OR IF (i_LOCATION_ID IS NULL, - 9999, i_LOCATION_ID) != IF (LOCATION_ID IS NULL, - 9999, LOCATION_ID) OR IF (i_RFX_STORE_ID IS NULL, '', i_RFX_STORE_ID) != IF (STORE_ID IS NULL, '', STORE_ID) OR IF (i_STORE_NAME1 IS NULL, '', i_STORE_NAME1) != IF (STORE_NAME IS NULL, '', STORE_NAME) OR IF (i_RFX_WALK_PROJECT_ID IS NULL, '', i_RFX_WALK_PROJECT_ID) != IF (WALK_PROJECT_ID IS NULL, '', WALK_PROJECT_ID) OR IF (i_RFX_WALK_TYPE_ID IS NULL, - 9999, i_RFX_WALK_TYPE_ID) != IF (WALK_TYPE_ID IS NULL, - 9999, WALK_TYPE_ID) OR IF (i_RFX_WALK_TYPE_NAME IS NULL, '', i_RFX_WALK_TYPE_NAME) != IF (WALK_TYPE IS NULL, '', WALK_TYPE) OR IF (i_RFX_TASK_CNT IS NULL, - 9999, i_RFX_TASK_CNT) != IF (TASK_COUNT IS NULL, - 9999, TASK_COUNT) OR IF (i_RFX_PASS_STATUS_CD IS NULL, '', i_RFX_PASS_STATUS_CD) != IF (PASS_STATUS IS NULL, '', PASS_STATUS) OR IF (i_POINTS_SCORED1 IS NULL, 0, i_POINTS_SCORED1) != IF (POINTS_SCORED IS NULL, 0, POINTS_SCORED) OR IF (i_TOTAL_POINTS IS NULL, 0, i_TOTAL_POINTS) != IF (TOTAL_POINTS IS NULL, 0, TOTAL_POINTS) OR IF (i_SCORE_PCT1 IS NULL, 0, i_SCORE_PCT1) != IF (SCORE_PCT IS NULL, 0, SCORE_PCT) OR IF (i_RFX_WALK_PARTICIPANTS_NAME IS NULL, '', i_RFX_WALK_PARTICIPANTS_NAME) != IF (WALK_PARTICIPANTS IS NULL, '', WALK_PARTICIPANTS) OR IF (i_RFX_WALK_OWNER_ID IS NULL, '', i_RFX_WALK_OWNER_ID) != IF (WALK_OWNER_ID IS NULL, '', WALK_OWNER_ID) OR IF (i_RFX_WALK_OWNER_NAME IS NULL, '', i_RFX_WALK_OWNER_NAME) != IF (WALK_OWNER IS NULL, '', WALK_OWNER) OR IF (i_TARGET_POINTS IS NULL, 0, i_TARGET_POINTS) != IF (TARGET_POINTS IS NULL, 0, TARGET_POINTS) or IF (i_SITE_MANAGER_ID IS NULL, - 9999, i_SITE_MANAGER_ID) != IF (SITE_MANAGER_ID IS NULL, - 9999, SITE_MANAGER_ID) or IF (i_SITE_MANAGER_NAME IS NULL, '', i_SITE_MANAGER_NAME) != IF (SITE_MANAGER_NAME IS NULL, '', SITE_MANAGER_NAME) ) )").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------

# Processing node EXP_RFX_SWA_STORE_WALK, type EXPRESSION 
# COLUMN COUNT: 25

# for each involved DataFrame, append the dataframe name to each column
FIL_RFX_SWA_STORE_WALK_temp = FIL_RFX_SWA_STORE_WALK.toDF(*["FIL_RFX_SWA_STORE_WALK___" + col for col in FIL_RFX_SWA_STORE_WALK.columns])

EXP_RFX_SWA_STORE_WALK = FIL_RFX_SWA_STORE_WALK_temp.selectExpr(
	"FIL_RFX_SWA_STORE_WALK___sys_row_id as sys_row_id",
	"FIL_RFX_SWA_STORE_WALK___WALK_ID as WALK_ID",
	"FIL_RFX_SWA_STORE_WALK___LOCATION_ID as LOCATION_ID",
	"FIL_RFX_SWA_STORE_WALK___STORE_ID as STORE_ID",
	"FIL_RFX_SWA_STORE_WALK___STORE_NAME as STORE_NAME",
	"FIL_RFX_SWA_STORE_WALK___WALK_DATE_TIME as WALK_DATE_TIME",
	"FIL_RFX_SWA_STORE_WALK___WALK_TYPE_ID as WALK_TYPE_ID",
	"FIL_RFX_SWA_STORE_WALK___WALK_TYPE as WALK_TYPE",
	"FIL_RFX_SWA_STORE_WALK___WALK_PARTICIPANTS as WALK_PARTICIPANTS",
	"FIL_RFX_SWA_STORE_WALK___PASS_STATUS as PASS_STATUS",
	"FIL_RFX_SWA_STORE_WALK___POINTS_SCORED as POINTS_SCORED",
	"FIL_RFX_SWA_STORE_WALK___TOTAL_POINTS as TOTAL_POINTS",
	"FIL_RFX_SWA_STORE_WALK___SCORE_PCT as SCORE_PCT",
	"FIL_RFX_SWA_STORE_WALK___TASK_COUNT as TASK_COUNT",
	"FIL_RFX_SWA_STORE_WALK___WALK_OWNER_ID as WALK_OWNER_ID",
	"FIL_RFX_SWA_STORE_WALK___WALK_OWNER as WALK_OWNER",
	"FIL_RFX_SWA_STORE_WALK___WALK_PROJECT_ID as WALK_PROJECT_ID",
	"FIL_RFX_SWA_STORE_WALK___i_LOAD_TSTMP as i_LOAD_TSTMP",
	"FIL_RFX_SWA_STORE_WALK___i_RFX_WALK_ID as i_RFX_WALK_ID",
	"IF (FIL_RFX_SWA_STORE_WALK___i_RFX_WALK_ID IS NULL, 1, 2) as o_UPDATE_VALIDATOR",
	"CURRENT_TIMESTAMP as UPDATE_TSTMP",
	"IF (FIL_RFX_SWA_STORE_WALK___i_LOAD_TSTMP IS NULL, CURRENT_TIMESTAMP, FIL_RFX_SWA_STORE_WALK___i_LOAD_TSTMP) as LOAD_TSTMP",
	"FIL_RFX_SWA_STORE_WALK___TARGET_POINTS as TARGET_POINTS",
	"FIL_RFX_SWA_STORE_WALK___SUBMISSION_DATE_TIME as SUBMISSION_DATE_TIME",
	"FIL_RFX_SWA_STORE_WALK___SITE_MANAGER_ID as SITE_MANAGER_ID",
	"FIL_RFX_SWA_STORE_WALK___SITE_MANAGER_NAME as SITE_MANAGER_NAME"
)

# COMMAND ----------

# Processing node UPD_RFX_SWA_STORE_WALK, type UPDATE_STRATEGY 
# COLUMN COUNT: 23

# for each involved DataFrame, append the dataframe name to each column
EXP_RFX_SWA_STORE_WALK_temp = EXP_RFX_SWA_STORE_WALK.toDF(*["EXP_RFX_SWA_STORE_WALK___" + col for col in EXP_RFX_SWA_STORE_WALK.columns])

UPD_RFX_SWA_STORE_WALK = EXP_RFX_SWA_STORE_WALK_temp.selectExpr(
	"EXP_RFX_SWA_STORE_WALK___WALK_ID as WALK_ID",
	"EXP_RFX_SWA_STORE_WALK___LOCATION_ID as LOCATION_ID",
	"EXP_RFX_SWA_STORE_WALK___STORE_ID as STORE_ID",
	"EXP_RFX_SWA_STORE_WALK___STORE_NAME as STORE_NAME",
	"EXP_RFX_SWA_STORE_WALK___WALK_DATE_TIME as WALK_DATE_TIME",
	"EXP_RFX_SWA_STORE_WALK___WALK_TYPE_ID as WALK_TYPE_ID",
	"EXP_RFX_SWA_STORE_WALK___WALK_TYPE as WALK_TYPE",
	"EXP_RFX_SWA_STORE_WALK___WALK_PARTICIPANTS as WALK_PARTICIPANTS",
	"EXP_RFX_SWA_STORE_WALK___PASS_STATUS as PASS_STATUS",
	"EXP_RFX_SWA_STORE_WALK___POINTS_SCORED as POINTS_SCORED",
	"EXP_RFX_SWA_STORE_WALK___TOTAL_POINTS as TOTAL_POINTS",
	"EXP_RFX_SWA_STORE_WALK___SCORE_PCT as SCORE_PCT",
	"EXP_RFX_SWA_STORE_WALK___TASK_COUNT as TASK_COUNT",
	"EXP_RFX_SWA_STORE_WALK___WALK_OWNER_ID as WALK_OWNER_ID",
	"EXP_RFX_SWA_STORE_WALK___WALK_OWNER as WALK_OWNER",
	"EXP_RFX_SWA_STORE_WALK___WALK_PROJECT_ID as WALK_PROJECT_ID",
	"EXP_RFX_SWA_STORE_WALK___o_UPDATE_VALIDATOR as o_UPDATE_VALIDATOR",
	"EXP_RFX_SWA_STORE_WALK___UPDATE_TSTMP as UPDATE_TSTMP",
	"EXP_RFX_SWA_STORE_WALK___LOAD_TSTMP as LOAD_TSTMP",
	"EXP_RFX_SWA_STORE_WALK___TARGET_POINTS as TARGET_POINTS",
	"EXP_RFX_SWA_STORE_WALK___SUBMISSION_DATE_TIME as SUBMISSION_DATE_TIME",
	"EXP_RFX_SWA_STORE_WALK___SITE_MANAGER_ID as SITE_MANAGER_ID",
	"EXP_RFX_SWA_STORE_WALK___SITE_MANAGER_NAME as SITE_MANAGER_NAME") \
	.withColumn('pyspark_data_action', when(col("o_UPDATE_VALIDATOR") ==(lit(1)), lit(0)).when(col("o_UPDATE_VALIDATOR") ==(lit(2)), lit(1)))

# COMMAND ----------

# Processing node Shortcut_to_RFX_SWA_STORE_WALK, type TARGET 
# COLUMN COUNT: 22


Shortcut_to_RFX_SWA_STORE_WALK = UPD_RFX_SWA_STORE_WALK.selectExpr(
	"CAST(WALK_ID AS BIGINT) as RFX_WALK_ID",
	"CAST(WALK_DATE_TIME AS TIMESTAMP) as RFX_WALK_TSTMP",
	"CAST(SUBMISSION_DATE_TIME AS TIMESTAMP) as RFX_SUBMISSION_TSTMP",
	"CAST(LOCATION_ID AS INT) as LOCATION_ID",
	"CAST(STORE_ID AS STRING) as RFX_STORE_ID",
	"CAST(STORE_NAME AS STRING) as STORE_NAME",
	"CAST(WALK_PROJECT_ID AS STRING) as RFX_WALK_PROJECT_ID",
	"CAST(WALK_TYPE_ID AS INT) as RFX_WALK_TYPE_ID",
	"CAST(WALK_TYPE AS STRING) as RFX_WALK_TYPE_NAME",
	"CAST(WALK_PARTICIPANTS AS STRING) as RFX_WALK_PARTICIPANTS_NAME",
	"CAST(WALK_OWNER_ID AS STRING) as RFX_WALK_OWNER_ID",
	"CAST(WALK_OWNER AS STRING) as RFX_WALK_OWNER_NAME",
	"CAST(SITE_MANAGER_ID AS INT) as SITE_MANAGER_ID",
	"CAST(SITE_MANAGER_NAME AS STRING) as SITE_MANAGER_NAME",
	"CAST(TASK_COUNT AS SMALLINT) as RFX_TASK_CNT",
	"CAST(PASS_STATUS AS STRING) as RFX_PASS_STATUS_CD",
	"CAST(POINTS_SCORED AS DECIMAL(7,2)) as POINTS_SCORED",
	"CAST(TOTAL_POINTS AS DECIMAL(7,2)) as TOTAL_POINTS",
	"CAST(TARGET_POINTS AS DECIMAL(7,2)) as TARGET_POINTS",
	"CAST(SCORE_PCT AS DECIMAL(5,2)) as SCORE_PCT",
	"CAST(UPDATE_TSTMP AS TIMESTAMP) as UPDATE_TSTMP",
	"CAST(LOAD_TSTMP AS TIMESTAMP) as LOAD_TSTMP",
	"pyspark_data_action as pyspark_data_action"
)

try:
	primary_key = """source.RFX_WALK_ID = target.RFX_WALK_ID AND source.RFX_WALK_TYPE_ID = target.RFX_WALK_TYPE_ID"""
	refined_perf_table = f"{legacy}.RFX_SWA_STORE_WALK"
	executeMerge(Shortcut_to_RFX_SWA_STORE_WALK, refined_perf_table, primary_key)
	logger.info(f"Merge with {refined_perf_table} completed]")
	logPrevRunDt("RFX_SWA_STORE_WALK", "RFX_SWA_STORE_WALK", "Completed", "N/A", f"{raw}.log_run_details")
except Exception as e:
	logPrevRunDt("RFX_SWA_STORE_WALK", "RFX_SWA_STORE_WALK","Failed",str(e), f"{raw}.log_run_details")
	raise e
		

# COMMAND ----------


