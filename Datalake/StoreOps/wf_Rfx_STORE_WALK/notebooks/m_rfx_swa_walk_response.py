# Databricks notebook source
#Code converted on 2023-08-24 12:25:53
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from Datalake.utils.genericUtilities import *
from Datalake.utils.configs import *
from Datalake.utils.mergeUtils import *
from Datalake.utils.logger import *

# COMMAND ----------

# parser = argparse.ArgumentParser()
# parser.add_argument('env', type=str, help='Env Variable')
# args = parser.parse_args()
# env = args.env

spark = SparkSession.getActiveSession()
dbutils = DBUtils(spark)

dbutils.widgets.text(name='env', defaultValue='dev')
env = dbutils.widgets.get('env')

if env is None or env == '':
    raise ValueError('env is not set')

refine = getEnvPrefix(env) + 'refine'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'


# COMMAND ----------

# Processing node SQ_Shortcut_to_RFX_SWA_WALK_RESPONSE, type SOURCE 
# COLUMN COUNT: 22

SQ_Shortcut_to_RFX_SWA_WALK_RESPONSE = spark.sql(f"""SELECT
RFX_WALK_ID,
LOCATION_ID,
RFX_WALK_QUESTION_HANDLE,
RFX_WALK_SUB_QUESTION_NBR,
RFX_WALK_RESPONSE_TSTMP,
RFX_STORE_ID,
RFX_WALK_TYPE_ID,
RFX_WALK_GROUP_HANDLE,
RFX_WALK_QUESTION_TEXT,
RFX_WALK_SUB_QUESTION_TEXT,
RFX_WALK_RESPONSE_TYPE_CD,
OPTION_SELECTED,
OPTION_TEXT,
NUMERIC_VALUE,
TEXT_VALUE,
DATE_VALUE,
ATTACHMENT_COUNT,
COMMENTS,
POINTS_SCORED,
TOTAL_POINTS,
TARGET_POINTS,
LOAD_TSTMP
FROM {legacy}.RFX_SWA_WALK_RESPONSE""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------

# Processing node SQ_Shortcut_To_SITE_PROFILE, type SOURCE 
# COLUMN COUNT: 2

SQ_Shortcut_To_SITE_PROFILE = spark.sql(f"""SELECT DISTINCT
LOCATION_ID,
STORE_NBR
FROM {legacy}.SITE_PROFILE""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------

# Processing node SQ_Shortcut_to_RFX_WALK_RESPONSE_PRE, type SOURCE 
# COLUMN COUNT: 20

SQ_Shortcut_to_RFX_WALK_RESPONSE_PRE = spark.sql(f"""SELECT
WALK_ID,
WALK_TYPE_ID,
STORE_ID,
GROUP_HANDLE,
QUESTION_HANDLE,
SUB_QUESTION_NO,
RESPONSE_DATE,
QUESTION_TEXT,
SUB_QUESTION_TEXT,
RESPONSE_TYPE,
OPTION_SELECTED,
OPTION_TEXT,
NUMERIC_VALUE,
TEXT_VALUE,
DATE_VALUE,
ATTACHMENT_COUNT,
COMMENTS,
POINTS_SCORED,
TOTAL_POINTS,
TARGET_POINTS
FROM {raw}.RFX_WALK_RESPONSE_PRE""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------

# Processing node JNR_RFX_WALK_RESPONSE_PRE, type JOINER 
# COLUMN COUNT: 22

JNR_RFX_WALK_RESPONSE_PRE = SQ_Shortcut_to_RFX_WALK_RESPONSE_PRE.join(SQ_Shortcut_To_SITE_PROFILE,[SQ_Shortcut_to_RFX_WALK_RESPONSE_PRE.STORE_ID == SQ_Shortcut_To_SITE_PROFILE.STORE_NBR],'left_outer')

# COMMAND ----------

# Processing node JNR_RFX_SWA_WALK_RESPONSE, type JOINER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 43

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_RFX_SWA_WALK_RESPONSE_temp = SQ_Shortcut_to_RFX_SWA_WALK_RESPONSE.toDF(*["SQ_Shortcut_to_RFX_SWA_WALK_RESPONSE___" + col for col in SQ_Shortcut_to_RFX_SWA_WALK_RESPONSE.columns])
JNR_RFX_WALK_RESPONSE_PRE_temp = JNR_RFX_WALK_RESPONSE_PRE.toDF(*["JNR_RFX_WALK_RESPONSE_PRE___" + col for col in JNR_RFX_WALK_RESPONSE_PRE.columns])

JNR_RFX_SWA_WALK_RESPONSE = JNR_RFX_WALK_RESPONSE_PRE_temp.join(SQ_Shortcut_to_RFX_SWA_WALK_RESPONSE_temp,[JNR_RFX_WALK_RESPONSE_PRE_temp.JNR_RFX_WALK_RESPONSE_PRE___WALK_ID == SQ_Shortcut_to_RFX_SWA_WALK_RESPONSE_temp.SQ_Shortcut_to_RFX_SWA_WALK_RESPONSE___RFX_WALK_ID, JNR_RFX_WALK_RESPONSE_PRE_temp.JNR_RFX_WALK_RESPONSE_PRE___OPTION_SELECTED == SQ_Shortcut_to_RFX_SWA_WALK_RESPONSE_temp.SQ_Shortcut_to_RFX_SWA_WALK_RESPONSE___OPTION_SELECTED, JNR_RFX_WALK_RESPONSE_PRE_temp.JNR_RFX_WALK_RESPONSE_PRE___LOCATION_ID == SQ_Shortcut_to_RFX_SWA_WALK_RESPONSE_temp.SQ_Shortcut_to_RFX_SWA_WALK_RESPONSE___LOCATION_ID, JNR_RFX_WALK_RESPONSE_PRE_temp.JNR_RFX_WALK_RESPONSE_PRE___QUESTION_HANDLE == SQ_Shortcut_to_RFX_SWA_WALK_RESPONSE_temp.SQ_Shortcut_to_RFX_SWA_WALK_RESPONSE___RFX_WALK_QUESTION_HANDLE, JNR_RFX_WALK_RESPONSE_PRE_temp.JNR_RFX_WALK_RESPONSE_PRE___SUB_QUESTION_NO == SQ_Shortcut_to_RFX_SWA_WALK_RESPONSE_temp.SQ_Shortcut_to_RFX_SWA_WALK_RESPONSE___RFX_WALK_SUB_QUESTION_NBR, JNR_RFX_WALK_RESPONSE_PRE_temp.JNR_RFX_WALK_RESPONSE_PRE___RESPONSE_DATE == SQ_Shortcut_to_RFX_SWA_WALK_RESPONSE_temp.SQ_Shortcut_to_RFX_SWA_WALK_RESPONSE___RFX_WALK_RESPONSE_TSTMP, JNR_RFX_WALK_RESPONSE_PRE_temp.JNR_RFX_WALK_RESPONSE_PRE___GROUP_HANDLE == SQ_Shortcut_to_RFX_SWA_WALK_RESPONSE_temp.SQ_Shortcut_to_RFX_SWA_WALK_RESPONSE___RFX_WALK_GROUP_HANDLE],'left_outer').selectExpr(
	"JNR_RFX_WALK_RESPONSE_PRE___WALK_ID as WALK_ID",
	"JNR_RFX_WALK_RESPONSE_PRE___WALK_TYPE_ID as WALK_TYPE_ID",
	"JNR_RFX_WALK_RESPONSE_PRE___STORE_ID as STORE_ID",
	"JNR_RFX_WALK_RESPONSE_PRE___GROUP_HANDLE as GROUP_HANDLE",
	"JNR_RFX_WALK_RESPONSE_PRE___QUESTION_HANDLE as QUESTION_HANDLE",
	"JNR_RFX_WALK_RESPONSE_PRE___SUB_QUESTION_NO as SUB_QUESTION_NO",
	"JNR_RFX_WALK_RESPONSE_PRE___RESPONSE_DATE as RESPONSE_DATE",
	"JNR_RFX_WALK_RESPONSE_PRE___QUESTION_TEXT as QUESTION_TEXT",
	"JNR_RFX_WALK_RESPONSE_PRE___SUB_QUESTION_TEXT as SUB_QUESTION_TEXT",
	"JNR_RFX_WALK_RESPONSE_PRE___RESPONSE_TYPE as RESPONSE_TYPE",
	"JNR_RFX_WALK_RESPONSE_PRE___OPTION_SELECTED as OPTION_SELECTED",
	"JNR_RFX_WALK_RESPONSE_PRE___OPTION_TEXT as OPTION_TEXT",
	"JNR_RFX_WALK_RESPONSE_PRE___NUMERIC_VALUE as NUMERIC_VALUE",
	"JNR_RFX_WALK_RESPONSE_PRE___TEXT_VALUE as TEXT_VALUE",
	"JNR_RFX_WALK_RESPONSE_PRE___DATE_VALUE as DATE_VALUE",
	"JNR_RFX_WALK_RESPONSE_PRE___ATTACHMENT_COUNT as ATTACHMENT_COUNT",
	"JNR_RFX_WALK_RESPONSE_PRE___COMMENTS as COMMENTS",
	"JNR_RFX_WALK_RESPONSE_PRE___POINTS_SCORED as POINTS_SCORED",
	"JNR_RFX_WALK_RESPONSE_PRE___TOTAL_POINTS as TOTAL_POINTS",
	"JNR_RFX_WALK_RESPONSE_PRE___TARGET_POINTS as TARGET_POINTS",
	"JNR_RFX_WALK_RESPONSE_PRE___LOCATION_ID as LOCATION_ID",
	"SQ_Shortcut_to_RFX_SWA_WALK_RESPONSE___RFX_WALK_ID as i_RFX_WALK_ID",
	"SQ_Shortcut_to_RFX_SWA_WALK_RESPONSE___LOCATION_ID as i_LOCATION_ID",
	"SQ_Shortcut_to_RFX_SWA_WALK_RESPONSE___RFX_WALK_QUESTION_HANDLE as RFX_WALK_QUESTION_HANDLE",
	"SQ_Shortcut_to_RFX_SWA_WALK_RESPONSE___RFX_WALK_SUB_QUESTION_NBR as i_RFX_WALK_SUB_QUESTION_NBR",
	"SQ_Shortcut_to_RFX_SWA_WALK_RESPONSE___RFX_WALK_RESPONSE_TSTMP as i_RFX_WALK_RESPONSE_TSTMP",
	"SQ_Shortcut_to_RFX_SWA_WALK_RESPONSE___RFX_STORE_ID as i_RFX_STORE_ID",
	"SQ_Shortcut_to_RFX_SWA_WALK_RESPONSE___RFX_WALK_TYPE_ID as i_RFX_WALK_TYPE_ID",
	"SQ_Shortcut_to_RFX_SWA_WALK_RESPONSE___RFX_WALK_GROUP_HANDLE as i_RFX_WALK_GROUP_HANDLE",
	"SQ_Shortcut_to_RFX_SWA_WALK_RESPONSE___RFX_WALK_QUESTION_TEXT as i_RFX_WALK_QUESTION_TEXT",
	"SQ_Shortcut_to_RFX_SWA_WALK_RESPONSE___RFX_WALK_SUB_QUESTION_TEXT as i_RFX_WALK_SUB_QUESTION_TEXT",
	"SQ_Shortcut_to_RFX_SWA_WALK_RESPONSE___RFX_WALK_RESPONSE_TYPE_CD as i_RFX_WALK_RESPONSE_TYPE_CD",
	"SQ_Shortcut_to_RFX_SWA_WALK_RESPONSE___OPTION_SELECTED as i_OPTION_SELECTED",
	"SQ_Shortcut_to_RFX_SWA_WALK_RESPONSE___OPTION_TEXT as i_OPTION_TEXT",
	"SQ_Shortcut_to_RFX_SWA_WALK_RESPONSE___NUMERIC_VALUE as i_NUMERIC_VALUE",
	"SQ_Shortcut_to_RFX_SWA_WALK_RESPONSE___TEXT_VALUE as i_TEXT_VALUE",
	"SQ_Shortcut_to_RFX_SWA_WALK_RESPONSE___DATE_VALUE as i_DATE_VALUE",
	"SQ_Shortcut_to_RFX_SWA_WALK_RESPONSE___ATTACHMENT_COUNT as i_ATTACHMENT_COUNT",
	"SQ_Shortcut_to_RFX_SWA_WALK_RESPONSE___COMMENTS as i_COMMENTS",
	"SQ_Shortcut_to_RFX_SWA_WALK_RESPONSE___POINTS_SCORED as i_POINTS_SCORED",
	"SQ_Shortcut_to_RFX_SWA_WALK_RESPONSE___TOTAL_POINTS as i_TOTAL_POINTS",
	"SQ_Shortcut_to_RFX_SWA_WALK_RESPONSE___TARGET_POINTS as i_TARGET_POINTS",
	"SQ_Shortcut_to_RFX_SWA_WALK_RESPONSE___LOAD_TSTMP as i_LOAD_TSTMP")

# COMMAND ----------

# Processing node FIL_RFX_SWA_WALK_RESPONSE, type FILTER 
# COLUMN COUNT: 43

# for each involved DataFrame, append the dataframe name to each column
JNR_RFX_SWA_WALK_RESPONSE_temp = JNR_RFX_SWA_WALK_RESPONSE.toDF(*["JNR_RFX_SWA_WALK_RESPONSE___" + col for col in JNR_RFX_SWA_WALK_RESPONSE.columns])

FIL_RFX_SWA_WALK_RESPONSE = JNR_RFX_SWA_WALK_RESPONSE_temp.selectExpr(
	"JNR_RFX_SWA_WALK_RESPONSE___WALK_ID as WALK_ID",
	"JNR_RFX_SWA_WALK_RESPONSE___WALK_TYPE_ID as WALK_TYPE_ID",
	"JNR_RFX_SWA_WALK_RESPONSE___STORE_ID as STORE_ID",
	"JNR_RFX_SWA_WALK_RESPONSE___GROUP_HANDLE as GROUP_HANDLE",
	"JNR_RFX_SWA_WALK_RESPONSE___QUESTION_HANDLE as QUESTION_HANDLE",
	"JNR_RFX_SWA_WALK_RESPONSE___SUB_QUESTION_NO as SUB_QUESTION_NO",
	"JNR_RFX_SWA_WALK_RESPONSE___RESPONSE_DATE as RESPONSE_DATE",
	"JNR_RFX_SWA_WALK_RESPONSE___QUESTION_TEXT as QUESTION_TEXT",
	"JNR_RFX_SWA_WALK_RESPONSE___SUB_QUESTION_TEXT as SUB_QUESTION_TEXT",
	"JNR_RFX_SWA_WALK_RESPONSE___RESPONSE_TYPE as RESPONSE_TYPE",
	"JNR_RFX_SWA_WALK_RESPONSE___OPTION_SELECTED as OPTION_SELECTED",
	"JNR_RFX_SWA_WALK_RESPONSE___OPTION_TEXT as OPTION_TEXT",
	"JNR_RFX_SWA_WALK_RESPONSE___NUMERIC_VALUE as NUMERIC_VALUE",
	"JNR_RFX_SWA_WALK_RESPONSE___TEXT_VALUE as TEXT_VALUE",
	"JNR_RFX_SWA_WALK_RESPONSE___DATE_VALUE as DATE_VALUE",
	"JNR_RFX_SWA_WALK_RESPONSE___ATTACHMENT_COUNT as ATTACHMENT_COUNT",
	"JNR_RFX_SWA_WALK_RESPONSE___COMMENTS as COMMENTS",
	"JNR_RFX_SWA_WALK_RESPONSE___POINTS_SCORED as POINTS_SCORED",
	"JNR_RFX_SWA_WALK_RESPONSE___TOTAL_POINTS as TOTAL_POINTS",
	"JNR_RFX_SWA_WALK_RESPONSE___TARGET_POINTS as TARGET_POINTS",
	"JNR_RFX_SWA_WALK_RESPONSE___LOCATION_ID as LOCATION_ID",
	"JNR_RFX_SWA_WALK_RESPONSE___i_RFX_WALK_ID as i_RFX_WALK_ID",
	"JNR_RFX_SWA_WALK_RESPONSE___i_LOCATION_ID as i_LOCATION_ID",
	"JNR_RFX_SWA_WALK_RESPONSE___RFX_WALK_QUESTION_HANDLE as RFX_WALK_QUESTION_HANDLE",
	"JNR_RFX_SWA_WALK_RESPONSE___i_RFX_WALK_SUB_QUESTION_NBR as i_RFX_WALK_SUB_QUESTION_NBR",
	"JNR_RFX_SWA_WALK_RESPONSE___i_RFX_WALK_RESPONSE_TSTMP as i_RFX_WALK_RESPONSE_TSTMP",
	"JNR_RFX_SWA_WALK_RESPONSE___i_RFX_STORE_ID as i_RFX_STORE_ID",
	"JNR_RFX_SWA_WALK_RESPONSE___i_RFX_WALK_TYPE_ID as i_RFX_WALK_TYPE_ID",
	"JNR_RFX_SWA_WALK_RESPONSE___i_RFX_WALK_GROUP_HANDLE as i_RFX_WALK_GROUP_HANDLE",
	"JNR_RFX_SWA_WALK_RESPONSE___i_RFX_WALK_QUESTION_TEXT as i_RFX_WALK_QUESTION_TEXT",
	"JNR_RFX_SWA_WALK_RESPONSE___i_RFX_WALK_SUB_QUESTION_TEXT as i_RFX_WALK_SUB_QUESTION_TEXT",
	"JNR_RFX_SWA_WALK_RESPONSE___i_RFX_WALK_RESPONSE_TYPE_CD as i_RFX_WALK_RESPONSE_TYPE_CD",
	"JNR_RFX_SWA_WALK_RESPONSE___i_OPTION_SELECTED as i_OPTION_SELECTED",
	"JNR_RFX_SWA_WALK_RESPONSE___i_OPTION_TEXT as i_OPTION_TEXT",
	"JNR_RFX_SWA_WALK_RESPONSE___i_NUMERIC_VALUE as i_NUMERIC_VALUE",
	"JNR_RFX_SWA_WALK_RESPONSE___i_TEXT_VALUE as i_TEXT_VALUE",
	"JNR_RFX_SWA_WALK_RESPONSE___i_DATE_VALUE as i_DATE_VALUE",
	"JNR_RFX_SWA_WALK_RESPONSE___i_ATTACHMENT_COUNT as i_ATTACHMENT_COUNT",
	"JNR_RFX_SWA_WALK_RESPONSE___i_COMMENTS as i_COMMENTS",
	"JNR_RFX_SWA_WALK_RESPONSE___i_POINTS_SCORED as i_POINTS_SCORED",
	"JNR_RFX_SWA_WALK_RESPONSE___i_TOTAL_POINTS as i_TOTAL_POINTS",
	"JNR_RFX_SWA_WALK_RESPONSE___i_TARGET_POINTS as i_TARGET_POINTS",
	"JNR_RFX_SWA_WALK_RESPONSE___i_LOAD_TSTMP as i_LOAD_TSTMP").filter(
    expr(
        """
        ISNULL(i_RFX_WALK_ID) OR
        (
            NOT ISNULL(i_RFX_WALK_ID) AND (
                (ISNULL(i_RFX_STORE_ID) AND ISNULL(STORE_ID)) OR
                (i_RFX_STORE_ID != IF(ISNULL(STORE_ID), '', STORE_ID)) OR
                (i_RFX_WALK_TYPE_ID != IF(ISNULL(WALK_TYPE_ID), -9999, WALK_TYPE_ID)) OR
                (i_RFX_WALK_QUESTION_TEXT != IF(ISNULL(QUESTION_TEXT), '', QUESTION_TEXT)) OR
                (i_RFX_WALK_SUB_QUESTION_TEXT != IF(ISNULL(SUB_QUESTION_TEXT), '', SUB_QUESTION_TEXT)) OR
                (i_RFX_WALK_RESPONSE_TYPE_CD != IF(ISNULL(RESPONSE_TYPE), '', RESPONSE_TYPE)) OR
                (i_OPTION_TEXT != IF(ISNULL(OPTION_TEXT), '', OPTION_TEXT)) OR
                (i_NUMERIC_VALUE != IF(ISNULL(NUMERIC_VALUE), 0, NUMERIC_VALUE)) OR
                (i_TEXT_VALUE != IF(ISNULL(TEXT_VALUE), '', TEXT_VALUE)) OR
                (i_DATE_VALUE != IF(ISNULL(DATE_VALUE), TO_DATE('1901-01-01', 'yyyy-MM-dd'), DATE_VALUE)) OR
                (i_ATTACHMENT_COUNT != IF(ISNULL(ATTACHMENT_COUNT), -9999, ATTACHMENT_COUNT)) OR
                (i_COMMENTS != IF(ISNULL(COMMENTS), '', COMMENTS)) OR
                (i_POINTS_SCORED != IF(ISNULL(POINTS_SCORED), 0, POINTS_SCORED)) OR
                (i_TOTAL_POINTS != IF(ISNULL(TOTAL_POINTS), 0, TOTAL_POINTS)) OR
                (i_TARGET_POINTS != IF(ISNULL(TARGET_POINTS), 0, TARGET_POINTS))
            )
        )
        """
    )
).withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------

# Processing node EXP_RFX_SWA_WALK_RESPONSE, type EXPRESSION 
# COLUMN COUNT: 26

# for each involved DataFrame, append the dataframe name to each column
FIL_RFX_SWA_WALK_RESPONSE_temp = FIL_RFX_SWA_WALK_RESPONSE.toDF(*["FIL_RFX_SWA_WALK_RESPONSE___" + col for col in FIL_RFX_SWA_WALK_RESPONSE.columns])

EXP_RFX_SWA_WALK_RESPONSE = FIL_RFX_SWA_WALK_RESPONSE_temp.selectExpr(
	"FIL_RFX_SWA_WALK_RESPONSE___sys_row_id as sys_row_id",
	"FIL_RFX_SWA_WALK_RESPONSE___WALK_ID as WALK_ID",
	"FIL_RFX_SWA_WALK_RESPONSE___WALK_TYPE_ID as WALK_TYPE_ID",
	"FIL_RFX_SWA_WALK_RESPONSE___STORE_ID as STORE_ID",
	"FIL_RFX_SWA_WALK_RESPONSE___GROUP_HANDLE as GROUP_HANDLE",
	"FIL_RFX_SWA_WALK_RESPONSE___QUESTION_HANDLE as QUESTION_HANDLE",
	"FIL_RFX_SWA_WALK_RESPONSE___SUB_QUESTION_NO as SUB_QUESTION_NO",
	"FIL_RFX_SWA_WALK_RESPONSE___RESPONSE_DATE as RESPONSE_DATE",
	"FIL_RFX_SWA_WALK_RESPONSE___QUESTION_TEXT as QUESTION_TEXT",
	"FIL_RFX_SWA_WALK_RESPONSE___SUB_QUESTION_TEXT as SUB_QUESTION_TEXT",
	"FIL_RFX_SWA_WALK_RESPONSE___RESPONSE_TYPE as RESPONSE_TYPE",
	"FIL_RFX_SWA_WALK_RESPONSE___OPTION_SELECTED as OPTION_SELECTED",
	"FIL_RFX_SWA_WALK_RESPONSE___OPTION_TEXT as OPTION_TEXT",
	"FIL_RFX_SWA_WALK_RESPONSE___NUMERIC_VALUE as NUMERIC_VALUE",
	"FIL_RFX_SWA_WALK_RESPONSE___TEXT_VALUE as TEXT_VALUE",
	"FIL_RFX_SWA_WALK_RESPONSE___DATE_VALUE as DATE_VALUE",
	"FIL_RFX_SWA_WALK_RESPONSE___ATTACHMENT_COUNT as ATTACHMENT_COUNT",
	"FIL_RFX_SWA_WALK_RESPONSE___COMMENTS as COMMENTS",
	"FIL_RFX_SWA_WALK_RESPONSE___POINTS_SCORED as POINTS_SCORED",
	"FIL_RFX_SWA_WALK_RESPONSE___TOTAL_POINTS as TOTAL_POINTS",
	"FIL_RFX_SWA_WALK_RESPONSE___TARGET_POINTS as TARGET_POINTS",
	"FIL_RFX_SWA_WALK_RESPONSE___LOCATION_ID as LOCATION_ID",
	"FIL_RFX_SWA_WALK_RESPONSE___i_RFX_WALK_ID as i_RFX_WALK_ID",
	"FIL_RFX_SWA_WALK_RESPONSE___i_LOAD_TSTMP as i_LOAD_TSTMP",
	"IF (FIL_RFX_SWA_WALK_RESPONSE___i_RFX_WALK_ID IS NULL, 1, 2) as o_UPDATE_VALIDATOR",
	"CURRENT_TIMESTAMP as UPDATE_TSTMP",
	"IF (FIL_RFX_SWA_WALK_RESPONSE___i_LOAD_TSTMP IS NULL, CURRENT_TIMESTAMP, FIL_RFX_SWA_WALK_RESPONSE___i_LOAD_TSTMP) as LOAD_TSTMP"
)

# COMMAND ----------

# Processing node UPD_RFX_SWA_WALK_RESPONSE, type UPDATE_STRATEGY 
# COLUMN COUNT: 24

# for each involved DataFrame, append the dataframe name to each column
EXP_RFX_SWA_WALK_RESPONSE_temp = EXP_RFX_SWA_WALK_RESPONSE.toDF(*["EXP_RFX_SWA_WALK_RESPONSE___" + col for col in EXP_RFX_SWA_WALK_RESPONSE.columns])

UPD_RFX_SWA_WALK_RESPONSE = EXP_RFX_SWA_WALK_RESPONSE_temp.selectExpr(
	"EXP_RFX_SWA_WALK_RESPONSE___WALK_ID as WALK_ID",
	"EXP_RFX_SWA_WALK_RESPONSE___WALK_TYPE_ID as WALK_TYPE_ID",
	"EXP_RFX_SWA_WALK_RESPONSE___STORE_ID as STORE_ID",
	"EXP_RFX_SWA_WALK_RESPONSE___GROUP_HANDLE as GROUP_HANDLE",
	"EXP_RFX_SWA_WALK_RESPONSE___QUESTION_HANDLE as QUESTION_HANDLE",
	"EXP_RFX_SWA_WALK_RESPONSE___SUB_QUESTION_NO as SUB_QUESTION_NO",
	"EXP_RFX_SWA_WALK_RESPONSE___RESPONSE_DATE as RESPONSE_DATE",
	"EXP_RFX_SWA_WALK_RESPONSE___QUESTION_TEXT as QUESTION_TEXT",
	"EXP_RFX_SWA_WALK_RESPONSE___SUB_QUESTION_TEXT as SUB_QUESTION_TEXT",
	"EXP_RFX_SWA_WALK_RESPONSE___RESPONSE_TYPE as RESPONSE_TYPE",
	"EXP_RFX_SWA_WALK_RESPONSE___OPTION_SELECTED as OPTION_SELECTED",
	"EXP_RFX_SWA_WALK_RESPONSE___OPTION_TEXT as OPTION_TEXT",
	"EXP_RFX_SWA_WALK_RESPONSE___NUMERIC_VALUE as NUMERIC_VALUE",
	"EXP_RFX_SWA_WALK_RESPONSE___TEXT_VALUE as TEXT_VALUE",
	"EXP_RFX_SWA_WALK_RESPONSE___DATE_VALUE as DATE_VALUE",
	"EXP_RFX_SWA_WALK_RESPONSE___ATTACHMENT_COUNT as ATTACHMENT_COUNT",
	"EXP_RFX_SWA_WALK_RESPONSE___COMMENTS as COMMENTS",
	"EXP_RFX_SWA_WALK_RESPONSE___POINTS_SCORED as POINTS_SCORED",
	"EXP_RFX_SWA_WALK_RESPONSE___TOTAL_POINTS as TOTAL_POINTS",
	"EXP_RFX_SWA_WALK_RESPONSE___TARGET_POINTS as TARGET_POINTS",
	"EXP_RFX_SWA_WALK_RESPONSE___LOCATION_ID as LOCATION_ID",
	"EXP_RFX_SWA_WALK_RESPONSE___o_UPDATE_VALIDATOR as o_UPDATE_VALIDATOR",
	"EXP_RFX_SWA_WALK_RESPONSE___UPDATE_TSTMP as UPDATE_TSTMP",
	"EXP_RFX_SWA_WALK_RESPONSE___LOAD_TSTMP as LOAD_TSTMP") \
  .withColumn('pyspark_data_action', when(col("o_UPDATE_VALIDATOR") ==(lit(1)), lit(0)).when(col("o_UPDATE_VALIDATOR") ==(lit(2)), lit(1)))

# COMMAND ----------

# Processing node Shortcut_to_RFX_SWA_WALK_RESPONSE, type TARGET 
# COLUMN COUNT: 23


Shortcut_to_RFX_SWA_WALK_RESPONSE = UPD_RFX_SWA_WALK_RESPONSE.selectExpr(
	"CAST(WALK_ID AS BIGINT) as RFX_WALK_ID",
	"CAST(LOCATION_ID AS INT) as LOCATION_ID",
	"CAST(GROUP_HANDLE AS STRING) as RFX_WALK_GROUP_HANDLE",
	"CAST(QUESTION_HANDLE AS STRING) as RFX_WALK_QUESTION_HANDLE",
	"CAST(SUB_QUESTION_NO AS SMALLINT) as RFX_WALK_SUB_QUESTION_NBR",
	"CAST(RESPONSE_DATE AS TIMESTAMP) as RFX_WALK_RESPONSE_TSTMP",
	"CAST(STORE_ID AS STRING) as RFX_STORE_ID",
	"CAST(WALK_TYPE_ID AS INT) as RFX_WALK_TYPE_ID",
	"CAST(QUESTION_TEXT AS STRING) as RFX_WALK_QUESTION_TEXT",
	"CAST(SUB_QUESTION_TEXT AS STRING) as RFX_WALK_SUB_QUESTION_TEXT",
	"CAST(RESPONSE_TYPE AS STRING) as RFX_WALK_RESPONSE_TYPE_CD",
	"CAST(OPTION_SELECTED AS SMALLINT) as OPTION_SELECTED",
	"CAST(OPTION_TEXT AS STRING) as OPTION_TEXT",
	"CAST(NUMERIC_VALUE AS DECIMAL(22,4)) as NUMERIC_VALUE",
	"CAST(TEXT_VALUE AS STRING) as TEXT_VALUE",
	"CAST(DATE_VALUE AS TIMESTAMP) as DATE_VALUE",
	"CAST(ATTACHMENT_COUNT AS SMALLINT) as ATTACHMENT_COUNT",
	"CAST(COMMENTS AS STRING) as COMMENTS",
	"CAST(POINTS_SCORED AS DECIMAL(7,2)) as POINTS_SCORED",
	"CAST(TOTAL_POINTS AS DECIMAL(7,2)) as TOTAL_POINTS",
	"CAST(TARGET_POINTS AS DECIMAL(7,2)) as TARGET_POINTS",
	"CAST(UPDATE_TSTMP AS TIMESTAMP) as UPDATE_TSTMP",
	"CAST(LOAD_TSTMP AS TIMESTAMP) as LOAD_TSTMP",
	"pyspark_data_action as pyspark_data_action"
)

try:
	primary_key = """source.RFX_WALK_ID = target.RFX_WALK_ID AND source.LOCATION_ID = target.LOCATION_ID AND source.RFX_WALK_GROUP_HANDLE = target.RFX_WALK_GROUP_HANDLE AND source.RFX_WALK_QUESTION_HANDLE = target.RFX_WALK_QUESTION_HANDLE AND source.RFX_WALK_SUB_QUESTION_NBR = target.RFX_WALK_SUB_QUESTION_NBR AND source.RFX_WALK_RESPONSE_TSTMP = target.RFX_WALK_RESPONSE_TSTMP AND source.OPTION_SELECTED = target.OPTION_SELECTED"""
	refined_perf_table = f"{legacy}.RFX_SWA_WALK_RESPONSE"
	executeMerge(Shortcut_to_RFX_SWA_WALK_RESPONSE, refined_perf_table, primary_key)
	logger.info(f"Merge with {refined_perf_table} completed]")
	logPrevRunDt("RFX_SWA_WALK_RESPONSE", "RFX_SWA_WALK_RESPONSE", "Completed", "N/A", f"{raw}.log_run_details")
except Exception as e:
	logPrevRunDt("RFX_SWA_WALK_RESPONSE", "RFX_SWA_WALK_RESPONSE","Failed",str(e), f"{raw}.log_run_details")
	raise e
		

# COMMAND ----------


