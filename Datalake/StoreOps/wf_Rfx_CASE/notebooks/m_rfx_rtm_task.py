# Databricks notebook source
# Code converted on 2023-08-25 11:50:49
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from Datalake.utils.genericUtilities import *
from Datalake.utils.configs import *
from Datalake.utils.mergeUtils import *
from Datalake.utils.logger import *

# COMMAND ----------

spark = SparkSession.getActiveSession()
dbutils = DBUtils(spark)

dbutils.widgets.text(name="env", defaultValue="dev")
env = dbutils.widgets.get("env")

if env is None or env == '':
    raise ValueError('env is not set')

refine = getEnvPrefix(env) + 'refine'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'


# COMMAND ----------

# Processing node SQ_Shortcut_to_RFX_TASK_PRE, type SOURCE 
# COLUMN COUNT: 19

SQ_Shortcut_to_RFX_TASK_PRE = spark.sql(f"""SELECT
RFX_TASK_PRE.PROJECT_ID,
RFX_TASK_PRE.UNIT_ID,
RFX_TASK_PRE.TASK_ID,
RFX_TASK_PRE.SEQUENCE_NO,
RFX_TASK_PRE.TASK_TITLE,
RFX_TASK_PRE.EXECUTION_ASSIGNED_DEPT,
RFX_TASK_PRE.EXECUTION_ASSIGNED_ROLE,
RFX_TASK_PRE.ASSIGNED_USER_ID,
RFX_TASK_PRE.ASSIGNED_USER,
RFX_TASK_PRE.TASK_EXECUTION_START_DATE,
RFX_TASK_PRE.TASK_EXECUTION_END_DATE,
RFX_TASK_PRE.STATUS,
RFX_TASK_PRE.ESTIMATED_EFFORT_HOURS,
RFX_TASK_PRE.TASK_EXECUTION_COMPLETION_DATE,
RFX_TASK_PRE.ON_TIME_COMPLETION_INDICATOR,
RFX_TASK_PRE.TASK_ASSIGNED_DEPT,
RFX_TASK_PRE.TASK_ASSIGNED_ROLE,
RFX_TASK_PRE.LAST_USER_ID,
RFX_TASK_PRE.LAST_UPDATED_BY_USER
FROM {raw}.RFX_TASK_PRE""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------

# Processing node SQ_Shortcut_to_RFX_RTM_TASK, type SOURCE 
# COLUMN COUNT: 21

SQ_Shortcut_to_RFX_RTM_TASK = spark.sql(f"""SELECT
RFX_RTM_TASK.RFX_PROJECT_ID,
RFX_RTM_TASK.LOCATION_ID,
RFX_RTM_TASK.RFX_TASK_ID,
RFX_RTM_TASK.RFX_TASK_SEQ_NBR,
RFX_RTM_TASK.RFX_UNIT_ID,
RFX_RTM_TASK.RFX_TASK_DESC,
RFX_RTM_TASK.RFX_EXECUTION_ASSIGNED_DEPT_CD,
RFX_RTM_TASK.RFX_EXECUTION_ASSIGNED_ROLE_CD,
RFX_RTM_TASK.RFX_ASSIGNED_USER_ID,
RFX_RTM_TASK.RFX_ASSIGNED_USER_NAME,
RFX_RTM_TASK.RFX_TASK_EXECUTION_START_TSTMP,
RFX_RTM_TASK.RFX_TASK_EXECUTION_END_TSTMP,
RFX_RTM_TASK.RFX_TASK_STATUS,
RFX_RTM_TASK.EST_EFFORT_HOURS,
RFX_RTM_TASK.RFX_TASK_EXECUTION_COMPLETION_TSTMP,
RFX_RTM_TASK.ON_TIME_COMPLETION_FLAG,
RFX_RTM_TASK.RFX_TASK_ASSIGNED_DEPT_CD,
RFX_RTM_TASK.RFX_TASK_ASSIGNED_ROLE_CD,
RFX_RTM_TASK.RFX_LAST_USER_ID,
RFX_RTM_TASK.RFX_LAST_UPDATED_USER_NAME,
RFX_RTM_TASK.LOAD_TSTMP
FROM {legacy}.RFX_RTM_TASK""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------

# Processing node SQ_Shortcut_to_RFX_RTM_UNIT_HIERARCHY, type SOURCE 
# COLUMN COUNT: 2

SQ_Shortcut_to_RFX_RTM_UNIT_HIERARCHY = spark.sql(f"""SELECT
RFX_RTM_UNIT_HIERARCHY.RFX_UNIT_ID,
RFX_RTM_UNIT_HIERARCHY.LOCATION_ID
FROM {legacy}.RFX_RTM_UNIT_HIERARCHY""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------

# Processing node JNR_RFX_TASK_PRE, type JOINER 
# COLUMN COUNT: 21

JNR_RFX_TASK_PRE = SQ_Shortcut_to_RFX_TASK_PRE.join(SQ_Shortcut_to_RFX_RTM_UNIT_HIERARCHY,[SQ_Shortcut_to_RFX_TASK_PRE.UNIT_ID == SQ_Shortcut_to_RFX_RTM_UNIT_HIERARCHY.RFX_UNIT_ID],'inner')

# COMMAND ----------

# Processing node JNR_RFX_RTM_TASK, type JOINER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 41

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_RFX_RTM_TASK_temp = SQ_Shortcut_to_RFX_RTM_TASK.toDF(*["SQ_Shortcut_to_RFX_RTM_TASK___" + col for col in SQ_Shortcut_to_RFX_RTM_TASK.columns])
JNR_RFX_TASK_PRE_temp = JNR_RFX_TASK_PRE.toDF(*["JNR_RFX_TASK_PRE___" + col for col in JNR_RFX_TASK_PRE.columns])

JNR_RFX_RTM_TASK = JNR_RFX_TASK_PRE_temp.join(SQ_Shortcut_to_RFX_RTM_TASK_temp,[JNR_RFX_TASK_PRE_temp.JNR_RFX_TASK_PRE___PROJECT_ID == SQ_Shortcut_to_RFX_RTM_TASK_temp.SQ_Shortcut_to_RFX_RTM_TASK___RFX_PROJECT_ID, JNR_RFX_TASK_PRE_temp.JNR_RFX_TASK_PRE___TASK_ID == SQ_Shortcut_to_RFX_RTM_TASK_temp.SQ_Shortcut_to_RFX_RTM_TASK___RFX_TASK_ID, JNR_RFX_TASK_PRE_temp.JNR_RFX_TASK_PRE___SEQUENCE_NO == SQ_Shortcut_to_RFX_RTM_TASK_temp.SQ_Shortcut_to_RFX_RTM_TASK___RFX_TASK_SEQ_NBR, JNR_RFX_TASK_PRE_temp.JNR_RFX_TASK_PRE___LOCATION_ID == SQ_Shortcut_to_RFX_RTM_TASK_temp.SQ_Shortcut_to_RFX_RTM_TASK___LOCATION_ID, JNR_RFX_TASK_PRE_temp.JNR_RFX_TASK_PRE___ASSIGNED_USER_ID == SQ_Shortcut_to_RFX_RTM_TASK_temp.SQ_Shortcut_to_RFX_RTM_TASK___RFX_ASSIGNED_USER_ID, JNR_RFX_TASK_PRE_temp.JNR_RFX_TASK_PRE___ASSIGNED_USER == SQ_Shortcut_to_RFX_RTM_TASK_temp.SQ_Shortcut_to_RFX_RTM_TASK___RFX_ASSIGNED_USER_NAME],'left_outer').selectExpr(
	"JNR_RFX_TASK_PRE___PROJECT_ID as PROJECT_ID",
	"JNR_RFX_TASK_PRE___UNIT_ID as UNIT_ID",
	"JNR_RFX_TASK_PRE___TASK_ID as TASK_ID",
	"JNR_RFX_TASK_PRE___SEQUENCE_NO as SEQUENCE_NO",
	"JNR_RFX_TASK_PRE___TASK_TITLE as TASK_TITLE",
	"JNR_RFX_TASK_PRE___EXECUTION_ASSIGNED_DEPT as EXECUTION_ASSIGNED_DEPT",
	"JNR_RFX_TASK_PRE___EXECUTION_ASSIGNED_ROLE as EXECUTION_ASSIGNED_ROLE",
	"JNR_RFX_TASK_PRE___ASSIGNED_USER_ID as ASSIGNED_USER_ID",
	"JNR_RFX_TASK_PRE___ASSIGNED_USER as ASSIGNED_USER",
	"JNR_RFX_TASK_PRE___TASK_EXECUTION_START_DATE as TASK_EXECUTION_START_DATE",
	"JNR_RFX_TASK_PRE___TASK_EXECUTION_END_DATE as TASK_EXECUTION_END_DATE",
	"JNR_RFX_TASK_PRE___STATUS as STATUS",
	"JNR_RFX_TASK_PRE___ESTIMATED_EFFORT_HOURS as ESTIMATED_EFFORT_HOURS",
	"JNR_RFX_TASK_PRE___TASK_EXECUTION_COMPLETION_DATE as TASK_EXECUTION_COMPLETION_DATE",
	"JNR_RFX_TASK_PRE___ON_TIME_COMPLETION_INDICATOR as ON_TIME_COMPLETION_INDICATOR",
	"JNR_RFX_TASK_PRE___TASK_ASSIGNED_DEPT as TASK_ASSIGNED_DEPT",
	"JNR_RFX_TASK_PRE___TASK_ASSIGNED_ROLE as TASK_ASSIGNED_ROLE",
	"JNR_RFX_TASK_PRE___LAST_USER_ID as LAST_USER_ID",
	"JNR_RFX_TASK_PRE___LAST_UPDATED_BY_USER as LAST_UPDATED_BY_USER",
	"JNR_RFX_TASK_PRE___LOCATION_ID as LOCATION_ID",
	"SQ_Shortcut_to_RFX_RTM_TASK___RFX_PROJECT_ID as i_RFX_PROJECT_ID",
	"SQ_Shortcut_to_RFX_RTM_TASK___LOCATION_ID as i_LOCATION_ID",
	"SQ_Shortcut_to_RFX_RTM_TASK___RFX_TASK_ID as i_RFX_TASK_ID",
	"SQ_Shortcut_to_RFX_RTM_TASK___RFX_TASK_SEQ_NBR as i_RFX_TASK_SEQ_NBR",
	"SQ_Shortcut_to_RFX_RTM_TASK___RFX_UNIT_ID as i_RFX_UNIT_ID",
	"SQ_Shortcut_to_RFX_RTM_TASK___RFX_TASK_DESC as i_RFX_TASK_DESC",
	"SQ_Shortcut_to_RFX_RTM_TASK___RFX_EXECUTION_ASSIGNED_DEPT_CD as i_RFX_EXECUTION_ASSIGNED_DEPT_CD",
	"SQ_Shortcut_to_RFX_RTM_TASK___RFX_EXECUTION_ASSIGNED_ROLE_CD as i_RFX_EXECUTION_ASSIGNED_ROLE_CD",
	"SQ_Shortcut_to_RFX_RTM_TASK___RFX_ASSIGNED_USER_ID as i_RFX_ASSIGNED_USER_ID",
	"SQ_Shortcut_to_RFX_RTM_TASK___RFX_ASSIGNED_USER_NAME as i_RFX_ASSIGNED_USER_NAME",
	"SQ_Shortcut_to_RFX_RTM_TASK___RFX_TASK_EXECUTION_START_TSTMP as i_RFX_TASK_EXECUTION_START_TSTMP",
	"SQ_Shortcut_to_RFX_RTM_TASK___RFX_TASK_EXECUTION_END_TSTMP as i_RFX_TASK_EXECUTION_END_TSTMP",
	"SQ_Shortcut_to_RFX_RTM_TASK___RFX_TASK_STATUS as i_RFX_TASK_STATUS",
	"SQ_Shortcut_to_RFX_RTM_TASK___EST_EFFORT_HOURS as i_EST_EFFORT_HOURS",
	"SQ_Shortcut_to_RFX_RTM_TASK___RFX_TASK_EXECUTION_COMPLETION_TSTMP as i_RFX_TASK_EXECUTION_COMPLETION_TSTMP",
	"SQ_Shortcut_to_RFX_RTM_TASK___ON_TIME_COMPLETION_FLAG as i_ON_TIME_COMPLETION_FLAG",
	"SQ_Shortcut_to_RFX_RTM_TASK___RFX_TASK_ASSIGNED_DEPT_CD as i_RFX_TASK_ASSIGNED_DEPT_CD",
	"SQ_Shortcut_to_RFX_RTM_TASK___RFX_TASK_ASSIGNED_ROLE_CD as i_RFX_TASK_ASSIGNED_ROLE_CD",
	"SQ_Shortcut_to_RFX_RTM_TASK___RFX_LAST_USER_ID as i_RFX_LAST_USER_ID",
	"SQ_Shortcut_to_RFX_RTM_TASK___RFX_LAST_UPDATED_USER_NAME as i_RFX_LAST_UPDATED_USER_NAME",
	"SQ_Shortcut_to_RFX_RTM_TASK___LOAD_TSTMP as i_LOAD_TSTMP")

# COMMAND ----------

# Processing node FIL_RFX_RTM_TASK, type FILTER 
# COLUMN COUNT: 41

# for each involved DataFrame, append the dataframe name to each column
JNR_RFX_RTM_TASK_temp = JNR_RFX_RTM_TASK.toDF(*["JNR_RFX_RTM_TASK___" + col for col in JNR_RFX_RTM_TASK.columns])

FIL_RFX_RTM_TASK = JNR_RFX_RTM_TASK_temp.selectExpr(
	"JNR_RFX_RTM_TASK___PROJECT_ID as PROJECT_ID",
	"JNR_RFX_RTM_TASK___UNIT_ID as UNIT_ID",
	"JNR_RFX_RTM_TASK___TASK_ID as TASK_ID",
	"JNR_RFX_RTM_TASK___SEQUENCE_NO as SEQUENCE_NO",
	"JNR_RFX_RTM_TASK___TASK_TITLE as TASK_TITLE",
	"JNR_RFX_RTM_TASK___EXECUTION_ASSIGNED_DEPT as EXECUTION_ASSIGNED_DEPT",
	"JNR_RFX_RTM_TASK___EXECUTION_ASSIGNED_ROLE as EXECUTION_ASSIGNED_ROLE",
	"JNR_RFX_RTM_TASK___ASSIGNED_USER_ID as ASSIGNED_USER_ID",
	"JNR_RFX_RTM_TASK___ASSIGNED_USER as ASSIGNED_USER",
	"JNR_RFX_RTM_TASK___TASK_EXECUTION_START_DATE as TASK_EXECUTION_START_DATE",
	"JNR_RFX_RTM_TASK___TASK_EXECUTION_END_DATE as TASK_EXECUTION_END_DATE",
	"JNR_RFX_RTM_TASK___STATUS as STATUS",
	"JNR_RFX_RTM_TASK___ESTIMATED_EFFORT_HOURS as ESTIMATED_EFFORT_HOURS",
	"JNR_RFX_RTM_TASK___TASK_EXECUTION_COMPLETION_DATE as TASK_EXECUTION_COMPLETION_DATE",
	"JNR_RFX_RTM_TASK___ON_TIME_COMPLETION_INDICATOR as ON_TIME_COMPLETION_INDICATOR",
	"JNR_RFX_RTM_TASK___TASK_ASSIGNED_DEPT as TASK_ASSIGNED_DEPT",
	"JNR_RFX_RTM_TASK___TASK_ASSIGNED_ROLE as TASK_ASSIGNED_ROLE",
	"JNR_RFX_RTM_TASK___LAST_USER_ID as LAST_USER_ID",
	"JNR_RFX_RTM_TASK___LAST_UPDATED_BY_USER as LAST_UPDATED_BY_USER",
	"JNR_RFX_RTM_TASK___LOCATION_ID as LOCATION_ID",
	"JNR_RFX_RTM_TASK___i_RFX_PROJECT_ID as i_RFX_PROJECT_ID",
	"JNR_RFX_RTM_TASK___i_LOCATION_ID as i_LOCATION_ID",
	"JNR_RFX_RTM_TASK___i_RFX_TASK_ID as i_RFX_TASK_ID",
	"JNR_RFX_RTM_TASK___i_RFX_TASK_SEQ_NBR as i_RFX_TASK_SEQ_NBR",
	"JNR_RFX_RTM_TASK___i_RFX_UNIT_ID as i_RFX_UNIT_ID",
	"JNR_RFX_RTM_TASK___i_RFX_TASK_DESC as i_RFX_TASK_DESC",
	"JNR_RFX_RTM_TASK___i_RFX_EXECUTION_ASSIGNED_DEPT_CD as i_RFX_EXECUTION_ASSIGNED_DEPT_CD",
	"JNR_RFX_RTM_TASK___i_RFX_EXECUTION_ASSIGNED_ROLE_CD as i_RFX_EXECUTION_ASSIGNED_ROLE_CD",
	"JNR_RFX_RTM_TASK___i_RFX_ASSIGNED_USER_ID as i_RFX_ASSIGNED_USER_ID",
	"JNR_RFX_RTM_TASK___i_RFX_ASSIGNED_USER_NAME as i_RFX_ASSIGNED_USER_NAME",
	"JNR_RFX_RTM_TASK___i_RFX_TASK_EXECUTION_START_TSTMP as i_RFX_TASK_EXECUTION_START_TSTMP",
	"JNR_RFX_RTM_TASK___i_RFX_TASK_EXECUTION_END_TSTMP as i_RFX_TASK_EXECUTION_END_TSTMP",
	"JNR_RFX_RTM_TASK___i_RFX_TASK_STATUS as i_RFX_TASK_STATUS",
	"JNR_RFX_RTM_TASK___i_EST_EFFORT_HOURS as i_EST_EFFORT_HOURS",
	"JNR_RFX_RTM_TASK___i_RFX_TASK_EXECUTION_COMPLETION_TSTMP as i_RFX_TASK_EXECUTION_COMPLETION_TSTMP",
	"JNR_RFX_RTM_TASK___i_ON_TIME_COMPLETION_FLAG as i_ON_TIME_COMPLETION_FLAG",
	"JNR_RFX_RTM_TASK___i_RFX_TASK_ASSIGNED_DEPT_CD as i_RFX_TASK_ASSIGNED_DEPT_CD",
	"JNR_RFX_RTM_TASK___i_RFX_TASK_ASSIGNED_ROLE_CD as i_RFX_TASK_ASSIGNED_ROLE_CD",
	"JNR_RFX_RTM_TASK___i_RFX_LAST_USER_ID as i_RFX_LAST_USER_ID",
	"JNR_RFX_RTM_TASK___i_RFX_LAST_UPDATED_USER_NAME as i_RFX_LAST_UPDATED_USER_NAME",
	"JNR_RFX_RTM_TASK___i_LOAD_TSTMP as i_LOAD_TSTMP").filter("i_RFX_PROJECT_ID IS NULL AND i_LOCATION_ID IS NULL AND i_RFX_TASK_ID IS NULL AND i_RFX_TASK_SEQ_NBR IS NULL OR ( i_RFX_PROJECT_ID IS NOT NULL AND i_LOCATION_ID IS NOT NULL AND i_RFX_TASK_ID IS NOT NULL AND i_RFX_TASK_SEQ_NBR IS NOT NULL AND ( IF (TASK_TITLE IS NULL, '', TASK_TITLE) != IF (i_RFX_TASK_DESC IS NULL, '', i_RFX_TASK_DESC) OR IF (UNIT_ID IS NULL, '', UNIT_ID) != IF (i_RFX_UNIT_ID IS NULL, '', i_RFX_UNIT_ID) OR IF (EXECUTION_ASSIGNED_DEPT IS NULL, '', EXECUTION_ASSIGNED_DEPT) != IF (i_RFX_EXECUTION_ASSIGNED_DEPT_CD IS NULL, '', i_RFX_EXECUTION_ASSIGNED_DEPT_CD) OR IF (EXECUTION_ASSIGNED_ROLE IS NULL, '', EXECUTION_ASSIGNED_ROLE) != IF (i_RFX_EXECUTION_ASSIGNED_ROLE_CD IS NULL, '', i_RFX_EXECUTION_ASSIGNED_ROLE_CD) OR IF (ASSIGNED_USER_ID IS NULL, '', ASSIGNED_USER_ID) != IF (i_RFX_ASSIGNED_USER_ID IS NULL, '', i_RFX_ASSIGNED_USER_ID) OR IF (ASSIGNED_USER IS NULL, '', ASSIGNED_USER) != IF (i_RFX_ASSIGNED_USER_NAME IS NULL, '', i_RFX_ASSIGNED_USER_NAME) OR IF (TASK_EXECUTION_START_DATE IS NULL, TO_DATE ( '1901-01-01' , 'y-M-d' ), TASK_EXECUTION_START_DATE) != IF (i_RFX_TASK_EXECUTION_START_TSTMP IS NULL, TO_DATE ( '1901-01-01' , 'y-M-d' ), i_RFX_TASK_EXECUTION_START_TSTMP) OR IF (TASK_EXECUTION_END_DATE IS NULL, TO_DATE ( '1901-01-01' , 'y-M-d' ), TASK_EXECUTION_END_DATE) != IF (i_RFX_TASK_EXECUTION_END_TSTMP IS NULL, TO_DATE ( '1901-01-01' , 'y-M-d' ), i_RFX_TASK_EXECUTION_END_TSTMP) OR IF (STATUS IS NULL, '', STATUS) != IF (i_RFX_TASK_STATUS IS NULL, '', i_RFX_TASK_STATUS) OR IF (ESTIMATED_EFFORT_HOURS IS NULL, 0, ESTIMATED_EFFORT_HOURS) != IF (i_EST_EFFORT_HOURS IS NULL, 0, i_EST_EFFORT_HOURS) OR IF (TASK_EXECUTION_COMPLETION_DATE IS NULL, TO_DATE ( '1901-01-01' , 'y-M-d' ), TASK_EXECUTION_COMPLETION_DATE) != IF (i_RFX_TASK_EXECUTION_COMPLETION_TSTMP IS NULL, TO_DATE ( '1901-01-01' , 'y-M-d' ), i_RFX_TASK_EXECUTION_COMPLETION_TSTMP) OR IF (ON_TIME_COMPLETION_INDICATOR IS NULL, '', IF (ON_TIME_COMPLETION_INDICATOR = 'Y', '1', '0')) != IF (i_ON_TIME_COMPLETION_FLAG IS NULL, '', i_ON_TIME_COMPLETION_FLAG) OR IF (TASK_ASSIGNED_DEPT IS NULL, '', TASK_ASSIGNED_DEPT) != IF (i_RFX_TASK_ASSIGNED_DEPT_CD IS NULL, '', i_RFX_TASK_ASSIGNED_DEPT_CD) OR IF (TASK_ASSIGNED_ROLE IS NULL, '', TASK_ASSIGNED_ROLE) != IF (i_RFX_TASK_ASSIGNED_ROLE_CD IS NULL, '', i_RFX_TASK_ASSIGNED_ROLE_CD) OR IF (LAST_USER_ID IS NULL, '', LAST_USER_ID) != IF (i_RFX_LAST_USER_ID IS NULL, '', i_RFX_LAST_USER_ID) OR IF (LAST_UPDATED_BY_USER IS NULL, '', LAST_UPDATED_BY_USER) != IF (i_RFX_LAST_UPDATED_USER_NAME IS NULL, '', i_RFX_LAST_UPDATED_USER_NAME) ) )").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------

# Processing node EXP_RFX_RTM_TASK, type EXPRESSION 
# COLUMN COUNT: 26

# for each involved DataFrame, append the dataframe name to each column
FIL_RFX_RTM_TASK_temp = FIL_RFX_RTM_TASK.toDF(*["FIL_RFX_RTM_TASK___" + col for col in FIL_RFX_RTM_TASK.columns])

EXP_RFX_RTM_TASK = FIL_RFX_RTM_TASK_temp.selectExpr(
	"FIL_RFX_RTM_TASK___sys_row_id as sys_row_id",
	"FIL_RFX_RTM_TASK___PROJECT_ID as PROJECT_ID",
	"FIL_RFX_RTM_TASK___UNIT_ID as UNIT_ID",
	"FIL_RFX_RTM_TASK___TASK_ID as TASK_ID",
	"FIL_RFX_RTM_TASK___SEQUENCE_NO as SEQUENCE_NO",
	"FIL_RFX_RTM_TASK___TASK_TITLE as TASK_TITLE",
	"FIL_RFX_RTM_TASK___EXECUTION_ASSIGNED_DEPT as EXECUTION_ASSIGNED_DEPT",
	"FIL_RFX_RTM_TASK___EXECUTION_ASSIGNED_ROLE as EXECUTION_ASSIGNED_ROLE",
	"FIL_RFX_RTM_TASK___ASSIGNED_USER_ID as ASSIGNED_USER_ID",
	"FIL_RFX_RTM_TASK___ASSIGNED_USER as ASSIGNED_USER",
	"FIL_RFX_RTM_TASK___TASK_EXECUTION_START_DATE as TASK_EXECUTION_START_DATE",
	"FIL_RFX_RTM_TASK___TASK_EXECUTION_END_DATE as TASK_EXECUTION_END_DATE",
	"FIL_RFX_RTM_TASK___STATUS as STATUS",
	"FIL_RFX_RTM_TASK___ESTIMATED_EFFORT_HOURS as ESTIMATED_EFFORT_HOURS",
	"FIL_RFX_RTM_TASK___TASK_EXECUTION_COMPLETION_DATE as TASK_EXECUTION_COMPLETION_DATE",
	"FIL_RFX_RTM_TASK___ON_TIME_COMPLETION_INDICATOR as ON_TIME_COMPLETION_INDICATOR",
	"DECODE ( FIL_RFX_RTM_TASK___ON_TIME_COMPLETION_INDICATOR , 'Y','1' , 'N','0' , NULL ) as o_ON_TIME_COMPLETION_INDICATOR",
	"FIL_RFX_RTM_TASK___TASK_ASSIGNED_DEPT as TASK_ASSIGNED_DEPT",
	"FIL_RFX_RTM_TASK___TASK_ASSIGNED_ROLE as TASK_ASSIGNED_ROLE",
	"FIL_RFX_RTM_TASK___LAST_USER_ID as LAST_USER_ID",
	"FIL_RFX_RTM_TASK___LAST_UPDATED_BY_USER as LAST_UPDATED_BY_USER",
	"FIL_RFX_RTM_TASK___LOCATION_ID as LOCATION_ID",
	"FIL_RFX_RTM_TASK___i_RFX_TASK_ID as i_RFX_TASK_ID",
	"FIL_RFX_RTM_TASK___i_LOAD_TSTMP as i_LOAD_TSTMP",
	"IF (FIL_RFX_RTM_TASK___i_RFX_TASK_ID IS NULL, 1, 2) as o_UPDATE_VALIDATOR",
	"CURRENT_TIMESTAMP as UPDATE_TSTMP",
	"IF (FIL_RFX_RTM_TASK___i_LOAD_TSTMP IS NULL, CURRENT_TIMESTAMP, FIL_RFX_RTM_TASK___i_LOAD_TSTMP) as LOAD_TSTMP"
)

# COMMAND ----------

# Processing node UPD_RFX_RTM_TASK, type UPDATE_STRATEGY . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 23

# for each involved DataFrame, append the dataframe name to each column
EXP_RFX_RTM_TASK_temp = EXP_RFX_RTM_TASK.toDF(*["EXP_RFX_RTM_TASK___" + col for col in EXP_RFX_RTM_TASK.columns])

UPD_RFX_RTM_TASK = EXP_RFX_RTM_TASK_temp.selectExpr(
	"EXP_RFX_RTM_TASK___PROJECT_ID as PROJECT_ID",
	"EXP_RFX_RTM_TASK___UNIT_ID as UNIT_ID",
	"EXP_RFX_RTM_TASK___TASK_ID as TASK_ID",
	"EXP_RFX_RTM_TASK___SEQUENCE_NO as SEQUENCE_NO",
	"EXP_RFX_RTM_TASK___TASK_TITLE as TASK_TITLE",
	"EXP_RFX_RTM_TASK___EXECUTION_ASSIGNED_DEPT as EXECUTION_ASSIGNED_DEPT",
	"EXP_RFX_RTM_TASK___EXECUTION_ASSIGNED_ROLE as EXECUTION_ASSIGNED_ROLE",
	"EXP_RFX_RTM_TASK___ASSIGNED_USER_ID as ASSIGNED_USER_ID",
	"EXP_RFX_RTM_TASK___ASSIGNED_USER as ASSIGNED_USER",
	"EXP_RFX_RTM_TASK___TASK_EXECUTION_START_DATE as TASK_EXECUTION_START_DATE",
	"EXP_RFX_RTM_TASK___TASK_EXECUTION_END_DATE as TASK_EXECUTION_END_DATE",
	"EXP_RFX_RTM_TASK___STATUS as STATUS",
	"EXP_RFX_RTM_TASK___ESTIMATED_EFFORT_HOURS as ESTIMATED_EFFORT_HOURS",
	"EXP_RFX_RTM_TASK___TASK_EXECUTION_COMPLETION_DATE as TASK_EXECUTION_COMPLETION_DATE",
	"EXP_RFX_RTM_TASK___o_ON_TIME_COMPLETION_INDICATOR as ON_TIME_COMPLETION_INDICATOR",
	"EXP_RFX_RTM_TASK___TASK_ASSIGNED_DEPT as TASK_ASSIGNED_DEPT",
	"EXP_RFX_RTM_TASK___TASK_ASSIGNED_ROLE as TASK_ASSIGNED_ROLE",
	"EXP_RFX_RTM_TASK___LAST_USER_ID as LAST_USER_ID",
	"EXP_RFX_RTM_TASK___LAST_UPDATED_BY_USER as LAST_UPDATED_BY_USER",
	"EXP_RFX_RTM_TASK___LOCATION_ID as LOCATION_ID",
	"EXP_RFX_RTM_TASK___o_UPDATE_VALIDATOR as o_UPDATE_VALIDATOR",
	"EXP_RFX_RTM_TASK___UPDATE_TSTMP as UPDATE_TSTMP",
	"EXP_RFX_RTM_TASK___LOAD_TSTMP as LOAD_TSTMP",
	"if(EXP_RFX_RTM_TASK___o_UPDATE_VALIDATOR==1,0,1) as pyspark_data_action")


# COMMAND ----------

# Processing node Shortcut_to_RFX_RTM_TASK1, type TARGET 
# COLUMN COUNT: 22


Shortcut_to_RFX_RTM_TASK1 = UPD_RFX_RTM_TASK.selectExpr(
	"CAST(PROJECT_ID AS STRING) as RFX_PROJECT_ID",
	"CAST(LOCATION_ID AS BIGINT) as LOCATION_ID",
	"CAST(TASK_ID AS STRING) as RFX_TASK_ID",
	"SEQUENCE_NO as RFX_TASK_SEQ_NBR",
	"CAST(UNIT_ID AS STRING) as RFX_UNIT_ID",
	"CAST(TASK_TITLE AS STRING) as RFX_TASK_DESC",
	"CAST(EXECUTION_ASSIGNED_DEPT AS STRING) as RFX_EXECUTION_ASSIGNED_DEPT_CD",
	"CAST(EXECUTION_ASSIGNED_ROLE AS STRING) as RFX_EXECUTION_ASSIGNED_ROLE_CD",
	"CAST(ASSIGNED_USER_ID AS STRING) as RFX_ASSIGNED_USER_ID",
	"CAST(ASSIGNED_USER AS STRING) as RFX_ASSIGNED_USER_NAME",
	"CAST(TASK_EXECUTION_START_DATE AS TIMESTAMP) as RFX_TASK_EXECUTION_START_TSTMP",
	"CAST(TASK_EXECUTION_END_DATE AS TIMESTAMP) as RFX_TASK_EXECUTION_END_TSTMP",
	"CAST(STATUS AS STRING) as RFX_TASK_STATUS",
	"CAST(ESTIMATED_EFFORT_HOURS AS DECIMAL(7,2)) as EST_EFFORT_HOURS",
	"CAST(TASK_EXECUTION_COMPLETION_DATE AS TIMESTAMP) as RFX_TASK_EXECUTION_COMPLETION_TSTMP",
	"CAST(ON_TIME_COMPLETION_INDICATOR AS TINYINT) as ON_TIME_COMPLETION_FLAG",
	"CAST(TASK_ASSIGNED_DEPT AS STRING) as RFX_TASK_ASSIGNED_DEPT_CD",
	"CAST(TASK_ASSIGNED_ROLE AS STRING) as RFX_TASK_ASSIGNED_ROLE_CD",
	"CAST(LAST_USER_ID AS STRING) as RFX_LAST_USER_ID",
	"CAST(LAST_UPDATED_BY_USER AS STRING) as RFX_LAST_UPDATED_USER_NAME",
	"CAST(UPDATE_TSTMP AS TIMESTAMP) as UPDATE_TSTMP",
	"CAST(LOAD_TSTMP AS TIMESTAMP) as LOAD_TSTMP",
	"pyspark_data_action as pyspark_data_action"
)

try:
	primary_key = """source.RFX_PROJECT_ID = target.RFX_PROJECT_ID AND source.LOCATION_ID = target.LOCATION_ID AND source.RFX_TASK_ID = target.RFX_TASK_ID AND source.RFX_TASK_SEQ_NBR = target.RFX_TASK_SEQ_NBR AND source.RFX_ASSIGNED_USER_ID = target.RFX_ASSIGNED_USER_ID AND source.RFX_ASSIGNED_USER_NAME = target.RFX_ASSIGNED_USER_NAME"""
	refined_perf_table = f"{legacy}.RFX_RTM_TASK"
	executeMerge(Shortcut_to_RFX_RTM_TASK1, refined_perf_table, primary_key)
	logger.info(f"Merge with {refined_perf_table} completed]")
	logPrevRunDt("RFX_RTM_TASK", "RFX_RTM_TASK", "Completed", "N/A", f"{raw}.log_run_details")
except Exception as e:
	logPrevRunDt("RFX_RTM_TASK", "RFX_RTM_TASK","Failed",str(e), f"{raw}.log_run_details")
	raise e
		

# COMMAND ----------


