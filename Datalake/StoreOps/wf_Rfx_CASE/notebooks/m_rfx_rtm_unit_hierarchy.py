# Databricks notebook source
# Code converted on 2023-08-25 11:50:45
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from Datalake.utils.genericUtilities import *
from Datalake.utils.configs import *
from Datalake.utils.mergeUtils import *
from Datalake.utils.logger import *

# COMMAND ----------

spark = SparkSession.getActiveSession()
dbutils = DBUtils(spark)

dbutils.widgets.text(name="env", defaultValue="dev")
env = dbutils.widgets.get("env")

if env is None or env == '':
    raise ValueError('env is not set')

refine = getEnvPrefix(env) + 'refine'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'


# COMMAND ----------

# Processing node SQ_Shortcut_to_RFX_UNIT_HRCY_PRE, type SOURCE 
# COLUMN COUNT: 24

SQ_Shortcut_to_RFX_UNIT_HRCY_PRE = spark.sql(f"""SELECT
RFX_UNIT_HRCY_PRE.UNIT_ID,
RFX_UNIT_HRCY_PRE.UNIT_NAME,
RFX_UNIT_HRCY_PRE.STORE_ID,
RFX_UNIT_HRCY_PRE.STORE_NAME,
RFX_UNIT_HRCY_PRE.UNIT_ORG_LEVEL,
RFX_UNIT_HRCY_PRE.UNIT_STATUS,
RFX_UNIT_HRCY_PRE.STATE_CODE,
RFX_UNIT_HRCY_PRE.ZIP_CODE,
RFX_UNIT_HRCY_PRE.CORPORATE_ID,
RFX_UNIT_HRCY_PRE.CORPORATE_NAME,
RFX_UNIT_HRCY_PRE.LEVEL_2_ID,
RFX_UNIT_HRCY_PRE.LEVEL_2_NAME,
RFX_UNIT_HRCY_PRE.LEVEL_3_ID,
RFX_UNIT_HRCY_PRE.LEVEL_3_NAME,
RFX_UNIT_HRCY_PRE.LEVEL_4_ID,
RFX_UNIT_HRCY_PRE.LEVEL_4_NAME,
RFX_UNIT_HRCY_PRE.LEVEL_5_ID,
RFX_UNIT_HRCY_PRE.LEVEL_5_NAME,
RFX_UNIT_HRCY_PRE.LEVEL_6_ID,
RFX_UNIT_HRCY_PRE.LEVEL_6_NAME,
RFX_UNIT_HRCY_PRE.LEVEL_7_ID,
RFX_UNIT_HRCY_PRE.LEVEL_7_NAME,
RFX_UNIT_HRCY_PRE.DISTRICT_ID,
RFX_UNIT_HRCY_PRE.DISTRICT_NAME
FROM {raw}.RFX_UNIT_HRCY_PRE""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------

# Processing node SQ_Shortcut_to_RFX_RTM_UNIT_HIERARCHY, type SOURCE 
# COLUMN COUNT: 26

SQ_Shortcut_to_RFX_RTM_UNIT_HIERARCHY = spark.sql(f"""SELECT
RFX_RTM_UNIT_HIERARCHY.RFX_UNIT_ID,
RFX_RTM_UNIT_HIERARCHY.RFX_UNIT_NAME,
RFX_RTM_UNIT_HIERARCHY.LOCATION_ID,
RFX_RTM_UNIT_HIERARCHY.STORE_NBR,
RFX_RTM_UNIT_HIERARCHY.STORE_NAME,
RFX_RTM_UNIT_HIERARCHY.RFX_UNIT_ORG_LEVEL,
RFX_RTM_UNIT_HIERARCHY.RFX_UNIT_STATUS_CD,
RFX_RTM_UNIT_HIERARCHY.STATE_CD,
RFX_RTM_UNIT_HIERARCHY.ZIP_CD,
RFX_RTM_UNIT_HIERARCHY.CORPORATE_ID,
RFX_RTM_UNIT_HIERARCHY.CORPORATE_NAME,
RFX_RTM_UNIT_HIERARCHY.LEVEL_2_ID,
RFX_RTM_UNIT_HIERARCHY.LEVEL_2_NAME,
RFX_RTM_UNIT_HIERARCHY.LEVEL_3_ID,
RFX_RTM_UNIT_HIERARCHY.LEVEL_3_NAME,
RFX_RTM_UNIT_HIERARCHY.LEVEL_4_ID,
RFX_RTM_UNIT_HIERARCHY.LEVEL_4_NAME,
RFX_RTM_UNIT_HIERARCHY.LEVEL_5_ID,
RFX_RTM_UNIT_HIERARCHY.LEVEL_5_NAME,
RFX_RTM_UNIT_HIERARCHY.LEVEL_6_ID,
RFX_RTM_UNIT_HIERARCHY.LEVEL_6_NAME,
RFX_RTM_UNIT_HIERARCHY.LEVEL_7_ID,
RFX_RTM_UNIT_HIERARCHY.LEVEL_7_NAME,
RFX_RTM_UNIT_HIERARCHY.DISTRICT_ID,
RFX_RTM_UNIT_HIERARCHY.DISTRICT_NAME,
RFX_RTM_UNIT_HIERARCHY.LOAD_TSTMP
FROM {legacy}.RFX_RTM_UNIT_HIERARCHY""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------

# Processing node SQ_Shortcut_To_SITE_PROFILE, type SOURCE 
# COLUMN COUNT: 2

SQ_Shortcut_To_SITE_PROFILE = spark.sql(f"""SELECT
SITE_PROFILE.LOCATION_ID,
SITE_PROFILE.STORE_NBR
FROM {legacy}.SITE_PROFILE""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------

# Processing node JNR_RFX_UNIT_PRE, type JOINER 
# COLUMN COUNT: 26

JNR_RFX_UNIT_PRE = SQ_Shortcut_to_RFX_UNIT_HRCY_PRE.join(SQ_Shortcut_To_SITE_PROFILE,[SQ_Shortcut_to_RFX_UNIT_HRCY_PRE.STORE_ID == SQ_Shortcut_To_SITE_PROFILE.STORE_NBR],'left_outer')

# COMMAND ----------

# Processing node JNR_RFX_RTM_UNIT_HEIRARCHY, type JOINER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 51

# for each involved DataFrame, append the dataframe name to each column
JNR_RFX_UNIT_PRE_temp = JNR_RFX_UNIT_PRE.toDF(*["JNR_RFX_UNIT_PRE___" + col for col in JNR_RFX_UNIT_PRE.columns])
SQ_Shortcut_to_RFX_RTM_UNIT_HIERARCHY_temp = SQ_Shortcut_to_RFX_RTM_UNIT_HIERARCHY.toDF(*["SQ_Shortcut_to_RFX_RTM_UNIT_HIERARCHY___" + col for col in SQ_Shortcut_to_RFX_RTM_UNIT_HIERARCHY.columns])

JNR_RFX_RTM_UNIT_HEIRARCHY = JNR_RFX_UNIT_PRE_temp.join(SQ_Shortcut_to_RFX_RTM_UNIT_HIERARCHY_temp,[JNR_RFX_UNIT_PRE_temp.JNR_RFX_UNIT_PRE___UNIT_ID == SQ_Shortcut_to_RFX_RTM_UNIT_HIERARCHY_temp.SQ_Shortcut_to_RFX_RTM_UNIT_HIERARCHY___RFX_UNIT_ID],'left_outer').selectExpr(
	"SQ_Shortcut_to_RFX_RTM_UNIT_HIERARCHY___RFX_UNIT_ID as i_RFX_UNIT_ID",
	"SQ_Shortcut_to_RFX_RTM_UNIT_HIERARCHY___RFX_UNIT_NAME as i_RFX_UNIT_NAME",
	"SQ_Shortcut_to_RFX_RTM_UNIT_HIERARCHY___LOCATION_ID as i_LOCATION_ID",
	"SQ_Shortcut_to_RFX_RTM_UNIT_HIERARCHY___STORE_NBR as i_STORE_NBR",
	"SQ_Shortcut_to_RFX_RTM_UNIT_HIERARCHY___STORE_NAME as i_STORE_NAME",
	"SQ_Shortcut_to_RFX_RTM_UNIT_HIERARCHY___RFX_UNIT_ORG_LEVEL as i_RFX_UNIT_ORG_LEVEL",
	"SQ_Shortcut_to_RFX_RTM_UNIT_HIERARCHY___RFX_UNIT_STATUS_CD as i_RFX_UNIT_STATUS_CD",
	"SQ_Shortcut_to_RFX_RTM_UNIT_HIERARCHY___STATE_CD as i_STATE_CD",
	"SQ_Shortcut_to_RFX_RTM_UNIT_HIERARCHY___ZIP_CD as i_ZIP_CD",
	"SQ_Shortcut_to_RFX_RTM_UNIT_HIERARCHY___CORPORATE_ID as i_CORPORATE_ID",
	"SQ_Shortcut_to_RFX_RTM_UNIT_HIERARCHY___CORPORATE_NAME as i_CORPORATE_NAME",
	"SQ_Shortcut_to_RFX_RTM_UNIT_HIERARCHY___LEVEL_2_ID as i_LEVEL_2_ID",
	"SQ_Shortcut_to_RFX_RTM_UNIT_HIERARCHY___LEVEL_2_NAME as i_LEVEL_2_NAME",
	"SQ_Shortcut_to_RFX_RTM_UNIT_HIERARCHY___LEVEL_3_ID as i_LEVEL_3_ID",
	"SQ_Shortcut_to_RFX_RTM_UNIT_HIERARCHY___LEVEL_3_NAME as i_LEVEL_3_NAME",
	"SQ_Shortcut_to_RFX_RTM_UNIT_HIERARCHY___LEVEL_4_ID as i_LEVEL_4_ID",
	"SQ_Shortcut_to_RFX_RTM_UNIT_HIERARCHY___LEVEL_4_NAME as i_LEVEL_4_NAME",
	"SQ_Shortcut_to_RFX_RTM_UNIT_HIERARCHY___LEVEL_5_ID as i_LEVEL_5_ID",
	"SQ_Shortcut_to_RFX_RTM_UNIT_HIERARCHY___LEVEL_5_NAME as i_LEVEL_5_NAME",
	"SQ_Shortcut_to_RFX_RTM_UNIT_HIERARCHY___LEVEL_6_ID as i_LEVEL_6_ID",
	"SQ_Shortcut_to_RFX_RTM_UNIT_HIERARCHY___LEVEL_6_NAME as i_LEVEL_6_NAME",
	"SQ_Shortcut_to_RFX_RTM_UNIT_HIERARCHY___LEVEL_7_ID as i_LEVEL_7_ID",
	"SQ_Shortcut_to_RFX_RTM_UNIT_HIERARCHY___LEVEL_7_NAME as i_LEVEL_7_NAME",
	"SQ_Shortcut_to_RFX_RTM_UNIT_HIERARCHY___DISTRICT_ID as i_DISTRICT_ID",
	"SQ_Shortcut_to_RFX_RTM_UNIT_HIERARCHY___DISTRICT_NAME as i_DISTRICT_NAME",
	"SQ_Shortcut_to_RFX_RTM_UNIT_HIERARCHY___LOAD_TSTMP as i_LOAD_TSTMP",
	"JNR_RFX_UNIT_PRE___UNIT_ID as UNIT_ID",
	"JNR_RFX_UNIT_PRE___UNIT_NAME as UNIT_NAME",
	"JNR_RFX_UNIT_PRE___STORE_ID as STORE_ID",
	"JNR_RFX_UNIT_PRE___STORE_NAME as STORE_NAME",
	"JNR_RFX_UNIT_PRE___UNIT_ORG_LEVEL as UNIT_ORG_LEVEL",
	"JNR_RFX_UNIT_PRE___UNIT_STATUS as UNIT_STATUS",
	"JNR_RFX_UNIT_PRE___STATE_CODE as STATE_CODE",
	"JNR_RFX_UNIT_PRE___ZIP_CODE as ZIP_CODE",
	"JNR_RFX_UNIT_PRE___CORPORATE_ID as CORPORATE_ID",
	"JNR_RFX_UNIT_PRE___CORPORATE_NAME as CORPORATE_NAME",
	"JNR_RFX_UNIT_PRE___LEVEL_2_ID as LEVEL_2_ID",
	"JNR_RFX_UNIT_PRE___LEVEL_2_NAME as LEVEL_2_NAME",
	"JNR_RFX_UNIT_PRE___LEVEL_3_ID as LEVEL_3_ID",
	"JNR_RFX_UNIT_PRE___LEVEL_3_NAME as LEVEL_3_NAME",
	"JNR_RFX_UNIT_PRE___LEVEL_4_ID as LEVEL_4_ID",
	"JNR_RFX_UNIT_PRE___LEVEL_4_NAME as LEVEL_4_NAME",
	"JNR_RFX_UNIT_PRE___LEVEL_5_ID as LEVEL_5_ID",
	"JNR_RFX_UNIT_PRE___LEVEL_5_NAME as LEVEL_5_NAME",
	"JNR_RFX_UNIT_PRE___LEVEL_6_ID as LEVEL_6_ID",
	"JNR_RFX_UNIT_PRE___LEVEL_6_NAME as LEVEL_6_NAME",
	"JNR_RFX_UNIT_PRE___LEVEL_7_ID as LEVEL_7_ID",
	"JNR_RFX_UNIT_PRE___LEVEL_7_NAME as LEVEL_7_NAME",
	"JNR_RFX_UNIT_PRE___DISTRICT_ID as DISTRICT_ID",
	"JNR_RFX_UNIT_PRE___DISTRICT_NAME as DISTRICT_NAME",
	"JNR_RFX_UNIT_PRE___LOCATION_ID as LOCATION_ID")

# COMMAND ----------

# Processing node FIL_RFX_RTM_UNIT_HEIRARCHY, type FILTER 
# COLUMN COUNT: 51

# for each involved DataFrame, append the dataframe name to each column
JNR_RFX_RTM_UNIT_HEIRARCHY_temp = JNR_RFX_RTM_UNIT_HEIRARCHY.toDF(*["JNR_RFX_RTM_UNIT_HEIRARCHY___" + col for col in JNR_RFX_RTM_UNIT_HEIRARCHY.columns])

FIL_RFX_RTM_UNIT_HEIRARCHY = JNR_RFX_RTM_UNIT_HEIRARCHY_temp.selectExpr(
	"JNR_RFX_RTM_UNIT_HEIRARCHY___i_RFX_UNIT_ID as i_RFX_UNIT_ID",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___i_RFX_UNIT_NAME as i_RFX_UNIT_NAME",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___i_LOCATION_ID as i_LOCATION_ID",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___i_STORE_NBR as i_STORE_NBR",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___i_STORE_NAME as i_STORE_NAME",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___i_RFX_UNIT_ORG_LEVEL as i_RFX_UNIT_ORG_LEVEL",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___i_RFX_UNIT_STATUS_CD as i_RFX_UNIT_STATUS_CD",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___i_STATE_CD as i_STATE_CD",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___i_ZIP_CD as i_ZIP_CD",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___i_CORPORATE_ID as i_CORPORATE_ID",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___i_CORPORATE_NAME as i_CORPORATE_NAME",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___i_LEVEL_2_ID as i_LEVEL_2_ID",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___i_LEVEL_2_NAME as i_LEVEL_2_NAME",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___i_LEVEL_3_ID as i_LEVEL_3_ID",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___i_LEVEL_3_NAME as i_LEVEL_3_NAME",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___i_LEVEL_4_ID as i_LEVEL_4_ID",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___i_LEVEL_4_NAME as i_LEVEL_4_NAME",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___i_LEVEL_5_ID as i_LEVEL_5_ID",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___i_LEVEL_5_NAME as i_LEVEL_5_NAME",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___i_LEVEL_6_ID as i_LEVEL_6_ID",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___i_LEVEL_6_NAME as i_LEVEL_6_NAME",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___i_LEVEL_7_ID as i_LEVEL_7_ID",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___i_LEVEL_7_NAME as i_LEVEL_7_NAME",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___i_DISTRICT_ID as i_DISTRICT_ID",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___i_DISTRICT_NAME as i_DISTRICT_NAME",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___i_LOAD_TSTMP as i_LOAD_TSTMP",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___UNIT_ID as UNIT_ID",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___UNIT_NAME as UNIT_NAME",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___STORE_ID as STORE_ID",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___STORE_NAME as STORE_NAME",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___UNIT_ORG_LEVEL as UNIT_ORG_LEVEL",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___UNIT_STATUS as UNIT_STATUS",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___STATE_CODE as STATE_CODE",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___ZIP_CODE as ZIP_CODE",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___CORPORATE_ID as CORPORATE_ID",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___CORPORATE_NAME as CORPORATE_NAME",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___LEVEL_2_ID as LEVEL_2_ID",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___LEVEL_2_NAME as LEVEL_2_NAME",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___LEVEL_3_ID as LEVEL_3_ID",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___LEVEL_3_NAME as LEVEL_3_NAME",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___LEVEL_4_ID as LEVEL_4_ID",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___LEVEL_4_NAME as LEVEL_4_NAME",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___LEVEL_5_ID as LEVEL_5_ID",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___LEVEL_5_NAME as LEVEL_5_NAME",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___LEVEL_6_ID as LEVEL_6_ID",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___LEVEL_6_NAME as LEVEL_6_NAME",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___LEVEL_7_ID as LEVEL_7_ID",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___LEVEL_7_NAME as LEVEL_7_NAME",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___DISTRICT_ID as DISTRICT_ID",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___DISTRICT_NAME as DISTRICT_NAME",
	"JNR_RFX_RTM_UNIT_HEIRARCHY___LOCATION_ID as LOCATION_ID").filter("i_RFX_UNIT_ID IS NULL OR ( i_RFX_UNIT_ID IS NOT NULL AND ( IF (UNIT_NAME IS NULL, '', UNIT_NAME) != IF (i_RFX_UNIT_NAME IS NULL, '', i_RFX_UNIT_NAME) OR IF (LOCATION_ID IS NULL, - 1, LOCATION_ID) != IF (i_LOCATION_ID IS NULL, - 1, i_LOCATION_ID) OR IF (STORE_ID IS NULL, - 99999, STORE_ID) != IF (i_STORE_NBR IS NULL, - 99999, i_STORE_NBR) OR IF (STORE_NAME IS NULL, '', STORE_NAME) != IF (i_STORE_NAME IS NULL, '', i_STORE_NAME) OR IF (UNIT_ORG_LEVEL IS NULL, - 99999, UNIT_ORG_LEVEL) != IF (i_RFX_UNIT_ORG_LEVEL IS NULL, - 99999, i_RFX_UNIT_ORG_LEVEL) OR IF (UNIT_STATUS IS NULL, '', UNIT_STATUS) != IF (i_RFX_UNIT_STATUS_CD IS NULL, '', i_RFX_UNIT_STATUS_CD) OR IF (STATE_CODE IS NULL, '', STATE_CODE) != IF (i_STATE_CD IS NULL, '', i_STATE_CD) OR IF (ZIP_CODE IS NULL, '', ZIP_CODE) != IF (i_ZIP_CD IS NULL, '', i_ZIP_CD) OR IF (CORPORATE_ID IS NULL, '', CORPORATE_ID) != IF (i_CORPORATE_ID IS NULL, '', i_CORPORATE_ID) OR IF (CORPORATE_NAME IS NULL, '', CORPORATE_NAME) != IF (i_CORPORATE_NAME IS NULL, '', i_CORPORATE_NAME) OR IF (LEVEL_2_ID IS NULL, '', LEVEL_2_ID) != IF (i_LEVEL_2_ID IS NULL, '', i_LEVEL_2_ID) OR IF (LEVEL_2_NAME IS NULL, '', LEVEL_2_NAME) != IF (i_LEVEL_2_NAME IS NULL, '', i_LEVEL_2_NAME) OR IF (LEVEL_3_ID IS NULL, '', LEVEL_3_ID) != IF (i_LEVEL_3_ID IS NULL, '', i_LEVEL_3_ID) OR IF (LEVEL_3_NAME IS NULL, '', LEVEL_3_NAME) != IF (i_LEVEL_3_NAME IS NULL, '', i_LEVEL_3_NAME) OR IF (LEVEL_4_ID IS NULL, '', LEVEL_4_ID) != IF (i_LEVEL_4_ID IS NULL, '', i_LEVEL_4_ID) OR IF (LEVEL_4_NAME IS NULL, '', LEVEL_4_NAME) != IF (i_LEVEL_4_NAME IS NULL, '', i_LEVEL_4_NAME) OR IF (LEVEL_5_ID IS NULL, '', LEVEL_5_ID) != IF (i_LEVEL_5_ID IS NULL, '', i_LEVEL_5_ID) OR IF (LEVEL_5_NAME IS NULL, '', LEVEL_5_NAME) != IF (i_LEVEL_5_NAME IS NULL, '', i_LEVEL_5_NAME) OR IF (LEVEL_6_ID IS NULL, '', LEVEL_6_ID) != IF (i_LEVEL_6_ID IS NULL, '', i_LEVEL_6_ID) OR IF (LEVEL_6_NAME IS NULL, '', LEVEL_6_NAME) != IF (i_LEVEL_6_NAME IS NULL, '', i_LEVEL_6_NAME) OR IF (LEVEL_7_ID IS NULL, '', LEVEL_7_ID) != IF (i_LEVEL_7_ID IS NULL, '', i_LEVEL_7_ID) OR IF (LEVEL_7_NAME IS NULL, '', LEVEL_7_NAME) != IF (i_LEVEL_7_NAME IS NULL, '', i_LEVEL_7_NAME) OR IF (DISTRICT_ID IS NULL, '', DISTRICT_ID) != IF (i_DISTRICT_ID IS NULL, '', i_DISTRICT_ID) OR IF (DISTRICT_NAME IS NULL, '', DISTRICT_NAME) != IF (i_DISTRICT_NAME IS NULL, '', i_DISTRICT_NAME) ) )").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------

# Processing node EXP_RFX_RTM_UNIT_HEIRARCHY, type EXPRESSION 
# COLUMN COUNT: 30

# for each involved DataFrame, append the dataframe name to each column
FIL_RFX_RTM_UNIT_HEIRARCHY_temp = FIL_RFX_RTM_UNIT_HEIRARCHY.toDF(*["FIL_RFX_RTM_UNIT_HEIRARCHY___" + col for col in FIL_RFX_RTM_UNIT_HEIRARCHY.columns])

EXP_RFX_RTM_UNIT_HEIRARCHY = FIL_RFX_RTM_UNIT_HEIRARCHY_temp.selectExpr(
	"FIL_RFX_RTM_UNIT_HEIRARCHY___sys_row_id as sys_row_id",
	"FIL_RFX_RTM_UNIT_HEIRARCHY___i_LOAD_TSTMP as i_LOAD_TSTMP",
	"FIL_RFX_RTM_UNIT_HEIRARCHY___UNIT_ID as UNIT_ID",
	"FIL_RFX_RTM_UNIT_HEIRARCHY___UNIT_NAME as UNIT_NAME",
	"FIL_RFX_RTM_UNIT_HEIRARCHY___STORE_ID as STORE_ID",
	"FIL_RFX_RTM_UNIT_HEIRARCHY___STORE_NAME as STORE_NAME",
	"FIL_RFX_RTM_UNIT_HEIRARCHY___UNIT_ORG_LEVEL as UNIT_ORG_LEVEL",
	"FIL_RFX_RTM_UNIT_HEIRARCHY___UNIT_STATUS as UNIT_STATUS",
	"FIL_RFX_RTM_UNIT_HEIRARCHY___STATE_CODE as STATE_CODE",
	"FIL_RFX_RTM_UNIT_HEIRARCHY___ZIP_CODE as ZIP_CODE",
	"FIL_RFX_RTM_UNIT_HEIRARCHY___CORPORATE_ID as CORPORATE_ID",
	"FIL_RFX_RTM_UNIT_HEIRARCHY___CORPORATE_NAME as CORPORATE_NAME",
	"FIL_RFX_RTM_UNIT_HEIRARCHY___LEVEL_2_ID as LEVEL_2_ID",
	"FIL_RFX_RTM_UNIT_HEIRARCHY___LEVEL_2_NAME as LEVEL_2_NAME",
	"FIL_RFX_RTM_UNIT_HEIRARCHY___LEVEL_3_ID as LEVEL_3_ID",
	"FIL_RFX_RTM_UNIT_HEIRARCHY___LEVEL_3_NAME as LEVEL_3_NAME",
	"FIL_RFX_RTM_UNIT_HEIRARCHY___LEVEL_4_ID as LEVEL_4_ID",
	"FIL_RFX_RTM_UNIT_HEIRARCHY___LEVEL_4_NAME as LEVEL_4_NAME",
	"FIL_RFX_RTM_UNIT_HEIRARCHY___LEVEL_5_ID as LEVEL_5_ID",
	"FIL_RFX_RTM_UNIT_HEIRARCHY___LEVEL_5_NAME as LEVEL_5_NAME",
	"FIL_RFX_RTM_UNIT_HEIRARCHY___LEVEL_6_ID as LEVEL_6_ID",
	"FIL_RFX_RTM_UNIT_HEIRARCHY___LEVEL_6_NAME as LEVEL_6_NAME",
	"FIL_RFX_RTM_UNIT_HEIRARCHY___LEVEL_7_ID as LEVEL_7_ID",
	"FIL_RFX_RTM_UNIT_HEIRARCHY___LEVEL_7_NAME as LEVEL_7_NAME",
	"FIL_RFX_RTM_UNIT_HEIRARCHY___DISTRICT_ID as DISTRICT_ID",
	"FIL_RFX_RTM_UNIT_HEIRARCHY___DISTRICT_NAME as DISTRICT_NAME",
	"IF (FIL_RFX_RTM_UNIT_HEIRARCHY___i_RFX_UNIT_ID IS NULL, 1, 2) as o_UPDATE_VALIDATOR",
	"IF (FIL_RFX_RTM_UNIT_HEIRARCHY___i_LOAD_TSTMP IS NULL, CURRENT_TIMESTAMP, FIL_RFX_RTM_UNIT_HEIRARCHY___i_LOAD_TSTMP) as LOAD_TSTMP",
	"CURRENT_TIMESTAMP as UPDATE_TSTMP",
	"FIL_RFX_RTM_UNIT_HEIRARCHY___LOCATION_ID as LOCATION_ID",
	"IF (FIL_RFX_RTM_UNIT_HEIRARCHY___LOCATION_ID IS NULL, - 1, FIL_RFX_RTM_UNIT_HEIRARCHY___LOCATION_ID) as O_LOCATION_ID"
)

# COMMAND ----------

# Processing node UPD_RFX_RTM_UNIT_HEIRARCHY, type UPDATE_STRATEGY 
# COLUMN COUNT: 28

# for each involved DataFrame, append the dataframe name to each column
EXP_RFX_RTM_UNIT_HEIRARCHY_temp = EXP_RFX_RTM_UNIT_HEIRARCHY.toDF(*["EXP_RFX_RTM_UNIT_HEIRARCHY___" + col for col in EXP_RFX_RTM_UNIT_HEIRARCHY.columns])

UPD_RFX_RTM_UNIT_HEIRARCHY = EXP_RFX_RTM_UNIT_HEIRARCHY_temp.selectExpr(
	"EXP_RFX_RTM_UNIT_HEIRARCHY___UNIT_ID as UNIT_ID",
	"EXP_RFX_RTM_UNIT_HEIRARCHY___UNIT_NAME as UNIT_NAME",
	"EXP_RFX_RTM_UNIT_HEIRARCHY___STORE_ID as STORE_ID",
	"EXP_RFX_RTM_UNIT_HEIRARCHY___STORE_NAME as STORE_NAME",
	"EXP_RFX_RTM_UNIT_HEIRARCHY___UNIT_ORG_LEVEL as UNIT_ORG_LEVEL",
	"EXP_RFX_RTM_UNIT_HEIRARCHY___UNIT_STATUS as UNIT_STATUS",
	"EXP_RFX_RTM_UNIT_HEIRARCHY___STATE_CODE as STATE_CODE",
	"EXP_RFX_RTM_UNIT_HEIRARCHY___ZIP_CODE as ZIP_CODE",
	"EXP_RFX_RTM_UNIT_HEIRARCHY___CORPORATE_ID as CORPORATE_ID",
	"EXP_RFX_RTM_UNIT_HEIRARCHY___CORPORATE_NAME as CORPORATE_NAME",
	"EXP_RFX_RTM_UNIT_HEIRARCHY___LEVEL_2_ID as LEVEL_2_ID",
	"EXP_RFX_RTM_UNIT_HEIRARCHY___LEVEL_2_NAME as LEVEL_2_NAME",
	"EXP_RFX_RTM_UNIT_HEIRARCHY___LEVEL_3_ID as LEVEL_3_ID",
	"EXP_RFX_RTM_UNIT_HEIRARCHY___LEVEL_3_NAME as LEVEL_3_NAME",
	"EXP_RFX_RTM_UNIT_HEIRARCHY___LEVEL_4_ID as LEVEL_4_ID",
	"EXP_RFX_RTM_UNIT_HEIRARCHY___LEVEL_4_NAME as LEVEL_4_NAME",
	"EXP_RFX_RTM_UNIT_HEIRARCHY___LEVEL_5_ID as LEVEL_5_ID",
	"EXP_RFX_RTM_UNIT_HEIRARCHY___LEVEL_5_NAME as LEVEL_5_NAME",
	"EXP_RFX_RTM_UNIT_HEIRARCHY___LEVEL_6_ID as LEVEL_6_ID",
	"EXP_RFX_RTM_UNIT_HEIRARCHY___LEVEL_6_NAME as LEVEL_6_NAME",
	"EXP_RFX_RTM_UNIT_HEIRARCHY___LEVEL_7_ID as LEVEL_7_ID",
	"EXP_RFX_RTM_UNIT_HEIRARCHY___LEVEL_7_NAME as LEVEL_7_NAME",
	"EXP_RFX_RTM_UNIT_HEIRARCHY___DISTRICT_ID as DISTRICT_ID",
	"EXP_RFX_RTM_UNIT_HEIRARCHY___DISTRICT_NAME as DISTRICT_NAME",
	"EXP_RFX_RTM_UNIT_HEIRARCHY___o_UPDATE_VALIDATOR as o_UPDATE_VALIDATOR",
	"EXP_RFX_RTM_UNIT_HEIRARCHY___LOAD_TSTMP as LOAD_TSTMP",
	"EXP_RFX_RTM_UNIT_HEIRARCHY___UPDATE_TSTMP as UPDATE_TSTMP",
	"EXP_RFX_RTM_UNIT_HEIRARCHY___O_LOCATION_ID as O_LOCATION_ID",
	"if(EXP_RFX_RTM_UNIT_HEIRARCHY___o_UPDATE_VALIDATOR==1,0,1) as pyspark_data_action")

# COMMAND ----------

# Processing node Shortcut_to_RFX_RTM_UNIT_HIERARCHY1, type TARGET 
# COLUMN COUNT: 27


Shortcut_to_RFX_RTM_UNIT_HIERARCHY1 = UPD_RFX_RTM_UNIT_HEIRARCHY.selectExpr(
	"CAST(UNIT_ID AS STRING) as RFX_UNIT_ID",
	"CAST(UNIT_NAME AS STRING) as RFX_UNIT_NAME",
	"CAST(O_LOCATION_ID AS BIGINT) as LOCATION_ID",
	"CAST(STORE_ID AS BIGINT) as STORE_NBR",
	"CAST(STORE_NAME AS STRING) as STORE_NAME",
	"UNIT_ORG_LEVEL as RFX_UNIT_ORG_LEVEL",
	"CAST(UNIT_STATUS AS STRING) as RFX_UNIT_STATUS_CD",
	"CAST(STATE_CODE AS STRING) as STATE_CD",
	"CAST(ZIP_CODE AS STRING) as ZIP_CD",
	"CAST(CORPORATE_ID AS STRING) as CORPORATE_ID",
	"CAST(CORPORATE_NAME AS STRING) as CORPORATE_NAME",
	"CAST(LEVEL_2_ID AS STRING) as LEVEL_2_ID",
	"CAST(LEVEL_2_NAME AS STRING) as LEVEL_2_NAME",
	"CAST(LEVEL_3_ID AS STRING) as LEVEL_3_ID",
	"CAST(LEVEL_3_NAME AS STRING) as LEVEL_3_NAME",
	"CAST(LEVEL_4_ID AS STRING) as LEVEL_4_ID",
	"CAST(LEVEL_4_NAME AS STRING) as LEVEL_4_NAME",
	"CAST(LEVEL_5_ID AS STRING) as LEVEL_5_ID",
	"CAST(LEVEL_5_NAME AS STRING) as LEVEL_5_NAME",
	"CAST(LEVEL_6_ID AS STRING) as LEVEL_6_ID",
	"CAST(LEVEL_6_NAME AS STRING) as LEVEL_6_NAME",
	"CAST(LEVEL_7_ID AS STRING) as LEVEL_7_ID",
	"CAST(LEVEL_7_NAME AS STRING) as LEVEL_7_NAME",
	"CAST(DISTRICT_ID AS STRING) as DISTRICT_ID",
	"CAST(DISTRICT_NAME AS STRING) as DISTRICT_NAME",
	"CAST(UPDATE_TSTMP AS TIMESTAMP) as UPDATE_TSTMP",
	"CAST(LOAD_TSTMP AS TIMESTAMP) as LOAD_TSTMP",
	"pyspark_data_action as pyspark_data_action"
)

try:
	primary_key = """source.RFX_UNIT_ID = target.RFX_UNIT_ID"""
	refined_perf_table = f"{legacy}.RFX_RTM_UNIT_HIERARCHY"
	executeMerge(Shortcut_to_RFX_RTM_UNIT_HIERARCHY1, refined_perf_table, primary_key)
	logger.info(f"Merge with {refined_perf_table} completed]")
	logPrevRunDt("RFX_RTM_UNIT_HIERARCHY", "RFX_RTM_UNIT_HIERARCHY", "Completed", "N/A", f"{raw}.log_run_details")
except Exception as e:
	logPrevRunDt("RFX_RTM_UNIT_HIERARCHY", "RFX_RTM_UNIT_HIERARCHY","Failed",str(e), f"{raw}.log_run_details")
	raise e
		

# COMMAND ----------


