# Databricks notebook source
# Code converted on 2023-08-25 11:50:41
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from Datalake.utils.genericUtilities import *
from Datalake.utils.configs import *
from Datalake.utils.mergeUtils import *
from Datalake.utils.logger import *

# COMMAND ----------

spark = SparkSession.getActiveSession()
dbutils = DBUtils(spark)

dbutils.widgets.text(name="env", defaultValue="dev")
env = dbutils.widgets.get("env")

if env is None or env == '':
    raise ValueError('env is not set')

refine = getEnvPrefix(env) + 'refine'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'


# COMMAND ----------

# Processing node SQ_Shortcut_to_RFX_RTM_PROJECT_MESSAGE, type SOURCE 
# COLUMN COUNT: 13

SQ_Shortcut_to_RFX_RTM_PROJECT_MESSAGE = spark.sql(f"""SELECT
RFX_RTM_PROJECT_MESSAGE.RFX_PROJECT_ID,
RFX_RTM_PROJECT_MESSAGE.LOCATION_ID,
RFX_RTM_PROJECT_MESSAGE.RFX_MESSAGE_TSTMP,
RFX_RTM_PROJECT_MESSAGE.RFX_UNIT_ID,
RFX_RTM_PROJECT_MESSAGE.RFX_UNIT_ORG_LEVEL,
RFX_RTM_PROJECT_MESSAGE.RFX_USER_ID,
RFX_RTM_PROJECT_MESSAGE.RFX_USER_NAME,
RFX_RTM_PROJECT_MESSAGE.RFX_MESSAGE_TEXT,
RFX_RTM_PROJECT_MESSAGE.RFX_MESSAGE_TYPE_CD,
RFX_RTM_PROJECT_MESSAGE.RFX_MESSAGE_TYPE_DESC,
RFX_RTM_PROJECT_MESSAGE.RFX_MESSAGE_STATUS_CD,
RFX_RTM_PROJECT_MESSAGE.RFX_MESSAGE_RECORD_TYPE_CD,
RFX_RTM_PROJECT_MESSAGE.LOAD_TSTMP
FROM {legacy}.RFX_RTM_PROJECT_MESSAGE""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------

# Processing node SQ_Shortcut_to_RFX_RTM_UNIT_HIERARCHY, type SOURCE 
# COLUMN COUNT: 2

SQ_Shortcut_to_RFX_RTM_UNIT_HIERARCHY = spark.sql(f"""SELECT DISTINCT
RFX_RTM_UNIT_HIERARCHY.RFX_UNIT_ID,
RFX_RTM_UNIT_HIERARCHY.LOCATION_ID
FROM {legacy}.RFX_RTM_UNIT_HIERARCHY""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------

# Processing node SQ_Shortcut_to_RFX_PROJ_MESSAGE_PRE, type SOURCE 
# COLUMN COUNT: 11

SQ_Shortcut_to_RFX_PROJ_MESSAGE_PRE = spark.sql(f"""SELECT
RFX_PROJ_MESSAGE_PRE.PROJECT_ID,
RFX_PROJ_MESSAGE_PRE.UNIT_ID,
RFX_PROJ_MESSAGE_PRE.UNIT_ORG_LEVEL,
RFX_PROJ_MESSAGE_PRE.MESSAGE_DATE,
RFX_PROJ_MESSAGE_PRE.USER_ID,
RFX_PROJ_MESSAGE_PRE.USER_NAME,
RFX_PROJ_MESSAGE_PRE.MESSAGE_TEXT,
RFX_PROJ_MESSAGE_PRE.MESSAGE_TYPE,
RFX_PROJ_MESSAGE_PRE.MESSAGE_TYPE_DESC,
RFX_PROJ_MESSAGE_PRE.MESSAGE_STATUS,
RFX_PROJ_MESSAGE_PRE.RECORD_TYPE
FROM {raw}.RFX_PROJ_MESSAGE_PRE""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------

# Processing node JNR_RFX_PROJ_MESSAGE_PRE, type JOINER 
# COLUMN COUNT: 13

JNR_RFX_PROJ_MESSAGE_PRE = SQ_Shortcut_to_RFX_RTM_UNIT_HIERARCHY.join(SQ_Shortcut_to_RFX_PROJ_MESSAGE_PRE,[SQ_Shortcut_to_RFX_RTM_UNIT_HIERARCHY.RFX_UNIT_ID == SQ_Shortcut_to_RFX_PROJ_MESSAGE_PRE.UNIT_ID],'inner')

# COMMAND ----------

# Processing node JNR_RFX_RTM_PROJECT_MESSAGE, type JOINER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 25

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_RFX_RTM_PROJECT_MESSAGE_temp = SQ_Shortcut_to_RFX_RTM_PROJECT_MESSAGE.toDF(*["SQ_Shortcut_to_RFX_RTM_PROJECT_MESSAGE___" + col for col in SQ_Shortcut_to_RFX_RTM_PROJECT_MESSAGE.columns])
JNR_RFX_PROJ_MESSAGE_PRE_temp = JNR_RFX_PROJ_MESSAGE_PRE.toDF(*["JNR_RFX_PROJ_MESSAGE_PRE___" + col for col in JNR_RFX_PROJ_MESSAGE_PRE.columns])

JNR_RFX_RTM_PROJECT_MESSAGE = JNR_RFX_PROJ_MESSAGE_PRE_temp.join(SQ_Shortcut_to_RFX_RTM_PROJECT_MESSAGE_temp,[JNR_RFX_PROJ_MESSAGE_PRE_temp.JNR_RFX_PROJ_MESSAGE_PRE___PROJECT_ID == SQ_Shortcut_to_RFX_RTM_PROJECT_MESSAGE_temp.SQ_Shortcut_to_RFX_RTM_PROJECT_MESSAGE___RFX_PROJECT_ID, JNR_RFX_PROJ_MESSAGE_PRE_temp.JNR_RFX_PROJ_MESSAGE_PRE___LOCATION_ID == SQ_Shortcut_to_RFX_RTM_PROJECT_MESSAGE_temp.SQ_Shortcut_to_RFX_RTM_PROJECT_MESSAGE___LOCATION_ID, JNR_RFX_PROJ_MESSAGE_PRE_temp.JNR_RFX_PROJ_MESSAGE_PRE___MESSAGE_DATE == SQ_Shortcut_to_RFX_RTM_PROJECT_MESSAGE_temp.SQ_Shortcut_to_RFX_RTM_PROJECT_MESSAGE___RFX_MESSAGE_TSTMP, JNR_RFX_PROJ_MESSAGE_PRE_temp.JNR_RFX_PROJ_MESSAGE_PRE___MESSAGE_STATUS == SQ_Shortcut_to_RFX_RTM_PROJECT_MESSAGE_temp.SQ_Shortcut_to_RFX_RTM_PROJECT_MESSAGE___RFX_MESSAGE_STATUS_CD, JNR_RFX_PROJ_MESSAGE_PRE_temp.JNR_RFX_PROJ_MESSAGE_PRE___MESSAGE_TYPE == SQ_Shortcut_to_RFX_RTM_PROJECT_MESSAGE_temp.SQ_Shortcut_to_RFX_RTM_PROJECT_MESSAGE___RFX_MESSAGE_TYPE_CD],'left_outer').selectExpr(
	"JNR_RFX_PROJ_MESSAGE_PRE___PROJECT_ID as PROJECT_ID",
	"JNR_RFX_PROJ_MESSAGE_PRE___LOCATION_ID as LOCATION_ID",
	"JNR_RFX_PROJ_MESSAGE_PRE___UNIT_ID as UNIT_ID",
	"JNR_RFX_PROJ_MESSAGE_PRE___UNIT_ORG_LEVEL as UNIT_ORG_LEVEL",
	"JNR_RFX_PROJ_MESSAGE_PRE___MESSAGE_DATE as MESSAGE_DATE",
	"JNR_RFX_PROJ_MESSAGE_PRE___USER_ID as USER_ID",
	"JNR_RFX_PROJ_MESSAGE_PRE___USER_NAME as USER_NAME",
	"JNR_RFX_PROJ_MESSAGE_PRE___MESSAGE_TEXT as MESSAGE_TEXT",
	"JNR_RFX_PROJ_MESSAGE_PRE___MESSAGE_TYPE as MESSAGE_TYPE",
	"JNR_RFX_PROJ_MESSAGE_PRE___MESSAGE_TYPE_DESC as MESSAGE_TYPE_DESC",
	"JNR_RFX_PROJ_MESSAGE_PRE___MESSAGE_STATUS as MESSAGE_STATUS",
	"JNR_RFX_PROJ_MESSAGE_PRE___RECORD_TYPE as RECORD_TYPE",
	"SQ_Shortcut_to_RFX_RTM_PROJECT_MESSAGE___RFX_PROJECT_ID as i_RFX_PROJECT_ID",
	"SQ_Shortcut_to_RFX_RTM_PROJECT_MESSAGE___LOCATION_ID as i_LOCATION_ID",
	"SQ_Shortcut_to_RFX_RTM_PROJECT_MESSAGE___RFX_MESSAGE_TSTMP as i_RFX_MESSAGE_TSTMP",
	"SQ_Shortcut_to_RFX_RTM_PROJECT_MESSAGE___RFX_UNIT_ID as i_RFX_UNIT_ID",
	"SQ_Shortcut_to_RFX_RTM_PROJECT_MESSAGE___RFX_UNIT_ORG_LEVEL as i_RFX_UNIT_ORG_LEVEL",
	"SQ_Shortcut_to_RFX_RTM_PROJECT_MESSAGE___RFX_USER_ID as i_RFX_USER_ID",
	"SQ_Shortcut_to_RFX_RTM_PROJECT_MESSAGE___RFX_USER_NAME as i_RFX_USER_NAME",
	"SQ_Shortcut_to_RFX_RTM_PROJECT_MESSAGE___RFX_MESSAGE_TEXT as i_RFX_MESSAGE_TEXT",
	"SQ_Shortcut_to_RFX_RTM_PROJECT_MESSAGE___RFX_MESSAGE_TYPE_CD as i_RFX_MESSAGE_TYPE_CD",
	"SQ_Shortcut_to_RFX_RTM_PROJECT_MESSAGE___RFX_MESSAGE_TYPE_DESC as i_RFX_MESSAGE_TYPE_DESC",
	"SQ_Shortcut_to_RFX_RTM_PROJECT_MESSAGE___RFX_MESSAGE_STATUS_CD as i_RFX_MESSAGE_STATUS_CD",
	"SQ_Shortcut_to_RFX_RTM_PROJECT_MESSAGE___RFX_MESSAGE_RECORD_TYPE_CD as i_RFX_MESSAGE_RECORD_TYPE_CD",
	"SQ_Shortcut_to_RFX_RTM_PROJECT_MESSAGE___LOAD_TSTMP as i_LOAD_TSTMP")

# COMMAND ----------

# Processing node FIL_RFX_RTM_PROJECT_MESSAGE, type FILTER 
# COLUMN COUNT: 25

# for each involved DataFrame, append the dataframe name to each column
JNR_RFX_RTM_PROJECT_MESSAGE_temp = JNR_RFX_RTM_PROJECT_MESSAGE.toDF(*["JNR_RFX_RTM_PROJECT_MESSAGE___" + col for col in JNR_RFX_RTM_PROJECT_MESSAGE.columns])

FIL_RFX_RTM_PROJECT_MESSAGE = JNR_RFX_RTM_PROJECT_MESSAGE_temp.selectExpr(
	"JNR_RFX_RTM_PROJECT_MESSAGE___PROJECT_ID as PROJECT_ID",
	"JNR_RFX_RTM_PROJECT_MESSAGE___LOCATION_ID as LOCATION_ID",
	"JNR_RFX_RTM_PROJECT_MESSAGE___UNIT_ID as UNIT_ID",
	"JNR_RFX_RTM_PROJECT_MESSAGE___UNIT_ORG_LEVEL as UNIT_ORG_LEVEL",
	"JNR_RFX_RTM_PROJECT_MESSAGE___MESSAGE_DATE as MESSAGE_DATE",
	"JNR_RFX_RTM_PROJECT_MESSAGE___USER_ID as USER_ID",
	"JNR_RFX_RTM_PROJECT_MESSAGE___USER_NAME as USER_NAME",
	"JNR_RFX_RTM_PROJECT_MESSAGE___MESSAGE_TEXT as MESSAGE_TEXT",
	"JNR_RFX_RTM_PROJECT_MESSAGE___MESSAGE_TYPE as MESSAGE_TYPE",
	"JNR_RFX_RTM_PROJECT_MESSAGE___MESSAGE_TYPE_DESC as MESSAGE_TYPE_DESC",
	"JNR_RFX_RTM_PROJECT_MESSAGE___MESSAGE_STATUS as MESSAGE_STATUS",
	"JNR_RFX_RTM_PROJECT_MESSAGE___RECORD_TYPE as RECORD_TYPE",
	"JNR_RFX_RTM_PROJECT_MESSAGE___i_RFX_PROJECT_ID as i_RFX_PROJECT_ID",
	"JNR_RFX_RTM_PROJECT_MESSAGE___i_LOCATION_ID as i_LOCATION_ID",
	"JNR_RFX_RTM_PROJECT_MESSAGE___i_RFX_MESSAGE_TSTMP as i_RFX_MESSAGE_TSTMP",
	"JNR_RFX_RTM_PROJECT_MESSAGE___i_RFX_UNIT_ID as i_RFX_UNIT_ID",
	"JNR_RFX_RTM_PROJECT_MESSAGE___i_RFX_UNIT_ORG_LEVEL as i_RFX_UNIT_ORG_LEVEL",
	"JNR_RFX_RTM_PROJECT_MESSAGE___i_RFX_USER_ID as i_RFX_USER_ID",
	"JNR_RFX_RTM_PROJECT_MESSAGE___i_RFX_USER_NAME as i_RFX_USER_NAME",
	"JNR_RFX_RTM_PROJECT_MESSAGE___i_RFX_MESSAGE_TEXT as i_RFX_MESSAGE_TEXT",
	"JNR_RFX_RTM_PROJECT_MESSAGE___i_RFX_MESSAGE_TYPE_CD as i_RFX_MESSAGE_TYPE_CD",
	"JNR_RFX_RTM_PROJECT_MESSAGE___i_RFX_MESSAGE_TYPE_DESC as i_RFX_MESSAGE_TYPE_DESC",
	"JNR_RFX_RTM_PROJECT_MESSAGE___i_RFX_MESSAGE_STATUS_CD as i_RFX_MESSAGE_STATUS_CD",
	"JNR_RFX_RTM_PROJECT_MESSAGE___i_RFX_MESSAGE_RECORD_TYPE_CD as i_RFX_MESSAGE_RECORD_TYPE_CD",
	"JNR_RFX_RTM_PROJECT_MESSAGE___i_LOAD_TSTMP as i_LOAD_TSTMP").filter("i_RFX_MESSAGE_TSTMP IS NULL OR ( i_RFX_MESSAGE_TSTMP IS NOT NULL AND ( IF (UNIT_ID IS NULL, '', UNIT_ID) != IF (i_RFX_UNIT_ID IS NULL, '', i_RFX_UNIT_ID) OR IF (UNIT_ORG_LEVEL IS NULL, - 9999, UNIT_ORG_LEVEL) != IF (i_RFX_UNIT_ORG_LEVEL IS NULL, - 9999, i_RFX_UNIT_ORG_LEVEL) OR IF (USER_ID IS NULL, '', USER_ID) != IF (i_RFX_USER_ID IS NULL, '', i_RFX_USER_ID) OR IF (USER_NAME IS NULL, '', USER_NAME) != IF (i_RFX_USER_NAME IS NULL, '', i_RFX_USER_NAME) OR IF (MESSAGE_TEXT IS NULL, '', MESSAGE_TEXT) != IF (i_RFX_MESSAGE_TEXT IS NULL, '', i_RFX_MESSAGE_TEXT) OR IF (MESSAGE_TYPE_DESC IS NULL, '', MESSAGE_TYPE_DESC) != IF (i_RFX_MESSAGE_TYPE_DESC IS NULL, '', i_RFX_MESSAGE_TYPE_DESC) OR IF (RECORD_TYPE IS NULL, '', RECORD_TYPE) != IF (i_RFX_MESSAGE_RECORD_TYPE_CD IS NULL, '', i_RFX_MESSAGE_RECORD_TYPE_CD) ) )").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------

# Processing node EXP_RFX_RTM_PROJECT_MESSAGE, type EXPRESSION 
# COLUMN COUNT: 17

# for each involved DataFrame, append the dataframe name to each column
FIL_RFX_RTM_PROJECT_MESSAGE_temp = FIL_RFX_RTM_PROJECT_MESSAGE.toDF(*["FIL_RFX_RTM_PROJECT_MESSAGE___" + col for col in FIL_RFX_RTM_PROJECT_MESSAGE.columns])

EXP_RFX_RTM_PROJECT_MESSAGE = FIL_RFX_RTM_PROJECT_MESSAGE_temp.selectExpr(
	"FIL_RFX_RTM_PROJECT_MESSAGE___sys_row_id as sys_row_id",
	"FIL_RFX_RTM_PROJECT_MESSAGE___PROJECT_ID as PROJECT_ID",
	"FIL_RFX_RTM_PROJECT_MESSAGE___LOCATION_ID as LOCATION_ID",
	"FIL_RFX_RTM_PROJECT_MESSAGE___UNIT_ID as UNIT_ID",
	"FIL_RFX_RTM_PROJECT_MESSAGE___UNIT_ORG_LEVEL as UNIT_ORG_LEVEL",
	"FIL_RFX_RTM_PROJECT_MESSAGE___MESSAGE_DATE as MESSAGE_DATE",
	"FIL_RFX_RTM_PROJECT_MESSAGE___USER_ID as USER_ID",
	"FIL_RFX_RTM_PROJECT_MESSAGE___USER_NAME as USER_NAME",
	"FIL_RFX_RTM_PROJECT_MESSAGE___MESSAGE_TEXT as MESSAGE_TEXT",
	"FIL_RFX_RTM_PROJECT_MESSAGE___MESSAGE_TYPE as MESSAGE_TYPE",
	"FIL_RFX_RTM_PROJECT_MESSAGE___MESSAGE_TYPE_DESC as MESSAGE_TYPE_DESC",
	"FIL_RFX_RTM_PROJECT_MESSAGE___MESSAGE_STATUS as MESSAGE_STATUS",
	"FIL_RFX_RTM_PROJECT_MESSAGE___RECORD_TYPE as RECORD_TYPE",
	"FIL_RFX_RTM_PROJECT_MESSAGE___i_RFX_MESSAGE_TSTMP as i_RFX_MESSAGE_TSTMP",
	"FIL_RFX_RTM_PROJECT_MESSAGE___i_LOAD_TSTMP as i_LOAD_TSTMP",
	"IF (FIL_RFX_RTM_PROJECT_MESSAGE___i_RFX_MESSAGE_TSTMP IS NULL, 1, 2) as o_UPDATE_VALIDATOR",
	"CURRENT_TIMESTAMP as UPDATE_TSTMP",
	"IF (FIL_RFX_RTM_PROJECT_MESSAGE___i_LOAD_TSTMP IS NULL, CURRENT_TIMESTAMP, FIL_RFX_RTM_PROJECT_MESSAGE___i_LOAD_TSTMP) as LOAD_TSTMP"
)

# COMMAND ----------

# Processing node UPD_RFX_RTM_PROJECT_MESSAGE, type UPDATE_STRATEGY 
# COLUMN COUNT: 15

# for each involved DataFrame, append the dataframe name to each column
EXP_RFX_RTM_PROJECT_MESSAGE_temp = EXP_RFX_RTM_PROJECT_MESSAGE.toDF(*["EXP_RFX_RTM_PROJECT_MESSAGE___" + col for col in EXP_RFX_RTM_PROJECT_MESSAGE.columns])

UPD_RFX_RTM_PROJECT_MESSAGE = EXP_RFX_RTM_PROJECT_MESSAGE_temp.selectExpr(
	"EXP_RFX_RTM_PROJECT_MESSAGE___PROJECT_ID as PROJECT_ID",
	"EXP_RFX_RTM_PROJECT_MESSAGE___LOCATION_ID as LOCATION_ID",
	"EXP_RFX_RTM_PROJECT_MESSAGE___UNIT_ID as UNIT_ID",
	"EXP_RFX_RTM_PROJECT_MESSAGE___UNIT_ORG_LEVEL as UNIT_ORG_LEVEL",
	"EXP_RFX_RTM_PROJECT_MESSAGE___MESSAGE_DATE as MESSAGE_DATE",
	"EXP_RFX_RTM_PROJECT_MESSAGE___USER_ID as USER_ID",
	"EXP_RFX_RTM_PROJECT_MESSAGE___USER_NAME as USER_NAME",
	"EXP_RFX_RTM_PROJECT_MESSAGE___MESSAGE_TEXT as MESSAGE_TEXT",
	"EXP_RFX_RTM_PROJECT_MESSAGE___MESSAGE_TYPE as MESSAGE_TYPE",
	"EXP_RFX_RTM_PROJECT_MESSAGE___MESSAGE_TYPE_DESC as MESSAGE_TYPE_DESC",
	"EXP_RFX_RTM_PROJECT_MESSAGE___MESSAGE_STATUS as MESSAGE_STATUS",
	"EXP_RFX_RTM_PROJECT_MESSAGE___RECORD_TYPE as RECORD_TYPE",
	"EXP_RFX_RTM_PROJECT_MESSAGE___o_UPDATE_VALIDATOR as o_UPDATE_VALIDATOR",
	"EXP_RFX_RTM_PROJECT_MESSAGE___UPDATE_TSTMP as UPDATE_TSTMP",
	"EXP_RFX_RTM_PROJECT_MESSAGE___LOAD_TSTMP as LOAD_TSTMP",
	"if(EXP_RFX_RTM_PROJECT_MESSAGE___o_UPDATE_VALIDATOR==1,0,1) as pyspark_data_action")

# COMMAND ----------

# Processing node Shortcut_to_RFX_RTM_PROJECT_MESSAGE1, type TARGET 
# COLUMN COUNT: 14


Shortcut_to_RFX_RTM_PROJECT_MESSAGE1 = UPD_RFX_RTM_PROJECT_MESSAGE.selectExpr(
	"CAST(PROJECT_ID AS STRING) as RFX_PROJECT_ID",
	"CAST(LOCATION_ID AS BIGINT) as LOCATION_ID",
	"CAST(MESSAGE_DATE AS TIMESTAMP) as RFX_MESSAGE_TSTMP",
	"CAST(UNIT_ID AS STRING) as RFX_UNIT_ID",
	"UNIT_ORG_LEVEL as RFX_UNIT_ORG_LEVEL",
	"CAST(USER_ID AS STRING) as RFX_USER_ID",
	"CAST(USER_NAME AS STRING) as RFX_USER_NAME",
	"CAST(MESSAGE_TEXT AS STRING) as RFX_MESSAGE_TEXT",
	"CAST(MESSAGE_TYPE AS STRING) as RFX_MESSAGE_TYPE_CD",
	"CAST(MESSAGE_TYPE_DESC AS STRING) as RFX_MESSAGE_TYPE_DESC",
	"CAST(MESSAGE_STATUS AS STRING) as RFX_MESSAGE_STATUS_CD",
	"CAST(RECORD_TYPE AS STRING) as RFX_MESSAGE_RECORD_TYPE_CD",
	"CAST(UPDATE_TSTMP AS TIMESTAMP) as UPDATE_TSTMP",
	"CAST(LOAD_TSTMP AS TIMESTAMP) as LOAD_TSTMP",
	"pyspark_data_action as pyspark_data_action"
)

try:
	primary_key = """source.RFX_PROJECT_ID = target.RFX_PROJECT_ID AND source.LOCATION_ID = target.LOCATION_ID AND source.RFX_MESSAGE_TSTMP = target.RFX_MESSAGE_TSTMP AND source.RFX_MESSAGE_TYPE_CD = target.RFX_MESSAGE_TYPE_CD AND source.RFX_MESSAGE_STATUS_CD = target.RFX_MESSAGE_STATUS_CD"""
	refined_perf_table = f"{legacy}.RFX_RTM_PROJECT_MESSAGE"
	executeMerge(Shortcut_to_RFX_RTM_PROJECT_MESSAGE1, refined_perf_table, primary_key)
	logger.info(f"Merge with {refined_perf_table} completed]")
	logPrevRunDt("RFX_RTM_PROJECT_MESSAGE", "RFX_RTM_PROJECT_MESSAGE", "Completed", "N/A", f"{raw}.log_run_details")
except Exception as e:
	logPrevRunDt("RFX_RTM_PROJECT_MESSAGE", "RFX_RTM_PROJECT_MESSAGE","Failed",str(e), f"{raw}.log_run_details")
	raise e
		

# COMMAND ----------


