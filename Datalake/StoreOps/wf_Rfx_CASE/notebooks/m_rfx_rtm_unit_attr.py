# Databricks notebook source
# Code converted on 2023-08-25 11:50:39
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from Datalake.utils.genericUtilities import *
from Datalake.utils.configs import *
from Datalake.utils.mergeUtils import *
from Datalake.utils.logger import *

# COMMAND ----------

spark = SparkSession.getActiveSession()
dbutils = DBUtils(spark)

dbutils.widgets.text(name="env", defaultValue="dev")
env = dbutils.widgets.get("env")

if env is None or env == '':
    raise ValueError('env is not set')

refine = getEnvPrefix(env) + 'refine'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'


# COMMAND ----------

# Processing node SQ_Shortcut_to_RFX_UNIT_ATTRIBUTE_PRE, type SOURCE 
# COLUMN COUNT: 7

SQ_Shortcut_to_RFX_UNIT_ATTRIBUTE_PRE = spark.sql(f"""SELECT
RFX_UNIT_ATTRIBUTE_PRE.UNIT_ID,
RFX_UNIT_ATTRIBUTE_PRE.UNIT_ORG_LEVEL,
RFX_UNIT_ATTRIBUTE_PRE.ATTRIBUTE_ID,
RFX_UNIT_ATTRIBUTE_PRE.ATTRIBUTE_DESCRIPTION,
RFX_UNIT_ATTRIBUTE_PRE.ATTRIBUTE_TEXT_VALUE,
RFX_UNIT_ATTRIBUTE_PRE.ATTRIBUTE_NUMERIC_VALUE,
RFX_UNIT_ATTRIBUTE_PRE.ATTRIBUTE_DATE_VALUE
FROM {raw}.RFX_UNIT_ATTRIBUTE_PRE""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------

# Processing node SQ_Shortcut_to_RFX_RTM_UNIT_ATTR, type SOURCE 
# COLUMN COUNT: 8

SQ_Shortcut_to_RFX_RTM_UNIT_ATTR = spark.sql(f"""SELECT
RFX_RTM_UNIT_ATTR.RFX_UNIT_ID,
RFX_RTM_UNIT_ATTR.RFX_UNIT_ORG_LEVEL,
RFX_RTM_UNIT_ATTR.RFX_ATTR_ID,
RFX_RTM_UNIT_ATTR.RFX_ATTR_DESC,
RFX_RTM_UNIT_ATTR.ATTR_TEXT_VALUE,
RFX_RTM_UNIT_ATTR.ATTR_NUMERIC_VALUE,
RFX_RTM_UNIT_ATTR.ATTR_DATE_VALUE,
RFX_RTM_UNIT_ATTR.LOAD_TSTMP
FROM {legacy}.RFX_RTM_UNIT_ATTR""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------

# Processing node JNR_RFX_RTM_UNIT_ATTR, type JOINER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 15

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_RFX_UNIT_ATTRIBUTE_PRE_temp = SQ_Shortcut_to_RFX_UNIT_ATTRIBUTE_PRE.toDF(*["SQ_Shortcut_to_RFX_UNIT_ATTRIBUTE_PRE___" + col for col in SQ_Shortcut_to_RFX_UNIT_ATTRIBUTE_PRE.columns])
SQ_Shortcut_to_RFX_RTM_UNIT_ATTR_temp = SQ_Shortcut_to_RFX_RTM_UNIT_ATTR.toDF(*["SQ_Shortcut_to_RFX_RTM_UNIT_ATTR___" + col for col in SQ_Shortcut_to_RFX_RTM_UNIT_ATTR.columns])

JNR_RFX_RTM_UNIT_ATTR = SQ_Shortcut_to_RFX_UNIT_ATTRIBUTE_PRE_temp.join(SQ_Shortcut_to_RFX_RTM_UNIT_ATTR_temp,[SQ_Shortcut_to_RFX_UNIT_ATTRIBUTE_PRE_temp.SQ_Shortcut_to_RFX_UNIT_ATTRIBUTE_PRE___UNIT_ID == SQ_Shortcut_to_RFX_RTM_UNIT_ATTR_temp.SQ_Shortcut_to_RFX_RTM_UNIT_ATTR___RFX_UNIT_ID, SQ_Shortcut_to_RFX_UNIT_ATTRIBUTE_PRE_temp.SQ_Shortcut_to_RFX_UNIT_ATTRIBUTE_PRE___UNIT_ORG_LEVEL == SQ_Shortcut_to_RFX_RTM_UNIT_ATTR_temp.SQ_Shortcut_to_RFX_RTM_UNIT_ATTR___RFX_UNIT_ORG_LEVEL, SQ_Shortcut_to_RFX_UNIT_ATTRIBUTE_PRE_temp.SQ_Shortcut_to_RFX_UNIT_ATTRIBUTE_PRE___ATTRIBUTE_ID == SQ_Shortcut_to_RFX_RTM_UNIT_ATTR_temp.SQ_Shortcut_to_RFX_RTM_UNIT_ATTR___RFX_ATTR_ID],'left_outer').selectExpr(
	"SQ_Shortcut_to_RFX_UNIT_ATTRIBUTE_PRE___UNIT_ID as UNIT_ID",
	"SQ_Shortcut_to_RFX_UNIT_ATTRIBUTE_PRE___UNIT_ORG_LEVEL as UNIT_ORG_LEVEL",
	"SQ_Shortcut_to_RFX_UNIT_ATTRIBUTE_PRE___ATTRIBUTE_ID as ATTRIBUTE_ID",
	"SQ_Shortcut_to_RFX_UNIT_ATTRIBUTE_PRE___ATTRIBUTE_DESCRIPTION as ATTRIBUTE_DESCRIPTION",
	"SQ_Shortcut_to_RFX_UNIT_ATTRIBUTE_PRE___ATTRIBUTE_TEXT_VALUE as ATTRIBUTE_TEXT_VALUE",
	"SQ_Shortcut_to_RFX_UNIT_ATTRIBUTE_PRE___ATTRIBUTE_NUMERIC_VALUE as ATTRIBUTE_NUMERIC_VALUE",
	"SQ_Shortcut_to_RFX_UNIT_ATTRIBUTE_PRE___ATTRIBUTE_DATE_VALUE as ATTRIBUTE_DATE_VALUE",
	"SQ_Shortcut_to_RFX_RTM_UNIT_ATTR___RFX_UNIT_ID as i_RFX_UNIT_ID",
	"SQ_Shortcut_to_RFX_RTM_UNIT_ATTR___RFX_UNIT_ORG_LEVEL as i_RFX_UNIT_ORG_LEVEL",
	"SQ_Shortcut_to_RFX_RTM_UNIT_ATTR___RFX_ATTR_ID as i_RFX_ATTR_ID",
	"SQ_Shortcut_to_RFX_RTM_UNIT_ATTR___RFX_ATTR_DESC as i_RFX_ATTR_DESC",
	"SQ_Shortcut_to_RFX_RTM_UNIT_ATTR___ATTR_TEXT_VALUE as i_ATTR_TEXT_VALUE",
	"SQ_Shortcut_to_RFX_RTM_UNIT_ATTR___ATTR_NUMERIC_VALUE as i_ATTR_NUMERIC_VALUE",
	"SQ_Shortcut_to_RFX_RTM_UNIT_ATTR___ATTR_DATE_VALUE as i_ATTR_DATE_VALUE",
	"SQ_Shortcut_to_RFX_RTM_UNIT_ATTR___LOAD_TSTMP as i_LOAD_TSTMP")

# COMMAND ----------

# Processing node FIL_RFX_RTM_UNIT_ATTR, type FILTER 
# COLUMN COUNT: 15

# for each involved DataFrame, append the dataframe name to each column
JNR_RFX_RTM_UNIT_ATTR_temp = JNR_RFX_RTM_UNIT_ATTR.toDF(*["JNR_RFX_RTM_UNIT_ATTR___" + col for col in JNR_RFX_RTM_UNIT_ATTR.columns])

FIL_RFX_RTM_UNIT_ATTR = JNR_RFX_RTM_UNIT_ATTR_temp.selectExpr(
	"JNR_RFX_RTM_UNIT_ATTR___UNIT_ID as UNIT_ID",
	"JNR_RFX_RTM_UNIT_ATTR___UNIT_ORG_LEVEL as UNIT_ORG_LEVEL",
	"JNR_RFX_RTM_UNIT_ATTR___ATTRIBUTE_ID as ATTRIBUTE_ID",
	"JNR_RFX_RTM_UNIT_ATTR___ATTRIBUTE_DESCRIPTION as ATTRIBUTE_DESCRIPTION",
	"JNR_RFX_RTM_UNIT_ATTR___ATTRIBUTE_TEXT_VALUE as ATTRIBUTE_TEXT_VALUE",
	"JNR_RFX_RTM_UNIT_ATTR___ATTRIBUTE_NUMERIC_VALUE as ATTRIBUTE_NUMERIC_VALUE",
	"JNR_RFX_RTM_UNIT_ATTR___ATTRIBUTE_DATE_VALUE as ATTRIBUTE_DATE_VALUE",
	"JNR_RFX_RTM_UNIT_ATTR___i_RFX_UNIT_ID as i_RFX_UNIT_ID",
	"JNR_RFX_RTM_UNIT_ATTR___i_RFX_UNIT_ORG_LEVEL as i_RFX_UNIT_ORG_LEVEL",
	"JNR_RFX_RTM_UNIT_ATTR___i_RFX_ATTR_ID as i_RFX_ATTR_ID",
	"JNR_RFX_RTM_UNIT_ATTR___i_RFX_ATTR_DESC as i_RFX_ATTR_DESC",
	"JNR_RFX_RTM_UNIT_ATTR___i_ATTR_TEXT_VALUE as i_ATTR_TEXT_VALUE",
	"JNR_RFX_RTM_UNIT_ATTR___i_ATTR_NUMERIC_VALUE as i_ATTR_NUMERIC_VALUE",
	"JNR_RFX_RTM_UNIT_ATTR___i_ATTR_DATE_VALUE as i_ATTR_DATE_VALUE",
	"JNR_RFX_RTM_UNIT_ATTR___i_LOAD_TSTMP as i_LOAD_TSTMP").filter("i_RFX_UNIT_ID IS NULL AND i_RFX_UNIT_ORG_LEVEL IS NULL AND i_RFX_ATTR_ID IS NULL OR ( i_RFX_UNIT_ID IS NOT NULL AND i_RFX_UNIT_ORG_LEVEL IS NOT NULL AND i_RFX_ATTR_ID IS NOT NULL AND ( IF (ATTRIBUTE_DESCRIPTION IS NULL, '', ATTRIBUTE_DESCRIPTION) != IF (i_RFX_ATTR_DESC IS NULL, '', i_RFX_ATTR_DESC) OR IF (ATTRIBUTE_TEXT_VALUE IS NULL, '', ATTRIBUTE_TEXT_VALUE) != IF (i_ATTR_TEXT_VALUE IS NULL, '', i_ATTR_TEXT_VALUE) OR IF (ATTRIBUTE_NUMERIC_VALUE IS NULL, 0, ATTRIBUTE_NUMERIC_VALUE) != IF (i_ATTR_NUMERIC_VALUE IS NULL, 0, i_ATTR_NUMERIC_VALUE) OR IF (ATTRIBUTE_DATE_VALUE IS NULL, TO_DATE ( '1901-01-01' , 'y-M-d' ), ATTRIBUTE_DATE_VALUE) != IF (i_ATTR_DATE_VALUE IS NULL, TO_DATE ( '1901-01-01' , 'y-M-d' ), i_ATTR_DATE_VALUE) ) )").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------

# Processing node EXP_RFX_RTM_UNIT_ATTR, type EXPRESSION 
# COLUMN COUNT: 14

# for each involved DataFrame, append the dataframe name to each column
FIL_RFX_RTM_UNIT_ATTR_temp = FIL_RFX_RTM_UNIT_ATTR.toDF(*["FIL_RFX_RTM_UNIT_ATTR___" + col for col in FIL_RFX_RTM_UNIT_ATTR.columns])

EXP_RFX_RTM_UNIT_ATTR = FIL_RFX_RTM_UNIT_ATTR_temp.selectExpr(
	"FIL_RFX_RTM_UNIT_ATTR___sys_row_id as sys_row_id",
	"FIL_RFX_RTM_UNIT_ATTR___UNIT_ID as UNIT_ID",
	"FIL_RFX_RTM_UNIT_ATTR___UNIT_ORG_LEVEL as UNIT_ORG_LEVEL",
	"FIL_RFX_RTM_UNIT_ATTR___ATTRIBUTE_ID as ATTRIBUTE_ID",
	"FIL_RFX_RTM_UNIT_ATTR___ATTRIBUTE_DESCRIPTION as ATTRIBUTE_DESCRIPTION",
	"FIL_RFX_RTM_UNIT_ATTR___ATTRIBUTE_TEXT_VALUE as ATTRIBUTE_TEXT_VALUE",
	"FIL_RFX_RTM_UNIT_ATTR___ATTRIBUTE_NUMERIC_VALUE as ATTRIBUTE_NUMERIC_VALUE",
	"FIL_RFX_RTM_UNIT_ATTR___ATTRIBUTE_DATE_VALUE as ATTRIBUTE_DATE_VALUE",
	"FIL_RFX_RTM_UNIT_ATTR___i_RFX_UNIT_ID as i_RFX_UNIT_ID",
	"FIL_RFX_RTM_UNIT_ATTR___i_RFX_UNIT_ORG_LEVEL as i_RFX_UNIT_ORG_LEVEL",
	"FIL_RFX_RTM_UNIT_ATTR___i_RFX_ATTR_ID as i_RFX_ATTR_ID",
	"FIL_RFX_RTM_UNIT_ATTR___i_LOAD_TSTMP as i_LOAD_TSTMP",
	"IF (( FIL_RFX_RTM_UNIT_ATTR___i_RFX_UNIT_ID IS NULL AND FIL_RFX_RTM_UNIT_ATTR___i_RFX_UNIT_ORG_LEVEL IS NULL AND FIL_RFX_RTM_UNIT_ATTR___i_RFX_ATTR_ID IS NULL ), 1, 2) as o_UPDATE_VALIDATOR",
	"CURRENT_TIMESTAMP as UPDATE_TSTMP",
	"IF (FIL_RFX_RTM_UNIT_ATTR___i_LOAD_TSTMP IS NULL, CURRENT_TIMESTAMP, FIL_RFX_RTM_UNIT_ATTR___i_LOAD_TSTMP) as LOAD_TSTMP"
)

# COMMAND ----------

# Processing node UPD_RFX_RTM_UNIT_ATTR, type UPDATE_STRATEGY 
# COLUMN COUNT: 10

# for each involved DataFrame, append the dataframe name to each column
EXP_RFX_RTM_UNIT_ATTR_temp = EXP_RFX_RTM_UNIT_ATTR.toDF(*["EXP_RFX_RTM_UNIT_ATTR___" + col for col in EXP_RFX_RTM_UNIT_ATTR.columns])

UPD_RFX_RTM_UNIT_ATTR = EXP_RFX_RTM_UNIT_ATTR_temp.selectExpr(
	"EXP_RFX_RTM_UNIT_ATTR___UNIT_ID as UNIT_ID",
	"EXP_RFX_RTM_UNIT_ATTR___UNIT_ORG_LEVEL as UNIT_ORG_LEVEL",
	"EXP_RFX_RTM_UNIT_ATTR___ATTRIBUTE_ID as ATTRIBUTE_ID",
	"EXP_RFX_RTM_UNIT_ATTR___ATTRIBUTE_DESCRIPTION as ATTRIBUTE_DESCRIPTION",
	"EXP_RFX_RTM_UNIT_ATTR___ATTRIBUTE_TEXT_VALUE as ATTRIBUTE_TEXT_VALUE",
	"EXP_RFX_RTM_UNIT_ATTR___ATTRIBUTE_NUMERIC_VALUE as ATTRIBUTE_NUMERIC_VALUE",
	"EXP_RFX_RTM_UNIT_ATTR___ATTRIBUTE_DATE_VALUE as ATTRIBUTE_DATE_VALUE",
	"EXP_RFX_RTM_UNIT_ATTR___o_UPDATE_VALIDATOR as o_UPDATE_VALIDATOR",
	"EXP_RFX_RTM_UNIT_ATTR___UPDATE_TSTMP as UPDATE_TSTMP",
	"EXP_RFX_RTM_UNIT_ATTR___LOAD_TSTMP as LOAD_TSTMP",
	"if(EXP_RFX_RTM_UNIT_ATTR___o_UPDATE_VALIDATOR==1,0,1) as pyspark_data_action")

# COMMAND ----------

# Processing node Shortcut_to_RFX_RTM_UNIT_ATTR, type TARGET 
# COLUMN COUNT: 9


Shortcut_to_RFX_RTM_UNIT_ATTR = UPD_RFX_RTM_UNIT_ATTR.selectExpr(
	"CAST(UNIT_ID AS STRING) as RFX_UNIT_ID",
	"CAST(UNIT_ORG_LEVEL AS SMALLINT) as RFX_UNIT_ORG_LEVEL",
	"CAST(ATTRIBUTE_ID AS STRING) as RFX_ATTR_ID",
	"CAST(ATTRIBUTE_DESCRIPTION AS STRING) as RFX_ATTR_DESC",
	"CAST(ATTRIBUTE_TEXT_VALUE AS STRING) as ATTR_TEXT_VALUE",
	"CAST(ATTRIBUTE_NUMERIC_VALUE AS DECIMAL(22,4)) as ATTR_NUMERIC_VALUE",
	"CAST(ATTRIBUTE_DATE_VALUE AS TIMESTAMP) as ATTR_DATE_VALUE",
	"CAST(UPDATE_TSTMP AS TIMESTAMP) as UPDATE_TSTMP",
	"CAST(LOAD_TSTMP AS TIMESTAMP) as LOAD_TSTMP",
	"pyspark_data_action as pyspark_data_action"
)

try:
	primary_key = """source.RFX_UNIT_ID = target.RFX_UNIT_ID AND source.RFX_UNIT_ORG_LEVEL = target.RFX_UNIT_ORG_LEVEL AND source.RFX_ATTR_ID = target.RFX_ATTR_ID"""
	refined_perf_table = f"{legacy}.RFX_RTM_UNIT_ATTR"
	executeMerge(Shortcut_to_RFX_RTM_UNIT_ATTR, refined_perf_table, primary_key)
	logger.info(f"Merge with {refined_perf_table} completed]")
	logPrevRunDt("RFX_RTM_UNIT_ATTR", "RFX_RTM_UNIT_ATTR", "Completed", "N/A", f"{raw}.log_run_details")
except Exception as e:
	logPrevRunDt("RFX_RTM_UNIT_ATTR", "RFX_RTM_UNIT_ATTR","Failed",str(e), f"{raw}.log_run_details")
	raise e
		

# COMMAND ----------


