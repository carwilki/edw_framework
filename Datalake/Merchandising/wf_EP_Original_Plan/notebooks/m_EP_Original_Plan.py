# Databricks notebook source
#Code converted on 2023-10-24 13:21:38
import os
from pyspark.sql import *
from pyspark.sql.functions import *
from datetime import datetime
from Datalake.utils.genericUtilities import *
from Datalake.utils.configs import *
from Datalake.utils.mergeUtils import *
from Datalake.utils.logger import *
from Datalake.utils.pk import *

# COMMAND ----------

spark = SparkSession.getActiveSession()
dbutils = DBUtils(spark)
dbutils.widgets.text(name = 'env', defaultValue = 'dev')
env = dbutils.widgets.get('env')

if env is None or env == '':
    raise ValueError('env is not set')

raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'
refine = getEnvPrefix(env) + 'refine'
enterprise = getEnvPrefix(env) + 'enterprise'

# Set global variables
starttime = datetime.now() #start timestamp of the script


# COMMAND ----------

# Processing node LKP_WEEKS_SRC, type SOURCE Cached data from connected lookup object
# COLUMN COUNT: 1

LKP_WEEKS_SRC = spark.sql(f"""SELECT
WEEK_DT,
FISCAL_WK
FROM {enterprise}.WEEKS""")
# Conforming fields names to the component layout
# LKP_WEEKS_SRC = LKP_WEEKS_SRC \
# 	.withColumnRenamed(LKP_WEEKS_SRC.columns[0],'')

# COMMAND ----------

# LKP_WEEKS_SRC.show()

# COMMAND ----------

# Processing node SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE, type SOURCE 
# COLUMN COUNT: 47

SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE = spark.sql(f"""SELECT
PRODUCT_KEY,
ORGANIZATION_KEY,
CALENDAR_KEY,
PRODUCT_NAME,
CALENDAR_NAME,
ADJ_UNT_OP,
ADJ_VAL_OP,
BFRX_VAL_OP,
BOP_UNT_OP,
BOP_VAL_OP,
CLRFUND_VAL_OP,
COMBSLS_RTL_OP,
COMPSLS_RTL_OP,
COMPSLS_UNT_OP,
DCCOSTS_VAL_OP,
DEFECT_VAL_OP,
CD_VAL_OP,
EOPNORM_UNT_OP,
EOPNORM_VAL_OP,
EOP_UNT_OP,
EOP_VAL_OP,
MDCLR_VAL_OP,
MDPRO_VAL_OP,
NCOMSLS_RTL_OP,
OBSO_UNT_OP,
OBSO_VAL_OP,
OTHADJ_VAL_OP,
OUTFRT_VAL_OP,
PROFUND_VAL_OP,
REC_UNT_OP,
REC_VAL_OP,
REMOVAL_UNT_OP,
REMOVAL_VAL_OP,
ROYS_VAL_OP,
RSLSCLR_VAL_OP,
RSLSPRO_VAL_OP,
SHRINK_UNT_OP,
SHRINK_VAL_OP,
TRTLSLS_VAL_OP,
TTLSLS_UNT_OP,
TTLSLS_VAL_OP,
DAMAGES_UNT_OP,
DAMAGES_VAL_OP,
SERVADJ_VAL_OP,
SERVEXP_VAL_OP,
COMPGM_VAL_OP,
UPDATE_DATE
FROM {raw}.EP_PF_FT_PL_OP1_000_PRE""").withColumn("sys_row_id", monotonically_increasing_id())
# Conforming fields names to the component layout
SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE = SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE \
	.withColumnRenamed(SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns[0],'PRODUCT_KEY') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns[1],'ORGANIZATION_KEY') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns[2],'CALENDAR_KEY') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns[3],'PRODUCT_NAME') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns[4],'CALENDAR_NAME') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns[5],'ADJ_UNT_OP') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns[6],'ADJ_VAL_OP') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns[7],'BFRX_VAL_OP') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns[8],'BOP_UNT_OP') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns[9],'BOP_VAL_OP') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns[10],'CLRFUND_VAL_OP') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns[11],'COMBSLS_RTL_OP') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns[12],'COMPSLS_RTL_OP') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns[13],'COMPSLS_UNT_OP') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns[14],'DCCOSTS_VAL_OP') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns[15],'DEFECT_VAL_OP') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns[16],'CD_VAL_OP') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns[17],'EOPNORM_UNT_OP') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns[18],'EOPNORM_VAL_OP') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns[19],'EOP_UNT_OP') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns[20],'EOP_VAL_OP') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns[21],'MDCLR_VAL_OP') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns[22],'MDPRO_VAL_OP') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns[23],'NCOMSLS_RTL_OP') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns[24],'OBSO_UNT_OP') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns[25],'OBSO_VAL_OP') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns[26],'OTHADJ_VAL_OP') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns[27],'OUTFRT_VAL_OP') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns[28],'PROFUND_VAL_OP') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns[29],'REC_UNT_OP') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns[30],'REC_VAL_OP') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns[31],'REMOVAL_UNT_OP') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns[32],'REMOVAL_VAL_OP') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns[33],'ROYS_VAL_OP') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns[34],'RSLSCLR_VAL_OP') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns[35],'RSLSPRO_VAL_OP') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns[36],'SHRINK_UNT_OP') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns[37],'SHRINK_VAL_OP') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns[38],'TRTLSLS_VAL_OP') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns[39],'TTLSLS_UNT_OP') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns[40],'TTLSLS_VAL_OP') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns[41],'DAMAGES_UNT_OP') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns[42],'DAMAGES_VAL_OP') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns[43],'SERVADJ_VAL_OP') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns[44],'SERVEXP_VAL_OP') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns[45],'COMPGM_VAL_OP') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns[46],'UPDATE_DATE')

# COMMAND ----------

# SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.show()

# COMMAND ----------

# Processing node SQ_Shortcut_to_EP_PLAN_CLASS_WK, type SOURCE 
# COLUMN COUNT: 6

SQ_Shortcut_to_EP_PLAN_CLASS_WK = spark.sql(f"""SELECT
EP_ORG_KEY,
EP_VERSION,
SAP_CLASS_ID,
FISCAL_WK,
EP_UPDATE_TSTMP,
LOAD_TSTMP
FROM {legacy}.EP_PLAN_CLASS_WK
WHERE EP_VERSION='OP'""").withColumn("sys_row_id", monotonically_increasing_id())
# Conforming fields names to the component layout
SQ_Shortcut_to_EP_PLAN_CLASS_WK = SQ_Shortcut_to_EP_PLAN_CLASS_WK \
	.withColumnRenamed(SQ_Shortcut_to_EP_PLAN_CLASS_WK.columns[0],'EP_ORG_KEY') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PLAN_CLASS_WK.columns[1],'EP_VERSION') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PLAN_CLASS_WK.columns[2],'SAP_CLASS_ID') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PLAN_CLASS_WK.columns[3],'FISCAL_WK') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PLAN_CLASS_WK.columns[4],'EP_UPDATE_TSTMP') \
	.withColumnRenamed(SQ_Shortcut_to_EP_PLAN_CLASS_WK.columns[5],'LOAD_TSTMP')

# COMMAND ----------

# SQ_Shortcut_to_EP_PLAN_CLASS_WK.show()

# COMMAND ----------

# Processing node EXP_CLASS_ID_FISCAL_WK, type EXPRESSION 
# COLUMN COUNT: 50

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE_temp = SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.toDF(*["SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___" + col for col in SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE.columns])

EXP_CLASS_ID_FISCAL_WK = SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE_temp.selectExpr(
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___sys_row_id as sys_row_id",
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___PRODUCT_KEY as PRODUCT_KEY",
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___ORGANIZATION_KEY as ORGANIZATION_KEY",
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___CALENDAR_KEY as CALENDAR_KEY",
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___PRODUCT_NAME as PRODUCT_NAME",
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___CALENDAR_NAME as CALENDAR_NAME",
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___ADJ_UNT_OP as ADJ_UNT_OP",
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___ADJ_VAL_OP as ADJ_VAL_OP",
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___BFRX_VAL_OP as BFRX_VAL_OP",
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___BOP_UNT_OP as BOP_UNT_OP",
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___BOP_VAL_OP as BOP_VAL_OP",
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___CLRFUND_VAL_OP as CLRFUND_VAL_OP",
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___COMBSLS_RTL_OP as COMBSLS_RTL_OP",
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___COMPSLS_RTL_OP as COMPSLS_RTL_OP",
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___COMPSLS_UNT_OP as COMPSLS_UNT_OP",
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___DCCOSTS_VAL_OP as DCCOSTS_VAL_OP",
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___DEFECT_VAL_OP as DEFECT_VAL_OP",
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___CD_VAL_OP as CD_VAL_OP",
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___EOPNORM_UNT_OP as EOPNORM_UNT_OP",
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___EOPNORM_VAL_OP as EOPNORM_VAL_OP",
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___EOP_UNT_OP as EOP_UNT_OP",
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___EOP_VAL_OP as EOP_VAL_OP",
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___MDCLR_VAL_OP as MDCLR_VAL_OP",
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___MDPRO_VAL_OP as MDPRO_VAL_OP",
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___NCOMSLS_RTL_OP as NCOMSLS_RTL_OP",
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___OBSO_UNT_OP as OBSO_UNT_OP",
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___OBSO_VAL_OP as OBSO_VAL_OP",
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___OTHADJ_VAL_OP as OTHADJ_VAL_OP",
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___OUTFRT_VAL_OP as OUTFRT_VAL_OP",
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___PROFUND_VAL_OP as PROFUND_VAL_OP",
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___REC_UNT_OP as REC_UNT_OP",
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___REC_VAL_OP as REC_VAL_OP",
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___REMOVAL_UNT_OP as REMOVAL_UNT_OP",
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___REMOVAL_VAL_OP as REMOVAL_VAL_OP",
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___ROYS_VAL_OP as ROYS_VAL_OP",
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___RSLSCLR_VAL_OP as RSLSCLR_VAL_OP",
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___RSLSPRO_VAL_OP as RSLSPRO_VAL_OP",
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___SHRINK_UNT_OP as SHRINK_UNT_OP",
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___SHRINK_VAL_OP as SHRINK_VAL_OP",
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___TRTLSLS_VAL_OP as TRTLSLS_VAL_OP",
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___TTLSLS_UNT_OP as TTLSLS_UNT_OP",
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___TTLSLS_VAL_OP as TTLSLS_VAL_OP",
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___DAMAGES_UNT_OP as DAMAGES_UNT_OP",
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___DAMAGES_VAL_OP as DAMAGES_VAL_OP",
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___SERVADJ_VAL_OP as SERVADJ_VAL_OP",
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___SERVEXP_VAL_OP as SERVEXP_VAL_OP",
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___COMPGM_VAL_OP as COMPGM_VAL_OP",
	"SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___UPDATE_DATE as UPDATE_DATE",
	"'OP' as EP_VERSION",
	"SUBSTR ( LTRIM ( RTRIM ( SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___PRODUCT_NAME ) ) , 4 , LENGTH ( SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___PRODUCT_NAME ) - 3 ) as SAP_CLASS_ID",
	"concat(SUBSTR ( LTRIM ( RTRIM ( SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___CALENDAR_NAME ) ) , 4 , 4 ) , SUBSTR ( LTRIM ( RTRIM ( SQ_Shortcut_to_EP_PF_FT_PL_OP1_000_PRE___CALENDAR_NAME ) ) , 2 , 2 ) ) as FISCAL_WK"
)

# COMMAND ----------

# EXP_CLASS_ID_FISCAL_WK.show()

# COMMAND ----------

# Processing node JNR_OP_PRE_BASE, type JOINER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 52

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_EP_PLAN_CLASS_WK_temp = SQ_Shortcut_to_EP_PLAN_CLASS_WK.toDF(*["SQ_Shortcut_to_EP_PLAN_CLASS_WK___" + col for col in SQ_Shortcut_to_EP_PLAN_CLASS_WK.columns])
EXP_CLASS_ID_FISCAL_WK_temp = EXP_CLASS_ID_FISCAL_WK.toDF(*["EXP_CLASS_ID_FISCAL_WK___" + col for col in EXP_CLASS_ID_FISCAL_WK.columns])

JNR_OP_PRE_BASE = SQ_Shortcut_to_EP_PLAN_CLASS_WK_temp.join(EXP_CLASS_ID_FISCAL_WK_temp,[SQ_Shortcut_to_EP_PLAN_CLASS_WK_temp.SQ_Shortcut_to_EP_PLAN_CLASS_WK___EP_ORG_KEY == EXP_CLASS_ID_FISCAL_WK_temp.EXP_CLASS_ID_FISCAL_WK___ORGANIZATION_KEY, SQ_Shortcut_to_EP_PLAN_CLASS_WK_temp.SQ_Shortcut_to_EP_PLAN_CLASS_WK___EP_VERSION == EXP_CLASS_ID_FISCAL_WK_temp.EXP_CLASS_ID_FISCAL_WK___EP_VERSION, SQ_Shortcut_to_EP_PLAN_CLASS_WK_temp.SQ_Shortcut_to_EP_PLAN_CLASS_WK___SAP_CLASS_ID == EXP_CLASS_ID_FISCAL_WK_temp.EXP_CLASS_ID_FISCAL_WK___SAP_CLASS_ID, SQ_Shortcut_to_EP_PLAN_CLASS_WK_temp.SQ_Shortcut_to_EP_PLAN_CLASS_WK___FISCAL_WK == EXP_CLASS_ID_FISCAL_WK_temp.EXP_CLASS_ID_FISCAL_WK___FISCAL_WK],'right_outer').selectExpr(
	"EXP_CLASS_ID_FISCAL_WK___sys_row_id as sys_row_id",
	"EXP_CLASS_ID_FISCAL_WK___ORGANIZATION_KEY as ORGANIZATION_KEY",
	"EXP_CLASS_ID_FISCAL_WK___ADJ_UNT_OP as ADJ_UNT_OP",
	"EXP_CLASS_ID_FISCAL_WK___ADJ_VAL_OP as ADJ_VAL_OP",
	"EXP_CLASS_ID_FISCAL_WK___BFRX_VAL_OP as BFRX_VAL_OP",
	"EXP_CLASS_ID_FISCAL_WK___BOP_UNT_OP as BOP_UNT_OP",
	"EXP_CLASS_ID_FISCAL_WK___BOP_VAL_OP as BOP_VAL_OP",
	"EXP_CLASS_ID_FISCAL_WK___CLRFUND_VAL_OP as CLRFUND_VAL_OP",
	"EXP_CLASS_ID_FISCAL_WK___COMBSLS_RTL_OP as COMBSLS_RTL_OP",
	"EXP_CLASS_ID_FISCAL_WK___COMPSLS_RTL_OP as COMPSLS_RTL_OP",
	"EXP_CLASS_ID_FISCAL_WK___COMPSLS_UNT_OP as COMPSLS_UNT_OP",
	"EXP_CLASS_ID_FISCAL_WK___DCCOSTS_VAL_OP as DCCOSTS_VAL_OP",
	"EXP_CLASS_ID_FISCAL_WK___DEFECT_VAL_OP as DEFECT_VAL_OP",
	"EXP_CLASS_ID_FISCAL_WK___CD_VAL_OP as CD_VAL_OP",
	"EXP_CLASS_ID_FISCAL_WK___EOPNORM_UNT_OP as EOPNORM_UNT_OP",
	"EXP_CLASS_ID_FISCAL_WK___EOPNORM_VAL_OP as EOPNORM_VAL_OP",
	"EXP_CLASS_ID_FISCAL_WK___EOP_UNT_OP as EOP_UNT_OP",
	"EXP_CLASS_ID_FISCAL_WK___EOP_VAL_OP as EOP_VAL_OP",
	"EXP_CLASS_ID_FISCAL_WK___MDCLR_VAL_OP as MDCLR_VAL_OP",
	"EXP_CLASS_ID_FISCAL_WK___MDPRO_VAL_OP as MDPRO_VAL_OP",
	"EXP_CLASS_ID_FISCAL_WK___NCOMSLS_RTL_OP as NCOMSLS_RTL_OP",
	"EXP_CLASS_ID_FISCAL_WK___OBSO_UNT_OP as OBSO_UNT_OP",
	"EXP_CLASS_ID_FISCAL_WK___OBSO_VAL_OP as OBSO_VAL_OP",
	"EXP_CLASS_ID_FISCAL_WK___OTHADJ_VAL_OP as OTHADJ_VAL_OP",
	"EXP_CLASS_ID_FISCAL_WK___OUTFRT_VAL_OP as OUTFRT_VAL_OP",
	"EXP_CLASS_ID_FISCAL_WK___PROFUND_VAL_OP as PROFUND_VAL_OP",
	"EXP_CLASS_ID_FISCAL_WK___REC_UNT_OP as REC_UNT_OP",
	"EXP_CLASS_ID_FISCAL_WK___REC_VAL_OP as REC_VAL_OP",
	"EXP_CLASS_ID_FISCAL_WK___REMOVAL_UNT_OP as REMOVAL_UNT_OP",
	"EXP_CLASS_ID_FISCAL_WK___REMOVAL_VAL_OP as REMOVAL_VAL_OP",
	"EXP_CLASS_ID_FISCAL_WK___ROYS_VAL_OP as ROYS_VAL_OP",
	"EXP_CLASS_ID_FISCAL_WK___RSLSCLR_VAL_OP as RSLSCLR_VAL_OP",
	"EXP_CLASS_ID_FISCAL_WK___RSLSPRO_VAL_OP as RSLSPRO_VAL_OP",
	"EXP_CLASS_ID_FISCAL_WK___SHRINK_UNT_OP as SHRINK_UNT_OP",
	"EXP_CLASS_ID_FISCAL_WK___SHRINK_VAL_OP as SHRINK_VAL_OP",
	"EXP_CLASS_ID_FISCAL_WK___TRTLSLS_VAL_OP as TRTLSLS_VAL_OP",
	"EXP_CLASS_ID_FISCAL_WK___TTLSLS_UNT_OP as TTLSLS_UNT_OP",
	"EXP_CLASS_ID_FISCAL_WK___TTLSLS_VAL_OP as TTLSLS_VAL_OP",
	"EXP_CLASS_ID_FISCAL_WK___DAMAGES_UNT_OP as DAMAGES_UNT_OP",
	"EXP_CLASS_ID_FISCAL_WK___DAMAGES_VAL_OP as DAMAGES_VAL_OP",
	"EXP_CLASS_ID_FISCAL_WK___SERVADJ_VAL_OP as SERVADJ_VAL_OP",
	"EXP_CLASS_ID_FISCAL_WK___SERVEXP_VAL_OP as SERVEXP_VAL_OP",
	"EXP_CLASS_ID_FISCAL_WK___COMPGM_VAL_OP as COMPGM_VAL_OP",
	"EXP_CLASS_ID_FISCAL_WK___UPDATE_DATE as UPDATE_DATE",
	"EXP_CLASS_ID_FISCAL_WK___EP_VERSION as EP_VERSION",
	"EXP_CLASS_ID_FISCAL_WK___SAP_CLASS_ID as SAP_CLASS_ID",
	"EXP_CLASS_ID_FISCAL_WK___FISCAL_WK as FISCAL_WK",
	"SQ_Shortcut_to_EP_PLAN_CLASS_WK___EP_ORG_KEY as TGT_EP_ORG_KEY",
	"SQ_Shortcut_to_EP_PLAN_CLASS_WK___EP_VERSION as TGT_EP_VERSION",
	"SQ_Shortcut_to_EP_PLAN_CLASS_WK___SAP_CLASS_ID as TGT_SAP_CLASS_ID",
	"SQ_Shortcut_to_EP_PLAN_CLASS_WK___FISCAL_WK as TGT_FISCAL_WK",
	"SQ_Shortcut_to_EP_PLAN_CLASS_WK___EP_UPDATE_TSTMP as TGT_EP_UPDATE_TSTMP",
	"SQ_Shortcut_to_EP_PLAN_CLASS_WK___LOAD_TSTMP as TGT_LOAD_TSTMP")

# COMMAND ----------

# JNR_OP_PRE_BASE.show(truncate=False)

# COMMAND ----------

# Processing node LKP_WEEKS, type LOOKUP_FROM_PRECACHED_DATASET . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 3


LKP_WEEKS_lookup_result = JNR_OP_PRE_BASE.selectExpr(
	"FISCAL_WK as FISCAL_WK1","sys_row_id as sys_row_id_lw").join(LKP_WEEKS_SRC, (col('FISCAL_WK') == col('FISCAL_WK1')), 'left') \
.withColumn('row_num_WEEK_DT', row_number().over(Window.partitionBy("sys_row_id_lw").orderBy("WEEK_DT")))

LKP_WEEKS = LKP_WEEKS_lookup_result.filter(col("row_num_WEEK_DT") == 1).select(
	LKP_WEEKS_lookup_result.sys_row_id_lw,
	col('WEEK_DT')
)

# COMMAND ----------

# LKP_WEEKS.filter("WEEK_DT IS NOT NULL").show()

# COMMAND ----------

# Processing node EXP_FLAG_TSTMP, type EXPRESSION 
# COLUMN COUNT: 53

# for each involved DataFrame, append the dataframe name to each column
LKP_WEEKS_temp = LKP_WEEKS.toDF(*["LKP_WEEKS___" + col for col in LKP_WEEKS.columns])
JNR_OP_PRE_BASE_temp = JNR_OP_PRE_BASE.toDF(*["JNR_OP_PRE_BASE___" + col for col in JNR_OP_PRE_BASE.columns])

# Joining dataframes JNR_OP_PRE_BASE, LKP_WEEKS to form EXP_FLAG_TSTMP
EXP_FLAG_TSTMP_joined = JNR_OP_PRE_BASE_temp.join(LKP_WEEKS_temp, col('JNR_OP_PRE_BASE___sys_row_id') == col('LKP_WEEKS___sys_row_id_lw'), 'inner')
EXP_FLAG_TSTMP = EXP_FLAG_TSTMP_joined.selectExpr(
	# "EXP_FLAG_TSTMP_joined___sys_row_id as sys_row_id",
	"LKP_WEEKS___WEEK_DT as WEEK_DT",
	"JNR_OP_PRE_BASE___ORGANIZATION_KEY as ORGANIZATION_KEY",
	"JNR_OP_PRE_BASE___EP_VERSION as EP_VERSION",
	"JNR_OP_PRE_BASE___SAP_CLASS_ID as SAP_CLASS_ID",
	"JNR_OP_PRE_BASE___FISCAL_WK as FISCAL_WK",
	"JNR_OP_PRE_BASE___ADJ_UNT_OP as ADJ_UNT_OP",
	"JNR_OP_PRE_BASE___ADJ_VAL_OP as ADJ_VAL_OP",
	"JNR_OP_PRE_BASE___BFRX_VAL_OP as BFRX_VAL_OP",
	"JNR_OP_PRE_BASE___BOP_UNT_OP as BOP_UNT_OP",
	"JNR_OP_PRE_BASE___BOP_VAL_OP as BOP_VAL_OP",
	"JNR_OP_PRE_BASE___CLRFUND_VAL_OP as CLRFUND_VAL_OP",
	"JNR_OP_PRE_BASE___COMBSLS_RTL_OP as COMBSLS_RTL_OP",
	"JNR_OP_PRE_BASE___COMPSLS_RTL_OP as COMPSLS_RTL_OP",
	"JNR_OP_PRE_BASE___COMPSLS_UNT_OP as COMPSLS_UNT_OP",
	"JNR_OP_PRE_BASE___DCCOSTS_VAL_OP as DCCOSTS_VAL_OP",
	"JNR_OP_PRE_BASE___DEFECT_VAL_OP as DEFECT_VAL_OP",
	"JNR_OP_PRE_BASE___CD_VAL_OP as CD_VAL_OP",
	"JNR_OP_PRE_BASE___EOPNORM_UNT_OP as EOPNORM_UNT_OP",
	"JNR_OP_PRE_BASE___EOPNORM_VAL_OP as EOPNORM_VAL_OP",
	"JNR_OP_PRE_BASE___EOP_UNT_OP as EOP_UNT_OP",
	"JNR_OP_PRE_BASE___EOP_VAL_OP as EOP_VAL_OP",
	"JNR_OP_PRE_BASE___MDCLR_VAL_OP as MDCLR_VAL_OP",
	"JNR_OP_PRE_BASE___MDPRO_VAL_OP as MDPRO_VAL_OP",
	"JNR_OP_PRE_BASE___NCOMSLS_RTL_OP as NCOMSLS_RTL_OP",
	"JNR_OP_PRE_BASE___OBSO_UNT_OP as OBSO_UNT_OP",
	"JNR_OP_PRE_BASE___OBSO_VAL_OP as OBSO_VAL_OP",
	"JNR_OP_PRE_BASE___OTHADJ_VAL_OP as OTHADJ_VAL_OP",
	"JNR_OP_PRE_BASE___OUTFRT_VAL_OP as OUTFRT_VAL_OP",
	"JNR_OP_PRE_BASE___PROFUND_VAL_OP as PROFUND_VAL_OP",
	"JNR_OP_PRE_BASE___REC_UNT_OP as REC_UNT_OP",
	"JNR_OP_PRE_BASE___REC_VAL_OP as REC_VAL_OP",
	"JNR_OP_PRE_BASE___REMOVAL_UNT_OP as REMOVAL_UNT_OP",
	"JNR_OP_PRE_BASE___REMOVAL_VAL_OP as REMOVAL_VAL_OP",
	"JNR_OP_PRE_BASE___ROYS_VAL_OP as ROYS_VAL_OP",
	"JNR_OP_PRE_BASE___RSLSCLR_VAL_OP as RSLSCLR_VAL_OP",
	"JNR_OP_PRE_BASE___RSLSPRO_VAL_OP as RSLSPRO_VAL_OP",
	"JNR_OP_PRE_BASE___SHRINK_UNT_OP as SHRINK_UNT_OP",
	"JNR_OP_PRE_BASE___SHRINK_VAL_OP as SHRINK_VAL_OP",
	"JNR_OP_PRE_BASE___TRTLSLS_VAL_OP as TRTLSLS_VAL_OP",
	"JNR_OP_PRE_BASE___TTLSLS_UNT_OP as TTLSLS_UNT_OP",
	"JNR_OP_PRE_BASE___TTLSLS_VAL_OP as TTLSLS_VAL_OP",
	"JNR_OP_PRE_BASE___DAMAGES_UNT_OP as DAMAGES_UNT_OP",
	"JNR_OP_PRE_BASE___DAMAGES_VAL_OP as DAMAGES_VAL_OP",
	"JNR_OP_PRE_BASE___SERVADJ_VAL_OP as SERVADJ_VAL_OP",
	"JNR_OP_PRE_BASE___SERVEXP_VAL_OP as SERVEXP_VAL_OP",
	"JNR_OP_PRE_BASE___COMPGM_VAL_OP as COMPGM_VAL_OP",
	"JNR_OP_PRE_BASE___UPDATE_DATE as UPDATE_DATE",
	"JNR_OP_PRE_BASE___TGT_SAP_CLASS_ID as TGT_SAP_CLASS_ID",
	"JNR_OP_PRE_BASE___TGT_EP_UPDATE_TSTMP as TGT_EP_UPDATE_TSTMP",
	"JNR_OP_PRE_BASE___TGT_LOAD_TSTMP as TGT_LOAD_TSTMP",
	"IF (JNR_OP_PRE_BASE___TGT_SAP_CLASS_ID IS NULL, '0', IF (JNR_OP_PRE_BASE___UPDATE_DATE != JNR_OP_PRE_BASE___TGT_EP_UPDATE_TSTMP, '1', NULL)) as FLAG",
	"CASE WHEN IF (JNR_OP_PRE_BASE___TGT_SAP_CLASS_ID IS NULL, '0', IF (JNR_OP_PRE_BASE___UPDATE_DATE != JNR_OP_PRE_BASE___TGT_EP_UPDATE_TSTMP, '1', NULL)) ==  '0' THEN CURRENT_TIMESTAMP \
    	  WHEN IF (JNR_OP_PRE_BASE___TGT_SAP_CLASS_ID IS NULL, '0', IF (JNR_OP_PRE_BASE___UPDATE_DATE != JNR_OP_PRE_BASE___TGT_EP_UPDATE_TSTMP, '1', NULL)) ==  '0' == '1' THEN  JNR_OP_PRE_BASE___TGT_LOAD_TSTMP END as LOAD_TSTMP",
	"CURRENT_TIMESTAMP as UPDATE_TSTMP"
)

# .withColumn("v_FLAG", expr("""IF (JNR_OP_PRE_BASE___TGT_SAP_CLASS_ID IS NULL, '0', IF (JNR_OP_PRE_BASE___UPDATE_DATE != JNR_OP_PRE_BASE___TGT_EP_UPDATE_TSTMP, '1', NULL))"""))

# COMMAND ----------

# EXP_FLAG_TSTMP.show()

# COMMAND ----------

# Processing node UPD_INSERT_UPDATE, type UPDATE_STRATEGY 
# COLUMN COUNT: 50

# for each involved DataFrame, append the dataframe name to each column
EXP_FLAG_TSTMP_temp = EXP_FLAG_TSTMP.toDF(*["EXP_FLAG_TSTMP___" + col for col in EXP_FLAG_TSTMP.columns])

UPD_INSERT_UPDATE = EXP_FLAG_TSTMP_temp.selectExpr(
	"EXP_FLAG_TSTMP___WEEK_DT as WEEK_DT",
	"EXP_FLAG_TSTMP___ORGANIZATION_KEY as ORGANIZATION_KEY",
	"EXP_FLAG_TSTMP___EP_VERSION as EP_VERSION",
	"EXP_FLAG_TSTMP___SAP_CLASS_ID as SAP_CLASS_ID",
	"EXP_FLAG_TSTMP___FISCAL_WK as FISCAL_WK",
	"EXP_FLAG_TSTMP___ADJ_UNT_OP as ADJ_UNT_OP",
	"EXP_FLAG_TSTMP___ADJ_VAL_OP as ADJ_VAL_OP",
	"EXP_FLAG_TSTMP___BFRX_VAL_OP as BFRX_VAL_OP",
	"EXP_FLAG_TSTMP___BOP_UNT_OP as BOP_UNT_OP",
	"EXP_FLAG_TSTMP___BOP_VAL_OP as BOP_VAL_OP",
	"EXP_FLAG_TSTMP___CLRFUND_VAL_OP as CLRFUND_VAL_OP",
	"EXP_FLAG_TSTMP___COMBSLS_RTL_OP as COMBSLS_RTL_OP",
	"EXP_FLAG_TSTMP___COMPSLS_RTL_OP as COMPSLS_RTL_OP",
	"EXP_FLAG_TSTMP___COMPSLS_UNT_OP as COMPSLS_UNT_OP",
	"EXP_FLAG_TSTMP___DCCOSTS_VAL_OP as DCCOSTS_VAL_OP",
	"EXP_FLAG_TSTMP___DEFECT_VAL_OP as DEFECT_VAL_OP",
	"EXP_FLAG_TSTMP___CD_VAL_OP as CD_VAL_OP",
	"EXP_FLAG_TSTMP___EOPNORM_UNT_OP as EOPNORM_UNT_OP",
	"EXP_FLAG_TSTMP___EOPNORM_VAL_OP as EOPNORM_VAL_OP",
	"EXP_FLAG_TSTMP___EOP_UNT_OP as EOP_UNT_OP",
	"EXP_FLAG_TSTMP___EOP_VAL_OP as EOP_VAL_OP",
	"EXP_FLAG_TSTMP___MDCLR_VAL_OP as MDCLR_VAL_OP",
	"EXP_FLAG_TSTMP___MDPRO_VAL_OP as MDPRO_VAL_OP",
	"EXP_FLAG_TSTMP___NCOMSLS_RTL_OP as NCOMSLS_RTL_OP",
	"EXP_FLAG_TSTMP___OBSO_UNT_OP as OBSO_UNT_OP",
	"EXP_FLAG_TSTMP___OBSO_VAL_OP as OBSO_VAL_OP",
	"EXP_FLAG_TSTMP___OTHADJ_VAL_OP as OTHADJ_VAL_OP",
	"EXP_FLAG_TSTMP___OUTFRT_VAL_OP as OUTFRT_VAL_OP",
	"EXP_FLAG_TSTMP___PROFUND_VAL_OP as PROFUND_VAL_OP",
	"EXP_FLAG_TSTMP___REC_UNT_OP as REC_UNT_OP",
	"EXP_FLAG_TSTMP___REC_VAL_OP as REC_VAL_OP",
	"EXP_FLAG_TSTMP___REMOVAL_UNT_OP as REMOVAL_UNT_OP",
	"EXP_FLAG_TSTMP___REMOVAL_VAL_OP as REMOVAL_VAL_OP",
	"EXP_FLAG_TSTMP___ROYS_VAL_OP as ROYS_VAL_OP",
	"EXP_FLAG_TSTMP___RSLSCLR_VAL_OP as RSLSCLR_VAL_OP",
	"EXP_FLAG_TSTMP___RSLSPRO_VAL_OP as RSLSPRO_VAL_OP",
	"EXP_FLAG_TSTMP___SHRINK_UNT_OP as SHRINK_UNT_OP",
	"EXP_FLAG_TSTMP___SHRINK_VAL_OP as SHRINK_VAL_OP",
	"EXP_FLAG_TSTMP___TRTLSLS_VAL_OP as TRTLSLS_VAL_OP",
	"EXP_FLAG_TSTMP___TTLSLS_UNT_OP as TTLSLS_UNT_OP",
	"EXP_FLAG_TSTMP___TTLSLS_VAL_OP as TTLSLS_VAL_OP",
	"EXP_FLAG_TSTMP___DAMAGES_UNT_OP as DAMAGES_UNT_OP",
	"EXP_FLAG_TSTMP___DAMAGES_VAL_OP as DAMAGES_VAL_OP",
	"EXP_FLAG_TSTMP___SERVADJ_VAL_OP as SERVADJ_VAL_OP",
	"EXP_FLAG_TSTMP___SERVEXP_VAL_OP as SERVEXP_VAL_OP",
	"EXP_FLAG_TSTMP___COMPGM_VAL_OP as COMPGM_VAL_OP",
	"EXP_FLAG_TSTMP___UPDATE_DATE as UPDATE_DATE",
	"EXP_FLAG_TSTMP___FLAG as FLAG",
	"EXP_FLAG_TSTMP___LOAD_TSTMP as LOAD_TSTMP",
	"EXP_FLAG_TSTMP___UPDATE_TSTMP as UPDATE_TSTMP") \
	.withColumn('pyspark_data_action', when(col('FLAG') ==(lit('0')) , lit(0)).when(col('FLAG') ==(lit('1')) , lit(1)))

# COMMAND ----------

# Processing node Shortcut_to_EP_PLAN_CLASS_WK1, type TARGET 
# COLUMN COUNT: 49


Shortcut_to_EP_PLAN_CLASS_WK1 = UPD_INSERT_UPDATE.selectExpr(
	"CAST(ORGANIZATION_KEY AS INT) as EP_ORG_KEY",
	"CAST(EP_VERSION AS STRING) as EP_VERSION",
	"CAST(SAP_CLASS_ID AS INT) as SAP_CLASS_ID",
	"CAST(WEEK_DT AS DATE) as WEEK_DT",
	"CAST(FISCAL_WK AS INT) as FISCAL_WK",
	"CAST(TRTLSLS_VAL_OP AS DECIMAL(24,12)) as NET_SALES_AMT",
	"CAST(TTLSLS_UNT_OP AS DECIMAL(24,12)) as NET_SALES_QTY",
	"CAST(TTLSLS_VAL_OP AS DECIMAL(24,12)) as NET_SALES_COST_AMT",
	"CAST(RSLSCLR_VAL_OP AS DECIMAL(24,12)) as CLEARANCE_SALES_AMT",
	"CAST(RSLSPRO_VAL_OP AS DECIMAL(24,12)) as PROMO_SALES_AMT",
	"CAST(PROFUND_VAL_OP AS DECIMAL(24,12)) as PROMO_FUND_AMT",
	"CAST(MDCLR_VAL_OP AS DECIMAL(24,12)) as MARKDOWN_CLEARANCE_AMT",
	"CAST(MDPRO_VAL_OP AS DECIMAL(24,12)) as MARKDOWN_PROMO_AMT",
	"CAST(OBSO_UNT_OP AS DECIMAL(24,12)) as OBSOLESCENCE_QTY",
	"CAST(OBSO_VAL_OP AS DECIMAL(24,12)) as OBSOLESCENCE_AMT",
	"CAST(REMOVAL_UNT_OP AS DECIMAL(24,12)) as PRODUCT_REMOVAL_QTY",
	"CAST(REMOVAL_VAL_OP AS DECIMAL(24,12)) as PRODUCT_REMOVAL_AMT",
	"CAST(SHRINK_UNT_OP AS DECIMAL(24,12)) as SHRINK_QTY",
	"CAST(SHRINK_VAL_OP AS DECIMAL(24,12)) as SHRINK_AMT",
	"CAST(DAMAGES_UNT_OP AS DECIMAL(24,12)) as DAMAGES_QTY",
	"CAST(DAMAGES_VAL_OP AS DECIMAL(24,12)) as DAMAGES_AMT",
	"CAST(SERVADJ_VAL_OP AS DECIMAL(24,12)) as SERVICE_ADJ_AMT",
	"CAST(SERVEXP_VAL_OP AS DECIMAL(24,12)) as SERVICE_EXPENSE_AMT",
	"CAST(ROYS_VAL_OP AS DECIMAL(24,12)) as ROYALTY_AMT",
	"CAST(OUTFRT_VAL_OP AS DECIMAL(24,12)) as OUTBOUND_FREIGHT_AMT",
	"CAST(OTHADJ_VAL_OP AS DECIMAL(24,12)) as OTHER_ADJ_AMT",
	"CAST(COMBSLS_RTL_OP AS DECIMAL(24,12)) as COMP_BASE_SALES_AMT",
	"CAST(COMPSLS_RTL_OP AS DECIMAL(24,12)) as COMP_SALES_AMT",
	"CAST(COMPSLS_UNT_OP AS DECIMAL(24,12)) as COMP_SALES_QTY",
	"CAST(NCOMSLS_RTL_OP AS DECIMAL(24,12)) as NON_COMP_SALES_AMT",
	"CAST(COMPGM_VAL_OP AS DECIMAL(24,12)) as COMP_MARGIN_AMT",
	"CAST(BFRX_VAL_OP AS DECIMAL(24,12)) as RX_COMMISSION_AMT",
	"CAST(CLRFUND_VAL_OP AS DECIMAL(24,12)) as CLEARANCE_FUND_AMT",
	"CAST(DCCOSTS_VAL_OP AS DECIMAL(24,12)) as DC_COST_AMT",
	"CAST(DEFECT_VAL_OP AS DECIMAL(24,12)) as DEFECT_ALLOWANCE_AMT",
	"CAST(CD_VAL_OP AS DECIMAL(24,12)) as CASH_DISC_AMT",
	"CAST(BOP_UNT_OP AS DECIMAL(24,12)) as START_INV_QTY",
	"CAST(BOP_VAL_OP AS DECIMAL(24,12)) as START_INV_AMT",
	"CAST(EOPNORM_UNT_OP AS DECIMAL(24,12)) as END_INV_NORM_QTY",
	"CAST(EOPNORM_VAL_OP AS DECIMAL(24,12)) as END_INV_NORM_AMT",
	"CAST(EOP_UNT_OP AS DECIMAL(24,12)) as END_INV_QTY",
	"CAST(EOP_VAL_OP AS DECIMAL(24,12)) as END_INV_AMT",
	"CAST(ADJ_UNT_OP AS DECIMAL(24,12)) as ADJ_INV_QTY",
	"CAST(ADJ_VAL_OP AS DECIMAL(24,12)) as ADJ_INV_AMT",
	"CAST(REC_UNT_OP AS DECIMAL(24,12)) as MOVEMENT_RECEIPT_QTY",
	"CAST(REC_VAL_OP AS DECIMAL(24,12)) as MOVEMENT_RECEIPT_AMT",
	"CAST(UPDATE_DATE AS TIMESTAMP) as EP_UPDATE_TSTMP",
	"CAST(UPDATE_TSTMP AS TIMESTAMP) as UPDATE_TSTMP",
	"CAST(LOAD_TSTMP AS TIMESTAMP) as LOAD_TSTMP",
	"pyspark_data_action as pyspark_data_action"
)

try:
  primary_key = """source.EP_ORG_KEY = target.EP_ORG_KEY AND source.EP_VERSION = target.EP_VERSION AND source.SAP_CLASS_ID = target.SAP_CLASS_ID AND source.WEEK_DT = target.WEEK_DT"""
  refined_perf_table = f"{legacy}.EP_PLAN_CLASS_WK"
  chk=DuplicateChecker()
  chk.check_for_duplicate_primary_keys(Shortcut_to_EP_PLAN_CLASS_WK1,["EP_ORG_KEY","EP_VERSION","SAP_CLASS_ID","WEEK_DT"])
  executeMerge(Shortcut_to_EP_PLAN_CLASS_WK1, refined_perf_table, primary_key)
  logger.info(f"Merge with {refined_perf_table} completed")
  logPrevRunDt("EP_PLAN_CLASS_WK", "EP_PLAN_CLASS_WK", "Completed", "N/A", f"{raw}.log_run_details")
except Exception as e:
  logPrevRunDt("EP_PLAN_CLASS_WK", "EP_PLAN_CLASS_WK","Failed",str(e), f"{raw}.log_run_details", )
  raise e
	

# COMMAND ----------


