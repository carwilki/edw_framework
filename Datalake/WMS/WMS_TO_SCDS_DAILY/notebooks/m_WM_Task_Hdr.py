#Code converted on 2023-06-22 21:01:39
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from pyspark.dbutils import DBUtils
from Datalake.utils.genericUtilities import *
from Datalake.utils.configs import *
from Datalake.utils.mergeUtils import *
from Datalake.utils.logger import *
# COMMAND ----------

parser = argparse.ArgumentParser()
spark = SparkSession.getActiveSession()
dbutils = DBUtils(spark)

parser.add_argument('env', type=str, help='Env Variable')
args = parser.parse_args()
env = args.env

if env is None or env == '':
    raise ValueError('env is not set')

refine = getEnvPrefix(env) + 'refine'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'

# Set global variables
starttime = datetime.now() #start timestamp of the script
refined_perf_table = f"{refine}.WM_TASK_HDR"
raw_perf_table = f"{raw}.WM_TASK_HDR_PRE"
site_profile_table = f"{legacy}.SITE_PROFILE"


# COMMAND ----------
# Processing node SQ_Shortcut_to_WM_TASK_HDR, type SOURCE 
# COLUMN COUNT: 5

SQ_Shortcut_to_WM_TASK_HDR = spark.sql(f"""SELECT
LOCATION_ID,
WM_TASK_HDR_ID,
WM_CREATE_TSTMP,
WM_MOD_TSTMP,
LOAD_TSTMP
FROM {refined_perf_table}
WHERE WM_TASK_HDR_ID IN (SELECT TASK_HDR_ID FROM {raw_perf_table})""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node SQ_Shortcut_to_WM_TASK_HDR_PRE, type SOURCE 
# COLUMN COUNT: 66

SQ_Shortcut_to_WM_TASK_HDR_PRE = spark.sql(f"""SELECT
DC_NBR,
TASK_HDR_ID,
TASK_ID,
WHSE,
TASK_DESC,
INVN_TYPE,
INVN_NEED_TYPE,
DFLT_TASK_PRTY,
CURR_TASK_PRTY,
XPECTD_DURTN,
ACTL_DURTN,
ERLST_START_DATE_TIME,
LTST_START_DATE_TIME,
LTST_CMPL_DATE_TIME,
BEGIN_AREA,
BEGIN_ZONE,
BEGIN_AISLE,
END_AREA,
END_ZONE,
END_AISLE,
START_CURR_WORK_GRP,
START_CURR_WORK_AREA,
END_CURR_WORK_GRP,
END_CURR_WORK_AREA,
START_DEST_WORK_GRP,
START_DEST_WORK_AREA,
END_DEST_WORK_GRP,
END_DEST_WORK_AREA,
TASK_TYPE,
TASK_GENRTN_REF_CODE,
TASK_GENRTN_REF_NBR,
NEED_ID,
TASK_BATCH,
STAT_CODE,
CREATE_DATE_TIME,
MOD_DATE_TIME,
USER_ID,
RLS_DATE_TIME,
TASK_CMPL_REF_CODE,
TASK_CMPL_REF_NBR,
OWNER_USER_ID,
ONE_USER_PER_GRP,
NEXT_TASK_ID,
EXCEPTION_CODE,
CURR_LOCN_ID,
TASK_PARM_ID,
RULE_ID,
VOCOLLECT_ASSIGN_ID,
CURR_USER_ID,
MHE_FLAG,
PICK_TO_TOTE_FLAG,
MHE_ORD_STATE,
PRT_TASK_LIST_FLAG,
RPT_PRTR_REQSTR,
ORIG_TASK_ID,
DOC_ID,
VOCO_INTRNL_REVERSE_ID,
WM_VERSION_ID,
ITEM_ID,
LOCN_HDR_ID,
TASK_RULE_PARM_ID,
PICK_CART_TYPE,
REPRINT_COUNT,
ESTIMATED_TIME,
ESTIMATED_DISTANCE,
LOAD_TSTMP
FROM {raw_perf_table}""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node SQ_Shortcut_to_SITE_PROFILE, type SOURCE 
# COLUMN COUNT: 2

SQ_Shortcut_to_SITE_PROFILE = spark.sql(f"""SELECT LOCATION_ID, STORE_NBR FROM {site_profile_table}""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node EXP_TRANS, type EXPRESSION 
# COLUMN COUNT: 67

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_WM_TASK_HDR_PRE_temp = SQ_Shortcut_to_WM_TASK_HDR_PRE.toDF(*["SQ_Shortcut_to_WM_TASK_HDR_PRE___" + col for col in SQ_Shortcut_to_WM_TASK_HDR_PRE.columns])

EXP_TRANS = SQ_Shortcut_to_WM_TASK_HDR_PRE_temp.selectExpr( 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___sys_row_id as sys_row_id", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___DC_NBR as DC_NBR", 
	"cast(SQ_Shortcut_to_WM_TASK_HDR_PRE___DC_NBR as int) as o_DC_NBR", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___TASK_HDR_ID as TASK_HDR_ID", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___TASK_ID as TASK_ID", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___WHSE as WHSE", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___TASK_DESC as TASK_DESC", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___INVN_TYPE as INVN_TYPE", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___INVN_NEED_TYPE as INVN_NEED_TYPE", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___DFLT_TASK_PRTY as DFLT_TASK_PRTY", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___CURR_TASK_PRTY as CURR_TASK_PRTY", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___XPECTD_DURTN as XPECTD_DURTN", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___ACTL_DURTN as ACTL_DURTN", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___ERLST_START_DATE_TIME as ERLST_START_DATE_TIME", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___LTST_START_DATE_TIME as LTST_START_DATE_TIME", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___LTST_CMPL_DATE_TIME as LTST_CMPL_DATE_TIME", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___BEGIN_AREA as BEGIN_AREA", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___BEGIN_ZONE as BEGIN_ZONE", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___BEGIN_AISLE as BEGIN_AISLE", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___END_AREA as END_AREA", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___END_ZONE as END_ZONE", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___END_AISLE as END_AISLE", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___START_CURR_WORK_GRP as START_CURR_WORK_GRP", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___START_CURR_WORK_AREA as START_CURR_WORK_AREA", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___END_CURR_WORK_GRP as END_CURR_WORK_GRP", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___END_CURR_WORK_AREA as END_CURR_WORK_AREA", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___START_DEST_WORK_GRP as START_DEST_WORK_GRP", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___START_DEST_WORK_AREA as START_DEST_WORK_AREA", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___END_DEST_WORK_GRP as END_DEST_WORK_GRP", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___END_DEST_WORK_AREA as END_DEST_WORK_AREA", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___TASK_TYPE as TASK_TYPE", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___TASK_GENRTN_REF_CODE as TASK_GENRTN_REF_CODE", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___TASK_GENRTN_REF_NBR as TASK_GENRTN_REF_NBR", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___NEED_ID as NEED_ID", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___TASK_BATCH as TASK_BATCH", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___STAT_CODE as STAT_CODE", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___CREATE_DATE_TIME as CREATE_DATE_TIME", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___MOD_DATE_TIME as MOD_DATE_TIME", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___USER_ID as USER_ID", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___RLS_DATE_TIME as RLS_DATE_TIME", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___TASK_CMPL_REF_CODE as TASK_CMPL_REF_CODE", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___TASK_CMPL_REF_NBR as TASK_CMPL_REF_NBR", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___OWNER_USER_ID as OWNER_USER_ID", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___ONE_USER_PER_GRP as ONE_USER_PER_GRP", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___NEXT_TASK_ID as NEXT_TASK_ID", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___EXCEPTION_CODE as EXCEPTION_CODE", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___CURR_LOCN_ID as CURR_LOCN_ID", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___TASK_PARM_ID as TASK_PARM_ID", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___RULE_ID as RULE_ID", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___VOCOLLECT_ASSIGN_ID as VOCOLLECT_ASSIGN_ID", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___CURR_USER_ID as CURR_USER_ID", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___MHE_FLAG as MHE_FLAG", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___PICK_TO_TOTE_FLAG as PICK_TO_TOTE_FLAG", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___MHE_ORD_STATE as MHE_ORD_STATE", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___PRT_TASK_LIST_FLAG as PRT_TASK_LIST_FLAG", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___RPT_PRTR_REQSTR as RPT_PRTR_REQSTR", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___ORIG_TASK_ID as ORIG_TASK_ID", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___DOC_ID as DOC_ID", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___VOCO_INTRNL_REVERSE_ID as VOCO_INTRNL_REVERSE_ID", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___WM_VERSION_ID as WM_VERSION_ID", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___ITEM_ID as ITEM_ID", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___LOCN_HDR_ID as LOCN_HDR_ID", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___TASK_RULE_PARM_ID as TASK_RULE_PARM_ID", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___PICK_CART_TYPE as PICK_CART_TYPE", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___REPRINT_COUNT as REPRINT_COUNT", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___ESTIMATED_TIME as ESTIMATED_TIME", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___ESTIMATED_DISTANCE as ESTIMATED_DISTANCE", 
	"SQ_Shortcut_to_WM_TASK_HDR_PRE___LOAD_TSTMP as LOAD_TSTMP" 
)

# COMMAND ----------
# Processing node JNR_SITE_PROFILE, type JOINER 
# COLUMN COUNT: 67

JNR_SITE_PROFILE = SQ_Shortcut_to_SITE_PROFILE.join(EXP_TRANS,[SQ_Shortcut_to_SITE_PROFILE.STORE_NBR == EXP_TRANS.o_DC_NBR],'inner')

# COMMAND ----------
# Processing node JNR_WM_TASK_HDR, type JOINER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 70

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_WM_TASK_HDR_temp = SQ_Shortcut_to_WM_TASK_HDR.toDF(*["SQ_Shortcut_to_WM_TASK_HDR___" + col for col in SQ_Shortcut_to_WM_TASK_HDR.columns])
JNR_SITE_PROFILE_temp = JNR_SITE_PROFILE.toDF(*["JNR_SITE_PROFILE___" + col for col in JNR_SITE_PROFILE.columns])

JNR_WM_TASK_HDR = SQ_Shortcut_to_WM_TASK_HDR_temp.join(JNR_SITE_PROFILE_temp,[SQ_Shortcut_to_WM_TASK_HDR_temp.SQ_Shortcut_to_WM_TASK_HDR___LOCATION_ID == JNR_SITE_PROFILE_temp.JNR_SITE_PROFILE___LOCATION_ID, SQ_Shortcut_to_WM_TASK_HDR_temp.SQ_Shortcut_to_WM_TASK_HDR___WM_TASK_HDR_ID == JNR_SITE_PROFILE_temp.JNR_SITE_PROFILE___TASK_HDR_ID],'right_outer').selectExpr( 
	"JNR_SITE_PROFILE___LOCATION_ID as LOCATION_ID", 
	"JNR_SITE_PROFILE___TASK_HDR_ID as TASK_HDR_ID", 
	"JNR_SITE_PROFILE___TASK_ID as TASK_ID", 
	"JNR_SITE_PROFILE___WHSE as WHSE", 
	"JNR_SITE_PROFILE___TASK_DESC as TASK_DESC", 
	"JNR_SITE_PROFILE___INVN_TYPE as INVN_TYPE", 
	"JNR_SITE_PROFILE___INVN_NEED_TYPE as INVN_NEED_TYPE", 
	"JNR_SITE_PROFILE___DFLT_TASK_PRTY as DFLT_TASK_PRTY", 
	"JNR_SITE_PROFILE___CURR_TASK_PRTY as CURR_TASK_PRTY", 
	"JNR_SITE_PROFILE___XPECTD_DURTN as XPECTD_DURTN", 
	"JNR_SITE_PROFILE___ACTL_DURTN as ACTL_DURTN", 
	"JNR_SITE_PROFILE___ERLST_START_DATE_TIME as ERLST_START_DATE_TIME", 
	"JNR_SITE_PROFILE___LTST_START_DATE_TIME as LTST_START_DATE_TIME", 
	"JNR_SITE_PROFILE___LTST_CMPL_DATE_TIME as LTST_CMPL_DATE_TIME", 
	"JNR_SITE_PROFILE___BEGIN_AREA as BEGIN_AREA", 
	"JNR_SITE_PROFILE___BEGIN_ZONE as BEGIN_ZONE", 
	"JNR_SITE_PROFILE___BEGIN_AISLE as BEGIN_AISLE", 
	"JNR_SITE_PROFILE___END_AREA as END_AREA", 
	"JNR_SITE_PROFILE___END_ZONE as END_ZONE", 
	"JNR_SITE_PROFILE___END_AISLE as END_AISLE", 
	"JNR_SITE_PROFILE___START_CURR_WORK_GRP as START_CURR_WORK_GRP", 
	"JNR_SITE_PROFILE___START_CURR_WORK_AREA as START_CURR_WORK_AREA", 
	"JNR_SITE_PROFILE___END_CURR_WORK_GRP as END_CURR_WORK_GRP", 
	"JNR_SITE_PROFILE___END_CURR_WORK_AREA as END_CURR_WORK_AREA", 
	"JNR_SITE_PROFILE___START_DEST_WORK_GRP as START_DEST_WORK_GRP", 
	"JNR_SITE_PROFILE___START_DEST_WORK_AREA as START_DEST_WORK_AREA", 
	"JNR_SITE_PROFILE___END_DEST_WORK_GRP as END_DEST_WORK_GRP", 
	"JNR_SITE_PROFILE___END_DEST_WORK_AREA as END_DEST_WORK_AREA", 
	"JNR_SITE_PROFILE___TASK_TYPE as TASK_TYPE", 
	"JNR_SITE_PROFILE___TASK_GENRTN_REF_CODE as TASK_GENRTN_REF_CODE", 
	"JNR_SITE_PROFILE___TASK_GENRTN_REF_NBR as TASK_GENRTN_REF_NBR", 
	"JNR_SITE_PROFILE___NEED_ID as NEED_ID", 
	"JNR_SITE_PROFILE___TASK_BATCH as TASK_BATCH", 
	"JNR_SITE_PROFILE___STAT_CODE as STAT_CODE", 
	"JNR_SITE_PROFILE___CREATE_DATE_TIME as CREATE_DATE_TIME", 
	"JNR_SITE_PROFILE___MOD_DATE_TIME as MOD_DATE_TIME", 
	"JNR_SITE_PROFILE___USER_ID as USER_ID", 
	"JNR_SITE_PROFILE___RLS_DATE_TIME as RLS_DATE_TIME", 
	"JNR_SITE_PROFILE___TASK_CMPL_REF_CODE as TASK_CMPL_REF_CODE", 
	"JNR_SITE_PROFILE___TASK_CMPL_REF_NBR as TASK_CMPL_REF_NBR", 
	"JNR_SITE_PROFILE___OWNER_USER_ID as OWNER_USER_ID", 
	"JNR_SITE_PROFILE___ONE_USER_PER_GRP as ONE_USER_PER_GRP", 
	"JNR_SITE_PROFILE___NEXT_TASK_ID as NEXT_TASK_ID", 
	"JNR_SITE_PROFILE___EXCEPTION_CODE as EXCEPTION_CODE", 
	"JNR_SITE_PROFILE___CURR_LOCN_ID as CURR_LOCN_ID", 
	"JNR_SITE_PROFILE___TASK_PARM_ID as TASK_PARM_ID", 
	"JNR_SITE_PROFILE___RULE_ID as RULE_ID", 
	"JNR_SITE_PROFILE___VOCOLLECT_ASSIGN_ID as VOCOLLECT_ASSIGN_ID", 
	"JNR_SITE_PROFILE___CURR_USER_ID as CURR_USER_ID", 
	"JNR_SITE_PROFILE___MHE_FLAG as MHE_FLAG", 
	"JNR_SITE_PROFILE___PICK_TO_TOTE_FLAG as PICK_TO_TOTE_FLAG", 
	"JNR_SITE_PROFILE___MHE_ORD_STATE as MHE_ORD_STATE", 
	"JNR_SITE_PROFILE___PRT_TASK_LIST_FLAG as PRT_TASK_LIST_FLAG", 
	"JNR_SITE_PROFILE___RPT_PRTR_REQSTR as RPT_PRTR_REQSTR", 
	"JNR_SITE_PROFILE___ORIG_TASK_ID as ORIG_TASK_ID", 
	"JNR_SITE_PROFILE___DOC_ID as DOC_ID", 
	"JNR_SITE_PROFILE___VOCO_INTRNL_REVERSE_ID as VOCO_INTRNL_REVERSE_ID", 
	"JNR_SITE_PROFILE___WM_VERSION_ID as WM_VERSION_ID", 
	"JNR_SITE_PROFILE___ITEM_ID as ITEM_ID", 
	"JNR_SITE_PROFILE___LOCN_HDR_ID as LOCN_HDR_ID", 
	"JNR_SITE_PROFILE___TASK_RULE_PARM_ID as TASK_RULE_PARM_ID", 
	"JNR_SITE_PROFILE___PICK_CART_TYPE as PICK_CART_TYPE", 
	"JNR_SITE_PROFILE___REPRINT_COUNT as REPRINT_COUNT", 
	"JNR_SITE_PROFILE___ESTIMATED_TIME as ESTIMATED_TIME", 
	"JNR_SITE_PROFILE___ESTIMATED_DISTANCE as ESTIMATED_DISTANCE", 
	"SQ_Shortcut_to_WM_TASK_HDR___LOCATION_ID as i_LOCATION_ID", 
	"SQ_Shortcut_to_WM_TASK_HDR___WM_TASK_HDR_ID as i_WM_TASK_HDR_ID", 
	"SQ_Shortcut_to_WM_TASK_HDR___WM_CREATE_TSTMP as i_WM_CREATE_TSTMP", 
	"SQ_Shortcut_to_WM_TASK_HDR___WM_MOD_TSTMP as i_WM_MOD_TSTMP", 
	"SQ_Shortcut_to_WM_TASK_HDR___LOAD_TSTMP as i_LOAD_TSTMP")

# COMMAND ----------
# Processing node FIL_UNCHANGED_RECORDS, type FILTER 
# COLUMN COUNT: 70

# for each involved DataFrame, append the dataframe name to each column
JNR_WM_TASK_HDR_temp = JNR_WM_TASK_HDR.toDF(*["JNR_WM_TASK_HDR___" + col for col in JNR_WM_TASK_HDR.columns])

FIL_UNCHANGED_RECORDS = JNR_WM_TASK_HDR_temp.selectExpr( 
	"JNR_WM_TASK_HDR___LOCATION_ID as LOCATION_ID", 
	"JNR_WM_TASK_HDR___TASK_HDR_ID as TASK_HDR_ID", 
	"JNR_WM_TASK_HDR___TASK_ID as TASK_ID", 
	"JNR_WM_TASK_HDR___WHSE as WHSE", 
	"JNR_WM_TASK_HDR___TASK_DESC as TASK_DESC", 
	"JNR_WM_TASK_HDR___INVN_TYPE as INVN_TYPE", 
	"JNR_WM_TASK_HDR___INVN_NEED_TYPE as INVN_NEED_TYPE", 
	"JNR_WM_TASK_HDR___DFLT_TASK_PRTY as DFLT_TASK_PRTY", 
	"JNR_WM_TASK_HDR___CURR_TASK_PRTY as CURR_TASK_PRTY", 
	"JNR_WM_TASK_HDR___XPECTD_DURTN as XPECTD_DURTN", 
	"JNR_WM_TASK_HDR___ACTL_DURTN as ACTL_DURTN", 
	"JNR_WM_TASK_HDR___ERLST_START_DATE_TIME as ERLST_START_DATE_TIME", 
	"JNR_WM_TASK_HDR___LTST_START_DATE_TIME as LTST_START_DATE_TIME", 
	"JNR_WM_TASK_HDR___LTST_CMPL_DATE_TIME as LTST_CMPL_DATE_TIME", 
	"JNR_WM_TASK_HDR___BEGIN_AREA as BEGIN_AREA", 
	"JNR_WM_TASK_HDR___BEGIN_ZONE as BEGIN_ZONE", 
	"JNR_WM_TASK_HDR___BEGIN_AISLE as BEGIN_AISLE", 
	"JNR_WM_TASK_HDR___END_AREA as END_AREA", 
	"JNR_WM_TASK_HDR___END_ZONE as END_ZONE", 
	"JNR_WM_TASK_HDR___END_AISLE as END_AISLE", 
	"JNR_WM_TASK_HDR___START_CURR_WORK_GRP as START_CURR_WORK_GRP", 
	"JNR_WM_TASK_HDR___START_CURR_WORK_AREA as START_CURR_WORK_AREA", 
	"JNR_WM_TASK_HDR___END_CURR_WORK_GRP as END_CURR_WORK_GRP", 
	"JNR_WM_TASK_HDR___END_CURR_WORK_AREA as END_CURR_WORK_AREA", 
	"JNR_WM_TASK_HDR___START_DEST_WORK_GRP as START_DEST_WORK_GRP", 
	"JNR_WM_TASK_HDR___START_DEST_WORK_AREA as START_DEST_WORK_AREA", 
	"JNR_WM_TASK_HDR___END_DEST_WORK_GRP as END_DEST_WORK_GRP", 
	"JNR_WM_TASK_HDR___END_DEST_WORK_AREA as END_DEST_WORK_AREA", 
	"JNR_WM_TASK_HDR___TASK_TYPE as TASK_TYPE", 
	"JNR_WM_TASK_HDR___TASK_GENRTN_REF_CODE as TASK_GENRTN_REF_CODE", 
	"JNR_WM_TASK_HDR___TASK_GENRTN_REF_NBR as TASK_GENRTN_REF_NBR", 
	"JNR_WM_TASK_HDR___NEED_ID as NEED_ID", 
	"JNR_WM_TASK_HDR___TASK_BATCH as TASK_BATCH", 
	"JNR_WM_TASK_HDR___STAT_CODE as STAT_CODE", 
	"JNR_WM_TASK_HDR___CREATE_DATE_TIME as CREATE_DATE_TIME", 
	"JNR_WM_TASK_HDR___MOD_DATE_TIME as MOD_DATE_TIME", 
	"JNR_WM_TASK_HDR___USER_ID as USER_ID", 
	"JNR_WM_TASK_HDR___RLS_DATE_TIME as RLS_DATE_TIME", 
	"JNR_WM_TASK_HDR___TASK_CMPL_REF_CODE as TASK_CMPL_REF_CODE", 
	"JNR_WM_TASK_HDR___TASK_CMPL_REF_NBR as TASK_CMPL_REF_NBR", 
	"JNR_WM_TASK_HDR___OWNER_USER_ID as OWNER_USER_ID", 
	"JNR_WM_TASK_HDR___ONE_USER_PER_GRP as ONE_USER_PER_GRP", 
	"JNR_WM_TASK_HDR___NEXT_TASK_ID as NEXT_TASK_ID", 
	"JNR_WM_TASK_HDR___EXCEPTION_CODE as EXCEPTION_CODE", 
	"JNR_WM_TASK_HDR___CURR_LOCN_ID as CURR_LOCN_ID", 
	"JNR_WM_TASK_HDR___TASK_PARM_ID as TASK_PARM_ID", 
	"JNR_WM_TASK_HDR___RULE_ID as RULE_ID", 
	"JNR_WM_TASK_HDR___VOCOLLECT_ASSIGN_ID as VOCOLLECT_ASSIGN_ID", 
	"JNR_WM_TASK_HDR___CURR_USER_ID as CURR_USER_ID", 
	"JNR_WM_TASK_HDR___MHE_FLAG as MHE_FLAG", 
	"JNR_WM_TASK_HDR___PICK_TO_TOTE_FLAG as PICK_TO_TOTE_FLAG", 
	"JNR_WM_TASK_HDR___MHE_ORD_STATE as MHE_ORD_STATE", 
	"JNR_WM_TASK_HDR___PRT_TASK_LIST_FLAG as PRT_TASK_LIST_FLAG", 
	"JNR_WM_TASK_HDR___RPT_PRTR_REQSTR as RPT_PRTR_REQSTR", 
	"JNR_WM_TASK_HDR___ORIG_TASK_ID as ORIG_TASK_ID", 
	"JNR_WM_TASK_HDR___DOC_ID as DOC_ID", 
	"JNR_WM_TASK_HDR___VOCO_INTRNL_REVERSE_ID as VOCO_INTRNL_REVERSE_ID", 
	"JNR_WM_TASK_HDR___WM_VERSION_ID as WM_VERSION_ID", 
	"JNR_WM_TASK_HDR___ITEM_ID as ITEM_ID", 
	"JNR_WM_TASK_HDR___LOCN_HDR_ID as LOCN_HDR_ID", 
	"JNR_WM_TASK_HDR___TASK_RULE_PARM_ID as TASK_RULE_PARM_ID", 
	"JNR_WM_TASK_HDR___PICK_CART_TYPE as PICK_CART_TYPE", 
	"JNR_WM_TASK_HDR___REPRINT_COUNT as REPRINT_COUNT", 
	"JNR_WM_TASK_HDR___ESTIMATED_TIME as ESTIMATED_TIME", 
	"JNR_WM_TASK_HDR___ESTIMATED_DISTANCE as ESTIMATED_DISTANCE", 
	"JNR_WM_TASK_HDR___i_LOCATION_ID as i_LOCATION_ID", 
	"JNR_WM_TASK_HDR___i_WM_TASK_HDR_ID as i_WM_TASK_HDR_ID", 
	"JNR_WM_TASK_HDR___i_WM_CREATE_TSTMP as i_WM_CREATE_TSTMP", 
	"JNR_WM_TASK_HDR___i_WM_MOD_TSTMP as i_WM_MOD_TSTMP", 
	"JNR_WM_TASK_HDR___i_LOAD_TSTMP as i_LOAD_TSTMP").filter(expr("i_WM_TASK_HDR_ID IS NULL OR (NOT i_WM_TASK_HDR_ID IS NULL AND (COALESCE(CREATE_DATE_TIME, date'1900-01-01') != COALESCE(i_WM_CREATE_TSTMP, date'1900-01-01')) OR (COALESCE(MOD_DATE_TIME, date'1900-01-01') != COALESCE(i_WM_MOD_TSTMP, date'1900-01-01')))")).withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node EXP_UPDATE_VALIDATOR, type EXPRESSION 
# COLUMN COUNT: 70

# for each involved DataFrame, append the dataframe name to each column
FIL_UNCHANGED_RECORDS_temp = FIL_UNCHANGED_RECORDS.toDF(*["FIL_UNCHANGED_RECORDS___" + col for col in FIL_UNCHANGED_RECORDS.columns])

EXP_UPDATE_VALIDATOR = FIL_UNCHANGED_RECORDS_temp.selectExpr( 
	"FIL_UNCHANGED_RECORDS___sys_row_id as sys_row_id", 
	"FIL_UNCHANGED_RECORDS___LOCATION_ID as LOCATION_ID", 
	"FIL_UNCHANGED_RECORDS___TASK_HDR_ID as TASK_HDR_ID", 
	"FIL_UNCHANGED_RECORDS___TASK_ID as TASK_ID", 
	"FIL_UNCHANGED_RECORDS___WHSE as WHSE", 
	"FIL_UNCHANGED_RECORDS___TASK_DESC as TASK_DESC", 
	"FIL_UNCHANGED_RECORDS___INVN_TYPE as INVN_TYPE", 
	"FIL_UNCHANGED_RECORDS___INVN_NEED_TYPE as INVN_NEED_TYPE", 
	"FIL_UNCHANGED_RECORDS___DFLT_TASK_PRTY as DFLT_TASK_PRTY", 
	"FIL_UNCHANGED_RECORDS___CURR_TASK_PRTY as CURR_TASK_PRTY", 
	"FIL_UNCHANGED_RECORDS___XPECTD_DURTN as XPECTD_DURTN", 
	"FIL_UNCHANGED_RECORDS___ACTL_DURTN as ACTL_DURTN", 
	"FIL_UNCHANGED_RECORDS___ERLST_START_DATE_TIME as ERLST_START_DATE_TIME", 
	"FIL_UNCHANGED_RECORDS___LTST_START_DATE_TIME as LTST_START_DATE_TIME", 
	"FIL_UNCHANGED_RECORDS___LTST_CMPL_DATE_TIME as LTST_CMPL_DATE_TIME", 
	"FIL_UNCHANGED_RECORDS___BEGIN_AREA as BEGIN_AREA", 
	"FIL_UNCHANGED_RECORDS___BEGIN_ZONE as BEGIN_ZONE", 
	"FIL_UNCHANGED_RECORDS___BEGIN_AISLE as BEGIN_AISLE", 
	"FIL_UNCHANGED_RECORDS___END_AREA as END_AREA", 
	"FIL_UNCHANGED_RECORDS___END_ZONE as END_ZONE", 
	"FIL_UNCHANGED_RECORDS___END_AISLE as END_AISLE", 
	"FIL_UNCHANGED_RECORDS___START_CURR_WORK_GRP as START_CURR_WORK_GRP", 
	"FIL_UNCHANGED_RECORDS___START_CURR_WORK_AREA as START_CURR_WORK_AREA", 
	"FIL_UNCHANGED_RECORDS___END_CURR_WORK_GRP as END_CURR_WORK_GRP", 
	"FIL_UNCHANGED_RECORDS___END_CURR_WORK_AREA as END_CURR_WORK_AREA", 
	"FIL_UNCHANGED_RECORDS___START_DEST_WORK_GRP as START_DEST_WORK_GRP", 
	"FIL_UNCHANGED_RECORDS___START_DEST_WORK_AREA as START_DEST_WORK_AREA", 
	"FIL_UNCHANGED_RECORDS___END_DEST_WORK_GRP as END_DEST_WORK_GRP", 
	"FIL_UNCHANGED_RECORDS___END_DEST_WORK_AREA as END_DEST_WORK_AREA", 
	"FIL_UNCHANGED_RECORDS___TASK_TYPE as TASK_TYPE", 
	"FIL_UNCHANGED_RECORDS___TASK_GENRTN_REF_CODE as TASK_GENRTN_REF_CODE", 
	"FIL_UNCHANGED_RECORDS___TASK_GENRTN_REF_NBR as TASK_GENRTN_REF_NBR", 
	"FIL_UNCHANGED_RECORDS___NEED_ID as NEED_ID", 
	"FIL_UNCHANGED_RECORDS___TASK_BATCH as TASK_BATCH", 
	"FIL_UNCHANGED_RECORDS___STAT_CODE as STAT_CODE", 
	"FIL_UNCHANGED_RECORDS___CREATE_DATE_TIME as CREATE_DATE_TIME", 
	"FIL_UNCHANGED_RECORDS___MOD_DATE_TIME as MOD_DATE_TIME", 
	"FIL_UNCHANGED_RECORDS___USER_ID as USER_ID", 
	"FIL_UNCHANGED_RECORDS___RLS_DATE_TIME as RLS_DATE_TIME", 
	"FIL_UNCHANGED_RECORDS___TASK_CMPL_REF_CODE as TASK_CMPL_REF_CODE", 
	"FIL_UNCHANGED_RECORDS___TASK_CMPL_REF_NBR as TASK_CMPL_REF_NBR", 
	"FIL_UNCHANGED_RECORDS___OWNER_USER_ID as OWNER_USER_ID", 
	"FIL_UNCHANGED_RECORDS___ONE_USER_PER_GRP as ONE_USER_PER_GRP", 
	"FIL_UNCHANGED_RECORDS___NEXT_TASK_ID as NEXT_TASK_ID", 
	"FIL_UNCHANGED_RECORDS___EXCEPTION_CODE as EXCEPTION_CODE", 
	"FIL_UNCHANGED_RECORDS___CURR_LOCN_ID as CURR_LOCN_ID", 
	"FIL_UNCHANGED_RECORDS___TASK_PARM_ID as TASK_PARM_ID", 
	"FIL_UNCHANGED_RECORDS___RULE_ID as RULE_ID", 
	"FIL_UNCHANGED_RECORDS___VOCOLLECT_ASSIGN_ID as VOCOLLECT_ASSIGN_ID", 
	"FIL_UNCHANGED_RECORDS___CURR_USER_ID as CURR_USER_ID", 
	"CASE WHEN TRIM(UPPER(FIL_UNCHANGED_RECORDS___MHE_FLAG)) IN ('1', 'Y') THEN '1' ELSE '0' END as MHE_FLAG_EXP", 
	"CASE WHEN TRIM(UPPER(FIL_UNCHANGED_RECORDS___PICK_TO_TOTE_FLAG)) IN ('1', 'Y') THEN '1' ELSE '0' END as PICK_TO_TOTE_FLAG_EXP", 
	"FIL_UNCHANGED_RECORDS___MHE_ORD_STATE as MHE_ORD_STATE", 
	"CASE WHEN TRIM(UPPER(FIL_UNCHANGED_RECORDS___PRT_TASK_LIST_FLAG)) IN ('1', 'Y') THEN '1' ELSE '0' END as PRT_TASK_LIST_FLAG_EXP", 
	"FIL_UNCHANGED_RECORDS___RPT_PRTR_REQSTR as RPT_PRTR_REQSTR", 
	"FIL_UNCHANGED_RECORDS___ORIG_TASK_ID as ORIG_TASK_ID", 
	"FIL_UNCHANGED_RECORDS___DOC_ID as DOC_ID", 
	"FIL_UNCHANGED_RECORDS___VOCO_INTRNL_REVERSE_ID as VOCO_INTRNL_REVERSE_ID", 
	"FIL_UNCHANGED_RECORDS___WM_VERSION_ID as WM_VERSION_ID", 
	"FIL_UNCHANGED_RECORDS___ITEM_ID as ITEM_ID", 
	"FIL_UNCHANGED_RECORDS___LOCN_HDR_ID as LOCN_HDR_ID", 
	"FIL_UNCHANGED_RECORDS___TASK_RULE_PARM_ID as TASK_RULE_PARM_ID", 
	"FIL_UNCHANGED_RECORDS___PICK_CART_TYPE as PICK_CART_TYPE", 
	"FIL_UNCHANGED_RECORDS___REPRINT_COUNT as REPRINT_COUNT", 
	"FIL_UNCHANGED_RECORDS___ESTIMATED_TIME as ESTIMATED_TIME", 
	"FIL_UNCHANGED_RECORDS___ESTIMATED_DISTANCE as ESTIMATED_DISTANCE", 
	"FIL_UNCHANGED_RECORDS___i_WM_TASK_HDR_ID as i_WM_TASK_HDR_ID", 
	"FIL_UNCHANGED_RECORDS___i_LOAD_TSTMP as i_LOAD_TSTMP", 
	"CURRENT_TIMESTAMP as UPDATE_TSTMP", 
	"IF(FIL_UNCHANGED_RECORDS___i_LOAD_TSTMP IS NULL, CURRENT_TIMESTAMP, FIL_UNCHANGED_RECORDS___i_LOAD_TSTMP) as LOAD_TSTMP", 
	"IF(FIL_UNCHANGED_RECORDS___i_WM_TASK_HDR_ID IS NULL, 1, 2) as o_UPDATE_VALIDATOR" 
)

# COMMAND ----------
# Processing node UPD_INS_UPD, type UPDATE_STRATEGY . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 68

# for each involved DataFrame, append the dataframe name to each column
EXP_UPDATE_VALIDATOR_temp = EXP_UPDATE_VALIDATOR.toDF(*["EXP_UPDATE_VALIDATOR___" + col for col in EXP_UPDATE_VALIDATOR.columns])

UPD_INS_UPD = EXP_UPDATE_VALIDATOR_temp.selectExpr( 
	"EXP_UPDATE_VALIDATOR___LOCATION_ID as LOCATION_ID", 
	"EXP_UPDATE_VALIDATOR___TASK_HDR_ID as TASK_HDR_ID", 
	"EXP_UPDATE_VALIDATOR___TASK_ID as TASK_ID", 
	"EXP_UPDATE_VALIDATOR___WHSE as WHSE", 
	"EXP_UPDATE_VALIDATOR___TASK_DESC as TASK_DESC", 
	"EXP_UPDATE_VALIDATOR___INVN_TYPE as INVN_TYPE", 
	"EXP_UPDATE_VALIDATOR___INVN_NEED_TYPE as INVN_NEED_TYPE", 
	"EXP_UPDATE_VALIDATOR___DFLT_TASK_PRTY as DFLT_TASK_PRTY", 
	"EXP_UPDATE_VALIDATOR___CURR_TASK_PRTY as CURR_TASK_PRTY", 
	"EXP_UPDATE_VALIDATOR___XPECTD_DURTN as XPECTD_DURTN", 
	"EXP_UPDATE_VALIDATOR___ACTL_DURTN as ACTL_DURTN", 
	"EXP_UPDATE_VALIDATOR___ERLST_START_DATE_TIME as ERLST_START_DATE_TIME", 
	"EXP_UPDATE_VALIDATOR___LTST_START_DATE_TIME as LTST_START_DATE_TIME", 
	"EXP_UPDATE_VALIDATOR___LTST_CMPL_DATE_TIME as LTST_CMPL_DATE_TIME", 
	"EXP_UPDATE_VALIDATOR___BEGIN_AREA as BEGIN_AREA", 
	"EXP_UPDATE_VALIDATOR___BEGIN_ZONE as BEGIN_ZONE", 
	"EXP_UPDATE_VALIDATOR___BEGIN_AISLE as BEGIN_AISLE", 
	"EXP_UPDATE_VALIDATOR___END_AREA as END_AREA", 
	"EXP_UPDATE_VALIDATOR___END_ZONE as END_ZONE", 
	"EXP_UPDATE_VALIDATOR___END_AISLE as END_AISLE", 
	"EXP_UPDATE_VALIDATOR___START_CURR_WORK_GRP as START_CURR_WORK_GRP", 
	"EXP_UPDATE_VALIDATOR___START_CURR_WORK_AREA as START_CURR_WORK_AREA", 
	"EXP_UPDATE_VALIDATOR___END_CURR_WORK_GRP as END_CURR_WORK_GRP", 
	"EXP_UPDATE_VALIDATOR___END_CURR_WORK_AREA as END_CURR_WORK_AREA", 
	"EXP_UPDATE_VALIDATOR___START_DEST_WORK_GRP as START_DEST_WORK_GRP", 
	"EXP_UPDATE_VALIDATOR___START_DEST_WORK_AREA as START_DEST_WORK_AREA", 
	"EXP_UPDATE_VALIDATOR___END_DEST_WORK_GRP as END_DEST_WORK_GRP", 
	"EXP_UPDATE_VALIDATOR___END_DEST_WORK_AREA as END_DEST_WORK_AREA", 
	"EXP_UPDATE_VALIDATOR___TASK_TYPE as TASK_TYPE", 
	"EXP_UPDATE_VALIDATOR___TASK_GENRTN_REF_CODE as TASK_GENRTN_REF_CODE", 
	"EXP_UPDATE_VALIDATOR___TASK_GENRTN_REF_NBR as TASK_GENRTN_REF_NBR", 
	"EXP_UPDATE_VALIDATOR___NEED_ID as NEED_ID", 
	"EXP_UPDATE_VALIDATOR___TASK_BATCH as TASK_BATCH", 
	"EXP_UPDATE_VALIDATOR___STAT_CODE as STAT_CODE", 
	"EXP_UPDATE_VALIDATOR___CREATE_DATE_TIME as CREATE_DATE_TIME", 
	"EXP_UPDATE_VALIDATOR___MOD_DATE_TIME as MOD_DATE_TIME", 
	"EXP_UPDATE_VALIDATOR___USER_ID as USER_ID", 
	"EXP_UPDATE_VALIDATOR___RLS_DATE_TIME as RLS_DATE_TIME", 
	"EXP_UPDATE_VALIDATOR___TASK_CMPL_REF_CODE as TASK_CMPL_REF_CODE", 
	"EXP_UPDATE_VALIDATOR___TASK_CMPL_REF_NBR as TASK_CMPL_REF_NBR", 
	"EXP_UPDATE_VALIDATOR___OWNER_USER_ID as OWNER_USER_ID", 
	"EXP_UPDATE_VALIDATOR___ONE_USER_PER_GRP as ONE_USER_PER_GRP", 
	"EXP_UPDATE_VALIDATOR___NEXT_TASK_ID as NEXT_TASK_ID", 
	"EXP_UPDATE_VALIDATOR___EXCEPTION_CODE as EXCEPTION_CODE", 
	"EXP_UPDATE_VALIDATOR___CURR_LOCN_ID as CURR_LOCN_ID", 
	"EXP_UPDATE_VALIDATOR___TASK_PARM_ID as TASK_PARM_ID", 
	"EXP_UPDATE_VALIDATOR___RULE_ID as RULE_ID", 
	"EXP_UPDATE_VALIDATOR___VOCOLLECT_ASSIGN_ID as VOCOLLECT_ASSIGN_ID", 
	"EXP_UPDATE_VALIDATOR___CURR_USER_ID as CURR_USER_ID", 
	"EXP_UPDATE_VALIDATOR___MHE_FLAG_EXP as MHE_FLAG", 
	"EXP_UPDATE_VALIDATOR___PICK_TO_TOTE_FLAG_EXP as PICK_TO_TOTE_FLAG", 
	"EXP_UPDATE_VALIDATOR___MHE_ORD_STATE as MHE_ORD_STATE", 
	"EXP_UPDATE_VALIDATOR___PRT_TASK_LIST_FLAG_EXP as PRT_TASK_LIST_FLAG", 
	"EXP_UPDATE_VALIDATOR___RPT_PRTR_REQSTR as RPT_PRTR_REQSTR", 
	"EXP_UPDATE_VALIDATOR___ORIG_TASK_ID as ORIG_TASK_ID", 
	"EXP_UPDATE_VALIDATOR___DOC_ID as DOC_ID", 
	"EXP_UPDATE_VALIDATOR___VOCO_INTRNL_REVERSE_ID as VOCO_INTRNL_REVERSE_ID", 
	"EXP_UPDATE_VALIDATOR___WM_VERSION_ID as WM_VERSION_ID", 
	"EXP_UPDATE_VALIDATOR___ITEM_ID as ITEM_ID", 
	"EXP_UPDATE_VALIDATOR___LOCN_HDR_ID as LOCN_HDR_ID", 
	"EXP_UPDATE_VALIDATOR___TASK_RULE_PARM_ID as TASK_RULE_PARM_ID", 
	"EXP_UPDATE_VALIDATOR___PICK_CART_TYPE as PICK_CART_TYPE", 
	"EXP_UPDATE_VALIDATOR___REPRINT_COUNT as REPRINT_COUNT", 
	"EXP_UPDATE_VALIDATOR___ESTIMATED_TIME as ESTIMATED_TIME", 
	"EXP_UPDATE_VALIDATOR___ESTIMATED_DISTANCE as ESTIMATED_DISTANCE", 
	"EXP_UPDATE_VALIDATOR___UPDATE_TSTMP as UPDATE_TSTMP", 
	"EXP_UPDATE_VALIDATOR___LOAD_TSTMP as LOAD_TSTMP", 
	"EXP_UPDATE_VALIDATOR___o_UPDATE_VALIDATOR as o_UPDATE_VALIDATOR"
).withColumn('pyspark_data_action', when(EXP_UPDATE_VALIDATOR.o_UPDATE_VALIDATOR ==(lit(1)),lit(0)).when(EXP_UPDATE_VALIDATOR.o_UPDATE_VALIDATOR ==(lit(2)),lit(1)))

# COMMAND ----------
# Processing node Shortcut_to_WM_TASK_HDR1, type TARGET 
# COLUMN COUNT: 67


Shortcut_to_WM_TASK_HDR1 = UPD_INS_UPD.selectExpr( 
	"CAST(LOCATION_ID AS BIGINT) as LOCATION_ID", 
	"CAST(TASK_HDR_ID AS BIGINT) as WM_TASK_HDR_ID", 
	"CAST(TASK_ID AS BIGINT) as WM_TASK_ID", 
	"CAST(ORIG_TASK_ID AS BIGINT) as WM_ORIG_TASK_ID", 
	"CAST(WHSE AS STRING) as WM_WHSE", 
	"CAST(TASK_DESC AS STRING) as WM_TASK_DESC", 
	"CAST(TASK_TYPE AS STRING) as WM_TASK_TYPE", 
	"CAST(TASK_BATCH AS STRING) as WM_TASK_BATCH", 
	"CAST(NEXT_TASK_ID AS BIGINT) as WM_NEXT_TASK_ID", 
	"CAST(STAT_CODE AS BIGINT) as WM_STAT_CD", 
	"CAST(LOCN_HDR_ID AS BIGINT) as WM_LOCN_HDR_ID", 
	"CAST(ITEM_ID AS BIGINT) as WM_ITEM_ID", 
	"CAST(NEED_ID AS STRING) as WM_NEED_ID", 
	"CAST(INVN_TYPE AS STRING) as WM_INVN_TYPE", 
	"CAST(INVN_NEED_TYPE AS BIGINT) as WM_INVN_NEED_TYPE", 
	"CAST(TASK_RULE_PARM_ID AS BIGINT) as WM_TASK_RULE_PARM_ID", 
	"CAST(TASK_PARM_ID AS BIGINT) as WM_TASK_PARM_ID", 
	"CAST(RULE_ID AS BIGINT) as WM_RULE_ID", 
	"CAST(EXCEPTION_CODE AS STRING) as WM_EXCEPTION_CD", 
	"CAST(PICK_CART_TYPE AS STRING) as WM_PICK_CART_TYPE", 
	"CAST(DFLT_TASK_PRTY AS BIGINT) as DFLT_TASK_PRTY", 
	"CAST(CURR_TASK_PRTY AS BIGINT) as CURR_TASK_PRTY", 
	"CAST(TASK_GENRTN_REF_CODE AS STRING) as WM_TASK_GENRTN_REF_CD", 
	"CAST(TASK_GENRTN_REF_NBR AS STRING) as WM_TASK_GENRTN_REF_NBR", 
	"CAST(TASK_CMPL_REF_CODE AS STRING) as WM_TASK_CMPL_REF_CD", 
	"CAST(TASK_CMPL_REF_NBR AS STRING) as WM_TASK_CMPL_REF_NBR", 
	"CAST(ONE_USER_PER_GRP AS STRING) as ONE_USER_PER_GRP", 
	"CAST(VOCOLLECT_ASSIGN_ID AS BIGINT) as WM_VOCOLLECT_ASSIGN_ID", 
	"CAST(MHE_FLAG AS BIGINT) as WM_MHE_FLAG", 
	"CAST(PICK_TO_TOTE_FLAG AS BIGINT) as PICK_TO_TOTE_FLAG", 
	"CAST(MHE_ORD_STATE AS STRING) as WM_MHE_ORD_STATE", 
	"CAST(PRT_TASK_LIST_FLAG AS BIGINT) as PRT_TASK_LIST_FLAG", 
	"CAST(RPT_PRTR_REQSTR AS STRING) as RPT_PRTR_REQSTR", 
	"CAST(DOC_ID AS STRING) as WM_DOC_ID", 
	"CAST(VOCO_INTRNL_REVERSE_ID AS STRING) as WM_VOCO_INTRNL_REVERSE_ID", 
	"CAST(CURR_LOCN_ID AS STRING) as WM_CURR_LOCN_ID", 
	"CAST(START_CURR_WORK_GRP AS STRING) as START_CURR_WORK_GRP", 
	"CAST(START_CURR_WORK_AREA AS STRING) as START_CURR_WORK_AREA", 
	"CAST(END_CURR_WORK_GRP AS STRING) as END_CURR_WORK_GRP", 
	"CAST(END_CURR_WORK_AREA AS STRING) as END_CURR_WORK_AREA", 
	"CAST(START_DEST_WORK_GRP AS STRING) as START_DEST_WORK_GRP", 
	"CAST(START_DEST_WORK_AREA AS STRING) as START_DEST_WORK_AREA", 
	"CAST(END_DEST_WORK_GRP AS STRING) as END_DEST_WORK_GRP", 
	"CAST(END_DEST_WORK_AREA AS STRING) as END_DEST_WORK_AREA", 
	"CAST(RLS_DATE_TIME AS TIMESTAMP) as WM_RLS_TSTMP", 
	"CAST(ERLST_START_DATE_TIME AS TIMESTAMP) as ERLST_START_TSTMP", 
	"CAST(LTST_START_DATE_TIME AS TIMESTAMP) as LTST_START_TSTMP", 
	"CAST(LTST_CMPL_DATE_TIME AS TIMESTAMP) as LTST_CMPL_TSTMP", 
	"CAST(BEGIN_AREA AS STRING) as BEGIN_AREA", 
	"CAST(BEGIN_ZONE AS STRING) as BEGIN_ZONE", 
	"CAST(BEGIN_AISLE AS STRING) as BEGIN_AISLE", 
	"CAST(END_AREA AS STRING) as END_AREA", 
	"CAST(END_ZONE AS STRING) as END_ZONE", 
	"CAST(END_AISLE AS STRING) as END_AISLE", 
	"CAST(REPRINT_COUNT AS BIGINT) as REPRINT_CNT", 
	"CAST(ESTIMATED_TIME AS BIGINT) as ESTIMATED_TIME", 
	"CAST(ESTIMATED_DISTANCE AS BIGINT) as ESTIMATED_DISTANCE", 
	"CAST(XPECTD_DURTN AS BIGINT) as XPECTD_DURTN", 
	"CAST(ACTL_DURTN AS BIGINT) as ACTL_DURTN", 
	"CAST(OWNER_USER_ID AS STRING) as WM_OWNER_USER_ID", 
	"CAST(CURR_USER_ID AS STRING) as WM_CURR_USER_ID", 
	"CAST(USER_ID AS STRING) as WM_USER_ID", 
	"CAST(WM_VERSION_ID AS BIGINT) as WM_VERSION_ID", 
	"CAST(CREATE_DATE_TIME AS TIMESTAMP) as WM_CREATE_TSTMP", 
	"CAST(MOD_DATE_TIME AS TIMESTAMP) as WM_MOD_TSTMP", 
	"CAST(UPDATE_TSTMP AS TIMESTAMP) as UPDATE_TSTMP", 
	"CAST(LOAD_TSTMP AS TIMESTAMP) as LOAD_TSTMP" , 
    "pyspark_data_action"
)

try:
  primary_key = """source.LOCATION_ID = target.LOCATION_ID AND source.WM_TASK_HDR_ID = target.WM_TASK_HDR_ID"""
  # refined_perf_table = "WM_TASK_HDR"
  executeMerge(Shortcut_to_WM_TASK_HDR1, refined_perf_table, primary_key)
  logger.info(f"Merge with {refined_perf_table} completed]")
  logPrevRunDt("WM_TASK_HDR", "WM_TASK_HDR", "Completed", "N/A", f"{raw}.log_run_details")
except Exception as e:
  logPrevRunDt("WM_TASK_HDR", "WM_TASK_HDR","Failed",str(e), f"{raw}.log_run_details", )
  raise e
