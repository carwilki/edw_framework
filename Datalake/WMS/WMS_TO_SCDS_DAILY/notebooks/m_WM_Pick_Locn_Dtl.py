#Code converted on 2023-06-26 17:03:48
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from pyspark.dbutils import DBUtils
from Datalake.utils.genericUtilities import *
from Datalake.utils.configs import *
from Datalake.utils.mergeUtils import *
from Datalake.utils.logger import *
# COMMAND ----------

parser = argparse.ArgumentParser()
spark = SparkSession.getActiveSession()
dbutils = DBUtils(spark)

parser.add_argument('env', type=str, help='Env Variable')
args = parser.parse_args()
env = args.env
# env = 'dev'

if env is None or env == '':
    raise ValueError('env is not set')

refine = getEnvPrefix(env) + 'refine'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'

# Set global variables
starttime = datetime.now() #start timestamp of the script
refined_perf_table = f"{refine}.WM_PICK_LOCN_DTL"
raw_perf_table = f"{raw}.WM_PICK_LOCN_DTL_PRE"
site_profile_table = f"{legacy}.SITE_PROFILE"


Prev_Run_Dt=genPrevRunDt(refined_perf_table.split(".")[1], refine,raw)
Del_Logic= ' -- ' # args.Del_Logic
# soft_delete_logic_WM_Pick_Locn_Dtl= '  ' # args.soft_delete_logic_WM_Pick_Locn_Dtl

# COMMAND ----------
# Processing node SQ_Shortcut_to_WM_PICK_LOCN_DTL, type SOURCE 
# COLUMN COUNT: 49

SQ_Shortcut_to_WM_PICK_LOCN_DTL = spark.sql(f"""SELECT
LOCATION_ID,
WM_PICK_LOCN_DTL_ID,
WM_PICK_LOCN_HDR_ID,
WM_LOCN_ID,
WM_LOCN_SEQ_NBR,
WM_ITEM_MASTER_ID,
WM_ITEM_ID,
WM_BATCH_NBR,
WM_INVN_TYPE,
WM_PROD_STAT,
WM_FIRST_WAVE_NBR,
WM_LAST_WAVE_NBR,
WM_LTST_SKU_ASSIGN_FLAG,
WM_LTST_PICK_ASSIGN_TSTMP,
WM_PIKNG_LOCK_CD,
TRIG_REPL_FOR_SKU_FLAG,
PRIM_LOCN_FOR_SKU_FLAG,
WM_LANES,
WM_STACKING,
WM_TASK_RELEASED_FLAG,
WM_REPLEN_CONTROL,
WM_PICK_TO_ZERO_ACTION,
COUNTRY_OF_ORIGIN,
PRE_ALLOCATED_QTY,
PACK_QTY,
TO_BE_FILLD_CASES,
MAX_INVN_QTY,
MIN_INVN_QTY,
ACTL_INVN_CASES,
MIN_INVN_CASES,
MAX_INVN_CASES,
MIN_QTY_TO_RLS_HELD_RPLN,
MIN_CASES_TO_RLS_HELD_RPLN,
STOP_QTY,
STOP_TSTMP,
UTIL_PERCENT,
WM_SKU_ATTR_1,
WM_SKU_ATTR_2,
WM_SKU_ATTR_3,
WM_SKU_ATTR_4,
WM_SKU_ATTR_5,
WM_USER_ID,
WM_VERSION_ID,
WM_CREATED_TSTMP,
WM_LAST_UPDATED_TSTMP,
WM_CREATE_TSTMP,
WM_MOD_TSTMP,
DELETE_FLAG,
LOAD_TSTMP
FROM {refined_perf_table}
WHERE {Del_Logic} 1=0 and 

DELETE_FLAG =0""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE, type SOURCE 
# COLUMN COUNT: 47

SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE = spark.sql(f"""SELECT
DC_NBR,
PICK_LOCN_DTL_ID,
LOCN_ID,
LOCN_SEQ_NBR,
SKU_ATTR_1,
SKU_ATTR_2,
SKU_ATTR_3,
SKU_ATTR_4,
SKU_ATTR_5,
INVN_TYPE,
PROD_STAT,
BATCH_NBR,
CNTRY_OF_ORGN,
MAX_INVN_QTY,
MIN_INVN_QTY,
ACTL_INVN_CASES,
MIN_INVN_CASES,
MAX_INVN_CASES,
TRIG_REPL_FOR_SKU,
PRIM_LOCN_FOR_SKU,
FIRST_WAVE_NBR,
LAST_WAVE_NBR,
LTST_SKU_ASSIGN,
CREATE_DATE_TIME,
MOD_DATE_TIME,
USER_ID,
LTST_PICK_ASSIGN_DATE_TIME,
PIKNG_LOCK_CODE,
TO_BE_FILLD_CASES,
LANES,
STACKING,
MIN_QTY_TO_RLS_HELD_RPLN,
MIN_CASES_TO_RLS_HELD_RPLN,
TASK_RELEASED,
PACK_QTY,
PICK_LOCN_HDR_ID,
WM_VERSION_ID,
ITEM_MASTER_ID,
ITEM_ID,
PRE_ALLOCATED_QTY,
REPLEN_CONTROL,
STOP_QTY,
STOP_DTTM,
PICK_TO_ZERO_ACTION,
UTIL_PERCENT,
CREATED_DTTM,
LAST_UPDATED_DTTM
FROM {raw_perf_table}""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node EXP_INT_CONVERSION, type EXPRESSION 
# COLUMN COUNT: 47

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE_temp = SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE.toDF(*["SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___" + col for col in SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE.columns])

EXP_INT_CONVERSION = SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE_temp.selectExpr( \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___sys_row_id as sys_row_id", \
	"cast(SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___DC_NBR as int) as o_DC_NBR", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___PICK_LOCN_DTL_ID as PICK_LOCN_DTL_ID", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___LOCN_ID as LOCN_ID", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___LOCN_SEQ_NBR as LOCN_SEQ_NBR", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___SKU_ATTR_1 as SKU_ATTR_1", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___SKU_ATTR_2 as SKU_ATTR_2", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___SKU_ATTR_3 as SKU_ATTR_3", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___SKU_ATTR_4 as SKU_ATTR_4", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___SKU_ATTR_5 as SKU_ATTR_5", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___INVN_TYPE as INVN_TYPE", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___PROD_STAT as PROD_STAT", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___BATCH_NBR as BATCH_NBR", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___CNTRY_OF_ORGN as CNTRY_OF_ORGN", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___MAX_INVN_QTY as MAX_INVN_QTY", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___MIN_INVN_QTY as MIN_INVN_QTY", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___ACTL_INVN_CASES as ACTL_INVN_CASES", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___MIN_INVN_CASES as MIN_INVN_CASES", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___MAX_INVN_CASES as MAX_INVN_CASES", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___TRIG_REPL_FOR_SKU as TRIG_REPL_FOR_SKU", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___PRIM_LOCN_FOR_SKU as PRIM_LOCN_FOR_SKU", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___FIRST_WAVE_NBR as FIRST_WAVE_NBR", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___LAST_WAVE_NBR as LAST_WAVE_NBR", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___LTST_SKU_ASSIGN as LTST_SKU_ASSIGN", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___CREATE_DATE_TIME as CREATE_DATE_TIME", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___MOD_DATE_TIME as MOD_DATE_TIME", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___USER_ID as USER_ID", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___LTST_PICK_ASSIGN_DATE_TIME as LTST_PICK_ASSIGN_DATE_TIME", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___PIKNG_LOCK_CODE as PIKNG_LOCK_CODE", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___TO_BE_FILLD_CASES as TO_BE_FILLD_CASES", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___LANES as LANES", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___STACKING as STACKING", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___MIN_QTY_TO_RLS_HELD_RPLN as MIN_QTY_TO_RLS_HELD_RPLN", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___MIN_CASES_TO_RLS_HELD_RPLN as MIN_CASES_TO_RLS_HELD_RPLN", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___TASK_RELEASED as TASK_RELEASED", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___PACK_QTY as PACK_QTY", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___PICK_LOCN_HDR_ID as PICK_LOCN_HDR_ID", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___WM_VERSION_ID as WM_VERSION_ID", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___ITEM_MASTER_ID as ITEM_MASTER_ID", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___ITEM_ID as ITEM_ID", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___PRE_ALLOCATED_QTY as PRE_ALLOCATED_QTY", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___REPLEN_CONTROL as REPLEN_CONTROL", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___STOP_QTY as STOP_QTY", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___STOP_DTTM as STOP_DTTM", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___PICK_TO_ZERO_ACTION as PICK_TO_ZERO_ACTION", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___UTIL_PERCENT as UTIL_PERCENT", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___CREATED_DTTM as CREATED_DTTM", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL_PRE___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM" \
)

# COMMAND ----------
# Processing node SQ_Shortcut_to_SITE_PROFILE, type SOURCE 
# COLUMN COUNT: 2

SQ_Shortcut_to_SITE_PROFILE = spark.sql(f"""SELECT LOCATION_ID, STORE_NBR FROM {site_profile_table}""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node JNR_SITE_PROFILE, type JOINER 
# COLUMN COUNT: 49

JNR_SITE_PROFILE = SQ_Shortcut_to_SITE_PROFILE.join(EXP_INT_CONVERSION,[SQ_Shortcut_to_SITE_PROFILE.STORE_NBR == EXP_INT_CONVERSION.o_DC_NBR],'inner')

# COMMAND ----------
# Processing node JNR_WM_PICK_LOCN_DTL, type JOINER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 96

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_WM_PICK_LOCN_DTL_temp = SQ_Shortcut_to_WM_PICK_LOCN_DTL.toDF(*["SQ_Shortcut_to_WM_PICK_LOCN_DTL___" + col for col in SQ_Shortcut_to_WM_PICK_LOCN_DTL.columns])
JNR_SITE_PROFILE_temp = JNR_SITE_PROFILE.toDF(*["JNR_SITE_PROFILE___" + col for col in JNR_SITE_PROFILE.columns])

JNR_WM_PICK_LOCN_DTL = SQ_Shortcut_to_WM_PICK_LOCN_DTL_temp.join(JNR_SITE_PROFILE_temp,[SQ_Shortcut_to_WM_PICK_LOCN_DTL_temp.SQ_Shortcut_to_WM_PICK_LOCN_DTL___LOCATION_ID == JNR_SITE_PROFILE_temp.JNR_SITE_PROFILE___LOCATION_ID, SQ_Shortcut_to_WM_PICK_LOCN_DTL_temp.SQ_Shortcut_to_WM_PICK_LOCN_DTL___WM_PICK_LOCN_DTL_ID == JNR_SITE_PROFILE_temp.JNR_SITE_PROFILE___PICK_LOCN_DTL_ID],'right_outer').selectExpr( \
	"JNR_SITE_PROFILE___LOCATION_ID as LOCATION_ID", \
	"JNR_SITE_PROFILE___PICK_LOCN_DTL_ID as PICK_LOCN_DTL_ID", \
	"JNR_SITE_PROFILE___LOCN_ID as LOCN_ID", \
	"JNR_SITE_PROFILE___LOCN_SEQ_NBR as LOCN_SEQ_NBR", \
	"JNR_SITE_PROFILE___SKU_ATTR_1 as SKU_ATTR_1", \
	"JNR_SITE_PROFILE___SKU_ATTR_2 as SKU_ATTR_2", \
	"JNR_SITE_PROFILE___SKU_ATTR_3 as SKU_ATTR_3", \
	"JNR_SITE_PROFILE___SKU_ATTR_4 as SKU_ATTR_4", \
	"JNR_SITE_PROFILE___SKU_ATTR_5 as SKU_ATTR_5", \
	"JNR_SITE_PROFILE___INVN_TYPE as INVN_TYPE", \
	"JNR_SITE_PROFILE___PROD_STAT as PROD_STAT", \
	"JNR_SITE_PROFILE___BATCH_NBR as BATCH_NBR", \
	"JNR_SITE_PROFILE___CNTRY_OF_ORGN as CNTRY_OF_ORGN", \
	"JNR_SITE_PROFILE___MAX_INVN_QTY as MAX_INVN_QTY", \
	"JNR_SITE_PROFILE___MIN_INVN_QTY as MIN_INVN_QTY", \
	"JNR_SITE_PROFILE___ACTL_INVN_CASES as ACTL_INVN_CASES", \
	"JNR_SITE_PROFILE___MIN_INVN_CASES as MIN_INVN_CASES", \
	"JNR_SITE_PROFILE___MAX_INVN_CASES as MAX_INVN_CASES", \
	"JNR_SITE_PROFILE___TRIG_REPL_FOR_SKU as TRIG_REPL_FOR_SKU", \
	"JNR_SITE_PROFILE___PRIM_LOCN_FOR_SKU as PRIM_LOCN_FOR_SKU", \
	"JNR_SITE_PROFILE___FIRST_WAVE_NBR as FIRST_WAVE_NBR", \
	"JNR_SITE_PROFILE___LAST_WAVE_NBR as LAST_WAVE_NBR", \
	"JNR_SITE_PROFILE___LTST_SKU_ASSIGN as LTST_SKU_ASSIGN", \
	"JNR_SITE_PROFILE___USER_ID as USER_ID", \
	"JNR_SITE_PROFILE___LTST_PICK_ASSIGN_DATE_TIME as LTST_PICK_ASSIGN_DATE_TIME", \
	"JNR_SITE_PROFILE___PIKNG_LOCK_CODE as PIKNG_LOCK_CODE", \
	"JNR_SITE_PROFILE___TO_BE_FILLD_CASES as TO_BE_FILLD_CASES", \
	"JNR_SITE_PROFILE___LANES as LANES", \
	"JNR_SITE_PROFILE___STACKING as STACKING", \
	"JNR_SITE_PROFILE___MIN_QTY_TO_RLS_HELD_RPLN as MIN_QTY_TO_RLS_HELD_RPLN", \
	"JNR_SITE_PROFILE___MIN_CASES_TO_RLS_HELD_RPLN as MIN_CASES_TO_RLS_HELD_RPLN", \
	"JNR_SITE_PROFILE___TASK_RELEASED as TASK_RELEASED", \
	"JNR_SITE_PROFILE___PACK_QTY as PACK_QTY", \
	"JNR_SITE_PROFILE___PICK_LOCN_HDR_ID as PICK_LOCN_HDR_ID", \
	"JNR_SITE_PROFILE___WM_VERSION_ID as WM_VERSION_ID", \
	"JNR_SITE_PROFILE___ITEM_MASTER_ID as ITEM_MASTER_ID", \
	"JNR_SITE_PROFILE___ITEM_ID as ITEM_ID", \
	"JNR_SITE_PROFILE___PRE_ALLOCATED_QTY as PRE_ALLOCATED_QTY", \
	"JNR_SITE_PROFILE___REPLEN_CONTROL as REPLEN_CONTROL", \
	"JNR_SITE_PROFILE___STOP_QTY as STOP_QTY", \
	"JNR_SITE_PROFILE___STOP_DTTM as STOP_DTTM", \
	"JNR_SITE_PROFILE___PICK_TO_ZERO_ACTION as PICK_TO_ZERO_ACTION", \
	"JNR_SITE_PROFILE___UTIL_PERCENT as UTIL_PERCENT", \
	"JNR_SITE_PROFILE___CREATE_DATE_TIME as CREATE_DATE_TIME", \
	"JNR_SITE_PROFILE___MOD_DATE_TIME as MOD_DATE_TIME", \
	"JNR_SITE_PROFILE___CREATED_DTTM as CREATED_DTTM", \
	"JNR_SITE_PROFILE___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___LOCATION_ID as i_LOCATION_ID", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___WM_PICK_LOCN_DTL_ID as i_WM_PICK_LOCN_DTL_ID", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___WM_PICK_LOCN_HDR_ID as WM_PICK_LOCN_HDR_ID", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___WM_LOCN_ID as WM_LOCN_ID", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___WM_LOCN_SEQ_NBR as WM_LOCN_SEQ_NBR", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___WM_ITEM_MASTER_ID as WM_ITEM_MASTER_ID", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___WM_ITEM_ID as WM_ITEM_ID", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___WM_BATCH_NBR as WM_BATCH_NBR", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___WM_INVN_TYPE as WM_INVN_TYPE", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___WM_PROD_STAT as WM_PROD_STAT", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___WM_FIRST_WAVE_NBR as WM_FIRST_WAVE_NBR", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___WM_LAST_WAVE_NBR as WM_LAST_WAVE_NBR", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___WM_LTST_SKU_ASSIGN_FLAG as WM_LTST_SKU_ASSIGN_FLAG", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___WM_LTST_PICK_ASSIGN_TSTMP as WM_LTST_PICK_ASSIGN_TSTMP", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___WM_PIKNG_LOCK_CD as WM_PIKNG_LOCK_CD", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___TRIG_REPL_FOR_SKU_FLAG as TRIG_REPL_FOR_SKU_FLAG", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___PRIM_LOCN_FOR_SKU_FLAG as PRIM_LOCN_FOR_SKU_FLAG", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___WM_LANES as WM_LANES", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___WM_STACKING as WM_STACKING", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___WM_TASK_RELEASED_FLAG as WM_TASK_RELEASED_FLAG", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___WM_REPLEN_CONTROL as WM_REPLEN_CONTROL", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___WM_PICK_TO_ZERO_ACTION as WM_PICK_TO_ZERO_ACTION", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___COUNTRY_OF_ORIGIN as COUNTRY_OF_ORIGIN", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___PRE_ALLOCATED_QTY as PRE_ALLOCATED_QTY1", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___PACK_QTY as PACK_QTY1", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___TO_BE_FILLD_CASES as TO_BE_FILLD_CASES1", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___MAX_INVN_QTY as MAX_INVN_QTY1", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___MIN_INVN_QTY as MIN_INVN_QTY1", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___ACTL_INVN_CASES as ACTL_INVN_CASES1", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___MIN_INVN_CASES as MIN_INVN_CASES1", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___MAX_INVN_CASES as MAX_INVN_CASES1", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___MIN_QTY_TO_RLS_HELD_RPLN as MIN_QTY_TO_RLS_HELD_RPLN1", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___MIN_CASES_TO_RLS_HELD_RPLN as MIN_CASES_TO_RLS_HELD_RPLN1", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___STOP_QTY as STOP_QTY1", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___STOP_TSTMP as STOP_TSTMP", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___UTIL_PERCENT as UTIL_PERCENT1", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___WM_SKU_ATTR_1 as WM_SKU_ATTR_1", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___WM_SKU_ATTR_2 as WM_SKU_ATTR_2", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___WM_SKU_ATTR_3 as WM_SKU_ATTR_3", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___WM_SKU_ATTR_4 as WM_SKU_ATTR_4", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___WM_SKU_ATTR_5 as WM_SKU_ATTR_5", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___WM_USER_ID as WM_USER_ID", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___WM_VERSION_ID as WM_VERSION_ID1", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___WM_CREATED_TSTMP as i_WM_CREATED_TSTMP", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___WM_LAST_UPDATED_TSTMP as i_WM_LAST_UPDATED_TSTMP", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___WM_CREATE_TSTMP as i_WM_CREATE_TSTMP", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___WM_MOD_TSTMP as i_WM_MOD_TSTMP", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___LOAD_TSTMP as i_LOAD_TSTMP", \
	"SQ_Shortcut_to_WM_PICK_LOCN_DTL___DELETE_FLAG as WM_DELETE_FLAG")

# COMMAND ----------
# Processing node FIL_UNCHANGED_RECORDS, type FILTER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 96

# for each involved DataFrame, append the dataframe name to each column
JNR_WM_PICK_LOCN_DTL_temp = JNR_WM_PICK_LOCN_DTL.toDF(*["JNR_WM_PICK_LOCN_DTL___" + col for col in JNR_WM_PICK_LOCN_DTL.columns])

FIL_UNCHANGED_RECORDS = JNR_WM_PICK_LOCN_DTL_temp.selectExpr( \
	"JNR_WM_PICK_LOCN_DTL___LOCATION_ID as LOCATION_ID", \
	"JNR_WM_PICK_LOCN_DTL___PICK_LOCN_DTL_ID as PICK_LOCN_DTL_ID", \
	"JNR_WM_PICK_LOCN_DTL___LOCN_ID as LOCN_ID", \
	"JNR_WM_PICK_LOCN_DTL___LOCN_SEQ_NBR as LOCN_SEQ_NBR", \
	"JNR_WM_PICK_LOCN_DTL___SKU_ATTR_1 as SKU_ATTR_1", \
	"JNR_WM_PICK_LOCN_DTL___SKU_ATTR_2 as SKU_ATTR_2", \
	"JNR_WM_PICK_LOCN_DTL___SKU_ATTR_3 as SKU_ATTR_3", \
	"JNR_WM_PICK_LOCN_DTL___SKU_ATTR_4 as SKU_ATTR_4", \
	"JNR_WM_PICK_LOCN_DTL___SKU_ATTR_5 as SKU_ATTR_5", \
	"JNR_WM_PICK_LOCN_DTL___INVN_TYPE as INVN_TYPE", \
	"JNR_WM_PICK_LOCN_DTL___PROD_STAT as PROD_STAT", \
	"JNR_WM_PICK_LOCN_DTL___BATCH_NBR as BATCH_NBR", \
	"JNR_WM_PICK_LOCN_DTL___CNTRY_OF_ORGN as CNTRY_OF_ORGN", \
	"JNR_WM_PICK_LOCN_DTL___MAX_INVN_QTY as MAX_INVN_QTY", \
	"JNR_WM_PICK_LOCN_DTL___MIN_INVN_QTY as MIN_INVN_QTY", \
	"JNR_WM_PICK_LOCN_DTL___ACTL_INVN_CASES as ACTL_INVN_CASES", \
	"JNR_WM_PICK_LOCN_DTL___MIN_INVN_CASES as MIN_INVN_CASES", \
	"JNR_WM_PICK_LOCN_DTL___MAX_INVN_CASES as MAX_INVN_CASES", \
	"JNR_WM_PICK_LOCN_DTL___TRIG_REPL_FOR_SKU as TRIG_REPL_FOR_SKU", \
	"JNR_WM_PICK_LOCN_DTL___PRIM_LOCN_FOR_SKU as PRIM_LOCN_FOR_SKU", \
	"JNR_WM_PICK_LOCN_DTL___FIRST_WAVE_NBR as FIRST_WAVE_NBR", \
	"JNR_WM_PICK_LOCN_DTL___LAST_WAVE_NBR as LAST_WAVE_NBR", \
	"JNR_WM_PICK_LOCN_DTL___LTST_SKU_ASSIGN as LTST_SKU_ASSIGN", \
	"JNR_WM_PICK_LOCN_DTL___CREATE_DATE_TIME as CREATE_DATE_TIME", \
	"JNR_WM_PICK_LOCN_DTL___MOD_DATE_TIME as MOD_DATE_TIME", \
	"JNR_WM_PICK_LOCN_DTL___USER_ID as USER_ID", \
	"JNR_WM_PICK_LOCN_DTL___LTST_PICK_ASSIGN_DATE_TIME as LTST_PICK_ASSIGN_DATE_TIME", \
	"JNR_WM_PICK_LOCN_DTL___PIKNG_LOCK_CODE as PIKNG_LOCK_CODE", \
	"JNR_WM_PICK_LOCN_DTL___TO_BE_FILLD_CASES as TO_BE_FILLD_CASES", \
	"JNR_WM_PICK_LOCN_DTL___LANES as LANES", \
	"JNR_WM_PICK_LOCN_DTL___STACKING as STACKING", \
	"JNR_WM_PICK_LOCN_DTL___MIN_QTY_TO_RLS_HELD_RPLN as MIN_QTY_TO_RLS_HELD_RPLN", \
	"JNR_WM_PICK_LOCN_DTL___MIN_CASES_TO_RLS_HELD_RPLN as MIN_CASES_TO_RLS_HELD_RPLN", \
	"JNR_WM_PICK_LOCN_DTL___TASK_RELEASED as TASK_RELEASED", \
	"JNR_WM_PICK_LOCN_DTL___PACK_QTY as PACK_QTY", \
	"JNR_WM_PICK_LOCN_DTL___PICK_LOCN_HDR_ID as PICK_LOCN_HDR_ID", \
	"JNR_WM_PICK_LOCN_DTL___WM_VERSION_ID as WM_VERSION_ID", \
	"JNR_WM_PICK_LOCN_DTL___ITEM_MASTER_ID as ITEM_MASTER_ID", \
	"JNR_WM_PICK_LOCN_DTL___ITEM_ID as ITEM_ID", \
	"JNR_WM_PICK_LOCN_DTL___PRE_ALLOCATED_QTY as PRE_ALLOCATED_QTY", \
	"JNR_WM_PICK_LOCN_DTL___REPLEN_CONTROL as REPLEN_CONTROL", \
	"JNR_WM_PICK_LOCN_DTL___STOP_QTY as STOP_QTY", \
	"JNR_WM_PICK_LOCN_DTL___STOP_DTTM as STOP_DTTM", \
	"JNR_WM_PICK_LOCN_DTL___PICK_TO_ZERO_ACTION as PICK_TO_ZERO_ACTION", \
	"JNR_WM_PICK_LOCN_DTL___UTIL_PERCENT as UTIL_PERCENT", \
	"JNR_WM_PICK_LOCN_DTL___CREATED_DTTM as CREATED_DTTM", \
	"JNR_WM_PICK_LOCN_DTL___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"JNR_WM_PICK_LOCN_DTL___i_WM_PICK_LOCN_DTL_ID as i_WM_PICK_LOCN_DTL_ID", \
	"JNR_WM_PICK_LOCN_DTL___i_WM_CREATED_TSTMP as i_WM_CREATED_TSTMP", \
	"JNR_WM_PICK_LOCN_DTL___i_WM_LAST_UPDATED_TSTMP as i_WM_LAST_UPDATED_TSTMP", \
	"JNR_WM_PICK_LOCN_DTL___i_WM_CREATE_TSTMP as i_WM_CREATE_TSTMP", \
	"JNR_WM_PICK_LOCN_DTL___i_WM_MOD_TSTMP as i_WM_MOD_TSTMP", \
	"JNR_WM_PICK_LOCN_DTL___i_LOAD_TSTMP as i_LOAD_TSTMP", \
	"JNR_WM_PICK_LOCN_DTL___WM_PICK_LOCN_HDR_ID as WM_PICK_LOCN_HDR_ID", \
	"JNR_WM_PICK_LOCN_DTL___WM_LOCN_ID as WM_LOCN_ID", \
	"JNR_WM_PICK_LOCN_DTL___WM_LOCN_SEQ_NBR as WM_LOCN_SEQ_NBR", \
	"JNR_WM_PICK_LOCN_DTL___WM_ITEM_MASTER_ID as WM_ITEM_MASTER_ID", \
	"JNR_WM_PICK_LOCN_DTL___WM_ITEM_ID as WM_ITEM_ID", \
	"JNR_WM_PICK_LOCN_DTL___WM_BATCH_NBR as WM_BATCH_NBR", \
	"JNR_WM_PICK_LOCN_DTL___WM_INVN_TYPE as WM_INVN_TYPE", \
	"JNR_WM_PICK_LOCN_DTL___WM_PROD_STAT as WM_PROD_STAT", \
	"JNR_WM_PICK_LOCN_DTL___WM_FIRST_WAVE_NBR as WM_FIRST_WAVE_NBR", \
	"JNR_WM_PICK_LOCN_DTL___WM_LAST_WAVE_NBR as WM_LAST_WAVE_NBR", \
	"JNR_WM_PICK_LOCN_DTL___WM_LTST_SKU_ASSIGN_FLAG as WM_LTST_SKU_ASSIGN_FLAG", \
	"JNR_WM_PICK_LOCN_DTL___WM_LTST_PICK_ASSIGN_TSTMP as WM_LTST_PICK_ASSIGN_TSTMP", \
	"JNR_WM_PICK_LOCN_DTL___WM_PIKNG_LOCK_CD as WM_PIKNG_LOCK_CD", \
	"JNR_WM_PICK_LOCN_DTL___TRIG_REPL_FOR_SKU_FLAG as TRIG_REPL_FOR_SKU_FLAG", \
	"JNR_WM_PICK_LOCN_DTL___PRIM_LOCN_FOR_SKU_FLAG as PRIM_LOCN_FOR_SKU_FLAG", \
	"JNR_WM_PICK_LOCN_DTL___WM_LANES as WM_LANES", \
	"JNR_WM_PICK_LOCN_DTL___WM_STACKING as WM_STACKING", \
	"JNR_WM_PICK_LOCN_DTL___WM_TASK_RELEASED_FLAG as WM_TASK_RELEASED_FLAG", \
	"JNR_WM_PICK_LOCN_DTL___WM_REPLEN_CONTROL as WM_REPLEN_CONTROL", \
	"JNR_WM_PICK_LOCN_DTL___WM_PICK_TO_ZERO_ACTION as WM_PICK_TO_ZERO_ACTION", \
	"JNR_WM_PICK_LOCN_DTL___COUNTRY_OF_ORIGIN as COUNTRY_OF_ORIGIN", \
	"JNR_WM_PICK_LOCN_DTL___PRE_ALLOCATED_QTY1 as WM_PRE_ALLOCATED_QTY", \
	"JNR_WM_PICK_LOCN_DTL___PACK_QTY1 as WM_PACK_QTY", \
	"JNR_WM_PICK_LOCN_DTL___TO_BE_FILLD_CASES1 as WM_TO_BE_FILLD_CASES", \
	"JNR_WM_PICK_LOCN_DTL___MAX_INVN_QTY1 as WM_MAX_INVN_QTY", \
	"JNR_WM_PICK_LOCN_DTL___MIN_INVN_QTY1 as WM_MIN_INVN_QTY", \
	"JNR_WM_PICK_LOCN_DTL___ACTL_INVN_CASES1 as WM_ACTL_INVN_CASES", \
	"JNR_WM_PICK_LOCN_DTL___MIN_INVN_CASES1 as WM_MIN_INVN_CASES", \
	"JNR_WM_PICK_LOCN_DTL___MAX_INVN_CASES1 as WM_MAX_INVN_CASES", \
	"JNR_WM_PICK_LOCN_DTL___MIN_QTY_TO_RLS_HELD_RPLN1 as WM_MIN_QTY_TO_RLS_HELD_RPLN", \
	"JNR_WM_PICK_LOCN_DTL___MIN_CASES_TO_RLS_HELD_RPLN1 as WM_MIN_CASES_TO_RLS_HELD_RPLN", \
	"JNR_WM_PICK_LOCN_DTL___STOP_QTY1 as WM_STOP_QTY", \
	"JNR_WM_PICK_LOCN_DTL___STOP_TSTMP as STOP_TSTMP", \
	"JNR_WM_PICK_LOCN_DTL___UTIL_PERCENT1 as WM_UTIL_PERCENT", \
	"JNR_WM_PICK_LOCN_DTL___WM_SKU_ATTR_1 as WM_SKU_ATTR_1", \
	"JNR_WM_PICK_LOCN_DTL___WM_SKU_ATTR_2 as WM_SKU_ATTR_2", \
	"JNR_WM_PICK_LOCN_DTL___WM_SKU_ATTR_3 as WM_SKU_ATTR_3", \
	"JNR_WM_PICK_LOCN_DTL___WM_SKU_ATTR_4 as WM_SKU_ATTR_4", \
	"JNR_WM_PICK_LOCN_DTL___WM_SKU_ATTR_5 as WM_SKU_ATTR_5", \
	"JNR_WM_PICK_LOCN_DTL___WM_USER_ID as WM_USER_ID", \
	"JNR_WM_PICK_LOCN_DTL___WM_VERSION_ID1 as WM_VERSION_ID1", \
	"JNR_WM_PICK_LOCN_DTL___WM_DELETE_FLAG as WM_DELETE_FLAG", \
	"JNR_WM_PICK_LOCN_DTL___i_LOCATION_ID as i_LOCATION_ID") \
    .filter("PICK_LOCN_DTL_ID is Null OR i_WM_PICK_LOCN_DTL_ID is Null OR ( i_WM_PICK_LOCN_DTL_ID is not Null AND ( COALESCE(CREATE_DATE_TIME, date'1900-01-01') != COALESCE(i_WM_CREATE_TSTMP, date'1900-01-01') \
             OR COALESCE(MOD_DATE_TIME, date'1900-01-01') != COALESCE(i_WM_MOD_TSTMP, date'1900-01-01') \
             OR COALESCE(CREATED_DTTM, date'1900-01-01') != COALESCE(i_WM_CREATED_TSTMP, date'1900-01-01') \
            OR COALESCE(LAST_UPDATED_DTTM, date'1900-01-01') != COALESCE(i_WM_LAST_UPDATED_TSTMP, date'1900-01-01') ) )").withColumn("sys_row_id", monotonically_increasing_id())



# COMMAND ----------
# Processing node EXP_UPD_VALIDATOR, type EXPRESSION . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 99

# for each involved DataFrame, append the dataframe name to each column
FIL_UNCHANGED_RECORDS_temp = FIL_UNCHANGED_RECORDS.toDF(*["FIL_UNCHANGED_RECORDS___" + col for col in FIL_UNCHANGED_RECORDS.columns]) \
.withColumn("FIL_UNCHANGED_RECORDS___v_CREATE_DATE_TIME", expr("""IF(FIL_UNCHANGED_RECORDS___CREATE_DATE_TIME IS NULL, date'1900-01-01', FIL_UNCHANGED_RECORDS___CREATE_DATE_TIME)""")) \
	.withColumn("FIL_UNCHANGED_RECORDS___v_MOD_DATE_TIME", expr("""IF(FIL_UNCHANGED_RECORDS___MOD_DATE_TIME IS NULL, date'1900-01-01', FIL_UNCHANGED_RECORDS___MOD_DATE_TIME)""")) \
	.withColumn("FIL_UNCHANGED_RECORDS___v_CREATED_DTTM", expr("""IF(FIL_UNCHANGED_RECORDS___CREATED_DTTM IS NULL, date'1900-01-01', FIL_UNCHANGED_RECORDS___CREATED_DTTM)""")) \
	.withColumn("FIL_UNCHANGED_RECORDS___v_LAST_UPDATED_DTTM", expr("""IF(FIL_UNCHANGED_RECORDS___LAST_UPDATED_DTTM IS NULL, date'1900-01-01', FIL_UNCHANGED_RECORDS___LAST_UPDATED_DTTM)""")) \
	.withColumn("FIL_UNCHANGED_RECORDS___v_i_WM_CREATED_TSTMP", expr("""IF(FIL_UNCHANGED_RECORDS___i_WM_CREATED_TSTMP IS NULL, date'1900-01-01', FIL_UNCHANGED_RECORDS___i_WM_CREATED_TSTMP)""")) \
	.withColumn("FIL_UNCHANGED_RECORDS___v_i_WM_LAST_UPDATED_TSTMP", expr("""IF(FIL_UNCHANGED_RECORDS___i_WM_LAST_UPDATED_TSTMP IS NULL, date'1900-01-01', FIL_UNCHANGED_RECORDS___i_WM_LAST_UPDATED_TSTMP)""")) \
	.withColumn("FIL_UNCHANGED_RECORDS___v_i_WM_CREATE_TSTMP", expr("""IF(FIL_UNCHANGED_RECORDS___i_WM_CREATE_TSTMP IS NULL, date'1900-01-01', FIL_UNCHANGED_RECORDS___i_WM_CREATE_TSTMP)""")) \
	.withColumn("FIL_UNCHANGED_RECORDS___v_i_WM_MOD_TSTMP", expr("""IF(FIL_UNCHANGED_RECORDS___i_WM_MOD_TSTMP IS NULL, date'1900-01-01', FIL_UNCHANGED_RECORDS___i_WM_MOD_TSTMP)"""))

EXP_UPD_VALIDATOR = FIL_UNCHANGED_RECORDS_temp.selectExpr( \
	# "FIL_UNCHANGED_RECORDS___LOCATION_ID as LOCATION_ID", \
	# "FIL_UNCHANGED_RECORDS___PICK_LOCN_DTL_ID as PICK_LOCN_DTL_ID", \
	# "FIL_UNCHANGED_RECORDS___LOCN_ID as LOCN_ID", \
	# "FIL_UNCHANGED_RECORDS___LOCN_SEQ_NBR as LOCN_SEQ_NBR", \
	# "FIL_UNCHANGED_RECORDS___SKU_ATTR_1 as SKU_ATTR_1", \
	# "FIL_UNCHANGED_RECORDS___SKU_ATTR_2 as SKU_ATTR_2", \
	# "FIL_UNCHANGED_RECORDS___SKU_ATTR_3 as SKU_ATTR_3", \
	# "FIL_UNCHANGED_RECORDS___SKU_ATTR_4 as SKU_ATTR_4", \
	# "FIL_UNCHANGED_RECORDS___SKU_ATTR_5 as SKU_ATTR_5", \
	# "FIL_UNCHANGED_RECORDS___INVN_TYPE as INVN_TYPE", \
	# "FIL_UNCHANGED_RECORDS___PROD_STAT as PROD_STAT", \
	# "FIL_UNCHANGED_RECORDS___BATCH_NBR as BATCH_NBR", \
	# "FIL_UNCHANGED_RECORDS___CNTRY_OF_ORGN as CNTRY_OF_ORGN", \
	# "FIL_UNCHANGED_RECORDS___MAX_INVN_QTY as MAX_INVN_QTY", \
	# "FIL_UNCHANGED_RECORDS___MIN_INVN_QTY as MIN_INVN_QTY", \
	# "FIL_UNCHANGED_RECORDS___ACTL_INVN_CASES as ACTL_INVN_CASES", \
	# "FIL_UNCHANGED_RECORDS___MIN_INVN_CASES as MIN_INVN_CASES", \
	# "FIL_UNCHANGED_RECORDS___MAX_INVN_CASES as MAX_INVN_CASES", \
	# "FIL_UNCHANGED_RECORDS___TRIG_REPL_FOR_SKU as TRIG_REPL_FOR_SKU", \
	# "FIL_UNCHANGED_RECORDS___PRIM_LOCN_FOR_SKU as PRIM_LOCN_FOR_SKU", \
	# "FIL_UNCHANGED_RECORDS___FIRST_WAVE_NBR as FIRST_WAVE_NBR", \
	# "FIL_UNCHANGED_RECORDS___LAST_WAVE_NBR as LAST_WAVE_NBR", \
	# "FIL_UNCHANGED_RECORDS___LTST_SKU_ASSIGN as LTST_SKU_ASSIGN", \
	# "FIL_UNCHANGED_RECORDS___CREATE_DATE_TIME as CREATE_DATE_TIME", \
	# "FIL_UNCHANGED_RECORDS___MOD_DATE_TIME as MOD_DATE_TIME", \
	# "FIL_UNCHANGED_RECORDS___USER_ID as USER_ID", \
	# "FIL_UNCHANGED_RECORDS___LTST_PICK_ASSIGN_DATE_TIME as LTST_PICK_ASSIGN_DATE_TIME", \
	# "FIL_UNCHANGED_RECORDS___PIKNG_LOCK_CODE as PIKNG_LOCK_CODE", \
	# "FIL_UNCHANGED_RECORDS___TO_BE_FILLD_CASES as TO_BE_FILLD_CASES", \
	# "FIL_UNCHANGED_RECORDS___LANES as LANES", \
	# "FIL_UNCHANGED_RECORDS___STACKING as STACKING", \
	# "FIL_UNCHANGED_RECORDS___MIN_QTY_TO_RLS_HELD_RPLN as MIN_QTY_TO_RLS_HELD_RPLN", \
	# "FIL_UNCHANGED_RECORDS___MIN_CASES_TO_RLS_HELD_RPLN as MIN_CASES_TO_RLS_HELD_RPLN", \
	# "FIL_UNCHANGED_RECORDS___TASK_RELEASED as TASK_RELEASED", \
	# "FIL_UNCHANGED_RECORDS___PACK_QTY as PACK_QTY", \
	# "FIL_UNCHANGED_RECORDS___PICK_LOCN_HDR_ID as PICK_LOCN_HDR_ID", \
	# "FIL_UNCHANGED_RECORDS___WM_VERSION_ID as WM_VERSION_ID", \
	# "FIL_UNCHANGED_RECORDS___ITEM_MASTER_ID as ITEM_MASTER_ID", \
	# "FIL_UNCHANGED_RECORDS___ITEM_ID as ITEM_ID", \
	# "FIL_UNCHANGED_RECORDS___PRE_ALLOCATED_QTY as PRE_ALLOCATED_QTY", \
	# "FIL_UNCHANGED_RECORDS___REPLEN_CONTROL as REPLEN_CONTROL", \
	# "FIL_UNCHANGED_RECORDS___STOP_QTY as STOP_QTY", \
	# "FIL_UNCHANGED_RECORDS___STOP_DTTM as STOP_DTTM", \
	# "FIL_UNCHANGED_RECORDS___PICK_TO_ZERO_ACTION as PICK_TO_ZERO_ACTION", \
	# "FIL_UNCHANGED_RECORDS___UTIL_PERCENT as UTIL_PERCENT", \
	# "FIL_UNCHANGED_RECORDS___CREATED_DTTM as CREATED_DTTM", \
	# "FIL_UNCHANGED_RECORDS___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	# "FIL_UNCHANGED_RECORDS___i_WM_PICK_LOCN_DTL_ID as i_WM_PICK_LOCN_DTL_ID", \
	# "FIL_UNCHANGED_RECORDS___i_LOAD_TSTMP as i_LOAD_TSTMP", \
	# "FIL_UNCHANGED_RECORDS___WM_PICK_LOCN_HDR_ID as WM_PICK_LOCN_HDR_ID", \
	# "FIL_UNCHANGED_RECORDS___WM_LOCN_ID as WM_LOCN_ID", \
	# "FIL_UNCHANGED_RECORDS___WM_LOCN_SEQ_NBR as WM_LOCN_SEQ_NBR", \
	# "FIL_UNCHANGED_RECORDS___WM_ITEM_MASTER_ID as WM_ITEM_MASTER_ID", \
	# "FIL_UNCHANGED_RECORDS___WM_ITEM_ID as WM_ITEM_ID", \
	# "FIL_UNCHANGED_RECORDS___WM_BATCH_NBR as WM_BATCH_NBR", \
	# "FIL_UNCHANGED_RECORDS___WM_INVN_TYPE as WM_INVN_TYPE", \
	# "FIL_UNCHANGED_RECORDS___WM_PROD_STAT as WM_PROD_STAT", \
	# "FIL_UNCHANGED_RECORDS___WM_FIRST_WAVE_NBR as WM_FIRST_WAVE_NBR", \
	# "FIL_UNCHANGED_RECORDS___WM_LAST_WAVE_NBR as WM_LAST_WAVE_NBR", \
	# "FIL_UNCHANGED_RECORDS___WM_LTST_SKU_ASSIGN_FLAG as WM_LTST_SKU_ASSIGN_FLAG", \
	# "FIL_UNCHANGED_RECORDS___WM_LTST_PICK_ASSIGN_TSTMP as WM_LTST_PICK_ASSIGN_TSTMP", \
	# "FIL_UNCHANGED_RECORDS___WM_PIKNG_LOCK_CD as WM_PIKNG_LOCK_CD", \
	# "FIL_UNCHANGED_RECORDS___TRIG_REPL_FOR_SKU_FLAG as TRIG_REPL_FOR_SKU_FLAG", \
	# "FIL_UNCHANGED_RECORDS___PRIM_LOCN_FOR_SKU_FLAG as PRIM_LOCN_FOR_SKU_FLAG", \
	# "FIL_UNCHANGED_RECORDS___WM_LANES as WM_LANES", \
	# "FIL_UNCHANGED_RECORDS___WM_STACKING as WM_STACKING", \
	# "FIL_UNCHANGED_RECORDS___WM_TASK_RELEASED_FLAG as WM_TASK_RELEASED_FLAG", \
	# "FIL_UNCHANGED_RECORDS___WM_REPLEN_CONTROL as WM_REPLEN_CONTROL", \
	# "FIL_UNCHANGED_RECORDS___WM_PICK_TO_ZERO_ACTION as WM_PICK_TO_ZERO_ACTION", \
	# "FIL_UNCHANGED_RECORDS___COUNTRY_OF_ORIGIN as COUNTRY_OF_ORIGIN", \
	# "FIL_UNCHANGED_RECORDS___WM_PRE_ALLOCATED_QTY as PRE_ALLOCATED_QTY1", \
	# "FIL_UNCHANGED_RECORDS___WM_PACK_QTY as PACK_QTY1", \
	# "FIL_UNCHANGED_RECORDS___WM_TO_BE_FILLD_CASES as TO_BE_FILLD_CASES1", \
	# "FIL_UNCHANGED_RECORDS___WM_MAX_INVN_QTY as MAX_INVN_QTY1", \
	# "FIL_UNCHANGED_RECORDS___WM_MIN_INVN_QTY as MIN_INVN_QTY1", \
	# "FIL_UNCHANGED_RECORDS___WM_ACTL_INVN_CASES as ACTL_INVN_CASES1", \
	# "FIL_UNCHANGED_RECORDS___WM_MIN_INVN_CASES as MIN_INVN_CASES1", \
	# "FIL_UNCHANGED_RECORDS___WM_MAX_INVN_CASES as MAX_INVN_CASES1", \
	# "FIL_UNCHANGED_RECORDS___WM_MIN_QTY_TO_RLS_HELD_RPLN as MIN_QTY_TO_RLS_HELD_RPLN1", \
	# "FIL_UNCHANGED_RECORDS___WM_MIN_CASES_TO_RLS_HELD_RPLN as MIN_CASES_TO_RLS_HELD_RPLN1", \
	# "FIL_UNCHANGED_RECORDS___WM_STOP_QTY as STOP_QTY1", \
	# "FIL_UNCHANGED_RECORDS___STOP_TSTMP as STOP_TSTMP", \
	# "FIL_UNCHANGED_RECORDS___WM_UTIL_PERCENT as UTIL_PERCENT1", \
	# "FIL_UNCHANGED_RECORDS___WM_SKU_ATTR_1 as WM_SKU_ATTR_1", \
	# "FIL_UNCHANGED_RECORDS___WM_SKU_ATTR_2 as WM_SKU_ATTR_2", \
	# "FIL_UNCHANGED_RECORDS___WM_SKU_ATTR_3 as WM_SKU_ATTR_3", \
	# "FIL_UNCHANGED_RECORDS___WM_SKU_ATTR_4 as WM_SKU_ATTR_4", \
	# "FIL_UNCHANGED_RECORDS___WM_SKU_ATTR_5 as WM_SKU_ATTR_5", \
	# "FIL_UNCHANGED_RECORDS___WM_USER_ID as WM_USER_ID", \
	# "FIL_UNCHANGED_RECORDS___WM_VERSION_ID1 as WM_VERSION_ID1", \
	# "FIL_UNCHANGED_RECORDS___WM_DELETE_FLAG as WM_DELETE_FLAG", \
	# "FIL_UNCHANGED_RECORDS___i_WM_CREATED_TSTMP as i_WM_CREATED_TSTMP", \
	# "FIL_UNCHANGED_RECORDS___i_WM_LAST_UPDATED_TSTMP as i_WM_LAST_UPDATED_TSTMP", \
	# "FIL_UNCHANGED_RECORDS___i_WM_CREATE_TSTMP as i_WM_CREATE_TSTMP", \
	# "FIL_UNCHANGED_RECORDS___i_WM_MOD_TSTMP as i_WM_MOD_TSTMP", \
	# "FIL_UNCHANGED_RECORDS___i_LOCATION_ID as i_LOCATION_ID").selectExpr( \
	"FIL_UNCHANGED_RECORDS___sys_row_id as sys_row_id", \
	"FIL_UNCHANGED_RECORDS___LOCATION_ID as LOCATION_ID", \
	"FIL_UNCHANGED_RECORDS___PICK_LOCN_DTL_ID as PICK_LOCN_DTL_ID", \
	"FIL_UNCHANGED_RECORDS___LOCN_ID as LOCN_ID", \
	"FIL_UNCHANGED_RECORDS___LOCN_SEQ_NBR as LOCN_SEQ_NBR", \
	"FIL_UNCHANGED_RECORDS___SKU_ATTR_1 as SKU_ATTR_1", \
	"FIL_UNCHANGED_RECORDS___SKU_ATTR_2 as SKU_ATTR_2", \
	"FIL_UNCHANGED_RECORDS___SKU_ATTR_3 as SKU_ATTR_3", \
	"FIL_UNCHANGED_RECORDS___SKU_ATTR_4 as SKU_ATTR_4", \
	"FIL_UNCHANGED_RECORDS___SKU_ATTR_5 as SKU_ATTR_5", \
	"FIL_UNCHANGED_RECORDS___INVN_TYPE as INVN_TYPE", \
	"FIL_UNCHANGED_RECORDS___PROD_STAT as PROD_STAT", \
	"FIL_UNCHANGED_RECORDS___BATCH_NBR as BATCH_NBR", \
	"FIL_UNCHANGED_RECORDS___CNTRY_OF_ORGN as CNTRY_OF_ORGN", \
	"FIL_UNCHANGED_RECORDS___MAX_INVN_QTY as MAX_INVN_QTY", \
	"FIL_UNCHANGED_RECORDS___MIN_INVN_QTY as MIN_INVN_QTY", \
	"FIL_UNCHANGED_RECORDS___ACTL_INVN_CASES as ACTL_INVN_CASES", \
	"FIL_UNCHANGED_RECORDS___MIN_INVN_CASES as MIN_INVN_CASES", \
	"FIL_UNCHANGED_RECORDS___MAX_INVN_CASES as MAX_INVN_CASES", \
    "CASE WHEN TRIM(UPPER(FIL_UNCHANGED_RECORDS___TRIG_REPL_FOR_SKU)) IN ('Y', '1') THEN '1' ELSE '0' END as TRIG_REPL_FOR_SKU_O", \
    "CASE WHEN TRIM(UPPER(FIL_UNCHANGED_RECORDS___PRIM_LOCN_FOR_SKU)) IN ('Y', '1') THEN '1' ELSE '0' END as PRIM_LOCN_FOR_SKU_O", \
	"FIL_UNCHANGED_RECORDS___FIRST_WAVE_NBR as FIRST_WAVE_NBR", \
	"FIL_UNCHANGED_RECORDS___LAST_WAVE_NBR as LAST_WAVE_NBR", \
    "CASE WHEN TRIM(UPPER(FIL_UNCHANGED_RECORDS___LTST_SKU_ASSIGN)) IN ('Y', '1') THEN '1' ELSE '0' END as LTST_SKU_ASSIGN_O", \
	"FIL_UNCHANGED_RECORDS___CREATE_DATE_TIME as CREATE_DATE_TIME", \
	"FIL_UNCHANGED_RECORDS___MOD_DATE_TIME as MOD_DATE_TIME", \
	"FIL_UNCHANGED_RECORDS___USER_ID as USER_ID", \
	"FIL_UNCHANGED_RECORDS___LTST_PICK_ASSIGN_DATE_TIME as LTST_PICK_ASSIGN_DATE_TIME", \
	"FIL_UNCHANGED_RECORDS___PIKNG_LOCK_CODE as PIKNG_LOCK_CODE", \
	"FIL_UNCHANGED_RECORDS___TO_BE_FILLD_CASES as TO_BE_FILLD_CASES", \
	"FIL_UNCHANGED_RECORDS___LANES as LANES", \
	"FIL_UNCHANGED_RECORDS___STACKING as STACKING", \
	"FIL_UNCHANGED_RECORDS___MIN_QTY_TO_RLS_HELD_RPLN as MIN_QTY_TO_RLS_HELD_RPLN", \
	"FIL_UNCHANGED_RECORDS___MIN_CASES_TO_RLS_HELD_RPLN as MIN_CASES_TO_RLS_HELD_RPLN", \
    "CASE WHEN TRIM(UPPER(FIL_UNCHANGED_RECORDS___TASK_RELEASED)) IN ('Y', '1') THEN '1' ELSE '0' END as TASK_RELEASED_O", \
	"FIL_UNCHANGED_RECORDS___PACK_QTY as PACK_QTY", \
	"FIL_UNCHANGED_RECORDS___PICK_LOCN_HDR_ID as PICK_LOCN_HDR_ID", \
	"FIL_UNCHANGED_RECORDS___WM_VERSION_ID as WM_VERSION_ID", \
	"FIL_UNCHANGED_RECORDS___ITEM_MASTER_ID as ITEM_MASTER_ID", \
	"FIL_UNCHANGED_RECORDS___ITEM_ID as ITEM_ID", \
	"FIL_UNCHANGED_RECORDS___PRE_ALLOCATED_QTY as PRE_ALLOCATED_QTY", \
	"FIL_UNCHANGED_RECORDS___REPLEN_CONTROL as REPLEN_CONTROL", \
	"FIL_UNCHANGED_RECORDS___STOP_QTY as STOP_QTY", \
	"FIL_UNCHANGED_RECORDS___STOP_DTTM as STOP_DTTM", \
	"FIL_UNCHANGED_RECORDS___PICK_TO_ZERO_ACTION as PICK_TO_ZERO_ACTION", \
	"FIL_UNCHANGED_RECORDS___UTIL_PERCENT as UTIL_PERCENT", \
	"FIL_UNCHANGED_RECORDS___CREATED_DTTM as CREATED_DTTM", \
	"FIL_UNCHANGED_RECORDS___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"FIL_UNCHANGED_RECORDS___i_WM_PICK_LOCN_DTL_ID as i_WM_PICK_LOCN_DTL_ID", \
	"FIL_UNCHANGED_RECORDS___WM_PICK_LOCN_HDR_ID as WM_PICK_LOCN_HDR_ID", \
	"FIL_UNCHANGED_RECORDS___WM_LOCN_ID as WM_LOCN_ID", \
	"FIL_UNCHANGED_RECORDS___WM_LOCN_SEQ_NBR as WM_LOCN_SEQ_NBR", \
	"FIL_UNCHANGED_RECORDS___WM_ITEM_MASTER_ID as WM_ITEM_MASTER_ID", \
	"FIL_UNCHANGED_RECORDS___WM_ITEM_ID as WM_ITEM_ID", \
	"FIL_UNCHANGED_RECORDS___WM_BATCH_NBR as WM_BATCH_NBR", \
	"FIL_UNCHANGED_RECORDS___WM_INVN_TYPE as WM_INVN_TYPE", \
	"FIL_UNCHANGED_RECORDS___WM_PROD_STAT as WM_PROD_STAT", \
	"FIL_UNCHANGED_RECORDS___WM_FIRST_WAVE_NBR as WM_FIRST_WAVE_NBR", \
	"FIL_UNCHANGED_RECORDS___WM_LAST_WAVE_NBR as WM_LAST_WAVE_NBR", \
	"FIL_UNCHANGED_RECORDS___WM_LTST_SKU_ASSIGN_FLAG as WM_LTST_SKU_ASSIGN_FLAG", \
	"FIL_UNCHANGED_RECORDS___WM_LTST_PICK_ASSIGN_TSTMP as WM_LTST_PICK_ASSIGN_TSTMP", \
	"FIL_UNCHANGED_RECORDS___WM_PIKNG_LOCK_CD as WM_PIKNG_LOCK_CD", \
	"FIL_UNCHANGED_RECORDS___TRIG_REPL_FOR_SKU_FLAG as TRIG_REPL_FOR_SKU_FLAG", \
	"FIL_UNCHANGED_RECORDS___PRIM_LOCN_FOR_SKU_FLAG as PRIM_LOCN_FOR_SKU_FLAG", \
	"FIL_UNCHANGED_RECORDS___WM_LANES as WM_LANES", \
	"FIL_UNCHANGED_RECORDS___WM_STACKING as WM_STACKING", \
	"FIL_UNCHANGED_RECORDS___WM_TASK_RELEASED_FLAG as WM_TASK_RELEASED_FLAG", \
	"FIL_UNCHANGED_RECORDS___WM_REPLEN_CONTROL as WM_REPLEN_CONTROL", \
	"FIL_UNCHANGED_RECORDS___WM_PICK_TO_ZERO_ACTION as WM_PICK_TO_ZERO_ACTION", \
	"FIL_UNCHANGED_RECORDS___COUNTRY_OF_ORIGIN as COUNTRY_OF_ORIGIN", \
	# "FIL_UNCHANGED_RECORDS___PRE_ALLOCATED_QTY1 as PRE_ALLOCATED_QTY1", \
	# "FIL_UNCHANGED_RECORDS___PACK_QTY1 as PACK_QTY1", \
	# "FIL_UNCHANGED_RECORDS___TO_BE_FILLD_CASES1 as TO_BE_FILLD_CASES1", \
	# "FIL_UNCHANGED_RECORDS___MAX_INVN_QTY1 as MAX_INVN_QTY1", \
	# "FIL_UNCHANGED_RECORDS___MIN_INVN_QTY1 as MIN_INVN_QTY1", \
	# "FIL_UNCHANGED_RECORDS___ACTL_INVN_CASES1 as ACTL_INVN_CASES1", \
	# "FIL_UNCHANGED_RECORDS___MIN_INVN_CASES1 as MIN_INVN_CASES1", \
	# "FIL_UNCHANGED_RECORDS___MAX_INVN_CASES1 as MAX_INVN_CASES1", \
	# "FIL_UNCHANGED_RECORDS___MIN_QTY_TO_RLS_HELD_RPLN1 as MIN_QTY_TO_RLS_HELD_RPLN1", \
	# "FIL_UNCHANGED_RECORDS___MIN_CASES_TO_RLS_HELD_RPLN1 as MIN_CASES_TO_RLS_HELD_RPLN1", \
	# "FIL_UNCHANGED_RECORDS___STOP_QTY1 as STOP_QTY1", \
	# "FIL_UNCHANGED_RECORDS___STOP_TSTMP as STOP_TSTMP", \
	# "FIL_UNCHANGED_RECORDS___UTIL_PERCENT1 as UTIL_PERCENT1", \
	"FIL_UNCHANGED_RECORDS___WM_SKU_ATTR_1 as WM_SKU_ATTR_1", \
	"FIL_UNCHANGED_RECORDS___WM_SKU_ATTR_2 as WM_SKU_ATTR_2", \
	"FIL_UNCHANGED_RECORDS___WM_SKU_ATTR_3 as WM_SKU_ATTR_3", \
	"FIL_UNCHANGED_RECORDS___WM_SKU_ATTR_4 as WM_SKU_ATTR_4", \
	"FIL_UNCHANGED_RECORDS___WM_SKU_ATTR_5 as WM_SKU_ATTR_5", \
	"FIL_UNCHANGED_RECORDS___WM_USER_ID as WM_USER_ID", \
	"FIL_UNCHANGED_RECORDS___WM_VERSION_ID1 as WM_VERSION_ID1", \
	"FIL_UNCHANGED_RECORDS___WM_DELETE_FLAG as WM_DELETE_FLAG", \
	"FIL_UNCHANGED_RECORDS___i_WM_CREATED_TSTMP as i_WM_CREATED_TSTMP", \
	"FIL_UNCHANGED_RECORDS___i_WM_LAST_UPDATED_TSTMP as i_WM_LAST_UPDATED_TSTMP", \
	"FIL_UNCHANGED_RECORDS___i_WM_CREATE_TSTMP as i_WM_CREATE_TSTMP", \
	"FIL_UNCHANGED_RECORDS___i_WM_MOD_TSTMP as i_WM_MOD_TSTMP", \
	"IF(FIL_UNCHANGED_RECORDS___PICK_LOCN_DTL_ID IS NULL AND FIL_UNCHANGED_RECORDS___i_WM_PICK_LOCN_DTL_ID IS NOT NULL, 1, 0) as DELETE_FLAG_EXP", \
	"CURRENT_TIMESTAMP as UPDATE_TSTMP", \
	"IF(FIL_UNCHANGED_RECORDS___i_LOAD_TSTMP IS NULL, CURRENT_TIMESTAMP, FIL_UNCHANGED_RECORDS___i_LOAD_TSTMP) as LOAD_TSTMP", \
	"IF(FIL_UNCHANGED_RECORDS___PICK_LOCN_DTL_ID IS NOT NULL AND FIL_UNCHANGED_RECORDS___WM_PICK_LOCN_HDR_ID IS NULL, 'INSERT', IF(FIL_UNCHANGED_RECORDS___PICK_LOCN_DTL_ID IS NOT NULL AND FIL_UNCHANGED_RECORDS___WM_PICK_LOCN_HDR_ID IS NOT NULL AND ( FIL_UNCHANGED_RECORDS___v_i_WM_CREATED_TSTMP <> FIL_UNCHANGED_RECORDS___v_CREATED_DTTM OR FIL_UNCHANGED_RECORDS___v_i_WM_LAST_UPDATED_TSTMP <> FIL_UNCHANGED_RECORDS___v_LAST_UPDATED_DTTM OR FIL_UNCHANGED_RECORDS___v_i_WM_CREATE_TSTMP <> FIL_UNCHANGED_RECORDS___v_CREATE_DATE_TIME OR FIL_UNCHANGED_RECORDS___v_i_WM_MOD_TSTMP <> FIL_UNCHANGED_RECORDS___v_MOD_DATE_TIME ), 'UPDATE', NULL)) as o_UPDATE_VALIDATOR", \
	"FIL_UNCHANGED_RECORDS___i_LOCATION_ID as i_LOCATION_ID" \
)

# COMMAND ----------
# Processing node UPD_UPDATE_INSERT, type UPDATE_STRATEGY . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 52

# for each involved DataFrame, append the dataframe name to each column
EXP_UPD_VALIDATOR_temp = EXP_UPD_VALIDATOR.toDF(*["EXP_UPD_VALIDATOR___" + col for col in EXP_UPD_VALIDATOR.columns])

UPD_UPDATE_INSERT = EXP_UPD_VALIDATOR_temp.selectExpr( \
	"EXP_UPD_VALIDATOR___LOCATION_ID as LOCATION_ID1", \
	"EXP_UPD_VALIDATOR___PICK_LOCN_DTL_ID as PICK_LOCN_DTL_ID1", \
	"EXP_UPD_VALIDATOR___PICK_LOCN_HDR_ID as PICK_LOCN_HDR_ID1", \
	"EXP_UPD_VALIDATOR___LOCN_ID as LOCN_ID1", \
	"EXP_UPD_VALIDATOR___LOCN_SEQ_NBR as LOCN_SEQ_NBR1", \
	"EXP_UPD_VALIDATOR___ITEM_MASTER_ID as ITEM_MASTER_ID1", \
	"EXP_UPD_VALIDATOR___ITEM_ID as ITEM_ID1", \
	"EXP_UPD_VALIDATOR___BATCH_NBR as BATCH_NBR1", \
	"EXP_UPD_VALIDATOR___INVN_TYPE as INVN_TYPE1", \
	"EXP_UPD_VALIDATOR___PROD_STAT as PROD_STAT1", \
	"EXP_UPD_VALIDATOR___FIRST_WAVE_NBR as FIRST_WAVE_NBR1", \
	"EXP_UPD_VALIDATOR___LAST_WAVE_NBR as LAST_WAVE_NBR1", \
	"EXP_UPD_VALIDATOR___LTST_SKU_ASSIGN_O as LTST_SKU_ASSIGN_O1", \
	"EXP_UPD_VALIDATOR___LTST_PICK_ASSIGN_DATE_TIME as LTST_PICK_ASSIGN_DATE_TIME1", \
	"EXP_UPD_VALIDATOR___PIKNG_LOCK_CODE as PIKNG_LOCK_CODE1", \
	"EXP_UPD_VALIDATOR___TRIG_REPL_FOR_SKU_O as TRIG_REPL_FOR_SKU_O1", \
	"EXP_UPD_VALIDATOR___PRIM_LOCN_FOR_SKU_O as PRIM_LOCN_FOR_SKU_O1", \
	"EXP_UPD_VALIDATOR___LANES as LANES1", \
	"EXP_UPD_VALIDATOR___STACKING as STACKING1", \
	"EXP_UPD_VALIDATOR___TASK_RELEASED_O as TASK_RELEASED_O1", \
	"EXP_UPD_VALIDATOR___REPLEN_CONTROL as REPLEN_CONTROL1", \
	"EXP_UPD_VALIDATOR___PICK_TO_ZERO_ACTION as PICK_TO_ZERO_ACTION1", \
	"EXP_UPD_VALIDATOR___CNTRY_OF_ORGN as CNTRY_OF_ORGN1", \
	"EXP_UPD_VALIDATOR___PRE_ALLOCATED_QTY as PRE_ALLOCATED_QTY2", \
	"EXP_UPD_VALIDATOR___PACK_QTY as PACK_QTY2", \
	"EXP_UPD_VALIDATOR___TO_BE_FILLD_CASES as TO_BE_FILLD_CASES2", \
	"EXP_UPD_VALIDATOR___MAX_INVN_QTY as MAX_INVN_QTY2", \
	"EXP_UPD_VALIDATOR___MIN_INVN_QTY as MIN_INVN_QTY2", \
	"EXP_UPD_VALIDATOR___ACTL_INVN_CASES as ACTL_INVN_CASES2", \
	"EXP_UPD_VALIDATOR___MIN_INVN_CASES as MIN_INVN_CASES2", \
	"EXP_UPD_VALIDATOR___MIN_QTY_TO_RLS_HELD_RPLN as MIN_QTY_TO_RLS_HELD_RPLN2", \
	"EXP_UPD_VALIDATOR___MIN_CASES_TO_RLS_HELD_RPLN as MIN_CASES_TO_RLS_HELD_RPLN2", \
	"EXP_UPD_VALIDATOR___STOP_QTY as STOP_QTY2", \
	"EXP_UPD_VALIDATOR___STOP_DTTM as STOP_DTTM1", \
	"EXP_UPD_VALIDATOR___UTIL_PERCENT as UTIL_PERCENT2", \
	"EXP_UPD_VALIDATOR___SKU_ATTR_1 as SKU_ATTR_11", \
	"EXP_UPD_VALIDATOR___SKU_ATTR_2 as SKU_ATTR_21", \
	"EXP_UPD_VALIDATOR___SKU_ATTR_3 as SKU_ATTR_31", \
	"EXP_UPD_VALIDATOR___SKU_ATTR_4 as SKU_ATTR_41", \
	"EXP_UPD_VALIDATOR___SKU_ATTR_5 as SKU_ATTR_51", \
	"EXP_UPD_VALIDATOR___USER_ID as USER_ID1", \
	"EXP_UPD_VALIDATOR___WM_VERSION_ID as WM_VERSION_ID2", \
	"EXP_UPD_VALIDATOR___MAX_INVN_CASES as MAX_INVN_CASES2", \
	"EXP_UPD_VALIDATOR___CREATE_DATE_TIME as CREATE_DATE_TIME1", \
	"EXP_UPD_VALIDATOR___MOD_DATE_TIME as MOD_DATE_TIME1", \
	"EXP_UPD_VALIDATOR___CREATED_DTTM as CREATED_DTTM1", \
	"EXP_UPD_VALIDATOR___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM1", \
	"EXP_UPD_VALIDATOR___UPDATE_TSTMP as UPDATE_TSTMP1", \
	"EXP_UPD_VALIDATOR___LOAD_TSTMP as LOAD_TSTMP1", \
	"EXP_UPD_VALIDATOR___o_UPDATE_VALIDATOR as o_UPDATE_VALIDATOR1", \
	"EXP_UPD_VALIDATOR___DELETE_FLAG_EXP as DELETE_FLAG_EXP1", \
	"EXP_UPD_VALIDATOR___CREATED_DTTM as CREATED_DTTM") \
.withColumn('pyspark_data_action', when(col('o_UPDATE_VALIDATOR1') ==(lit('INSERT')),lit(0)).when(col('o_UPDATE_VALIDATOR1') ==(lit('UPDATE')),lit(1)))


# COMMAND ----------
# Processing node Shortcut_to_WM_PICK_LOCN_DTL2, type TARGET 
# COLUMN COUNT: 50


Shortcut_to_WM_PICK_LOCN_DTL2 = UPD_UPDATE_INSERT.selectExpr(
	"CAST(LOCATION_ID1 AS BIGINT) as LOCATION_ID",
	"CAST(PICK_LOCN_DTL_ID1 AS BIGINT) as WM_PICK_LOCN_DTL_ID",
	"CAST(PICK_LOCN_HDR_ID1 AS INT) as WM_PICK_LOCN_HDR_ID",
	"CAST(LOCN_ID1 AS STRING) as WM_LOCN_ID",
	"CAST(LOCN_SEQ_NBR1 AS INT) as WM_LOCN_SEQ_NBR",
	"CAST(ITEM_MASTER_ID1 AS INT) as WM_ITEM_MASTER_ID",
	"CAST(ITEM_ID1 AS INT) as WM_ITEM_ID",
	"CAST(BATCH_NBR1 AS STRING) as WM_BATCH_NBR",
	"CAST(INVN_TYPE1 AS STRING) as WM_INVN_TYPE",
	"CAST(PROD_STAT1 AS STRING) as WM_PROD_STAT",
	"CAST(FIRST_WAVE_NBR1 AS STRING) as WM_FIRST_WAVE_NBR",
	"CAST(LAST_WAVE_NBR1 AS STRING) as WM_LAST_WAVE_NBR",
	"CAST(LTST_SKU_ASSIGN_O1 AS TINYINT) as WM_LTST_SKU_ASSIGN_FLAG",
	"CAST(LTST_PICK_ASSIGN_DATE_TIME1 AS TIMESTAMP) as WM_LTST_PICK_ASSIGN_TSTMP",
	"CAST(PIKNG_LOCK_CODE1 AS STRING) as WM_PIKNG_LOCK_CD",
	"CAST(TRIG_REPL_FOR_SKU_O1 AS TINYINT) as TRIG_REPL_FOR_SKU_FLAG",
	"CAST(PRIM_LOCN_FOR_SKU_O1 AS TINYINT) as PRIM_LOCN_FOR_SKU_FLAG",
	"CAST(LANES1 AS STRING) as WM_LANES",
	"CAST(STACKING1 AS STRING) as WM_STACKING",
	"CAST(TASK_RELEASED_O1 AS TINYINT) as WM_TASK_RELEASED_FLAG",
	"CAST(REPLEN_CONTROL1 AS STRING) as WM_REPLEN_CONTROL",
	"CAST(PICK_TO_ZERO_ACTION1 AS STRING) as WM_PICK_TO_ZERO_ACTION",
	"CAST(CNTRY_OF_ORGN1 AS STRING) as COUNTRY_OF_ORIGIN",
	"CAST(PRE_ALLOCATED_QTY2 AS DECIMAL(13,4)) as PRE_ALLOCATED_QTY",
	"CAST(PACK_QTY2 AS DECIMAL(9,2)) as PACK_QTY",
	"CAST(TO_BE_FILLD_CASES2 AS INT) as TO_BE_FILLD_CASES",
	"CAST(MAX_INVN_QTY2 AS DECIMAL(13,5)) as MAX_INVN_QTY",
	"CAST(MIN_INVN_QTY2 AS DECIMAL(13,5)) as MIN_INVN_QTY",
	"CAST(ACTL_INVN_CASES2 AS BIGINT) as ACTL_INVN_CASES",
	"CAST(MIN_INVN_CASES2 AS BIGINT) as MIN_INVN_CASES",
	"CAST(MAX_INVN_CASES2 AS BIGINT) as MAX_INVN_CASES",
	"CAST(MIN_QTY_TO_RLS_HELD_RPLN2 AS DECIMAL(13,5)) as MIN_QTY_TO_RLS_HELD_RPLN",
	"CAST(MIN_CASES_TO_RLS_HELD_RPLN2 AS INT) as MIN_CASES_TO_RLS_HELD_RPLN",
	"CAST(STOP_QTY2 AS DECIMAL(13,4)) as STOP_QTY",
	"CAST(STOP_DTTM1 AS TIMESTAMP) as STOP_TSTMP",
	"CAST(UTIL_PERCENT2 AS DECIMAL(3,2)) as UTIL_PERCENT",
	"CAST(SKU_ATTR_11 AS STRING) as WM_SKU_ATTR_1",
	"CAST(SKU_ATTR_21 AS STRING) as WM_SKU_ATTR_2",
	"CAST(SKU_ATTR_31 AS STRING) as WM_SKU_ATTR_3",
	"CAST(SKU_ATTR_41 AS STRING) as WM_SKU_ATTR_4",
	"CAST(SKU_ATTR_51 AS STRING) as WM_SKU_ATTR_5",
	"CAST(USER_ID1 AS STRING) as WM_USER_ID",
	"CAST(WM_VERSION_ID2 AS INT) as WM_VERSION_ID",
	"CAST(CREATED_DTTM1 AS TIMESTAMP) as WM_CREATED_TSTMP",
	"CAST(LAST_UPDATED_DTTM1 AS TIMESTAMP) as WM_LAST_UPDATED_TSTMP",
	"CAST(CREATE_DATE_TIME1 AS TIMESTAMP) as WM_CREATE_TSTMP",
	"CAST(MOD_DATE_TIME1 AS TIMESTAMP) as WM_MOD_TSTMP",
	"CAST(DELETE_FLAG_EXP1 AS TINYINT) as DELETE_FLAG",
	"CAST(UPDATE_TSTMP1 AS TIMESTAMP) as UPDATE_TSTMP",
	"CAST(LOAD_TSTMP1 AS TIMESTAMP) as LOAD_TSTMP", 
    "pyspark_data_action"
)

try:
  primary_key = """source.LOCATION_ID = target.LOCATION_ID AND source.WM_PICK_LOCN_DTL_ID = target.WM_PICK_LOCN_DTL_ID"""
  # refined_perf_table = "WM_PICK_LOCN_DTL"
  executeMerge(Shortcut_to_WM_PICK_LOCN_DTL2, refined_perf_table, primary_key)
  logger.info(f"Merge with {refined_perf_table} completed]")
  logPrevRunDt("WM_PICK_LOCN_DTL", "WM_PICK_LOCN_DTL", "Completed", "N/A", f"{raw}.log_run_details")
except Exception as e:
  logPrevRunDt("WM_PICK_LOCN_DTL", "WM_PICK_LOCN_DTL","Failed",str(e), f"{raw}.log_run_details", )
  raise e


# post sql

# soft_delete_logic_WM_Pick_Locn_Dtl= ' $$soft_delete_logic_WM_Pick_Locn_Dtl=
# update WM_Pick_Locn_Dtl set delete_flag=1 , update_tstmp=current_date
#  where (location_id, WM_Pick_Locn_Dtl_ID) in
#   (select location_id, WM_Pick_Locn_Dtl_ID 
#    from  WM_Pick_Locn_Dtl  base_table 
#    where  base_table.DELETE_FLAG=0 
#    and ( cast(base_table.WM_CREATED_TSTMP as date) >= (cast('$$Prev_Run_Dt' as date )-14)
#         or cast(base_table.WM_LAST_UPDATED_TSTMP as date) >= (cast('$$Prev_Run_Dt' as date )-14) 
#         or cast(base_table.WM_CREATE_TSTMP as date) >= (cast('$$Prev_Run_Dt' as date )-14) 
#         or cast(base_table.WM_MOD_TSTMP as date) >= (cast('$$Prev_Run_Dt' as date )-14))
#    and (location_id, WM_Pick_Locn_Dtl_ID) not in (select   SP.location_id, pre_table.Pick_Locn_Dtl_ID from  WM_Pick_Locn_Dtl_pre pre_table, site_profile SP where SP.store_nbr =pre_table.dc_nbr));




# update wm_trailer_contents set delete_flag=1, update_tstmp=current_timestamp where
soft_delete_logic_WM_Pick_Locn_Dtl= f""" 
select  location_id, WM_Pick_Locn_Dtl_ID 
from {refined_perf_table}  
where (location_id, WM_Pick_Locn_Dtl_ID) in 
(select location_id, WM_Pick_Locn_Dtl_ID 
from  {refined_perf_table}  base_table 
where base_table.DELETE_FLAG=0 
and ( cast(base_table.WM_CREATED_TSTMP as date) >= (cast('{Prev_Run_Dt}' as date )-14)
		or cast(base_table.WM_LAST_UPDATED_TSTMP as date) >= (cast('{Prev_Run_Dt}' as date )-14) 
		or cast(base_table.WM_CREATE_TSTMP as date) >= (cast('{Prev_Run_Dt}' as date )-14) 
		or cast(base_table.WM_MOD_TSTMP as date) >= (cast('{Prev_Run_Dt}' as date )-14))
and (location_id, WM_Pick_Locn_Dtl_ID) not in 
( select   SP.location_id, pre_table.Pick_Locn_Dtl_ID 
from  {raw_perf_table} pre_table, {site_profile_table} SP 
where SP.store_nbr =pre_table.dc_nbr))"""

sd_df = spark.sql(soft_delete_logic_WM_Pick_Locn_Dtl)

sd_df.createOrReplaceTempView('WM_PICK_LOCN_DTL_SD')

spark.sql(f"""
          MERGE INTO {refined_perf_table} tgt
          USING  WM_PICK_LOCN_DTL_SD src
          ON src.location_id = tgt.location_id and src.WM_Pick_Locn_Dtl_ID = tgt.WM_Pick_Locn_Dtl_ID
          WHEN MATCHED THEN UPDATE
          SET tgt.delete_flag = 1,
          tgt.update_tstmp=current_timestamp
          """)

