#Code converted on 2023-06-26 10:02:17
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from pyspark.dbutils import DBUtils
from Datalake.utils.genericUtilities import *
from Datalake.utils.configs import *
from Datalake.utils.mergeUtils import *
from Datalake.utils.logger import *
# COMMAND ----------

parser = argparse.ArgumentParser()
spark = SparkSession.getActiveSession()
dbutils = DBUtils(spark)

parser.add_argument('env', type=str, help='Env Variable')
args = parser.parse_args()
env = args.env

if env is None or env == '':
    raise ValueError('env is not set')

refine = getEnvPrefix(env) + 'refine'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'


# Set global variables
starttime = datetime.now() #start timestamp of the script
raw_perf_table = f"{raw}.WM_E_ACT_PRE"
refined_perf_table = f"{refine}.WM_E_ACT"
site_profile_table = f"{legacy}.SITE_PROFILE"


Prev_Run_Dt=genPrevRunDt(refined_perf_table, refine,raw)
Del_Logic=args.Del_Logic

# COMMAND ----------
# Processing node SQ_Shortcut_to_WM_E_ACT_PRE, type SOURCE 
# COLUMN COUNT: 27

SQ_Shortcut_to_WM_E_ACT_PRE = spark.sql(f"""SELECT
DC_NBR,
ACT_ID,
CREATE_DATE_TIME,
MOD_DATE_TIME,
USER_ID,
JOB_FUNC_ID,
WHSE,
LABOR_TYPE_ID,
MONITOR_UOM,
MISC_TXT_1,
MISC_TXT_2,
MISC_NUM_1,
MISC_NUM_2,
OVERRIDE_PROC_ZONE_ID,
PROC_ZONE_LOCN_IND,
LM_MAN_EVNT_REQ_APRV,
LM_KIOSK_REQ_APRV,
WM_REQ_APRV,
VERSION_ID,
LABOR_ACTIVITY_ID,
VHCL_TYPE_ID,
UNQ_SEED_ID,
CREATED_DTTM,
LAST_UPDATED_DTTM,
DISPLAY_UOM,
THRUPUT_GOAL,
LOAD_TSTMP
FROM {raw_perf_table}""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node EXP_INT_CONV, type EXPRESSION . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 27

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_WM_E_ACT_PRE_temp = SQ_Shortcut_to_WM_E_ACT_PRE.toDF(*["SQ_Shortcut_to_WM_E_ACT_PRE___" + col for col in SQ_Shortcut_to_WM_E_ACT_PRE.columns])

EXP_INT_CONV = SQ_Shortcut_to_WM_E_ACT_PRE_temp.selectExpr( \
	"SQ_Shortcut_to_WM_E_ACT_PRE___DC_NBR as in_DC_NBR", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___ACT_ID as ACT_ID", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___CREATE_DATE_TIME as CREATE_DATE_TIME", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___MOD_DATE_TIME as MOD_DATE_TIME", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___USER_ID as USER_ID", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___JOB_FUNC_ID as JOB_FUNC_ID", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___WHSE as WHSE", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___LABOR_TYPE_ID as LABOR_TYPE_ID", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___MONITOR_UOM as MONITOR_UOM", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___MISC_TXT_1 as MISC_TXT_1", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___MISC_TXT_2 as MISC_TXT_2", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___MISC_NUM_1 as MISC_NUM_1", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___MISC_NUM_2 as MISC_NUM_2", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___OVERRIDE_PROC_ZONE_ID as OVERRIDE_PROC_ZONE_ID", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___PROC_ZONE_LOCN_IND as PROC_ZONE_LOCN_IND", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___LM_MAN_EVNT_REQ_APRV as LM_MAN_EVNT_REQ_APRV", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___LM_KIOSK_REQ_APRV as LM_KIOSK_REQ_APRV", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___WM_REQ_APRV as WM_REQ_APRV", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___VERSION_ID as VERSION_ID", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___LABOR_ACTIVITY_ID as LABOR_ACTIVITY_ID", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___VHCL_TYPE_ID as VHCL_TYPE_ID", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___UNQ_SEED_ID as UNQ_SEED_ID", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___CREATED_DTTM as CREATED_DTTM", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___DISPLAY_UOM as DISPLAY_UOM", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___THRUPUT_GOAL as THRUPUT_GOAL", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___LOAD_TSTMP as LOAD_TSTMP").selectExpr( \
	"SQ_Shortcut_to_WM_E_ACT_PRE___sys_row_id as sys_row_id", \
	"cast(SQ_Shortcut_to_WM_E_ACT_PRE___in_DC_NBR as int) as DC_NBR", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___ACT_ID as ACT_ID", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___CREATE_DATE_TIME as CREATE_DATE_TIME", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___MOD_DATE_TIME as MOD_DATE_TIME", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___USER_ID as USER_ID", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___JOB_FUNC_ID as JOB_FUNC_ID", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___WHSE as WHSE", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___LABOR_TYPE_ID as LABOR_TYPE_ID", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___MONITOR_UOM as MONITOR_UOM", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___MISC_TXT_1 as MISC_TXT_1", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___MISC_TXT_2 as MISC_TXT_2", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___MISC_NUM_1 as MISC_NUM_1", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___MISC_NUM_2 as MISC_NUM_2", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___OVERRIDE_PROC_ZONE_ID as OVERRIDE_PROC_ZONE_ID", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___PROC_ZONE_LOCN_IND as PROC_ZONE_LOCN_IND", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___LM_MAN_EVNT_REQ_APRV as LM_MAN_EVNT_REQ_APRV", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___LM_KIOSK_REQ_APRV as LM_KIOSK_REQ_APRV", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___WM_REQ_APRV as WM_REQ_APRV", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___VERSION_ID as VERSION_ID", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___LABOR_ACTIVITY_ID as LABOR_ACTIVITY_ID", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___VHCL_TYPE_ID as VHCL_TYPE_ID", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___UNQ_SEED_ID as UNQ_SEED_ID", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___CREATED_DTTM as CREATED_DTTM", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___DISPLAY_UOM as DISPLAY_UOM", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___THRUPUT_GOAL as THRUPUT_GOAL", \
	"SQ_Shortcut_to_WM_E_ACT_PRE___LOAD_TSTMP as LOAD_TSTMP" \
)

# COMMAND ----------
# Processing node SQ_Shortcut_to_WM_E_ACT, type SOURCE 
# COLUMN COUNT: 29

SQ_Shortcut_to_WM_E_ACT = spark.sql(f"""SELECT
LOCATION_ID,
WM_ACT_ID,
WM_WHSE,
WM_JOB_FUNC_ID,
WM_LABOR_TYPE_ID,
MONITOR_UOM,
WM_OVERRIDE_PROC_ZONE_ID,
WM_PROC_ZONE_LOCN_IND,
LM_MAN_EVNT_REQ_APRV_FLAG as LM_MAN_EVNT_REQ_APRV ,
LM_KIOSK_REQ_APRV_FLAG as LM_KIOSK_REQ_APRV ,
REQ_APRV_FLAG as REQ_APRV ,
WM_LABOR_ACTIVITY_ID,
WM_VHCL_TYPE_ID,
WM_UNQ_SEED_ID,
WM_DISPLAY_UOM,
WM_THRUPUT_GOAL,
MISC_TXT_1,
MISC_TXT_2,
MISC_NUM_1,
MISC_NUM_2,
WM_USER_ID,
WM_VERSION_ID,
WM_CREATED_TSTMP,
WM_CREATE_TSTMP,
WM_MOD_TSTMP,
WM_LAST_UPDATED_TSTMP,
DELETE_FLAG,
UPDATE_TSTMP,
LOAD_TSTMP
FROM {refined_perf_table}
WHERE {Del_Logic} 1=0 and DELETE_FLAG =0""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node SQ_Shortcut_to_SITE_PROFILE, type SOURCE 
# COLUMN COUNT: 2

SQ_Shortcut_to_SITE_PROFILE = spark.sql(f"""SELECT LOCATION_ID, STORE_NBR FROM {site_profile_table}""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node JNR_SITE_PROFILE, type JOINER 
# COLUMN COUNT: 29

JNR_SITE_PROFILE = SQ_Shortcut_to_SITE_PROFILE.join(EXP_INT_CONV,[SQ_Shortcut_to_SITE_PROFILE.STORE_NBR == EXP_INT_CONV.DC_NBR],'inner')

# COMMAND ----------
# Processing node JNR_WM_E_ACT, type JOINER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 56

# for each involved DataFrame, append the dataframe name to each column
JNR_SITE_PROFILE_temp = JNR_SITE_PROFILE.toDF(*["JNR_SITE_PROFILE___" + col for col in JNR_SITE_PROFILE.columns])
SQ_Shortcut_to_WM_E_ACT_temp = SQ_Shortcut_to_WM_E_ACT.toDF(*["SQ_Shortcut_to_WM_E_ACT___" + col for col in SQ_Shortcut_to_WM_E_ACT.columns])

JNR_WM_E_ACT = SQ_Shortcut_to_WM_E_ACT_temp.join(JNR_SITE_PROFILE_temp,[SQ_Shortcut_to_WM_E_ACT_temp.SQ_Shortcut_to_WM_E_ACT___WM_ACT_ID == JNR_SITE_PROFILE_temp.JNR_SITE_PROFILE___ACT_ID, SQ_Shortcut_to_WM_E_ACT_temp.SQ_Shortcut_to_WM_E_ACT___LOCATION_ID == JNR_SITE_PROFILE_temp.JNR_SITE_PROFILE___LOCATION_ID],'fullouter').selectExpr( \
	"JNR_SITE_PROFILE___LOCATION_ID as LOCATION_ID", \
	"JNR_SITE_PROFILE___ACT_ID as ACT_ID", \
	"JNR_SITE_PROFILE___CREATE_DATE_TIME as CREATE_DATE_TIME", \
	"JNR_SITE_PROFILE___MOD_DATE_TIME as MOD_DATE_TIME", \
	"JNR_SITE_PROFILE___USER_ID as USER_ID", \
	"JNR_SITE_PROFILE___JOB_FUNC_ID as JOB_FUNC_ID", \
	"JNR_SITE_PROFILE___WHSE as WHSE", \
	"JNR_SITE_PROFILE___LABOR_TYPE_ID as LABOR_TYPE_ID", \
	"JNR_SITE_PROFILE___MONITOR_UOM as MONITOR_UOM", \
	"JNR_SITE_PROFILE___MISC_TXT_1 as MISC_TXT_1", \
	"JNR_SITE_PROFILE___MISC_TXT_2 as MISC_TXT_2", \
	"JNR_SITE_PROFILE___MISC_NUM_1 as MISC_NUM_1", \
	"JNR_SITE_PROFILE___MISC_NUM_2 as MISC_NUM_2", \
	"JNR_SITE_PROFILE___OVERRIDE_PROC_ZONE_ID as OVERRIDE_PROC_ZONE_ID", \
	"JNR_SITE_PROFILE___PROC_ZONE_LOCN_IND as PROC_ZONE_LOCN_IND", \
	"JNR_SITE_PROFILE___LM_MAN_EVNT_REQ_APRV as LM_MAN_EVNT_REQ_APRV", \
	"JNR_SITE_PROFILE___LM_KIOSK_REQ_APRV as LM_KIOSK_REQ_APRV", \
	"JNR_SITE_PROFILE___WM_REQ_APRV as WM_REQ_APRV", \
	"JNR_SITE_PROFILE___VERSION_ID as VERSION_ID", \
	"JNR_SITE_PROFILE___LABOR_ACTIVITY_ID as LABOR_ACTIVITY_ID", \
	"JNR_SITE_PROFILE___VHCL_TYPE_ID as VHCL_TYPE_ID", \
	"JNR_SITE_PROFILE___UNQ_SEED_ID as UNQ_SEED_ID", \
	"JNR_SITE_PROFILE___CREATED_DTTM as CREATED_DTTM", \
	"JNR_SITE_PROFILE___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"JNR_SITE_PROFILE___DISPLAY_UOM as DISPLAY_UOM", \
	"JNR_SITE_PROFILE___THRUPUT_GOAL as THRUPUT_GOAL", \
	"JNR_SITE_PROFILE___LOAD_TSTMP as LOAD_TSTMP", \
	"SQ_Shortcut_to_WM_E_ACT___LOCATION_ID as in_LOCATION_ID", \
	"SQ_Shortcut_to_WM_E_ACT___WM_ACT_ID as in_WM_ACT_ID", \
	"SQ_Shortcut_to_WM_E_ACT___WM_CREATE_TSTMP as in_WM_CREATE_TSTMP", \
	"SQ_Shortcut_to_WM_E_ACT___WM_MOD_TSTMP as in_WM_MOD_TSTMP", \
	"SQ_Shortcut_to_WM_E_ACT___WM_USER_ID as in_WM_USER_ID", \
	"SQ_Shortcut_to_WM_E_ACT___WM_JOB_FUNC_ID as in_WM_JOB_FUNC_ID", \
	"SQ_Shortcut_to_WM_E_ACT___WM_WHSE as in_WM_WHSE", \
	"SQ_Shortcut_to_WM_E_ACT___WM_LABOR_TYPE_ID as in_WM_LABOR_TYPE_ID", \
	"SQ_Shortcut_to_WM_E_ACT___MONITOR_UOM as in_MONITOR_UOM", \
	"SQ_Shortcut_to_WM_E_ACT___MISC_TXT_1 as in_MISC_TXT_1", \
	"SQ_Shortcut_to_WM_E_ACT___MISC_TXT_2 as in_MISC_TXT_2", \
	"SQ_Shortcut_to_WM_E_ACT___MISC_NUM_1 as in_MISC_NUM_1", \
	"SQ_Shortcut_to_WM_E_ACT___MISC_NUM_2 as in_MISC_NUM_2", \
	"SQ_Shortcut_to_WM_E_ACT___WM_OVERRIDE_PROC_ZONE_ID as in_WM_OVERRIDE_PROC_ZONE_ID", \
	"SQ_Shortcut_to_WM_E_ACT___WM_PROC_ZONE_LOCN_IND as in_WM_PROC_ZONE_LOCN_IND", \
	"SQ_Shortcut_to_WM_E_ACT___LM_MAN_EVNT_REQ_APRV as in_LM_MAN_EVNT_REQ_APRV", \
	"SQ_Shortcut_to_WM_E_ACT___LM_KIOSK_REQ_APRV as in_LM_KIOSK_REQ_APRV", \
	"SQ_Shortcut_to_WM_E_ACT___REQ_APRV as in_REQ_APRV", \
	"SQ_Shortcut_to_WM_E_ACT___WM_VERSION_ID as in_WM_VERSION_ID", \
	"SQ_Shortcut_to_WM_E_ACT___WM_LABOR_ACTIVITY_ID as in_WM_LABOR_ACTIVITY_ID", \
	"SQ_Shortcut_to_WM_E_ACT___WM_VHCL_TYPE_ID as in_WM_VHCL_TYPE_ID", \
	"SQ_Shortcut_to_WM_E_ACT___WM_UNQ_SEED_ID as in_WM_UNQ_SEED_ID", \
	"SQ_Shortcut_to_WM_E_ACT___WM_CREATED_TSTMP as in_WM_CREATED_TSTMP", \
	"SQ_Shortcut_to_WM_E_ACT___WM_LAST_UPDATED_TSTMP as in_WM_LAST_UPDATED_TSTMP", \
	"SQ_Shortcut_to_WM_E_ACT___WM_DISPLAY_UOM as in_WM_DISPLAY_UOM", \
	"SQ_Shortcut_to_WM_E_ACT___WM_THRUPUT_GOAL as in_WM_THRUPUT_GOAL", \
	"SQ_Shortcut_to_WM_E_ACT___DELETE_FLAG as in_DELETE_FLAG", \
	"SQ_Shortcut_to_WM_E_ACT___UPDATE_TSTMP as UPDATE_TSTMP", \
	"SQ_Shortcut_to_WM_E_ACT___LOAD_TSTMP as in_LOAD_TSTMP")

# COMMAND ----------
# Processing node FIL_NO_CHANGE_REC, type FILTER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 56

# for each involved DataFrame, append the dataframe name to each column
JNR_WM_E_ACT_temp = JNR_WM_E_ACT.toDF(*["JNR_WM_E_ACT___" + col for col in JNR_WM_E_ACT.columns])

FIL_NO_CHANGE_REC = JNR_WM_E_ACT_temp.selectExpr( \
	"JNR_WM_E_ACT___LOCATION_ID as LOCATION_ID", \
	"JNR_WM_E_ACT___ACT_ID as ACT_ID", \
	"JNR_WM_E_ACT___CREATE_DATE_TIME as CREATE_DATE_TIME", \
	"JNR_WM_E_ACT___MOD_DATE_TIME as MOD_DATE_TIME", \
	"JNR_WM_E_ACT___USER_ID as USER_ID", \
	"JNR_WM_E_ACT___JOB_FUNC_ID as JOB_FUNC_ID", \
	"JNR_WM_E_ACT___WHSE as WHSE", \
	"JNR_WM_E_ACT___LABOR_TYPE_ID as LABOR_TYPE_ID", \
	"JNR_WM_E_ACT___MONITOR_UOM as MONITOR_UOM1", \
	"JNR_WM_E_ACT___MISC_TXT_1 as MISC_TXT_11", \
	"JNR_WM_E_ACT___MISC_TXT_2 as MISC_TXT_21", \
	"JNR_WM_E_ACT___MISC_NUM_1 as MISC_NUM_11", \
	"JNR_WM_E_ACT___MISC_NUM_2 as MISC_NUM_21", \
	"JNR_WM_E_ACT___OVERRIDE_PROC_ZONE_ID as OVERRIDE_PROC_ZONE_ID", \
	"JNR_WM_E_ACT___PROC_ZONE_LOCN_IND as PROC_ZONE_LOCN_IND", \
	"JNR_WM_E_ACT___LM_MAN_EVNT_REQ_APRV as LM_MAN_EVNT_REQ_APRV1", \
	"JNR_WM_E_ACT___LM_KIOSK_REQ_APRV as LM_KIOSK_REQ_APRV1", \
	"JNR_WM_E_ACT___WM_REQ_APRV as WM_REQ_APRV", \
	"JNR_WM_E_ACT___VERSION_ID as VERSION_ID", \
	"JNR_WM_E_ACT___LABOR_ACTIVITY_ID as LABOR_ACTIVITY_ID", \
	"JNR_WM_E_ACT___VHCL_TYPE_ID as VHCL_TYPE_ID", \
	"JNR_WM_E_ACT___UNQ_SEED_ID as UNQ_SEED_ID", \
	"JNR_WM_E_ACT___CREATED_DTTM as CREATED_DTTM", \
	"JNR_WM_E_ACT___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"JNR_WM_E_ACT___DISPLAY_UOM as DISPLAY_UOM", \
	"JNR_WM_E_ACT___THRUPUT_GOAL as THRUPUT_GOAL", \
	"JNR_WM_E_ACT___LOAD_TSTMP as LOAD_TSTMP", \
	"JNR_WM_E_ACT___in_LOCATION_ID as in_LOCATION_ID", \
	"JNR_WM_E_ACT___in_WM_ACT_ID as in_WM_ACT_ID", \
	"JNR_WM_E_ACT___in_WM_CREATE_TSTMP as in_WM_CREATE_TSTMP", \
	"JNR_WM_E_ACT___in_WM_MOD_TSTMP as in_WM_MOD_TSTMP", \
	"JNR_WM_E_ACT___in_WM_USER_ID as in_WM_USER_ID", \
	"JNR_WM_E_ACT___in_WM_JOB_FUNC_ID as in_WM_JOB_FUNC_ID", \
	"JNR_WM_E_ACT___in_WM_WHSE as in_WM_WHSE", \
	"JNR_WM_E_ACT___in_WM_LABOR_TYPE_ID as in_WM_LABOR_TYPE_ID", \
	"JNR_WM_E_ACT___in_MONITOR_UOM as in_MONITOR_UOM", \
	"JNR_WM_E_ACT___in_MISC_TXT_1 as in_MISC_TXT_1", \
	"JNR_WM_E_ACT___in_MISC_TXT_2 as in_MISC_TXT_2", \
	"JNR_WM_E_ACT___in_MISC_NUM_1 as in_MISC_NUM_1", \
	"JNR_WM_E_ACT___in_MISC_NUM_2 as in_MISC_NUM_2", \
	"JNR_WM_E_ACT___in_WM_OVERRIDE_PROC_ZONE_ID as in_WM_OVERRIDE_PROC_ZONE_ID", \
	"JNR_WM_E_ACT___in_WM_PROC_ZONE_LOCN_IND as in_WM_PROC_ZONE_LOCN_IND", \
	"JNR_WM_E_ACT___in_LM_MAN_EVNT_REQ_APRV as in_LM_MAN_EVNT_REQ_APRV", \
	"JNR_WM_E_ACT___in_LM_KIOSK_REQ_APRV as in_LM_KIOSK_REQ_APRV", \
	"JNR_WM_E_ACT___in_REQ_APRV as in_REQ_APRV", \
	"JNR_WM_E_ACT___in_WM_VERSION_ID as in_WM_VERSION_ID", \
	"JNR_WM_E_ACT___in_WM_LABOR_ACTIVITY_ID as in_WM_LABOR_ACTIVITY_ID", \
	"JNR_WM_E_ACT___in_WM_VHCL_TYPE_ID as in_WM_VHCL_TYPE_ID", \
	"JNR_WM_E_ACT___in_WM_UNQ_SEED_ID as in_WM_UNQ_SEED_ID", \
	"JNR_WM_E_ACT___in_WM_CREATED_TSTMP as in_WM_CREATED_TSTMP", \
	"JNR_WM_E_ACT___in_WM_LAST_UPDATED_TSTMP as in_WM_LAST_UPDATED_TSTMP", \
	"JNR_WM_E_ACT___in_WM_DISPLAY_UOM as in_WM_DISPLAY_UOM", \
	"JNR_WM_E_ACT___in_WM_THRUPUT_GOAL as in_WM_THRUPUT_GOAL", \
	"JNR_WM_E_ACT___in_DELETE_FLAG as in_DELETE_FLAG", \
	"JNR_WM_E_ACT___UPDATE_TSTMP as UPDATE_TSTMP", \
	"JNR_WM_E_ACT___in_LOAD_TSTMP as in_LOAD_TSTMP") \
    .filter("ACT_ID is Null OR in_WM_ACT_ID is Null() OR (  in_WM_ACT_ID is NOT Null() AND \
             ( COALESCE(CREATE_DATE_TIME, date'1900-01-01') != COALESCE(in_WM_CREATE_TSTMP, date'1900-01-01') \
             OR COALESCE(MOD_DATE_TIME, date'1900-01-01') != COALESCE(in_WM_MOD_TSTMP, date'1900-01-01') \
             OR COALESCE(CREATED_DTTM, date'1900-01-01') != COALESCE(in_WM_CREATED_TSTMP, date'1900-01-01') \
             OR COALESCE(LAST_UPDATED_DTTM, date'1900-01-01') != COALESCE(in_WM_LAST_UPDATED_TSTMP, date'1900-01-01')))").withColumn("sys_row_id", monotonically_increasing_id())



# COMMAND ----------
# Processing node EXP_EVALUATE, type EXPRESSION . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 60

# for each involved DataFrame, append the dataframe name to each column
FIL_NO_CHANGE_REC_temp = FIL_NO_CHANGE_REC.toDF(*["FIL_NO_CHANGE_REC___" + col for col in FIL_NO_CHANGE_REC.columns]) \
.withColumn("v_CREATE_DATE_TIME", expr("""IF(CREATE_DATE_TIME IS NULL, date'1900-01-01', CREATE_DATE_TIME)""")) \
	.withColumn("v_MOD_DATE_TIME", expr("""IF(MOD_DATE_TIME IS NULL, date'1900-01-01', MOD_DATE_TIME)""")) \
	.withColumn("v_CREATED_DTTM", expr("""IF(CREATED_DTTM IS NULL, date'1900-01-01', CREATED_DTTM)""")) \
	.withColumn("v_LAST_UPDATED_DTTM", expr("""IF(LAST_UPDATED_DTTM IS NULL, date'1900-01-01', LAST_UPDATED_DTTM)""")) \
	.withColumn("v_in_WM_CREATE_TSTMP", expr("""IF(in_WM_CREATE_TSTMP IS NULL, date'1900-01-01', in_WM_CREATE_TSTMP)""")) \
	.withColumn("v_in_WM_MOD_TSTMP", expr("""IF(in_WM_MOD_TSTMP IS NULL, date'1900-01-01', in_WM_MOD_TSTMP)""")) \
	.withColumn("v_in_WM_CREATED_TSTMP", expr("""IF(in_WM_CREATED_TSTMP IS NULL, date'1900-01-01', in_WM_CREATED_TSTMP)""")) \
	.withColumn("v_in_WM_LAST_UPDATED_TSTMP", expr("""IF(in_WM_LAST_UPDATED_TSTMP IS NULL, date'1900-01-01', in_WM_LAST_UPDATED_TSTMP)"""))
             
EXP_EVALUATE = FIL_NO_CHANGE_REC_temp.selectExpr( \
	"FIL_NO_CHANGE_REC___LOCATION_ID as LOCATION_ID", \
	"FIL_NO_CHANGE_REC___ACT_ID as ACT_ID", \
	"FIL_NO_CHANGE_REC___CREATE_DATE_TIME as CREATE_DATE_TIME", \
	"FIL_NO_CHANGE_REC___MOD_DATE_TIME as MOD_DATE_TIME", \
	"FIL_NO_CHANGE_REC___USER_ID as USER_ID", \
	"FIL_NO_CHANGE_REC___JOB_FUNC_ID as JOB_FUNC_ID", \
	"FIL_NO_CHANGE_REC___WHSE as WHSE", \
	"FIL_NO_CHANGE_REC___LABOR_TYPE_ID as LABOR_TYPE_ID", \
	"FIL_NO_CHANGE_REC___MONITOR_UOM1 as MONITOR_UOM1", \
	"FIL_NO_CHANGE_REC___MISC_TXT_11 as MISC_TXT_11", \
	"FIL_NO_CHANGE_REC___MISC_TXT_21 as MISC_TXT_21", \
	"FIL_NO_CHANGE_REC___MISC_NUM_11 as MISC_NUM_11", \
	"FIL_NO_CHANGE_REC___MISC_NUM_21 as MISC_NUM_21", \
	"FIL_NO_CHANGE_REC___OVERRIDE_PROC_ZONE_ID as OVERRIDE_PROC_ZONE_ID", \
	"FIL_NO_CHANGE_REC___PROC_ZONE_LOCN_IND as PROC_ZONE_LOCN_IND", \
	"FIL_NO_CHANGE_REC___LM_MAN_EVNT_REQ_APRV1 as LM_MAN_EVNT_REQ_APRV1", \
	"FIL_NO_CHANGE_REC___LM_KIOSK_REQ_APRV1 as LM_KIOSK_REQ_APRV1", \
	"FIL_NO_CHANGE_REC___WM_REQ_APRV as WM_REQ_APRV", \
	"FIL_NO_CHANGE_REC___VERSION_ID as VERSION_ID", \
	"FIL_NO_CHANGE_REC___LABOR_ACTIVITY_ID as LABOR_ACTIVITY_ID", \
	"FIL_NO_CHANGE_REC___VHCL_TYPE_ID as VHCL_TYPE_ID", \
	"FIL_NO_CHANGE_REC___UNQ_SEED_ID as UNQ_SEED_ID", \
	"FIL_NO_CHANGE_REC___CREATED_DTTM as CREATED_DTTM", \
	"FIL_NO_CHANGE_REC___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"FIL_NO_CHANGE_REC___DISPLAY_UOM as DISPLAY_UOM", \
	"FIL_NO_CHANGE_REC___THRUPUT_GOAL as THRUPUT_GOAL", \
	"FIL_NO_CHANGE_REC___LOAD_TSTMP as LOAD_TSTMP2", \
	"FIL_NO_CHANGE_REC___in_LOCATION_ID as in_LOCATION_ID", \
	"FIL_NO_CHANGE_REC___in_WM_ACT_ID as in_WM_ACT_ID", \
	"FIL_NO_CHANGE_REC___in_WM_CREATE_TSTMP as in_WM_CREATE_TSTMP", \
	"FIL_NO_CHANGE_REC___in_WM_MOD_TSTMP as in_WM_MOD_TSTMP", \
	"FIL_NO_CHANGE_REC___in_WM_USER_ID as in_WM_USER_ID", \
	"FIL_NO_CHANGE_REC___in_WM_JOB_FUNC_ID as in_WM_JOB_FUNC_ID", \
	"FIL_NO_CHANGE_REC___in_WM_WHSE as in_WM_WHSE", \
	"FIL_NO_CHANGE_REC___in_WM_LABOR_TYPE_ID as in_WM_LABOR_TYPE_ID", \
	"FIL_NO_CHANGE_REC___in_MONITOR_UOM as in_MONITOR_UOM", \
	"FIL_NO_CHANGE_REC___in_MISC_TXT_1 as in_MISC_TXT_1", \
	"FIL_NO_CHANGE_REC___in_MISC_TXT_2 as in_MISC_TXT_2", \
	"FIL_NO_CHANGE_REC___in_MISC_NUM_1 as in_MISC_NUM_1", \
	"FIL_NO_CHANGE_REC___in_MISC_NUM_2 as in_MISC_NUM_2", \
	"FIL_NO_CHANGE_REC___in_WM_OVERRIDE_PROC_ZONE_ID as in_WM_OVERRIDE_PROC_ZONE_ID", \
	"FIL_NO_CHANGE_REC___in_WM_PROC_ZONE_LOCN_IND as in_WM_PROC_ZONE_LOCN_IND", \
	"FIL_NO_CHANGE_REC___in_LM_MAN_EVNT_REQ_APRV as in_LM_MAN_EVNT_REQ_APRV", \
	"FIL_NO_CHANGE_REC___in_LM_KIOSK_REQ_APRV as in_LM_KIOSK_REQ_APRV", \
	"FIL_NO_CHANGE_REC___in_REQ_APRV as in_REQ_APRV", \
	"FIL_NO_CHANGE_REC___in_WM_VERSION_ID as in_WM_VERSION_ID", \
	"FIL_NO_CHANGE_REC___in_WM_LABOR_ACTIVITY_ID as in_WM_LABOR_ACTIVITY_ID", \
	"FIL_NO_CHANGE_REC___in_WM_VHCL_TYPE_ID as in_WM_VHCL_TYPE_ID", \
	"FIL_NO_CHANGE_REC___in_WM_UNQ_SEED_ID as in_WM_UNQ_SEED_ID", \
	"FIL_NO_CHANGE_REC___in_WM_CREATED_TSTMP as in_WM_CREATED_TSTMP", \
	"FIL_NO_CHANGE_REC___in_WM_LAST_UPDATED_TSTMP as in_WM_LAST_UPDATED_TSTMP", \
	"FIL_NO_CHANGE_REC___in_WM_DISPLAY_UOM as in_WM_DISPLAY_UOM", \
	"FIL_NO_CHANGE_REC___in_WM_THRUPUT_GOAL as in_WM_THRUPUT_GOAL", \
	"FIL_NO_CHANGE_REC___in_DELETE_FLAG as in_DELETE_FLAG", \
	"FIL_NO_CHANGE_REC___in_LOAD_TSTMP as in_LOAD_TSTMP").selectExpr( \
	"FIL_NO_CHANGE_REC___sys_row_id as sys_row_id", \
	"FIL_NO_CHANGE_REC___LOCATION_ID as LOCATION_ID", \
	"FIL_NO_CHANGE_REC___ACT_ID as ACT_ID", \
	"FIL_NO_CHANGE_REC___CREATE_DATE_TIME as CREATE_DATE_TIME", \
	"FIL_NO_CHANGE_REC___MOD_DATE_TIME as MOD_DATE_TIME", \
	"FIL_NO_CHANGE_REC___USER_ID as USER_ID", \
	"FIL_NO_CHANGE_REC___JOB_FUNC_ID as JOB_FUNC_ID", \
	"FIL_NO_CHANGE_REC___WHSE as WHSE", \
	"FIL_NO_CHANGE_REC___LABOR_TYPE_ID as LABOR_TYPE_ID", \
	"FIL_NO_CHANGE_REC___MONITOR_UOM1 as MONITOR_UOM1", \
	"FIL_NO_CHANGE_REC___MISC_TXT_11 as MISC_TXT_11", \
	"FIL_NO_CHANGE_REC___MISC_TXT_21 as MISC_TXT_21", \
	"FIL_NO_CHANGE_REC___MISC_NUM_11 as MISC_NUM_11", \
	"FIL_NO_CHANGE_REC___MISC_NUM_21 as MISC_NUM_21", \
	"FIL_NO_CHANGE_REC___OVERRIDE_PROC_ZONE_ID as OVERRIDE_PROC_ZONE_ID", \
	"FIL_NO_CHANGE_REC___PROC_ZONE_LOCN_IND as PROC_ZONE_LOCN_IND", \
	"FIL_NO_CHANGE_REC___LM_MAN_EVNT_REQ_APRV1 as LM_MAN_EVNT_REQ_APRV1", \
    "CASE WHEN TRIM(UPPER(FIL_NO_CHANGE_REC___LM_MAN_EVNT_REQ_APRV1)) IN ('Y', '1') THEN '1' ELSE '0' END as o_LM_MAN_EVNT_REQ_APRV", \
	"FIL_NO_CHANGE_REC___LM_KIOSK_REQ_APRV1 as LM_KIOSK_REQ_APRV1", \
    "CASE WHEN TRIM(UPPER(FIL_NO_CHANGE_REC___LM_KIOSK_REQ_APRV1)) IN ('Y', '1') THEN '1' ELSE '0' END as o_LM_KIOSK_REQ_APRV", \
	"FIL_NO_CHANGE_REC___WM_REQ_APRV as WM_REQ_APRV", \
    "CASE WHEN TRIM(UPPER(FIL_NO_CHANGE_REC___WM_REQ_APRV)) IN ('Y', '1') THEN '1' ELSE '0' END as o_WM_REQ_APRV", \
	"FIL_NO_CHANGE_REC___VERSION_ID as VERSION_ID", \
	"FIL_NO_CHANGE_REC___LABOR_ACTIVITY_ID as LABOR_ACTIVITY_ID", \
	"FIL_NO_CHANGE_REC___VHCL_TYPE_ID as VHCL_TYPE_ID", \
	"FIL_NO_CHANGE_REC___UNQ_SEED_ID as UNQ_SEED_ID", \
	"FIL_NO_CHANGE_REC___CREATED_DTTM as CREATED_DTTM", \
	"FIL_NO_CHANGE_REC___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"FIL_NO_CHANGE_REC___DISPLAY_UOM as DISPLAY_UOM", \
	"FIL_NO_CHANGE_REC___THRUPUT_GOAL as THRUPUT_GOAL", \
	"FIL_NO_CHANGE_REC___LOAD_TSTMP2 as LOAD_TSTMP2", \
	"FIL_NO_CHANGE_REC___in_LOCATION_ID as in_LOCATION_ID", \
	"FIL_NO_CHANGE_REC___in_WM_ACT_ID as in_WM_ACT_ID", \
	"FIL_NO_CHANGE_REC___in_WM_CREATE_TSTMP as in_WM_CREATE_TSTMP", \
	"FIL_NO_CHANGE_REC___in_WM_MOD_TSTMP as in_WM_MOD_TSTMP", \
	"FIL_NO_CHANGE_REC___in_WM_USER_ID as in_WM_USER_ID", \
	"FIL_NO_CHANGE_REC___in_WM_JOB_FUNC_ID as in_WM_JOB_FUNC_ID", \
	"FIL_NO_CHANGE_REC___in_WM_WHSE as in_WM_WHSE", \
	"FIL_NO_CHANGE_REC___in_WM_LABOR_TYPE_ID as in_WM_LABOR_TYPE_ID", \
	"FIL_NO_CHANGE_REC___in_MONITOR_UOM as in_MONITOR_UOM", \
	"FIL_NO_CHANGE_REC___in_MISC_TXT_1 as in_MISC_TXT_1", \
	"FIL_NO_CHANGE_REC___in_MISC_TXT_2 as in_MISC_TXT_2", \
	"FIL_NO_CHANGE_REC___in_MISC_NUM_1 as in_MISC_NUM_1", \
	"FIL_NO_CHANGE_REC___in_MISC_NUM_2 as in_MISC_NUM_2", \
	"FIL_NO_CHANGE_REC___in_WM_OVERRIDE_PROC_ZONE_ID as in_WM_OVERRIDE_PROC_ZONE_ID", \
	"FIL_NO_CHANGE_REC___in_WM_PROC_ZONE_LOCN_IND as in_WM_PROC_ZONE_LOCN_IND", \
	"FIL_NO_CHANGE_REC___in_LM_MAN_EVNT_REQ_APRV as in_LM_MAN_EVNT_REQ_APRV", \
	"FIL_NO_CHANGE_REC___in_LM_KIOSK_REQ_APRV as in_LM_KIOSK_REQ_APRV", \
	"FIL_NO_CHANGE_REC___in_REQ_APRV as in_REQ_APRV", \
	"FIL_NO_CHANGE_REC___in_WM_VERSION_ID as in_WM_VERSION_ID", \
	"FIL_NO_CHANGE_REC___in_WM_LABOR_ACTIVITY_ID as in_WM_LABOR_ACTIVITY_ID", \
	"FIL_NO_CHANGE_REC___in_WM_VHCL_TYPE_ID as in_WM_VHCL_TYPE_ID", \
	"FIL_NO_CHANGE_REC___in_WM_UNQ_SEED_ID as in_WM_UNQ_SEED_ID", \
	"FIL_NO_CHANGE_REC___in_WM_CREATED_TSTMP as in_WM_CREATED_TSTMP", \
	"FIL_NO_CHANGE_REC___in_WM_LAST_UPDATED_TSTMP as in_WM_LAST_UPDATED_TSTMP", \
	"FIL_NO_CHANGE_REC___in_WM_DISPLAY_UOM as in_WM_DISPLAY_UOM", \
	"FIL_NO_CHANGE_REC___in_WM_THRUPUT_GOAL as in_WM_THRUPUT_GOAL", \
	"IF(FIL_NO_CHANGE_REC___ACT_ID IS NULL AND FIL_NO_CHANGE_REC___in_WM_ACT_ID IS NOT NULL, 1, 0) as DELETE_FLAG", \
	"CURRENT_TIMESTAMP as UPDATE_TSTMP", \
	"IF(FIL_NO_CHANGE_REC___in_LOAD_TSTMP IS NULL, CURRENT_TIMESTAMP, FIL_NO_CHANGE_REC___in_LOAD_TSTMP) as LOAD_TSTMP", \
	"IF(FIL_NO_CHANGE_REC___ACT_ID IS NOT NULL AND FIL_NO_CHANGE_REC___in_WM_ACT_ID IS NULL, 'INSERT', IF(FIL_NO_CHANGE_REC___ACT_ID IS NULL AND FIL_NO_CHANGE_REC___in_WM_ACT_ID IS NOT NULL AND ( FIL_NO_CHANGE_REC___v_in_WM_CREATED_TSTMP >= DATE_ADD(- 14, {Prev_Run_Dt}) OR FIL_NO_CHANGE_REC___v_in_WM_LAST_UPDATED_TSTMP >= DATE_ADD(- 14, {Prev_Run_Dt}) OR FIL_NO_CHANGE_REC___v_in_WM_CREATE_TSTMP >= DATE_ADD(- 14, {Prev_Run_Dt}) OR FIL_NO_CHANGE_REC___v_in_WM_MOD_TSTMP >= DATE_ADD(- 14, {Prev_Run_Dt}) ), 'DELETE', IF(FIL_NO_CHANGE_REC___ACT_ID IS NOT NULL AND FIL_NO_CHANGE_REC___in_WM_ACT_ID IS NOT NULL AND ( FIL_NO_CHANGE_REC___v_in_WM_CREATED_TSTMP <> FIL_NO_CHANGE_REC___v_CREATED_DTTM OR FIL_NO_CHANGE_REC___v_in_WM_LAST_UPDATED_TSTMP <> FIL_NO_CHANGE_REC___v_LAST_UPDATED_DTTM OR FIL_NO_CHANGE_REC___v_in_WM_CREATE_TSTMP <> FIL_NO_CHANGE_REC___v_CREATE_DATE_TIME OR FIL_NO_CHANGE_REC___v_in_WM_MOD_TSTMP <> FIL_NO_CHANGE_REC___v_MOD_DATE_TIME ), 'UPDATE', NULL))) as LOAD_FLAG" \
)

# COMMAND ----------
# Processing node RTR_INS_UPD_DEL, type ROUTER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 57


# Creating output dataframe for RTR_INS_UPD_DEL, output group DEL
RTR_INS_UPD_DEL_DEL = EXP_EVALUATE.selectExpr( \
	"EXP_EVALUATE.LOCATION_ID as LOCATION_ID", \
	"EXP_EVALUATE.ACT_ID as ACT_ID", \
	"EXP_EVALUATE.CREATE_DATE_TIME as CREATE_DATE_TIME", \
	"EXP_EVALUATE.MOD_DATE_TIME as MOD_DATE_TIME", \
	"EXP_EVALUATE.USER_ID as USER_ID", \
	"EXP_EVALUATE.JOB_FUNC_ID as JOB_FUNC_ID", \
	"EXP_EVALUATE.WHSE as WHSE", \
	"EXP_EVALUATE.LABOR_TYPE_ID as LABOR_TYPE_ID", \
	"EXP_EVALUATE.MONITOR_UOM1 as MONITOR_UOM1", \
	"EXP_EVALUATE.MISC_TXT_11 as MISC_TXT_11", \
	"EXP_EVALUATE.MISC_TXT_21 as MISC_TXT_21", \
	"EXP_EVALUATE.MISC_NUM_11 as MISC_NUM_11", \
	"EXP_EVALUATE.MISC_NUM_21 as MISC_NUM_21", \
	"EXP_EVALUATE.OVERRIDE_PROC_ZONE_ID as OVERRIDE_PROC_ZONE_ID", \
	"EXP_EVALUATE.PROC_ZONE_LOCN_IND as PROC_ZONE_LOCN_IND", \
	"EXP_EVALUATE.o_LM_MAN_EVNT_REQ_APRV as LM_MAN_EVNT_REQ_APRV1", \
	"EXP_EVALUATE.o_LM_KIOSK_REQ_APRV as LM_KIOSK_REQ_APRV1", \
	"EXP_EVALUATE.o_WM_REQ_APRV as WM_REQ_APRV", \
	"EXP_EVALUATE.VERSION_ID as VERSION_ID", \
	"EXP_EVALUATE.LABOR_ACTIVITY_ID as LABOR_ACTIVITY_ID", \
	"EXP_EVALUATE.VHCL_TYPE_ID as VHCL_TYPE_ID", \
	"EXP_EVALUATE.UNQ_SEED_ID as UNQ_SEED_ID", \
	"EXP_EVALUATE.CREATED_DTTM as CREATED_DTTM", \
	"EXP_EVALUATE.LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"EXP_EVALUATE.DISPLAY_UOM as DISPLAY_UOM", \
	"EXP_EVALUATE.THRUPUT_GOAL as THRUPUT_GOAL", \
	"EXP_EVALUATE.LOAD_TSTMP2 as LOAD_TSTMP2", \
	"EXP_EVALUATE.in_LOCATION_ID as in_LOCATION_ID", \
	"EXP_EVALUATE.in_WM_ACT_ID as in_WM_ACT_ID", \
	"EXP_EVALUATE.in_WM_CREATE_TSTMP as in_WM_CREATE_TSTMP", \
	"EXP_EVALUATE.in_WM_MOD_TSTMP as in_WM_MOD_TSTMP", \
	"EXP_EVALUATE.in_WM_USER_ID as in_WM_USER_ID", \
	"EXP_EVALUATE.in_WM_JOB_FUNC_ID as in_WM_JOB_FUNC_ID", \
	"EXP_EVALUATE.in_WM_WHSE as in_WM_WHSE", \
	"EXP_EVALUATE.in_WM_LABOR_TYPE_ID as in_WM_LABOR_TYPE_ID", \
	"EXP_EVALUATE.in_MONITOR_UOM as in_MONITOR_UOM", \
	"EXP_EVALUATE.in_MISC_TXT_1 as in_MISC_TXT_1", \
	"EXP_EVALUATE.in_MISC_TXT_2 as in_MISC_TXT_2", \
	"EXP_EVALUATE.in_MISC_NUM_1 as in_MISC_NUM_1", \
	"EXP_EVALUATE.in_MISC_NUM_2 as in_MISC_NUM_2", \
	"EXP_EVALUATE.in_WM_OVERRIDE_PROC_ZONE_ID as in_WM_OVERRIDE_PROC_ZONE_ID", \
	"EXP_EVALUATE.in_WM_PROC_ZONE_LOCN_IND as in_WM_PROC_ZONE_LOCN_IND", \
	"EXP_EVALUATE.in_LM_MAN_EVNT_REQ_APRV as in_LM_MAN_EVNT_REQ_APRV", \
	"EXP_EVALUATE.in_LM_KIOSK_REQ_APRV as in_LM_KIOSK_REQ_APRV", \
	"EXP_EVALUATE.in_REQ_APRV as in_REQ_APRV", \
	"EXP_EVALUATE.in_WM_VERSION_ID as in_WM_VERSION_ID", \
	"EXP_EVALUATE.in_WM_LABOR_ACTIVITY_ID as in_WM_LABOR_ACTIVITY_ID", \
	"EXP_EVALUATE.in_WM_VHCL_TYPE_ID as in_WM_VHCL_TYPE_ID", \
	"EXP_EVALUATE.in_WM_UNQ_SEED_ID as in_WM_UNQ_SEED_ID", \
	"EXP_EVALUATE.in_WM_CREATED_TSTMP as in_WM_CREATED_TSTMP", \
	"EXP_EVALUATE.in_WM_LAST_UPDATED_TSTMP as in_WM_LAST_UPDATED_TSTMP", \
	"EXP_EVALUATE.in_WM_DISPLAY_UOM as in_WM_DISPLAY_UOM", \
	"EXP_EVALUATE.in_WM_THRUPUT_GOAL as in_WM_THRUPUT_GOAL", \
	"EXP_EVALUATE.DELETE_FLAG as DELETE_FLAG", \
	"EXP_EVALUATE.UPDATE_TSTMP as UPDATE_TSTMP", \
	"EXP_EVALUATE.LOAD_TSTMP as LOAD_TSTMP", \
	"EXP_EVALUATE.LOAD_FLAG as LOAD_FLAG").select(col('sys_row_id'), \
	col('LOCATION_ID').alias('LOCATION_ID3'), \
	col('ACT_ID').alias('ACT_ID3'), \
	col('CREATE_DATE_TIME').alias('CREATE_DATE_TIME3'), \
	col('MOD_DATE_TIME').alias('MOD_DATE_TIME3'), \
	col('USER_ID').alias('USER_ID3'), \
	col('JOB_FUNC_ID').alias('JOB_FUNC_ID3'), \
	col('WHSE').alias('WHSE3'), \
	col('LABOR_TYPE_ID').alias('LABOR_TYPE_ID3'), \
	col('MONITOR_UOM1').alias('MONITOR_UOM13'), \
	col('MISC_TXT_11').alias('MISC_TXT_113'), \
	col('MISC_TXT_21').alias('MISC_TXT_213'), \
	col('MISC_NUM_11').alias('MISC_NUM_113'), \
	col('MISC_NUM_21').alias('MISC_NUM_213'), \
	col('OVERRIDE_PROC_ZONE_ID').alias('OVERRIDE_PROC_ZONE_ID3'), \
	col('PROC_ZONE_LOCN_IND').alias('PROC_ZONE_LOCN_IND3'), \
	col('LM_MAN_EVNT_REQ_APRV1').alias('LM_MAN_EVNT_REQ_APRV13'), \
	col('LM_KIOSK_REQ_APRV1').alias('LM_KIOSK_REQ_APRV13'), \
	col('WM_REQ_APRV').alias('WM_REQ_APRV3'), \
	col('VERSION_ID').alias('VERSION_ID3'), \
	col('LABOR_ACTIVITY_ID').alias('LABOR_ACTIVITY_ID3'), \
	col('VHCL_TYPE_ID').alias('VHCL_TYPE_ID3'), \
	col('UNQ_SEED_ID').alias('UNQ_SEED_ID3'), \
	col('CREATED_DTTM').alias('CREATED_DTTM3'), \
	col('LAST_UPDATED_DTTM').alias('LAST_UPDATED_DTTM3'), \
	col('DISPLAY_UOM').alias('DISPLAY_UOM3'), \
	col('THRUPUT_GOAL').alias('THRUPUT_GOAL3'), \
	col('LOAD_TSTMP2').alias('LOAD_TSTMP23'), \
	col('in_LOCATION_ID').alias('in_LOCATION_ID3'), \
	col('in_WM_ACT_ID').alias('in_WM_ACT_ID3'), \
	col('in_WM_CREATE_TSTMP').alias('in_WM_CREATE_TSTMP3'), \
	col('in_WM_MOD_TSTMP').alias('in_WM_MOD_TSTMP3'), \
	col('in_WM_USER_ID').alias('in_WM_USER_ID3'), \
	col('in_WM_JOB_FUNC_ID').alias('in_WM_JOB_FUNC_ID3'), \
	col('in_WM_WHSE').alias('in_WM_WHSE3'), \
	col('in_WM_LABOR_TYPE_ID').alias('in_WM_LABOR_TYPE_ID3'), \
	col('in_MONITOR_UOM').alias('in_MONITOR_UOM3'), \
	col('in_MISC_TXT_1').alias('in_MISC_TXT_13'), \
	col('in_MISC_TXT_2').alias('in_MISC_TXT_23'), \
	col('in_MISC_NUM_1').alias('in_MISC_NUM_13'), \
	col('in_MISC_NUM_2').alias('in_MISC_NUM_23'), \
	col('in_WM_OVERRIDE_PROC_ZONE_ID').alias('in_WM_OVERRIDE_PROC_ZONE_ID3'), \
	col('in_WM_PROC_ZONE_LOCN_IND').alias('in_WM_PROC_ZONE_LOCN_IND3'), \
	col('in_LM_MAN_EVNT_REQ_APRV').alias('in_LM_MAN_EVNT_REQ_APRV3'), \
	col('in_LM_KIOSK_REQ_APRV').alias('in_LM_KIOSK_REQ_APRV3'), \
	col('in_REQ_APRV').alias('in_REQ_APRV3'), \
	col('in_WM_VERSION_ID').alias('in_WM_VERSION_ID3'), \
	col('in_WM_LABOR_ACTIVITY_ID').alias('in_WM_LABOR_ACTIVITY_ID3'), \
	col('in_WM_VHCL_TYPE_ID').alias('in_WM_VHCL_TYPE_ID3'), \
	col('in_WM_UNQ_SEED_ID').alias('in_WM_UNQ_SEED_ID3'), \
	col('in_WM_CREATED_TSTMP').alias('in_WM_CREATED_TSTMP3'), \
	col('in_WM_LAST_UPDATED_TSTMP').alias('in_WM_LAST_UPDATED_TSTMP3'), \
	col('in_WM_DISPLAY_UOM').alias('in_WM_DISPLAY_UOM3'), \
	col('in_WM_THRUPUT_GOAL').alias('in_WM_THRUPUT_GOAL3'), \
	col('DELETE_FLAG').alias('DELETE_FLAG3'), \
	col('UPDATE_TSTMP').alias('UPDATE_TSTMP3'), \
	col('LOAD_TSTMP').alias('LOAD_TSTMP4'), \
	col('LOAD_FLAG').alias('LOAD_FLAG3')).filter("LOAD_FLAG = 'DELETE'")

# Creating output dataframe for RTR_INS_UPD_DEL, output group INS_UPD
RTR_INS_UPD_DEL_INS_UPD = EXP_EVALUATE.selectExpr( \
	"EXP_EVALUATE.LOCATION_ID as LOCATION_ID", \
	"EXP_EVALUATE.ACT_ID as ACT_ID", \
	"EXP_EVALUATE.CREATE_DATE_TIME as CREATE_DATE_TIME", \
	"EXP_EVALUATE.MOD_DATE_TIME as MOD_DATE_TIME", \
	"EXP_EVALUATE.USER_ID as USER_ID", \
	"EXP_EVALUATE.JOB_FUNC_ID as JOB_FUNC_ID", \
	"EXP_EVALUATE.WHSE as WHSE", \
	"EXP_EVALUATE.LABOR_TYPE_ID as LABOR_TYPE_ID", \
	"EXP_EVALUATE.MONITOR_UOM1 as MONITOR_UOM1", \
	"EXP_EVALUATE.MISC_TXT_11 as MISC_TXT_11", \
	"EXP_EVALUATE.MISC_TXT_21 as MISC_TXT_21", \
	"EXP_EVALUATE.MISC_NUM_11 as MISC_NUM_11", \
	"EXP_EVALUATE.MISC_NUM_21 as MISC_NUM_21", \
	"EXP_EVALUATE.OVERRIDE_PROC_ZONE_ID as OVERRIDE_PROC_ZONE_ID", \
	"EXP_EVALUATE.PROC_ZONE_LOCN_IND as PROC_ZONE_LOCN_IND", \
	"EXP_EVALUATE.o_LM_MAN_EVNT_REQ_APRV as LM_MAN_EVNT_REQ_APRV1", \
	"EXP_EVALUATE.o_LM_KIOSK_REQ_APRV as LM_KIOSK_REQ_APRV1", \
	"EXP_EVALUATE.o_WM_REQ_APRV as WM_REQ_APRV", \
	"EXP_EVALUATE.VERSION_ID as VERSION_ID", \
	"EXP_EVALUATE.LABOR_ACTIVITY_ID as LABOR_ACTIVITY_ID", \
	"EXP_EVALUATE.VHCL_TYPE_ID as VHCL_TYPE_ID", \
	"EXP_EVALUATE.UNQ_SEED_ID as UNQ_SEED_ID", \
	"EXP_EVALUATE.CREATED_DTTM as CREATED_DTTM", \
	"EXP_EVALUATE.LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"EXP_EVALUATE.DISPLAY_UOM as DISPLAY_UOM", \
	"EXP_EVALUATE.THRUPUT_GOAL as THRUPUT_GOAL", \
	"EXP_EVALUATE.LOAD_TSTMP2 as LOAD_TSTMP2", \
	"EXP_EVALUATE.in_LOCATION_ID as in_LOCATION_ID", \
	"EXP_EVALUATE.in_WM_ACT_ID as in_WM_ACT_ID", \
	"EXP_EVALUATE.in_WM_CREATE_TSTMP as in_WM_CREATE_TSTMP", \
	"EXP_EVALUATE.in_WM_MOD_TSTMP as in_WM_MOD_TSTMP", \
	"EXP_EVALUATE.in_WM_USER_ID as in_WM_USER_ID", \
	"EXP_EVALUATE.in_WM_JOB_FUNC_ID as in_WM_JOB_FUNC_ID", \
	"EXP_EVALUATE.in_WM_WHSE as in_WM_WHSE", \
	"EXP_EVALUATE.in_WM_LABOR_TYPE_ID as in_WM_LABOR_TYPE_ID", \
	"EXP_EVALUATE.in_MONITOR_UOM as in_MONITOR_UOM", \
	"EXP_EVALUATE.in_MISC_TXT_1 as in_MISC_TXT_1", \
	"EXP_EVALUATE.in_MISC_TXT_2 as in_MISC_TXT_2", \
	"EXP_EVALUATE.in_MISC_NUM_1 as in_MISC_NUM_1", \
	"EXP_EVALUATE.in_MISC_NUM_2 as in_MISC_NUM_2", \
	"EXP_EVALUATE.in_WM_OVERRIDE_PROC_ZONE_ID as in_WM_OVERRIDE_PROC_ZONE_ID", \
	"EXP_EVALUATE.in_WM_PROC_ZONE_LOCN_IND as in_WM_PROC_ZONE_LOCN_IND", \
	"EXP_EVALUATE.in_LM_MAN_EVNT_REQ_APRV as in_LM_MAN_EVNT_REQ_APRV", \
	"EXP_EVALUATE.in_LM_KIOSK_REQ_APRV as in_LM_KIOSK_REQ_APRV", \
	"EXP_EVALUATE.in_REQ_APRV as in_REQ_APRV", \
	"EXP_EVALUATE.in_WM_VERSION_ID as in_WM_VERSION_ID", \
	"EXP_EVALUATE.in_WM_LABOR_ACTIVITY_ID as in_WM_LABOR_ACTIVITY_ID", \
	"EXP_EVALUATE.in_WM_VHCL_TYPE_ID as in_WM_VHCL_TYPE_ID", \
	"EXP_EVALUATE.in_WM_UNQ_SEED_ID as in_WM_UNQ_SEED_ID", \
	"EXP_EVALUATE.in_WM_CREATED_TSTMP as in_WM_CREATED_TSTMP", \
	"EXP_EVALUATE.in_WM_LAST_UPDATED_TSTMP as in_WM_LAST_UPDATED_TSTMP", \
	"EXP_EVALUATE.in_WM_DISPLAY_UOM as in_WM_DISPLAY_UOM", \
	"EXP_EVALUATE.in_WM_THRUPUT_GOAL as in_WM_THRUPUT_GOAL", \
	"EXP_EVALUATE.DELETE_FLAG as DELETE_FLAG", \
	"EXP_EVALUATE.UPDATE_TSTMP as UPDATE_TSTMP", \
	"EXP_EVALUATE.LOAD_TSTMP as LOAD_TSTMP", \
	"EXP_EVALUATE.LOAD_FLAG as LOAD_FLAG").select(col('sys_row_id'), \
	col('LOCATION_ID').alias('LOCATION_ID1'), \
	col('ACT_ID').alias('ACT_ID1'), \
	col('CREATE_DATE_TIME').alias('CREATE_DATE_TIME1'), \
	col('MOD_DATE_TIME').alias('MOD_DATE_TIME1'), \
	col('USER_ID').alias('USER_ID1'), \
	col('JOB_FUNC_ID').alias('JOB_FUNC_ID1'), \
	col('WHSE').alias('WHSE1'), \
	col('LABOR_TYPE_ID').alias('LABOR_TYPE_ID1'), \
	col('MONITOR_UOM1').alias('MONITOR_UOM11'), \
	col('MISC_TXT_11').alias('MISC_TXT_111'), \
	col('MISC_TXT_21').alias('MISC_TXT_211'), \
	col('MISC_NUM_11').alias('MISC_NUM_111'), \
	col('MISC_NUM_21').alias('MISC_NUM_211'), \
	col('OVERRIDE_PROC_ZONE_ID').alias('OVERRIDE_PROC_ZONE_ID1'), \
	col('PROC_ZONE_LOCN_IND').alias('PROC_ZONE_LOCN_IND1'), \
	col('LM_MAN_EVNT_REQ_APRV1').alias('LM_MAN_EVNT_REQ_APRV11'), \
	col('LM_KIOSK_REQ_APRV1').alias('LM_KIOSK_REQ_APRV11'), \
	col('WM_REQ_APRV').alias('WM_REQ_APRV1'), \
	col('VERSION_ID').alias('VERSION_ID1'), \
	col('LABOR_ACTIVITY_ID').alias('LABOR_ACTIVITY_ID1'), \
	col('VHCL_TYPE_ID').alias('VHCL_TYPE_ID1'), \
	col('UNQ_SEED_ID').alias('UNQ_SEED_ID1'), \
	col('CREATED_DTTM').alias('CREATED_DTTM1'), \
	col('LAST_UPDATED_DTTM').alias('LAST_UPDATED_DTTM1'), \
	col('DISPLAY_UOM').alias('DISPLAY_UOM1'), \
	col('THRUPUT_GOAL').alias('THRUPUT_GOAL1'), \
	col('LOAD_TSTMP2').alias('LOAD_TSTMP21'), \
	col('in_LOCATION_ID').alias('in_LOCATION_ID1'), \
	col('in_WM_ACT_ID').alias('in_WM_ACT_ID1'), \
	col('in_WM_CREATE_TSTMP').alias('in_WM_CREATE_TSTMP1'), \
	col('in_WM_MOD_TSTMP').alias('in_WM_MOD_TSTMP1'), \
	col('in_WM_USER_ID').alias('in_WM_USER_ID1'), \
	col('in_WM_JOB_FUNC_ID').alias('in_WM_JOB_FUNC_ID1'), \
	col('in_WM_WHSE').alias('in_WM_WHSE1'), \
	col('in_WM_LABOR_TYPE_ID').alias('in_WM_LABOR_TYPE_ID1'), \
	col('in_MONITOR_UOM').alias('in_MONITOR_UOM1'), \
	col('in_MISC_TXT_1').alias('in_MISC_TXT_11'), \
	col('in_MISC_TXT_2').alias('in_MISC_TXT_21'), \
	col('in_MISC_NUM_1').alias('in_MISC_NUM_11'), \
	col('in_MISC_NUM_2').alias('in_MISC_NUM_21'), \
	col('in_WM_OVERRIDE_PROC_ZONE_ID').alias('in_WM_OVERRIDE_PROC_ZONE_ID1'), \
	col('in_WM_PROC_ZONE_LOCN_IND').alias('in_WM_PROC_ZONE_LOCN_IND1'), \
	col('in_LM_MAN_EVNT_REQ_APRV').alias('in_LM_MAN_EVNT_REQ_APRV1'), \
	col('in_LM_KIOSK_REQ_APRV').alias('in_LM_KIOSK_REQ_APRV1'), \
	col('in_REQ_APRV').alias('in_REQ_APRV1'), \
	col('in_WM_VERSION_ID').alias('in_WM_VERSION_ID1'), \
	col('in_WM_LABOR_ACTIVITY_ID').alias('in_WM_LABOR_ACTIVITY_ID1'), \
	col('in_WM_VHCL_TYPE_ID').alias('in_WM_VHCL_TYPE_ID1'), \
	col('in_WM_UNQ_SEED_ID').alias('in_WM_UNQ_SEED_ID1'), \
	col('in_WM_CREATED_TSTMP').alias('in_WM_CREATED_TSTMP1'), \
	col('in_WM_LAST_UPDATED_TSTMP').alias('in_WM_LAST_UPDATED_TSTMP1'), \
	col('in_WM_DISPLAY_UOM').alias('in_WM_DISPLAY_UOM1'), \
	col('in_WM_THRUPUT_GOAL').alias('in_WM_THRUPUT_GOAL1'), \
	col('DELETE_FLAG').alias('DELETE_FLAG1'), \
	col('UPDATE_TSTMP').alias('UPDATE_TSTMP1'), \
	col('LOAD_TSTMP').alias('LOAD_TSTMP1'), \
	col('LOAD_FLAG').alias('LOAD_FLAG1')).filter("LOAD_FLAG = 'INSERT' OR LOAD_FLAG = 'UPDATE'")


# COMMAND ----------
# Processing node UPD_DEL, type UPDATE_STRATEGY . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 30

# for each involved DataFrame, append the dataframe name to each column
RTR_INS_UPD_DEL_DEL_temp = RTR_INS_UPD_DEL_DEL.toDF(*["RTR_INS_UPD_DEL_DEL___" + col for col in RTR_INS_UPD_DEL_DEL.columns])

UPD_DEL = RTR_INS_UPD_DEL_DEL_temp.selectExpr( \
	"RTR_INS_UPD_DEL_DEL___in_LOCATION_ID3 as in_LOCATION_ID3", \
	"RTR_INS_UPD_DEL_DEL___in_WM_ACT_ID3 as in_WM_ACT_ID3", \
	"RTR_INS_UPD_DEL_DEL___in_WM_CREATE_TSTMP3 as in_WM_CREATE_TSTMP3", \
	"RTR_INS_UPD_DEL_DEL___in_WM_MOD_TSTMP3 as in_WM_MOD_TSTMP3", \
	"RTR_INS_UPD_DEL_DEL___in_WM_USER_ID3 as in_WM_USER_ID3", \
	"RTR_INS_UPD_DEL_DEL___in_WM_JOB_FUNC_ID3 as in_WM_JOB_FUNC_ID3", \
	"RTR_INS_UPD_DEL_DEL___in_WM_WHSE3 as in_WM_WHSE3", \
	"RTR_INS_UPD_DEL_DEL___in_WM_LABOR_TYPE_ID3 as in_WM_LABOR_TYPE_ID3", \
	"RTR_INS_UPD_DEL_DEL___in_MONITOR_UOM3 as in_MONITOR_UOM3", \
	"RTR_INS_UPD_DEL_DEL___in_MISC_TXT_13 as in_MISC_TXT_13", \
	"RTR_INS_UPD_DEL_DEL___in_MISC_TXT_23 as in_MISC_TXT_23", \
	"RTR_INS_UPD_DEL_DEL___in_MISC_NUM_13 as in_MISC_NUM_13", \
	"RTR_INS_UPD_DEL_DEL___in_MISC_NUM_23 as in_MISC_NUM_23", \
	"RTR_INS_UPD_DEL_DEL___in_WM_OVERRIDE_PROC_ZONE_ID3 as in_WM_OVERRIDE_PROC_ZONE_ID3", \
	"RTR_INS_UPD_DEL_DEL___in_WM_PROC_ZONE_LOCN_IND3 as in_WM_PROC_ZONE_LOCN_IND3", \
	"RTR_INS_UPD_DEL_DEL___in_LM_MAN_EVNT_REQ_APRV3 as in_LM_MAN_EVNT_REQ_APRV3", \
	"RTR_INS_UPD_DEL_DEL___in_LM_KIOSK_REQ_APRV3 as in_LM_KIOSK_REQ_APRV3", \
	"RTR_INS_UPD_DEL_DEL___in_REQ_APRV3 as in_REQ_APRV3", \
	"RTR_INS_UPD_DEL_DEL___in_WM_VERSION_ID3 as in_WM_VERSION_ID3", \
	"RTR_INS_UPD_DEL_DEL___in_WM_LABOR_ACTIVITY_ID3 as in_WM_LABOR_ACTIVITY_ID3", \
	"RTR_INS_UPD_DEL_DEL___in_WM_VHCL_TYPE_ID3 as in_WM_VHCL_TYPE_ID3", \
	"RTR_INS_UPD_DEL_DEL___in_WM_UNQ_SEED_ID3 as in_WM_UNQ_SEED_ID3", \
	"RTR_INS_UPD_DEL_DEL___in_WM_CREATED_TSTMP3 as in_WM_CREATED_TSTMP", \
	"RTR_INS_UPD_DEL_DEL___in_WM_LAST_UPDATED_TSTMP3 as in_WM_LAST_UPDATED_TSTMP3", \
	"RTR_INS_UPD_DEL_DEL___in_WM_DISPLAY_UOM3 as in_WM_DISPLAY_UOM3", \
	"RTR_INS_UPD_DEL_DEL___in_WM_THRUPUT_GOAL3 as in_WM_THRUPUT_GOAL3", \
	"RTR_INS_UPD_DEL_DEL___DELETE_FLAG3 as DELETE_FLAG3", \
	"RTR_INS_UPD_DEL_DEL___UPDATE_TSTMP3 as UPDATE_TSTMP3", \
	"RTR_INS_UPD_DEL_DEL___LOAD_TSTMP4 as LOAD_TSTMP4", \
	"RTR_INS_UPD_DEL_DEL___LOAD_FLAG3 as LOAD_FLAG3") \
	.withColumn('pyspark_data_action', lit(1))

# COMMAND ----------
# Processing node Shortcut_to_WM_E_ACT2, type TARGET 
# COLUMN COUNT: 29


# Shortcut_to_WM_E_ACT2 = UPD_DEL.selectExpr( \
# 	"CAST(in_LOCATION_ID3 AS BIGINT) as LOCATION_ID", \
# 	"CAST(in_WM_ACT_ID3 AS BIGINT) as WM_ACT_ID", \
# 	"CAST(NULL AS STRING) as WM_WHSE", \
# 	"CAST(NULL AS BIGINT) as WM_JOB_FUNC_ID", \
# 	"CAST(NULL AS BIGINT) as WM_LABOR_TYPE_ID", \
# 	"CAST(NULL AS BIGINT) as WM_LABOR_ACTIVITY_ID", \
# 	"CAST(NULL AS BIGINT) as WM_PROC_ZONE_LOCN_IND", \
# 	"CAST(NULL AS BIGINT) as WM_OVERRIDE_PROC_ZONE_ID", \
# 	"CAST(NULL AS BIGINT) as WM_VHCL_TYPE_ID", \
# 	"CAST(NULL AS BIGINT) as WM_UNQ_SEED_ID", \
# 	"CAST(NULL AS BIGINT) as LM_MAN_EVNT_REQ_APRV_FLAG", \
# 	"CAST(NULL AS BIGINT) as LM_KIOSK_REQ_APRV_FLAG", \
# 	"CAST(NULL AS BIGINT) as REQ_APRV_FLAG", \
# 	"CAST(NULL AS STRING) as MONITOR_UOM", \
# 	"CAST(NULL AS STRING) as WM_DISPLAY_UOM", \
# 	"CAST(NULL AS BIGINT) as WM_THRUPUT_GOAL", \
# 	"CAST(NULL AS STRING) as MISC_TXT_1", \
# 	"CAST(NULL AS STRING) as MISC_TXT_2", \
# 	"CAST(NULL AS BIGINT) as MISC_NUM_1", \
# 	"CAST(NULL AS BIGINT) as MISC_NUM_2", \
# 	"CAST(NULL AS STRING) as WM_USER_ID", \
# 	"CAST(NULL AS BIGINT) as WM_VERSION_ID", \
# 	"CAST(NULL AS TIMESTAMP) as WM_CREATED_TSTMP", \
# 	"CAST(NULL AS TIMESTAMP) as WM_CREATE_TSTMP", \
# 	"CAST(NULL AS TIMESTAMP) as WM_MOD_TSTMP", \
# 	"CAST(NULL AS TIMESTAMP) as WM_LAST_UPDATED_TSTMP", \
# 	"CAST(DELETE_FLAG3 AS BIGINT) as DELETE_FLAG", \
# 	"CAST(UPDATE_TSTMP3 AS TIMESTAMP) as UPDATE_TSTMP", \
# 	"CAST(NULL AS TIMESTAMP) as LOAD_TSTMP" \
# )
# Shortcut_to_WM_E_ACT2.write.saveAsTable(f'{raw}.WM_E_ACT')

# COMMAND ----------
# Processing node UPD_INS_UPD, type UPDATE_STRATEGY 
# COLUMN COUNT: 30

# for each involved DataFrame, append the dataframe name to each column
RTR_INS_UPD_DEL_INS_UPD_temp = RTR_INS_UPD_DEL_INS_UPD.toDF(*["RTR_INS_UPD_DEL_INS_UPD___" + col for col in RTR_INS_UPD_DEL_INS_UPD.columns])

UPD_INS_UPD = RTR_INS_UPD_DEL_INS_UPD_temp.selectExpr( \
	"RTR_INS_UPD_DEL_INS_UPD___LOCATION_ID1 as LOCATION_ID1", \
	"RTR_INS_UPD_DEL_INS_UPD___ACT_ID1 as ACT_ID1", \
	"RTR_INS_UPD_DEL_INS_UPD___CREATE_DATE_TIME1 as CREATE_DATE_TIME1", \
	"RTR_INS_UPD_DEL_INS_UPD___MOD_DATE_TIME1 as MOD_DATE_TIME1", \
	"RTR_INS_UPD_DEL_INS_UPD___USER_ID1 as USER_ID1", \
	"RTR_INS_UPD_DEL_INS_UPD___JOB_FUNC_ID1 as JOB_FUNC_ID1", \
	"RTR_INS_UPD_DEL_INS_UPD___WHSE1 as WHSE1", \
	"RTR_INS_UPD_DEL_INS_UPD___LABOR_TYPE_ID1 as LABOR_TYPE_ID1", \
	"RTR_INS_UPD_DEL_INS_UPD___MONITOR_UOM11 as MONITOR_UOM11", \
	"RTR_INS_UPD_DEL_INS_UPD___MISC_TXT_111 as MISC_TXT_111", \
	"RTR_INS_UPD_DEL_INS_UPD___MISC_TXT_211 as MISC_TXT_211", \
	"RTR_INS_UPD_DEL_INS_UPD___MISC_NUM_111 as MISC_NUM_111", \
	"RTR_INS_UPD_DEL_INS_UPD___MISC_NUM_211 as MISC_NUM_211", \
	"RTR_INS_UPD_DEL_INS_UPD___OVERRIDE_PROC_ZONE_ID1 as OVERRIDE_PROC_ZONE_ID1", \
	"RTR_INS_UPD_DEL_INS_UPD___PROC_ZONE_LOCN_IND1 as PROC_ZONE_LOCN_IND1", \
	"RTR_INS_UPD_DEL_INS_UPD___LM_MAN_EVNT_REQ_APRV11 as LM_MAN_EVNT_REQ_APRV11", \
	"RTR_INS_UPD_DEL_INS_UPD___LM_KIOSK_REQ_APRV11 as LM_KIOSK_REQ_APRV11", \
	"RTR_INS_UPD_DEL_INS_UPD___WM_REQ_APRV1 as WM_REQ_APRV1", \
	"RTR_INS_UPD_DEL_INS_UPD___VERSION_ID1 as VERSION_ID1", \
	"RTR_INS_UPD_DEL_INS_UPD___LABOR_ACTIVITY_ID1 as LABOR_ACTIVITY_ID1", \
	"RTR_INS_UPD_DEL_INS_UPD___VHCL_TYPE_ID1 as VHCL_TYPE_ID1", \
	"RTR_INS_UPD_DEL_INS_UPD___UNQ_SEED_ID1 as UNQ_SEED_ID1", \
	"RTR_INS_UPD_DEL_INS_UPD___CREATED_DTTM1 as CREATED_DTTM1", \
	"RTR_INS_UPD_DEL_INS_UPD___LAST_UPDATED_DTTM1 as LAST_UPDATED_DTTM1", \
	"RTR_INS_UPD_DEL_INS_UPD___DISPLAY_UOM1 as DISPLAY_UOM1", \
	"RTR_INS_UPD_DEL_INS_UPD___THRUPUT_GOAL1 as THRUPUT_GOAL1", \
	"RTR_INS_UPD_DEL_INS_UPD___DELETE_FLAG1 as DELETE_FLAG1", \
	"RTR_INS_UPD_DEL_INS_UPD___UPDATE_TSTMP1 as UPDATE_TSTMP1", \
	"RTR_INS_UPD_DEL_INS_UPD___LOAD_TSTMP1 as LOAD_TSTMP1", \
	"RTR_INS_UPD_DEL_INS_UPD___LOAD_FLAG1 as LOAD_FLAG1") \
	.withColumn('pyspark_data_action', when(RTR_INS_UPD_DEL_INS_UPD.LOAD_FLAG1 ==(lit('INSERT')), lit(0)).when(RTR_INS_UPD_DEL_INS_UPD.LOAD_FLAG1 ==(lit('UPDATE')), lit(1)))

# COMMAND ----------
# Processing node Shortcut_to_WM_E_ACT1, type TARGET 
# COLUMN COUNT: 29

Shortcut_to_WM_E_ACT1 = UPD_INS_UPD.selectExpr( 
	"CAST(LOCATION_ID1 AS BIGINT) as LOCATION_ID", 
	"CAST(ACT_ID1 AS BIGINT) as WM_ACT_ID", 
	"CAST(WHSE1 AS STRING) as WM_WHSE", 
	"CAST(JOB_FUNC_ID1 AS BIGINT) as WM_JOB_FUNC_ID", 
	"CAST(LABOR_TYPE_ID1 AS BIGINT) as WM_LABOR_TYPE_ID", 
	"CAST(LABOR_ACTIVITY_ID1 AS BIGINT) as WM_LABOR_ACTIVITY_ID", 
	"CAST(PROC_ZONE_LOCN_IND1 AS BIGINT) as WM_PROC_ZONE_LOCN_IND", 
	"CAST(OVERRIDE_PROC_ZONE_ID1 AS BIGINT) as WM_OVERRIDE_PROC_ZONE_ID", 
	"CAST(VHCL_TYPE_ID1 AS BIGINT) as WM_VHCL_TYPE_ID", 
	"CAST(UNQ_SEED_ID1 AS BIGINT) as WM_UNQ_SEED_ID", 
	"CAST(LM_MAN_EVNT_REQ_APRV11 AS BIGINT) as LM_MAN_EVNT_REQ_APRV_FLAG", 
	"CAST(LM_KIOSK_REQ_APRV11 AS BIGINT) as LM_KIOSK_REQ_APRV_FLAG", 
	"CAST(WM_REQ_APRV1 AS BIGINT) as REQ_APRV_FLAG", 
	"CAST(MONITOR_UOM11 AS STRING) as MONITOR_UOM", 
	"CAST(DISPLAY_UOM1 AS STRING) as WM_DISPLAY_UOM", 
	"CAST(THRUPUT_GOAL1 AS BIGINT) as WM_THRUPUT_GOAL", 
	"CAST(MISC_TXT_111 AS STRING) as MISC_TXT_1", 
	"CAST(MISC_TXT_211 AS STRING) as MISC_TXT_2", 
	"CAST(MISC_NUM_111 AS BIGINT) as MISC_NUM_1", 
	"CAST(MISC_NUM_211 AS BIGINT) as MISC_NUM_2", 
	"CAST(USER_ID1 AS STRING) as WM_USER_ID", 
	"CAST(VERSION_ID1 AS BIGINT) as WM_VERSION_ID", 
	"CAST(CREATED_DTTM1 AS TIMESTAMP) as WM_CREATED_TSTMP", 
	"CAST(CREATE_DATE_TIME1 AS TIMESTAMP) as WM_CREATE_TSTMP", 
	"CAST(MOD_DATE_TIME1 AS TIMESTAMP) as WM_MOD_TSTMP", 
	"CAST(LAST_UPDATED_DTTM1 AS TIMESTAMP) as WM_LAST_UPDATED_TSTMP", 
	"CAST(DELETE_FLAG1 AS BIGINT) as DELETE_FLAG", 
	"CAST(UPDATE_TSTMP1 AS TIMESTAMP) as UPDATE_TSTMP", 
	"CAST(LOAD_TSTMP1 AS TIMESTAMP) as LOAD_TSTMP", 
    "pyspark_data_action" 
)

try:
  primary_key = """source.LOCATION_ID = target.LOCATION_ID AND source.WM_ACT_ID = target.WM_ACT_ID"""
  executeMerge(Shortcut_to_WM_E_ACT1, refined_perf_table, primary_key)
  logger.info(f"Merge with {refined_perf_table} completed]")
  logPrevRunDt("WM_E_ACT", "WM_E_ACT", "Completed", "N/A", f"{raw}.log_run_details")
except Exception as e:
  logPrevRunDt("WM_E_ACT", "WM_E_ACT","Failed",str(e), f"{raw}.log_run_details", )
  raise e
	