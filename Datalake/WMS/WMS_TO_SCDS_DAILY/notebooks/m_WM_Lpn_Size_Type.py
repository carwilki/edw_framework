#Code converted on 2023-06-20 18:04:19
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from pyspark.dbutils import DBUtils
from Datalake.utils.genericUtilities import *
from Datalake.utils.configs import *
from Datalake.utils.mergeUtils import *
from Datalake.utils.logger import *

# COMMAND ----------

parser = argparse.ArgumentParser()
spark = SparkSession.getActiveSession()
dbutils = DBUtils(spark)

parser.add_argument('env', type=str, help='Env Variable')
args = parser.parse_args()
env = args.env

if env is None or env == '':
    raise ValueError('env is not set')

refine = getEnvPrefix(env) + 'refine'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'

# Set global variables
starttime = datetime.now() #start timestamp of the script
refined_perf_table = f"{refine}.WM_LPN_SIZE_TYPE"
raw_perf_table = f"{raw}.WM_LPN_SIZE_TYPE_PRE"
site_profile_table = f"{legacy}.SITE_PROFILE"


# COMMAND ----------
# Processing node SQ_Shortcut_to_WM_LPN_SIZE_TYPE_PRE, type SOURCE 
# COLUMN COUNT: 33

SQ_Shortcut_to_WM_LPN_SIZE_TYPE_PRE = spark.sql(f"""SELECT
DC_NBR,
LPN_SIZE_TYPE_ID,
LPN_DESC,
LPN_SIZE_DESC,
LPN_SIZE_TYPE,
LPN_TYPE_ID,
PKG_DESC,
OVERSIZE_FLAG,
LENGTH,
WIDTH,
HEIGHT,
LPN_DIM_UOM,
LPN_PER_TIER,
TIER_PER_PALLET,
PROC_ATTR_1,
PROC_ATTR_2,
PROC_ATTR_3,
PROC_ATTR_4,
PROC_ATTR_5,
USER_ID,
WM_VERSION_ID,
CREATED_DTTM,
LAST_UPDATED_DTTM,
HIBERNATE_VERSION,
TC_COMPANY_ID,
MARK_FOR_DELETION,
SHAPE_TYPE,
IS_STACKABLE,
STACK_RANK,
STACK_POSITION,
LOAD_BEARING_STRENGTH,
FACILITY_ID,
LOAD_TSTMP
FROM {raw_perf_table}""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node SQ_Shortcut_to_WM_LPN_SIZE_TYPE, type SOURCE 
# COLUMN COUNT: 33

SQ_Shortcut_to_WM_LPN_SIZE_TYPE = spark.sql(f"""SELECT
LOCATION_ID,
WM_LPN_SIZE_TYPE_ID,
WM_LPN_TYPE_ID,
WM_LPN_SIZE_TYPE,
WM_LPN_SIZE_DESC,
WM_LPN_DESC,
WM_TC_COMPANY_ID,
WM_FACILITY_ID,
WM_PKG_DESC,
OVERSIZE_FLAG,
STACKABLE_FLAG,
STACK_RANK,
STACK_POSITION,
LPN_PER_TIER,
TIER_PER_PALLET,
WM_SHAPE_TYPE,
LOAD_BEARING_STRENGTH,
WM_LPN_DIM_UOM,
LENGTH,
WIDTH,
HEIGHT,
PROCESS_ATTR_1,
PROCESS_ATTR_2,
PROCESS_ATTR_3,
PROCESS_ATTR_4,
PROCESS_ATTR_5,
WM_USER_ID,
WM_VERSION_ID,
WM_HIBERNATE_VERSION,
MARK_FOR_DELETION_FLAG,
WM_CREATED_TSTMP,
WM_LAST_UPDATED_TSTMP,
LOAD_TSTMP
FROM {refined_perf_table}
WHERE WM_LPN_SIZE_TYPE_ID IN
(SELECT LPN_SIZE_TYPE_ID FROM {raw_perf_table})""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node EXP_INT_CONV, type EXPRESSION 
# COLUMN COUNT: 33

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_WM_LPN_SIZE_TYPE_PRE_temp = SQ_Shortcut_to_WM_LPN_SIZE_TYPE_PRE.toDF(*["SQ_Shortcut_to_WM_LPN_SIZE_TYPE_PRE___" + col for col in SQ_Shortcut_to_WM_LPN_SIZE_TYPE_PRE.columns])

EXP_INT_CONV = SQ_Shortcut_to_WM_LPN_SIZE_TYPE_PRE_temp.selectExpr( \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE_PRE___sys_row_id as sys_row_id", \
	"cast(SQ_Shortcut_to_WM_LPN_SIZE_TYPE_PRE___DC_NBR as int) as o_DC_NBR", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE_PRE___LPN_SIZE_TYPE_ID as LPN_SIZE_TYPE_ID", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE_PRE___LPN_DESC as LPN_DESC", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE_PRE___LPN_SIZE_DESC as LPN_SIZE_DESC", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE_PRE___LPN_SIZE_TYPE as LPN_SIZE_TYPE", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE_PRE___LPN_TYPE_ID as LPN_TYPE_ID", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE_PRE___PKG_DESC as PKG_DESC", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE_PRE___OVERSIZE_FLAG as OVERSIZE_FLAG", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE_PRE___LENGTH as LENGTH", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE_PRE___WIDTH as WIDTH", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE_PRE___HEIGHT as HEIGHT", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE_PRE___LPN_DIM_UOM as LPN_DIM_UOM", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE_PRE___LPN_PER_TIER as LPN_PER_TIER", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE_PRE___TIER_PER_PALLET as TIER_PER_PALLET", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE_PRE___PROC_ATTR_1 as PROC_ATTR_1", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE_PRE___PROC_ATTR_2 as PROC_ATTR_2", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE_PRE___PROC_ATTR_3 as PROC_ATTR_3", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE_PRE___PROC_ATTR_4 as PROC_ATTR_4", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE_PRE___PROC_ATTR_5 as PROC_ATTR_5", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE_PRE___USER_ID as USER_ID", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE_PRE___WM_VERSION_ID as WM_VERSION_ID", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE_PRE___CREATED_DTTM as CREATED_DTTM", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE_PRE___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE_PRE___HIBERNATE_VERSION as HIBERNATE_VERSION", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE_PRE___TC_COMPANY_ID as TC_COMPANY_ID", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE_PRE___MARK_FOR_DELETION as MARK_FOR_DELETION", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE_PRE___SHAPE_TYPE as SHAPE_TYPE", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE_PRE___IS_STACKABLE as IS_STACKABLE", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE_PRE___STACK_RANK as STACK_RANK", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE_PRE___STACK_POSITION as STACK_POSITION", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE_PRE___LOAD_BEARING_STRENGTH as LOAD_BEARING_STRENGTH", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE_PRE___FACILITY_ID as FACILITY_ID", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE_PRE___LOAD_TSTMP as LOAD_TSTMP" \
)

# COMMAND ----------
# Processing node SQ_Shortcut_to_SITE_PROFILE, type SOURCE 
# COLUMN COUNT: 2

SQ_Shortcut_to_SITE_PROFILE = spark.sql(f"""SELECT LOCATION_ID, STORE_NBR FROM {site_profile_table}""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node JNR_SITE_PROFILE, type JOINER 
# COLUMN COUNT: 35

JNR_SITE_PROFILE = EXP_INT_CONV.join(SQ_Shortcut_to_SITE_PROFILE,[EXP_INT_CONV.o_DC_NBR == SQ_Shortcut_to_SITE_PROFILE.STORE_NBR],'inner')

# COMMAND ----------
# Processing node JNR_WM_LPN_SIZE_TYPE, type JOINER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 65

# for each involved DataFrame, append the dataframe name to each column
JNR_SITE_PROFILE_temp = JNR_SITE_PROFILE.toDF(*["JNR_SITE_PROFILE___" + col for col in JNR_SITE_PROFILE.columns])
SQ_Shortcut_to_WM_LPN_SIZE_TYPE_temp = SQ_Shortcut_to_WM_LPN_SIZE_TYPE.toDF(*["SQ_Shortcut_to_WM_LPN_SIZE_TYPE___" + col for col in SQ_Shortcut_to_WM_LPN_SIZE_TYPE.columns])

JNR_WM_LPN_SIZE_TYPE = SQ_Shortcut_to_WM_LPN_SIZE_TYPE_temp.join(JNR_SITE_PROFILE_temp,[SQ_Shortcut_to_WM_LPN_SIZE_TYPE_temp.SQ_Shortcut_to_WM_LPN_SIZE_TYPE___LOCATION_ID == JNR_SITE_PROFILE_temp.JNR_SITE_PROFILE___LOCATION_ID, SQ_Shortcut_to_WM_LPN_SIZE_TYPE_temp.SQ_Shortcut_to_WM_LPN_SIZE_TYPE___WM_LPN_SIZE_TYPE_ID == JNR_SITE_PROFILE_temp.JNR_SITE_PROFILE___LPN_SIZE_TYPE_ID],'right_outer').selectExpr( \
	"JNR_SITE_PROFILE___LOCATION_ID as LOCATION_ID", \
	"JNR_SITE_PROFILE___LPN_SIZE_TYPE_ID as LPN_SIZE_TYPE_ID", \
	"JNR_SITE_PROFILE___LPN_DESC as LPN_DESC", \
	"JNR_SITE_PROFILE___LPN_SIZE_DESC as LPN_SIZE_DESC", \
	"JNR_SITE_PROFILE___LPN_SIZE_TYPE as LPN_SIZE_TYPE", \
	"JNR_SITE_PROFILE___LPN_TYPE_ID as LPN_TYPE_ID", \
	"JNR_SITE_PROFILE___PKG_DESC as PKG_DESC", \
	"JNR_SITE_PROFILE___OVERSIZE_FLAG as OVERSIZE_FLAG", \
	"JNR_SITE_PROFILE___LENGTH as LENGTH", \
	"JNR_SITE_PROFILE___WIDTH as WIDTH", \
	"JNR_SITE_PROFILE___HEIGHT as HEIGHT", \
	"JNR_SITE_PROFILE___LPN_DIM_UOM as LPN_DIM_UOM", \
	"JNR_SITE_PROFILE___LPN_PER_TIER as LPN_PER_TIER", \
	"JNR_SITE_PROFILE___TIER_PER_PALLET as TIER_PER_PALLET", \
	"JNR_SITE_PROFILE___PROC_ATTR_1 as PROC_ATTR_1", \
	"JNR_SITE_PROFILE___PROC_ATTR_2 as PROC_ATTR_2", \
	"JNR_SITE_PROFILE___PROC_ATTR_3 as PROC_ATTR_3", \
	"JNR_SITE_PROFILE___PROC_ATTR_4 as PROC_ATTR_4", \
	"JNR_SITE_PROFILE___PROC_ATTR_5 as PROC_ATTR_5", \
	"JNR_SITE_PROFILE___USER_ID as USER_ID", \
	"JNR_SITE_PROFILE___WM_VERSION_ID as WM_VERSION_ID", \
	"JNR_SITE_PROFILE___CREATED_DTTM as CREATED_DTTM", \
	"JNR_SITE_PROFILE___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"JNR_SITE_PROFILE___HIBERNATE_VERSION as HIBERNATE_VERSION", \
	"JNR_SITE_PROFILE___TC_COMPANY_ID as TC_COMPANY_ID", \
	"JNR_SITE_PROFILE___MARK_FOR_DELETION as MARK_FOR_DELETION", \
	"JNR_SITE_PROFILE___SHAPE_TYPE as SHAPE_TYPE", \
	"JNR_SITE_PROFILE___IS_STACKABLE as IS_STACKABLE", \
	"JNR_SITE_PROFILE___STACK_RANK as STACK_RANK", \
	"JNR_SITE_PROFILE___STACK_POSITION as STACK_POSITION", \
	"JNR_SITE_PROFILE___LOAD_BEARING_STRENGTH as LOAD_BEARING_STRENGTH", \
	"JNR_SITE_PROFILE___FACILITY_ID as FACILITY_ID", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE___LOCATION_ID as in_LOCATION_ID", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE___WM_LPN_SIZE_TYPE_ID as WM_LPN_SIZE_TYPE_ID", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE___WM_LPN_TYPE_ID as WM_LPN_TYPE_ID", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE___WM_LPN_SIZE_TYPE as WM_LPN_SIZE_TYPE", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE___WM_LPN_SIZE_DESC as WM_LPN_SIZE_DESC", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE___WM_LPN_DESC as WM_LPN_DESC", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE___WM_TC_COMPANY_ID as WM_TC_COMPANY_ID", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE___WM_FACILITY_ID as WM_FACILITY_ID", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE___WM_PKG_DESC as WM_PKG_DESC", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE___OVERSIZE_FLAG as in_OVERSIZE_FLAG", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE___STACKABLE_FLAG as STACKABLE_FLAG", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE___STACK_RANK as in_STACK_RANK", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE___STACK_POSITION as in_STACK_POSITION", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE___LPN_PER_TIER as in_LPN_PER_TIER", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE___TIER_PER_PALLET as in_TIER_PER_PALLET", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE___WM_SHAPE_TYPE as WM_SHAPE_TYPE", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE___LOAD_BEARING_STRENGTH as in_LOAD_BEARING_STRENGTH", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE___WM_LPN_DIM_UOM as WM_LPN_DIM_UOM", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE___LENGTH as in_LENGTH", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE___WIDTH as in_WIDTH", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE___HEIGHT as in_HEIGHT", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE___PROCESS_ATTR_1 as PROCESS_ATTR_1", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE___PROCESS_ATTR_2 as PROCESS_ATTR_2", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE___PROCESS_ATTR_3 as PROCESS_ATTR_3", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE___PROCESS_ATTR_4 as PROCESS_ATTR_4", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE___PROCESS_ATTR_5 as PROCESS_ATTR_5", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE___WM_USER_ID as WM_USER_ID", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE___WM_VERSION_ID as in_WM_VERSION_ID", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE___WM_HIBERNATE_VERSION as WM_HIBERNATE_VERSION", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE___MARK_FOR_DELETION_FLAG as MARK_FOR_DELETION_FLAG", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE___WM_CREATED_TSTMP as WM_CREATED_TSTMP", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE___WM_LAST_UPDATED_TSTMP as WM_LAST_UPDATED_TSTMP", \
	"SQ_Shortcut_to_WM_LPN_SIZE_TYPE___LOAD_TSTMP as in_LOAD_TSTMP")

# COMMAND ----------
# Processing node FIL_UNCHANGED_REC, type FILTER 
# COLUMN COUNT: 65

# for each involved DataFrame, append the dataframe name to each column
JNR_WM_LPN_SIZE_TYPE_temp = JNR_WM_LPN_SIZE_TYPE.toDF(*["JNR_WM_LPN_SIZE_TYPE___" + col for col in JNR_WM_LPN_SIZE_TYPE.columns])

FIL_UNCHANGED_REC = JNR_WM_LPN_SIZE_TYPE_temp.selectExpr( \
	"JNR_WM_LPN_SIZE_TYPE___LOCATION_ID as LOCATION_ID", \
	"JNR_WM_LPN_SIZE_TYPE___LPN_SIZE_TYPE_ID as LPN_SIZE_TYPE_ID", \
	"JNR_WM_LPN_SIZE_TYPE___LPN_DESC as LPN_DESC", \
	"JNR_WM_LPN_SIZE_TYPE___LPN_SIZE_DESC as LPN_SIZE_DESC", \
	"JNR_WM_LPN_SIZE_TYPE___LPN_SIZE_TYPE as LPN_SIZE_TYPE", \
	"JNR_WM_LPN_SIZE_TYPE___LPN_TYPE_ID as LPN_TYPE_ID", \
	"JNR_WM_LPN_SIZE_TYPE___PKG_DESC as PKG_DESC", \
	"JNR_WM_LPN_SIZE_TYPE___OVERSIZE_FLAG as OVERSIZE_FLAG", \
	"JNR_WM_LPN_SIZE_TYPE___LENGTH as LENGTH", \
	"JNR_WM_LPN_SIZE_TYPE___WIDTH as WIDTH", \
	"JNR_WM_LPN_SIZE_TYPE___HEIGHT as HEIGHT", \
	"JNR_WM_LPN_SIZE_TYPE___LPN_DIM_UOM as LPN_DIM_UOM", \
	"JNR_WM_LPN_SIZE_TYPE___LPN_PER_TIER as LPN_PER_TIER", \
	"JNR_WM_LPN_SIZE_TYPE___TIER_PER_PALLET as TIER_PER_PALLET", \
	"JNR_WM_LPN_SIZE_TYPE___PROC_ATTR_1 as PROC_ATTR_1", \
	"JNR_WM_LPN_SIZE_TYPE___PROC_ATTR_2 as PROC_ATTR_2", \
	"JNR_WM_LPN_SIZE_TYPE___PROC_ATTR_3 as PROC_ATTR_3", \
	"JNR_WM_LPN_SIZE_TYPE___PROC_ATTR_4 as PROC_ATTR_4", \
	"JNR_WM_LPN_SIZE_TYPE___PROC_ATTR_5 as PROC_ATTR_5", \
	"JNR_WM_LPN_SIZE_TYPE___USER_ID as USER_ID", \
	"JNR_WM_LPN_SIZE_TYPE___WM_VERSION_ID as WM_VERSION_ID", \
	"JNR_WM_LPN_SIZE_TYPE___CREATED_DTTM as CREATED_DTTM", \
	"JNR_WM_LPN_SIZE_TYPE___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"JNR_WM_LPN_SIZE_TYPE___HIBERNATE_VERSION as HIBERNATE_VERSION", \
	"JNR_WM_LPN_SIZE_TYPE___TC_COMPANY_ID as TC_COMPANY_ID", \
	"JNR_WM_LPN_SIZE_TYPE___MARK_FOR_DELETION as MARK_FOR_DELETION", \
	"JNR_WM_LPN_SIZE_TYPE___SHAPE_TYPE as SHAPE_TYPE", \
	"JNR_WM_LPN_SIZE_TYPE___IS_STACKABLE as IS_STACKABLE", \
	"JNR_WM_LPN_SIZE_TYPE___STACK_RANK as STACK_RANK", \
	"JNR_WM_LPN_SIZE_TYPE___STACK_POSITION as STACK_POSITION", \
	"JNR_WM_LPN_SIZE_TYPE___LOAD_BEARING_STRENGTH as LOAD_BEARING_STRENGTH", \
	"JNR_WM_LPN_SIZE_TYPE___FACILITY_ID as FACILITY_ID", \
	"JNR_WM_LPN_SIZE_TYPE___in_LOCATION_ID as in_LOCATION_ID", \
	"JNR_WM_LPN_SIZE_TYPE___WM_LPN_SIZE_TYPE_ID as WM_LPN_SIZE_TYPE_ID", \
	"JNR_WM_LPN_SIZE_TYPE___WM_LPN_TYPE_ID as WM_LPN_TYPE_ID", \
	"JNR_WM_LPN_SIZE_TYPE___WM_LPN_SIZE_TYPE as WM_LPN_SIZE_TYPE", \
	"JNR_WM_LPN_SIZE_TYPE___WM_LPN_SIZE_DESC as WM_LPN_SIZE_DESC", \
	"JNR_WM_LPN_SIZE_TYPE___WM_LPN_DESC as WM_LPN_DESC", \
	"JNR_WM_LPN_SIZE_TYPE___WM_TC_COMPANY_ID as WM_TC_COMPANY_ID", \
	"JNR_WM_LPN_SIZE_TYPE___WM_FACILITY_ID as WM_FACILITY_ID", \
	"JNR_WM_LPN_SIZE_TYPE___WM_PKG_DESC as WM_PKG_DESC", \
	"JNR_WM_LPN_SIZE_TYPE___in_OVERSIZE_FLAG as in_OVERSIZE_FLAG", \
	"JNR_WM_LPN_SIZE_TYPE___STACKABLE_FLAG as STACKABLE_FLAG", \
	"JNR_WM_LPN_SIZE_TYPE___in_STACK_RANK as in_STACK_RANK", \
	"JNR_WM_LPN_SIZE_TYPE___in_STACK_POSITION as in_STACK_POSITION", \
	"JNR_WM_LPN_SIZE_TYPE___in_LPN_PER_TIER as in_LPN_PER_TIER", \
	"JNR_WM_LPN_SIZE_TYPE___in_TIER_PER_PALLET as in_TIER_PER_PALLET", \
	"JNR_WM_LPN_SIZE_TYPE___WM_SHAPE_TYPE as WM_SHAPE_TYPE", \
	"JNR_WM_LPN_SIZE_TYPE___in_LOAD_BEARING_STRENGTH as in_LOAD_BEARING_STRENGTH", \
	"JNR_WM_LPN_SIZE_TYPE___WM_LPN_DIM_UOM as WM_LPN_DIM_UOM", \
	"JNR_WM_LPN_SIZE_TYPE___in_LENGTH as in_LENGTH", \
	"JNR_WM_LPN_SIZE_TYPE___in_WIDTH as in_WIDTH", \
	"JNR_WM_LPN_SIZE_TYPE___in_HEIGHT as in_HEIGHT", \
	"JNR_WM_LPN_SIZE_TYPE___PROCESS_ATTR_1 as PROCESS_ATTR_1", \
	"JNR_WM_LPN_SIZE_TYPE___PROCESS_ATTR_2 as PROCESS_ATTR_2", \
	"JNR_WM_LPN_SIZE_TYPE___PROCESS_ATTR_3 as PROCESS_ATTR_3", \
	"JNR_WM_LPN_SIZE_TYPE___PROCESS_ATTR_4 as PROCESS_ATTR_4", \
	"JNR_WM_LPN_SIZE_TYPE___PROCESS_ATTR_5 as PROCESS_ATTR_5", \
	"JNR_WM_LPN_SIZE_TYPE___WM_USER_ID as WM_USER_ID", \
	"JNR_WM_LPN_SIZE_TYPE___in_WM_VERSION_ID as in_WM_VERSION_ID", \
	"JNR_WM_LPN_SIZE_TYPE___WM_HIBERNATE_VERSION as WM_HIBERNATE_VERSION", \
	"JNR_WM_LPN_SIZE_TYPE___MARK_FOR_DELETION_FLAG as MARK_FOR_DELETION_FLAG", \
	"JNR_WM_LPN_SIZE_TYPE___WM_CREATED_TSTMP as WM_CREATED_TSTMP", \
	"JNR_WM_LPN_SIZE_TYPE___WM_LAST_UPDATED_TSTMP as WM_LAST_UPDATED_TSTMP", \
	"JNR_WM_LPN_SIZE_TYPE___in_LOAD_TSTMP as in_LOAD_TSTMP") \
    .filter("WM_LPN_SIZE_TYPE_ID is Null OR ( WM_LPN_SIZE_TYPE_ID is not Null AND \
     ( COALESCE(CREATED_DTTM, date'1900-01-01') != COALESCE(WM_CREATED_TSTMP, date'1900-01-01') \
    OR COALESCE(LAST_UPDATED_DTTM, date'1900-01-01') != COALESCE(WM_LAST_UPDATED_TSTMP, date'1900-01-01')))").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node EXP_UPD_VALIDATOR, type EXPRESSION 
# COLUMN COUNT: 68

# for each involved DataFrame, append the dataframe name to each column
FIL_UNCHANGED_REC_temp = FIL_UNCHANGED_REC.toDF(*["FIL_UNCHANGED_REC___" + col for col in FIL_UNCHANGED_REC.columns])

EXP_UPD_VALIDATOR = FIL_UNCHANGED_REC_temp.selectExpr( \
	"FIL_UNCHANGED_REC___sys_row_id as sys_row_id", \
	"FIL_UNCHANGED_REC___LOCATION_ID as LOCATION_ID", \
	"FIL_UNCHANGED_REC___LPN_SIZE_TYPE_ID as LPN_SIZE_TYPE_ID", \
	"FIL_UNCHANGED_REC___LPN_DESC as LPN_DESC", \
	"FIL_UNCHANGED_REC___LPN_SIZE_DESC as LPN_SIZE_DESC", \
	"FIL_UNCHANGED_REC___LPN_SIZE_TYPE as LPN_SIZE_TYPE", \
	"FIL_UNCHANGED_REC___LPN_TYPE_ID as LPN_TYPE_ID", \
	"FIL_UNCHANGED_REC___PKG_DESC as PKG_DESC", \
	"FIL_UNCHANGED_REC___OVERSIZE_FLAG as OVERSIZE_FLAG", \
	"FIL_UNCHANGED_REC___LENGTH as LENGTH", \
	"FIL_UNCHANGED_REC___WIDTH as WIDTH", \
	"FIL_UNCHANGED_REC___HEIGHT as HEIGHT", \
	"FIL_UNCHANGED_REC___LPN_DIM_UOM as LPN_DIM_UOM", \
	"FIL_UNCHANGED_REC___LPN_PER_TIER as LPN_PER_TIER", \
	"FIL_UNCHANGED_REC___TIER_PER_PALLET as TIER_PER_PALLET", \
	"FIL_UNCHANGED_REC___PROC_ATTR_1 as PROC_ATTR_1", \
	"FIL_UNCHANGED_REC___PROC_ATTR_2 as PROC_ATTR_2", \
	"FIL_UNCHANGED_REC___PROC_ATTR_3 as PROC_ATTR_3", \
	"FIL_UNCHANGED_REC___PROC_ATTR_4 as PROC_ATTR_4", \
	"FIL_UNCHANGED_REC___PROC_ATTR_5 as PROC_ATTR_5", \
	"FIL_UNCHANGED_REC___USER_ID as USER_ID", \
	"FIL_UNCHANGED_REC___WM_VERSION_ID as WM_VERSION_ID", \
	"FIL_UNCHANGED_REC___CREATED_DTTM as CREATED_DTTM", \
	"FIL_UNCHANGED_REC___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"FIL_UNCHANGED_REC___HIBERNATE_VERSION as HIBERNATE_VERSION", \
	"FIL_UNCHANGED_REC___TC_COMPANY_ID as TC_COMPANY_ID", \
	"FIL_UNCHANGED_REC___MARK_FOR_DELETION as MARK_FOR_DELETION", \
	"FIL_UNCHANGED_REC___SHAPE_TYPE as SHAPE_TYPE", \
	"FIL_UNCHANGED_REC___IS_STACKABLE as IS_STACKABLE", \
	"FIL_UNCHANGED_REC___STACK_RANK as STACK_RANK", \
	"FIL_UNCHANGED_REC___STACK_POSITION as STACK_POSITION", \
	"FIL_UNCHANGED_REC___LOAD_BEARING_STRENGTH as LOAD_BEARING_STRENGTH", \
	"FIL_UNCHANGED_REC___FACILITY_ID as FACILITY_ID", \
	"FIL_UNCHANGED_REC___in_LOCATION_ID as in_LOCATION_ID", \
	"FIL_UNCHANGED_REC___WM_LPN_SIZE_TYPE_ID as WM_LPN_SIZE_TYPE_ID", \
	"FIL_UNCHANGED_REC___WM_LPN_TYPE_ID as WM_LPN_TYPE_ID", \
	"FIL_UNCHANGED_REC___WM_LPN_SIZE_TYPE as WM_LPN_SIZE_TYPE", \
	"FIL_UNCHANGED_REC___WM_LPN_SIZE_DESC as WM_LPN_SIZE_DESC", \
	"FIL_UNCHANGED_REC___WM_LPN_DESC as WM_LPN_DESC", \
	"FIL_UNCHANGED_REC___WM_TC_COMPANY_ID as WM_TC_COMPANY_ID", \
	"FIL_UNCHANGED_REC___WM_FACILITY_ID as WM_FACILITY_ID", \
	"FIL_UNCHANGED_REC___WM_PKG_DESC as WM_PKG_DESC", \
	"FIL_UNCHANGED_REC___in_OVERSIZE_FLAG as in_OVERSIZE_FLAG", \
	"FIL_UNCHANGED_REC___STACKABLE_FLAG as STACKABLE_FLAG", \
	"FIL_UNCHANGED_REC___in_STACK_RANK as in_STACK_RANK", \
	"FIL_UNCHANGED_REC___in_STACK_POSITION as in_STACK_POSITION", \
	"FIL_UNCHANGED_REC___in_LPN_PER_TIER as in_LPN_PER_TIER", \
	"FIL_UNCHANGED_REC___in_TIER_PER_PALLET as in_TIER_PER_PALLET", \
	"FIL_UNCHANGED_REC___WM_SHAPE_TYPE as WM_SHAPE_TYPE", \
	"FIL_UNCHANGED_REC___in_LOAD_BEARING_STRENGTH as in_LOAD_BEARING_STRENGTH", \
	"FIL_UNCHANGED_REC___WM_LPN_DIM_UOM as WM_LPN_DIM_UOM", \
	"FIL_UNCHANGED_REC___in_LENGTH as in_LENGTH", \
	"FIL_UNCHANGED_REC___in_WIDTH as in_WIDTH", \
	"FIL_UNCHANGED_REC___in_HEIGHT as in_HEIGHT", \
	"FIL_UNCHANGED_REC___PROCESS_ATTR_1 as PROCESS_ATTR_1", \
	"FIL_UNCHANGED_REC___PROCESS_ATTR_2 as PROCESS_ATTR_2", \
	"FIL_UNCHANGED_REC___PROCESS_ATTR_3 as PROCESS_ATTR_3", \
	"FIL_UNCHANGED_REC___PROCESS_ATTR_4 as PROCESS_ATTR_4", \
	"FIL_UNCHANGED_REC___PROCESS_ATTR_5 as PROCESS_ATTR_5", \
	"FIL_UNCHANGED_REC___WM_USER_ID as WM_USER_ID", \
	"FIL_UNCHANGED_REC___in_WM_VERSION_ID as in_WM_VERSION_ID", \
	"FIL_UNCHANGED_REC___WM_HIBERNATE_VERSION as WM_HIBERNATE_VERSION", \
	"FIL_UNCHANGED_REC___MARK_FOR_DELETION_FLAG as MARK_FOR_DELETION_FLAG", \
	"FIL_UNCHANGED_REC___WM_CREATED_TSTMP as WM_CREATED_TSTMP", \
	"FIL_UNCHANGED_REC___WM_LAST_UPDATED_TSTMP as WM_LAST_UPDATED_TSTMP", \
	"FIL_UNCHANGED_REC___in_LOAD_TSTMP as in_LOAD_TSTMP", \
	"CURRENT_TIMESTAMP as UPDATE_TSTMP", \
	"IF(FIL_UNCHANGED_REC___in_LOAD_TSTMP IS NULL, CURRENT_TIMESTAMP, FIL_UNCHANGED_REC___in_LOAD_TSTMP) as LOAD_TSTMP", \
	"IF(FIL_UNCHANGED_REC___WM_LPN_SIZE_TYPE_ID IS NULL, 1, 2) as UPD_VALIDATOR" \
)

# COMMAND ----------
# Processing node UPD_INS_UPD, type UPDATE_STRATEGY 
# COLUMN COUNT: 35

# for each involved DataFrame, append the dataframe name to each column
EXP_UPD_VALIDATOR_temp = EXP_UPD_VALIDATOR.toDF(*["EXP_UPD_VALIDATOR___" + col for col in EXP_UPD_VALIDATOR.columns])

UPD_INS_UPD = EXP_UPD_VALIDATOR_temp.selectExpr( \
	"EXP_UPD_VALIDATOR___LOCATION_ID as LOCATION_ID", \
	"EXP_UPD_VALIDATOR___LPN_SIZE_TYPE_ID as LPN_SIZE_TYPE_ID", \
	"EXP_UPD_VALIDATOR___LPN_TYPE_ID as LPN_TYPE_ID", \
	"EXP_UPD_VALIDATOR___LPN_SIZE_TYPE as LPN_SIZE_TYPE", \
	"EXP_UPD_VALIDATOR___LPN_SIZE_DESC as LPN_SIZE_DESC", \
	"EXP_UPD_VALIDATOR___LPN_DESC as LPN_DESC", \
	"EXP_UPD_VALIDATOR___TC_COMPANY_ID as TC_COMPANY_ID", \
	"EXP_UPD_VALIDATOR___FACILITY_ID as FACILITY_ID", \
	"EXP_UPD_VALIDATOR___PKG_DESC as PKG_DESC", \
	"EXP_UPD_VALIDATOR___OVERSIZE_FLAG as OVERSIZE_FLAG", \
	"EXP_UPD_VALIDATOR___IS_STACKABLE as IS_STACKABLE", \
	"EXP_UPD_VALIDATOR___STACK_RANK as STACK_RANK", \
	"EXP_UPD_VALIDATOR___STACK_POSITION as STACK_POSITION", \
	"EXP_UPD_VALIDATOR___LPN_PER_TIER as LPN_PER_TIER", \
	"EXP_UPD_VALIDATOR___TIER_PER_PALLET as TIER_PER_PALLET", \
	"EXP_UPD_VALIDATOR___SHAPE_TYPE as SHAPE_TYPE", \
	"EXP_UPD_VALIDATOR___LOAD_BEARING_STRENGTH as LOAD_BEARING_STRENGTH", \
	"EXP_UPD_VALIDATOR___LPN_DIM_UOM as LPN_DIM_UOM", \
	"EXP_UPD_VALIDATOR___LENGTH as LENGTH", \
	"EXP_UPD_VALIDATOR___WIDTH as WIDTH", \
	"EXP_UPD_VALIDATOR___HEIGHT as HEIGHT", \
	"EXP_UPD_VALIDATOR___PROC_ATTR_1 as PROC_ATTR_1", \
	"EXP_UPD_VALIDATOR___PROC_ATTR_2 as PROC_ATTR_2", \
	"EXP_UPD_VALIDATOR___PROC_ATTR_3 as PROC_ATTR_3", \
	"EXP_UPD_VALIDATOR___PROC_ATTR_4 as PROC_ATTR_4", \
	"EXP_UPD_VALIDATOR___PROC_ATTR_5 as PROC_ATTR_5", \
	"EXP_UPD_VALIDATOR___USER_ID as USER_ID", \
	"EXP_UPD_VALIDATOR___WM_VERSION_ID as WM_VERSION_ID", \
	"EXP_UPD_VALIDATOR___HIBERNATE_VERSION as HIBERNATE_VERSION", \
	"EXP_UPD_VALIDATOR___MARK_FOR_DELETION as MARK_FOR_DELETION", \
	"EXP_UPD_VALIDATOR___CREATED_DTTM as CREATED_DTTM", \
	"EXP_UPD_VALIDATOR___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"EXP_UPD_VALIDATOR___UPDATE_TSTMP as UPDATE_TSTMP", \
	"EXP_UPD_VALIDATOR___LOAD_TSTMP as LOAD_TSTMP", \
	"EXP_UPD_VALIDATOR___UPD_VALIDATOR as UPD_VALIDATOR") \
	.withColumn('pyspark_data_action', when(col('UPD_VALIDATOR') ==(lit(1)), lit(0)).when(col('UPD_VALIDATOR') ==(lit(2)), lit(1)))

# COMMAND ----------
# Processing node Shortcut_to_WM_LPN_SIZE_TYPE1, type TARGET 
# COLUMN COUNT: 34

Shortcut_to_WM_LPN_SIZE_TYPE1 = UPD_INS_UPD.selectExpr( 
	"CAST(LOCATION_ID AS BIGINT) as LOCATION_ID", 
	"CAST(LPN_SIZE_TYPE_ID AS BIGINT) as WM_LPN_SIZE_TYPE_ID", 
	"CAST(LPN_TYPE_ID AS BIGINT) as WM_LPN_TYPE_ID", 
	"CAST(LPN_SIZE_TYPE AS STRING) as WM_LPN_SIZE_TYPE", 
	"CAST(LPN_SIZE_DESC AS STRING) as WM_LPN_SIZE_DESC", 
	"CAST(LPN_DESC AS STRING) as WM_LPN_DESC", 
	"CAST(TC_COMPANY_ID AS BIGINT) as WM_TC_COMPANY_ID", 
	"CAST(FACILITY_ID AS BIGINT) as WM_FACILITY_ID", 
	"CAST(PKG_DESC AS STRING) as WM_PKG_DESC", 
	"CAST(OVERSIZE_FLAG AS STRING) as OVERSIZE_FLAG", 
	"CAST(IS_STACKABLE AS BIGINT) as STACKABLE_FLAG", 
	"CAST(STACK_RANK AS BIGINT) as STACK_RANK", 
	"CAST(STACK_POSITION AS BIGINT) as STACK_POSITION", 
	"CAST(LPN_PER_TIER AS BIGINT) as LPN_PER_TIER", 
	"CAST(TIER_PER_PALLET AS BIGINT) as TIER_PER_PALLET", 
	"CAST(SHAPE_TYPE AS BIGINT) as WM_SHAPE_TYPE", 
	"CAST(LOAD_BEARING_STRENGTH AS BIGINT) as LOAD_BEARING_STRENGTH", 
	"CAST(LPN_DIM_UOM AS STRING) as WM_LPN_DIM_UOM", 
	"CAST(LENGTH AS BIGINT) as LENGTH", 
	"CAST(WIDTH AS BIGINT) as WIDTH", 
	"CAST(HEIGHT AS BIGINT) as HEIGHT", 
	"CAST(PROC_ATTR_1 AS STRING) as PROCESS_ATTR_1", 
	"CAST(PROC_ATTR_2 AS STRING) as PROCESS_ATTR_2", 
	"CAST(PROC_ATTR_3 AS STRING) as PROCESS_ATTR_3", 
	"CAST(PROC_ATTR_4 AS STRING) as PROCESS_ATTR_4", 
	"CAST(PROC_ATTR_5 AS STRING) as PROCESS_ATTR_5", 
	"CAST(USER_ID AS STRING) as WM_USER_ID", 
	"CAST(WM_VERSION_ID AS BIGINT) as WM_VERSION_ID", 
	"CAST(HIBERNATE_VERSION AS BIGINT) as WM_HIBERNATE_VERSION", 
	"CAST(MARK_FOR_DELETION AS BIGINT) as MARK_FOR_DELETION_FLAG", 
	"CAST(CREATED_DTTM AS TIMESTAMP) as WM_CREATED_TSTMP", 
	"CAST(LAST_UPDATED_DTTM AS TIMESTAMP) as WM_LAST_UPDATED_TSTMP", 
	"CAST(UPDATE_TSTMP AS TIMESTAMP) as UPDATE_TSTMP", 
	"CAST(LOAD_TSTMP AS TIMESTAMP) as LOAD_TSTMP", 
    "pyspark_data_action" 
)

try:
  primary_key = """source.LOCATION_ID = target.LOCATION_ID AND source.WM_LPN_SIZE_TYPE_ID = target.WM_LPN_SIZE_TYPE_ID"""
#   refined_perf_table = "WM_LPN_SIZE_TYPE"
  executeMerge(Shortcut_to_WM_LPN_SIZE_TYPE1, refined_perf_table, primary_key)
  logger.info(f"Merge with {refined_perf_table} completed]")
  logPrevRunDt("WM_LPN_SIZE_TYPE", "WM_LPN_SIZE_TYPE", "Completed", "N/A", f"{raw}.log_run_details")
except Exception as e:
  logPrevRunDt("WM_LPN_SIZE_TYPE", "WM_LPN_SIZE_TYPE","Failed",str(e), f"{raw}.log_run_details", )
  raise e
	