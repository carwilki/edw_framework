#Code converted on 2023-06-22 10:47:24
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from pyspark.dbutils import DBUtils
from utils.genericUtilities import *
from utils.configs import *
from utils.mergeUtils import *
from utils.logger import *
# COMMAND ----------

parser = argparse.ArgumentParser()
spark = SparkSession.getActiveSession()
dbutils = DBUtils(spark)
parser.add_argument('env', type=str, help='Env Variable')
args = parser.parse_args()
env = args.env

if env is None or env == '':
    raise ValueError('env is not set')

refine = getEnvPrefix(env) + 'refine'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'

# Set global variables
starttime = datetime.now() #start timestamp of the script

# COMMAND ----------
# Processing node SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE, type SOURCE 
# COLUMN COUNT: 25

SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE = spark.sql(f"""SELECT
WM_ITEM_PACKAGE_CBO_PRE.DC_NBR,
WM_ITEM_PACKAGE_CBO_PRE.ITEM_PACKAGE_ID,
WM_ITEM_PACKAGE_CBO_PRE.ITEM_ID,
WM_ITEM_PACKAGE_CBO_PRE.PACKAGE_UOM_ID,
WM_ITEM_PACKAGE_CBO_PRE.QUANTITY,
WM_ITEM_PACKAGE_CBO_PRE.WEIGHT,
WM_ITEM_PACKAGE_CBO_PRE.WEIGHT_UOM_ID,
WM_ITEM_PACKAGE_CBO_PRE.GTIN,
WM_ITEM_PACKAGE_CBO_PRE.AUDIT_CREATED_SOURCE,
WM_ITEM_PACKAGE_CBO_PRE.AUDIT_CREATED_SOURCE_TYPE,
WM_ITEM_PACKAGE_CBO_PRE.AUDIT_CREATED_DTTM,
WM_ITEM_PACKAGE_CBO_PRE.AUDIT_LAST_UPDATED_SOURCE,
WM_ITEM_PACKAGE_CBO_PRE.AUDIT_LAST_UPDATED_SOURCE_TYPE,
WM_ITEM_PACKAGE_CBO_PRE.AUDIT_LAST_UPDATED_DTTM,
WM_ITEM_PACKAGE_CBO_PRE.MARK_FOR_DELETION,
WM_ITEM_PACKAGE_CBO_PRE.DIMENSION_UOM_ID,
WM_ITEM_PACKAGE_CBO_PRE.VOLUME,
WM_ITEM_PACKAGE_CBO_PRE.VOLUME_UOM_ID,
WM_ITEM_PACKAGE_CBO_PRE.LENGTH,
WM_ITEM_PACKAGE_CBO_PRE.HEIGHT,
WM_ITEM_PACKAGE_CBO_PRE.WIDTH,
WM_ITEM_PACKAGE_CBO_PRE.HIBERNATE_VERSION,
WM_ITEM_PACKAGE_CBO_PRE.IS_STD,
WM_ITEM_PACKAGE_CBO_PRE.BUSINESS_PARTNER_ID,
WM_ITEM_PACKAGE_CBO_PRE.LOAD_TSTMP
FROM WM_ITEM_PACKAGE_CBO_PRE""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node EXP_INT_CONV, type EXPRESSION . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 25

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE_temp = SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE.toDF(*["SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___" + col for col in SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE.columns])

EXP_INT_CONV = SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE_temp.selectExpr( \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___DC_NBR as in_DC_NBR", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___ITEM_PACKAGE_ID as ITEM_PACKAGE_ID", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___ITEM_ID as ITEM_ID", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___PACKAGE_UOM_ID as PACKAGE_UOM_ID", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___QUANTITY as QUANTITY", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___WEIGHT as WEIGHT", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___WEIGHT_UOM_ID as WEIGHT_UOM_ID", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___GTIN as GTIN", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___AUDIT_CREATED_SOURCE as AUDIT_CREATED_SOURCE", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___AUDIT_CREATED_SOURCE_TYPE as AUDIT_CREATED_SOURCE_TYPE", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___AUDIT_CREATED_DTTM as AUDIT_CREATED_DTTM", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___AUDIT_LAST_UPDATED_SOURCE as AUDIT_LAST_UPDATED_SOURCE", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___AUDIT_LAST_UPDATED_SOURCE_TYPE as AUDIT_LAST_UPDATED_SOURCE_TYPE", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___AUDIT_LAST_UPDATED_DTTM as AUDIT_LAST_UPDATED_DTTM", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___MARK_FOR_DELETION as MARK_FOR_DELETION", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___DIMENSION_UOM_ID as DIMENSION_UOM_ID", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___VOLUME as VOLUME", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___VOLUME_UOM_ID as VOLUME_UOM_ID", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___LENGTH as LENGTH", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___HEIGHT as HEIGHT", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___WIDTH as WIDTH", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___HIBERNATE_VERSION as HIBERNATE_VERSION", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___IS_STD as IS_STD", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___BUSINESS_PARTNER_ID as BUSINESS_PARTNER_ID", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___LOAD_TSTMP as LOAD_TSTMP").selectExpr( \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___sys_row_id as sys_row_id", \
	"cast(SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___in_DC_NBR as int) as DC_NBR", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___ITEM_PACKAGE_ID as ITEM_PACKAGE_ID", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___ITEM_ID as ITEM_ID", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___PACKAGE_UOM_ID as PACKAGE_UOM_ID", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___QUANTITY as QUANTITY", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___WEIGHT as WEIGHT", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___WEIGHT_UOM_ID as WEIGHT_UOM_ID", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___GTIN as GTIN", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___AUDIT_CREATED_SOURCE as AUDIT_CREATED_SOURCE", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___AUDIT_CREATED_SOURCE_TYPE as AUDIT_CREATED_SOURCE_TYPE", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___AUDIT_CREATED_DTTM as AUDIT_CREATED_DTTM", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___AUDIT_LAST_UPDATED_SOURCE as AUDIT_LAST_UPDATED_SOURCE", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___AUDIT_LAST_UPDATED_SOURCE_TYPE as AUDIT_LAST_UPDATED_SOURCE_TYPE", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___AUDIT_LAST_UPDATED_DTTM as AUDIT_LAST_UPDATED_DTTM", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___MARK_FOR_DELETION as MARK_FOR_DELETION", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___DIMENSION_UOM_ID as DIMENSION_UOM_ID", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___VOLUME as VOLUME", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___VOLUME_UOM_ID as VOLUME_UOM_ID", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___LENGTH as LENGTH", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___HEIGHT as HEIGHT", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___WIDTH as WIDTH", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___HIBERNATE_VERSION as HIBERNATE_VERSION", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___IS_STD as IS_STD", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___BUSINESS_PARTNER_ID as BUSINESS_PARTNER_ID", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_PRE___LOAD_TSTMP as LOAD_TSTMP" \
)

# COMMAND ----------
# Processing node SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO, type SOURCE 
# COLUMN COUNT: 5

SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO = spark.sql(f"""SELECT
WM_ITEM_PACKAGE_CBO.LOCATION_ID,
WM_ITEM_PACKAGE_CBO.WM_ITEM_PACKAGE_ID,
WM_ITEM_PACKAGE_CBO.WM_CREATED_TSTMP,
WM_ITEM_PACKAGE_CBO.WM_LAST_UPDATED_TSTMP,
WM_ITEM_PACKAGE_CBO.LOAD_TSTMP
FROM WM_ITEM_PACKAGE_CBO
WHERE WM_ITEM_PACKAGE_ID IN (SELECT ITEM_PACKAGE_ID FROM WM_ITEM_PACKAGE_CBO_PRE)""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node SQ_Shortcut_to_SITE_PROFILE, type SOURCE 
# COLUMN COUNT: 2

SQ_Shortcut_to_SITE_PROFILE = spark.sql(f"""SELECT
SITE_PROFILE.LOCATION_ID,
SITE_PROFILE.STORE_NBR
FROM SITE_PROFILE""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node JNR_SITE_PROFILE, type JOINER 
# COLUMN COUNT: 27

JNR_SITE_PROFILE = SQ_Shortcut_to_SITE_PROFILE.join(EXP_INT_CONV,[SQ_Shortcut_to_SITE_PROFILE.STORE_NBR == EXP_INT_CONV.DC_NBR],'inner')

# COMMAND ----------
# Processing node JNR_WM_ITEM_PACK_CBO, type JOINER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 29

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_temp = SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO.toDF(*["SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO___" + col for col in SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO.columns])
JNR_SITE_PROFILE_temp = JNR_SITE_PROFILE.toDF(*["JNR_SITE_PROFILE___" + col for col in JNR_SITE_PROFILE.columns])

JNR_WM_ITEM_PACK_CBO = SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_temp.join(JNR_SITE_PROFILE_temp,[SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_temp.SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO___LOCATION_ID == JNR_SITE_PROFILE_temp.JNR_SITE_PROFILE___LOCATION_ID, SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO_temp.SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO___WM_ITEM_PACKAGE_ID == JNR_SITE_PROFILE_temp.JNR_SITE_PROFILE___ITEM_PACKAGE_ID],'right_outer').selectExpr( \
	"JNR_SITE_PROFILE___LOCATION_ID as LOCATION_ID", \
	"JNR_SITE_PROFILE___ITEM_PACKAGE_ID as ITEM_PACKAGE_ID", \
	"JNR_SITE_PROFILE___ITEM_ID as ITEM_ID", \
	"JNR_SITE_PROFILE___PACKAGE_UOM_ID as PACKAGE_UOM_ID", \
	"JNR_SITE_PROFILE___QUANTITY as QUANTITY", \
	"JNR_SITE_PROFILE___WEIGHT as WEIGHT", \
	"JNR_SITE_PROFILE___WEIGHT_UOM_ID as WEIGHT_UOM_ID", \
	"JNR_SITE_PROFILE___GTIN as GTIN", \
	"JNR_SITE_PROFILE___AUDIT_CREATED_SOURCE as AUDIT_CREATED_SOURCE", \
	"JNR_SITE_PROFILE___AUDIT_CREATED_SOURCE_TYPE as AUDIT_CREATED_SOURCE_TYPE", \
	"JNR_SITE_PROFILE___AUDIT_CREATED_DTTM as AUDIT_CREATED_DTTM", \
	"JNR_SITE_PROFILE___AUDIT_LAST_UPDATED_SOURCE as AUDIT_LAST_UPDATED_SOURCE", \
	"JNR_SITE_PROFILE___AUDIT_LAST_UPDATED_SOURCE_TYPE as AUDIT_LAST_UPDATED_SOURCE_TYPE", \
	"JNR_SITE_PROFILE___AUDIT_LAST_UPDATED_DTTM as AUDIT_LAST_UPDATED_DTTM", \
	"JNR_SITE_PROFILE___MARK_FOR_DELETION as MARK_FOR_DELETION", \
	"JNR_SITE_PROFILE___DIMENSION_UOM_ID as DIMENSION_UOM_ID", \
	"JNR_SITE_PROFILE___VOLUME as VOLUME", \
	"JNR_SITE_PROFILE___VOLUME_UOM_ID as VOLUME_UOM_ID", \
	"JNR_SITE_PROFILE___LENGTH as LENGTH", \
	"JNR_SITE_PROFILE___HEIGHT as HEIGHT", \
	"JNR_SITE_PROFILE___WIDTH as WIDTH", \
	"JNR_SITE_PROFILE___HIBERNATE_VERSION as HIBERNATE_VERSION", \
	"JNR_SITE_PROFILE___IS_STD as IS_STD", \
	"JNR_SITE_PROFILE___BUSINESS_PARTNER_ID as BUSINESS_PARTNER_ID", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO___LOCATION_ID as in_LOCATION_ID", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO___WM_ITEM_PACKAGE_ID as in_WM_ITEM_PACKAGE_ID", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO___LOAD_TSTMP as in_LOAD_TSTMP", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO___WM_CREATED_TSTMP as WM_CREATED_TSTMP", \
	"SQ_Shortcut_to_WM_ITEM_PACKAGE_CBO___WM_LAST_UPDATED_TSTMP as WM_LAST_UPDATED_TSTMP")

# COMMAND ----------
# Processing node FIL_NO_CHANGE_REC, type FILTER 
# COLUMN COUNT: 29

# for each involved DataFrame, append the dataframe name to each column
JNR_WM_ITEM_PACK_CBO_temp = JNR_WM_ITEM_PACK_CBO.toDF(*["JNR_WM_ITEM_PACK_CBO___" + col for col in JNR_WM_ITEM_PACK_CBO.columns])

FIL_NO_CHANGE_REC = JNR_WM_ITEM_PACK_CBO_temp.selectExpr( \
	"JNR_WM_ITEM_PACK_CBO___LOCATION_ID as LOCATION_ID", \
	"JNR_WM_ITEM_PACK_CBO___ITEM_PACKAGE_ID as ITEM_PACKAGE_ID", \
	"JNR_WM_ITEM_PACK_CBO___ITEM_ID as ITEM_ID", \
	"JNR_WM_ITEM_PACK_CBO___PACKAGE_UOM_ID as PACKAGE_UOM_ID", \
	"JNR_WM_ITEM_PACK_CBO___QUANTITY as QUANTITY", \
	"JNR_WM_ITEM_PACK_CBO___WEIGHT as WEIGHT", \
	"JNR_WM_ITEM_PACK_CBO___WEIGHT_UOM_ID as WEIGHT_UOM_ID", \
	"JNR_WM_ITEM_PACK_CBO___GTIN as GTIN", \
	"JNR_WM_ITEM_PACK_CBO___AUDIT_CREATED_SOURCE as AUDIT_CREATED_SOURCE", \
	"JNR_WM_ITEM_PACK_CBO___AUDIT_CREATED_SOURCE_TYPE as AUDIT_CREATED_SOURCE_TYPE", \
	"JNR_WM_ITEM_PACK_CBO___AUDIT_CREATED_DTTM as AUDIT_CREATED_DTTM", \
	"JNR_WM_ITEM_PACK_CBO___AUDIT_LAST_UPDATED_SOURCE as AUDIT_LAST_UPDATED_SOURCE", \
	"JNR_WM_ITEM_PACK_CBO___AUDIT_LAST_UPDATED_SOURCE_TYPE as AUDIT_LAST_UPDATED_SOURCE_TYPE", \
	"JNR_WM_ITEM_PACK_CBO___AUDIT_LAST_UPDATED_DTTM as AUDIT_LAST_UPDATED_DTTM", \
	"JNR_WM_ITEM_PACK_CBO___MARK_FOR_DELETION as MARK_FOR_DELETION", \
	"JNR_WM_ITEM_PACK_CBO___DIMENSION_UOM_ID as DIMENSION_UOM_ID", \
	"JNR_WM_ITEM_PACK_CBO___VOLUME as VOLUME", \
	"JNR_WM_ITEM_PACK_CBO___VOLUME_UOM_ID as VOLUME_UOM_ID", \
	"JNR_WM_ITEM_PACK_CBO___LENGTH as LENGTH", \
	"JNR_WM_ITEM_PACK_CBO___HEIGHT as HEIGHT", \
	"JNR_WM_ITEM_PACK_CBO___WIDTH as WIDTH", \
	"JNR_WM_ITEM_PACK_CBO___HIBERNATE_VERSION as HIBERNATE_VERSION", \
	"JNR_WM_ITEM_PACK_CBO___IS_STD as IS_STD", \
	"JNR_WM_ITEM_PACK_CBO___BUSINESS_PARTNER_ID as BUSINESS_PARTNER_ID", \
	"JNR_WM_ITEM_PACK_CBO___in_LOCATION_ID as in_LOCATION_ID", \
	"JNR_WM_ITEM_PACK_CBO___in_WM_ITEM_PACKAGE_ID as in_WM_ITEM_PACKAGE_ID", \
	"JNR_WM_ITEM_PACK_CBO___in_LOAD_TSTMP as in_LOAD_TSTMP", \
	"JNR_WM_ITEM_PACK_CBO___WM_CREATED_TSTMP as WM_CREATED_TSTMP", \
	"JNR_WM_ITEM_PACK_CBO___WM_LAST_UPDATED_TSTMP as WM_LAST_UPDATED_TSTMP")\
    .filter("in_WM_ITEM_PACKAGE_ID is Null OR (in_WM_ITEM_PACKAGE_ID is not Null AND\
     ( COALESCE(AUDIT_CREATED_DTTM, date'1900-01-01') != COALESCE(WM_CREATED_TSTMP, date'1900-01-01') \
    OR COALESCE(AUDIT_LAST_UPDATED_DTTM, date'1900-01-01') != COALESCE(WM_LAST_UPDATED_TSTMP, date'1900-01-01')))").withColumn("sys_row_id", monotonically_increasing_id())


# COMMAND ----------
# Processing node EXP_EVALUATE, type EXPRESSION . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 27

# for each involved DataFrame, append the dataframe name to each column
FIL_NO_CHANGE_REC_temp = FIL_NO_CHANGE_REC.toDF(*["FIL_NO_CHANGE_REC___" + col for col in FIL_NO_CHANGE_REC.columns])

EXP_EVALUATE = FIL_NO_CHANGE_REC_temp.selectExpr( \
	"FIL_NO_CHANGE_REC___LOCATION_ID as LOCATION_ID", \
	"FIL_NO_CHANGE_REC___ITEM_PACKAGE_ID as ITEM_PACKAGE_ID", \
	"FIL_NO_CHANGE_REC___ITEM_ID as ITEM_ID", \
	"FIL_NO_CHANGE_REC___PACKAGE_UOM_ID as PACKAGE_UOM_ID", \
	"FIL_NO_CHANGE_REC___QUANTITY as QUANTITY", \
	"FIL_NO_CHANGE_REC___WEIGHT as WEIGHT", \
	"FIL_NO_CHANGE_REC___WEIGHT_UOM_ID as WEIGHT_UOM_ID", \
	"FIL_NO_CHANGE_REC___GTIN as GTIN1", \
	"FIL_NO_CHANGE_REC___AUDIT_CREATED_SOURCE as AUDIT_CREATED_SOURCE", \
	"FIL_NO_CHANGE_REC___AUDIT_CREATED_SOURCE_TYPE as AUDIT_CREATED_SOURCE_TYPE", \
	"FIL_NO_CHANGE_REC___AUDIT_CREATED_DTTM as AUDIT_CREATED_DTTM", \
	"FIL_NO_CHANGE_REC___AUDIT_LAST_UPDATED_SOURCE as AUDIT_LAST_UPDATED_SOURCE", \
	"FIL_NO_CHANGE_REC___AUDIT_LAST_UPDATED_SOURCE_TYPE as AUDIT_LAST_UPDATED_SOURCE_TYPE", \
	"FIL_NO_CHANGE_REC___AUDIT_LAST_UPDATED_DTTM as AUDIT_LAST_UPDATED_DTTM", \
	"FIL_NO_CHANGE_REC___MARK_FOR_DELETION as MARK_FOR_DELETION", \
	"FIL_NO_CHANGE_REC___DIMENSION_UOM_ID as DIMENSION_UOM_ID", \
	"FIL_NO_CHANGE_REC___VOLUME as VOLUME", \
	"FIL_NO_CHANGE_REC___VOLUME_UOM_ID as VOLUME_UOM_ID", \
	"FIL_NO_CHANGE_REC___LENGTH as LENGTH", \
	"FIL_NO_CHANGE_REC___HEIGHT as HEIGHT", \
	"FIL_NO_CHANGE_REC___WIDTH as WIDTH", \
	"FIL_NO_CHANGE_REC___HIBERNATE_VERSION as HIBERNATE_VERSION", \
	"FIL_NO_CHANGE_REC___IS_STD as IS_STD1", \
	"FIL_NO_CHANGE_REC___BUSINESS_PARTNER_ID as BUSINESS_PARTNER_ID", \
	"FIL_NO_CHANGE_REC___in_LOAD_TSTMP as in_LOAD_TSTMP", \
	"FIL_NO_CHANGE_REC___in_WM_ITEM_PACKAGE_ID as in_WM_ITEM_PACKAGE_ID").selectExpr( \
	"FIL_NO_CHANGE_REC___sys_row_id as sys_row_id", \
	"FIL_NO_CHANGE_REC___LOCATION_ID as LOCATION_ID", \
	"FIL_NO_CHANGE_REC___ITEM_PACKAGE_ID as ITEM_PACKAGE_ID", \
	"FIL_NO_CHANGE_REC___ITEM_ID as ITEM_ID", \
	"FIL_NO_CHANGE_REC___PACKAGE_UOM_ID as PACKAGE_UOM_ID", \
	"FIL_NO_CHANGE_REC___QUANTITY as QUANTITY", \
	"FIL_NO_CHANGE_REC___WEIGHT as WEIGHT", \
	"FIL_NO_CHANGE_REC___WEIGHT_UOM_ID as WEIGHT_UOM_ID", \
	"FIL_NO_CHANGE_REC___GTIN1 as GTIN1", \
	"FIL_NO_CHANGE_REC___AUDIT_CREATED_SOURCE as AUDIT_CREATED_SOURCE", \
	"FIL_NO_CHANGE_REC___AUDIT_CREATED_SOURCE_TYPE as AUDIT_CREATED_SOURCE_TYPE", \
	"FIL_NO_CHANGE_REC___AUDIT_CREATED_DTTM as AUDIT_CREATED_DTTM", \
	"FIL_NO_CHANGE_REC___AUDIT_LAST_UPDATED_SOURCE as AUDIT_LAST_UPDATED_SOURCE", \
	"FIL_NO_CHANGE_REC___AUDIT_LAST_UPDATED_SOURCE_TYPE as AUDIT_LAST_UPDATED_SOURCE_TYPE", \
	"FIL_NO_CHANGE_REC___AUDIT_LAST_UPDATED_DTTM as AUDIT_LAST_UPDATED_DTTM", \
	"FIL_NO_CHANGE_REC___MARK_FOR_DELETION as MARK_FOR_DELETION", \
	"FIL_NO_CHANGE_REC___DIMENSION_UOM_ID as DIMENSION_UOM_ID", \
	"FIL_NO_CHANGE_REC___VOLUME as VOLUME", \
	"FIL_NO_CHANGE_REC___VOLUME_UOM_ID as VOLUME_UOM_ID", \
	"FIL_NO_CHANGE_REC___LENGTH as LENGTH", \
	"FIL_NO_CHANGE_REC___HEIGHT as HEIGHT", \
	"FIL_NO_CHANGE_REC___WIDTH as WIDTH", \
	"FIL_NO_CHANGE_REC___HIBERNATE_VERSION as HIBERNATE_VERSION", \
	"decode ( ltrim ( rtrim ( upper ( FIL_NO_CHANGE_REC___IS_STD1 ) ) ) , '1','1' , 'Y','1','0' ) as IS_STD1_EXP", \
	"FIL_NO_CHANGE_REC___BUSINESS_PARTNER_ID as BUSINESS_PARTNER_ID", \
	"IF (FIL_NO_CHANGE_REC___in_LOAD_TSTMP IS NULL, CURRENT_TIMESTAMP, FIL_NO_CHANGE_REC___in_LOAD_TSTMP) as LOAD_TSTMP", \
	"CURRENT_TIMESTAMP as UPDATE_TSTMP", \
	"FIL_NO_CHANGE_REC___in_WM_ITEM_PACKAGE_ID as in_WM_ITEM_PACKAGE_ID" \
)

# COMMAND ----------
# Processing node UPD_INS_UPD, type UPDATE_STRATEGY . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 27

# for each involved DataFrame, append the dataframe name to each column
EXP_EVALUATE_temp = EXP_EVALUATE.toDF(*["EXP_EVALUATE___" + col for col in EXP_EVALUATE.columns])

UPD_INS_UPD = EXP_EVALUATE_temp.selectExpr( \
	"EXP_EVALUATE___LOCATION_ID as LOCATION_ID", \
	"EXP_EVALUATE___ITEM_PACKAGE_ID as ITEM_PACKAGE_ID", \
	"EXP_EVALUATE___ITEM_ID as ITEM_ID", \
	"EXP_EVALUATE___PACKAGE_UOM_ID as PACKAGE_UOM_ID", \
	"EXP_EVALUATE___QUANTITY as QUANTITY", \
	"EXP_EVALUATE___WEIGHT as WEIGHT", \
	"EXP_EVALUATE___WEIGHT_UOM_ID as WEIGHT_UOM_ID", \
	"EXP_EVALUATE___GTIN1 as GTIN1", \
	"EXP_EVALUATE___AUDIT_CREATED_SOURCE as AUDIT_CREATED_SOURCE", \
	"EXP_EVALUATE___AUDIT_CREATED_SOURCE_TYPE as AUDIT_CREATED_SOURCE_TYPE", \
	"EXP_EVALUATE___AUDIT_CREATED_DTTM as AUDIT_CREATED_DTTM", \
	"EXP_EVALUATE___AUDIT_LAST_UPDATED_SOURCE as AUDIT_LAST_UPDATED_SOURCE", \
	"EXP_EVALUATE___AUDIT_LAST_UPDATED_SOURCE_TYPE as AUDIT_LAST_UPDATED_SOURCE_TYPE", \
	"EXP_EVALUATE___AUDIT_LAST_UPDATED_DTTM as AUDIT_LAST_UPDATED_DTTM", \
	"EXP_EVALUATE___MARK_FOR_DELETION as MARK_FOR_DELETION", \
	"EXP_EVALUATE___DIMENSION_UOM_ID as DIMENSION_UOM_ID", \
	"EXP_EVALUATE___VOLUME as VOLUME", \
	"EXP_EVALUATE___VOLUME_UOM_ID as VOLUME_UOM_ID", \
	"EXP_EVALUATE___LENGTH as LENGTH", \
	"EXP_EVALUATE___HEIGHT as HEIGHT", \
	"EXP_EVALUATE___WIDTH as WIDTH", \
	"EXP_EVALUATE___HIBERNATE_VERSION as HIBERNATE_VERSION", \
	"EXP_EVALUATE___IS_STD1_EXP as IS_STD1", \
	"EXP_EVALUATE___BUSINESS_PARTNER_ID as BUSINESS_PARTNER_ID", \
	"EXP_EVALUATE___LOAD_TSTMP as LOAD_TSTMP", \
	"EXP_EVALUATE___UPDATE_TSTMP as UPDATE_TSTMP", \
	"EXP_EVALUATE___in_WM_ITEM_PACKAGE_ID as in_WM_ITEM_PACKAGE_ID") \
	.withColumn('pyspark_data_action', when((in_WM_ITEM_PACKAGE_ID.isNull()) ,(lit(0))) .otherwise(lit(1)))

# COMMAND ----------
# Processing node Shortcut_to_WM_ITEM_PACKAGE_CBO, type TARGET 
# COLUMN COUNT: 26

try:
  primary_key = """source.LOCATION_ID = target.LOCATION_ID AND source.WM_ITEM_PACKAGE_ID = target.WM_ITEM_PACKAGE_ID"""
  refined_perf_table = "WM_ITEM_PACKAGE_CBO"
  executeMerge(UPD_INS_UPD, refined_perf_table, primary_key)
  logger.info(f"Merge with {refined_perf_table} completed]")
  logPrevRunDt("WM_ITEM_PACKAGE_CBO", "WM_ITEM_PACKAGE_CBO", "Completed", "N/A", f"{raw}.log_run_details")
except Exception as e:
  logPrevRunDt("WM_ITEM_PACKAGE_CBO", "WM_ITEM_PACKAGE_CBO","Failed",str(e), f"{raw}.log_run_details", )
  raise e
	