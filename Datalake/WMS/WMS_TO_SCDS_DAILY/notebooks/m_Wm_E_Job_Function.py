#Code converted on 2023-06-26 09:56:56
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from pyspark.dbutils import DBUtils
from Datalake.utils.genericUtilities import *
from Datalake.utils.configs import *
from Datalake.utils.mergeUtils import *
from Datalake.utils.logger import *
# COMMAND ----------

parser = argparse.ArgumentParser()
spark = SparkSession.getActiveSession()
dbutils = DBUtils(spark)

parser.add_argument('env', type=str, help='Env Variable')
# args = parser.parse_args()
# env = args.env
env = 'dev'

if env is None or env == '':
    raise ValueError('env is not set')

refine = getEnvPrefix(env) + 'refine'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'

# Set global variables
starttime = datetime.now() #start timestamp of the script
refined_perf_table = f"{refine}.WM_E_JOB_FUNCTION"
raw_perf_table = f"{raw}.WM_E_JOB_FUNCTION_PRE"
site_profile_table = f"{legacy}.SITE_PROFILE"


# COMMAND ----------
# Processing node SQ_Shortcut_to_WM_E_JOB_FUNCTION, type SOURCE 
# COLUMN COUNT: 7

SQ_Shortcut_to_WM_E_JOB_FUNCTION = spark.sql(f"""SELECT
LOCATION_ID,
WM_JOB_FUNCTION_ID,
WM_CREATED_TSTMP,
WM_LAST_UPDATED_TSTMP,
WM_CREATE_TSTMP,
WM_MOD_TSTMP,
LOAD_TSTMP
FROM {refined_perf_table}
WHERE WM_JOB_FUNCTION_ID IN (SELECT JOB_FUNC_ID FROM {raw_perf_table})""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE, type SOURCE 
# COLUMN COUNT: 51

SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE = spark.sql(f"""SELECT
DC_NBR,
JOB_FUNC_ID,
NAME,
DESCRIPTION,
STARTUP_TIME,
CLEANUP_TIME,
CREATE_DATE_TIME,
MOD_DATE_TIME,
USER_ID,
WHSE,
TRANSITION_START_TIME,
TRANSITION_END_TIME,
JF_TYPE,
LEVEL_1,
LEVEL_2,
LEVEL_3,
LEVEL_4,
LEVEL_5,
OPS_CODE_ID,
APPLY_TEAM_SETUP_TIME,
TEAM_STARTUP_TIME,
TEAM_CLEANUP_TIME,
TEAM_TRANSITION_START_TIME,
TEAM_TRANSITION_END_TIME,
MISC_TXT_1,
MISC_TXT_2,
MISC_NUM_1,
MISC_NUM_2,
DFLT_PROC_ZONE_ID,
PROC_ZONE_TEMPL_ID,
MSRMNT_ID,
VERSION_ID,
OBS_THRESHOLD_EP,
TRACK_HIST_TIME,
TRAIN_PERIOD,
RETRAIN_PERIOD,
OS_ONLY,
RETRAIN_REQ_DURATION,
PERF_GOAL_IND,
TRAINING_REQD,
USE_JF_TRAIN,
PERF_EVAL_PERIOD_ID,
DFLT_MAX_OCCUPANCY,
UNQ_SEED_ID,
DEFAULT_ACT_ID,
CREATED_DTTM,
LAST_UPDATED_DTTM,
PLAN_EP,
WHSE_VISIBILITY_GROUP,
DEPT_CODE,
LOAD_TSTMP
FROM {raw_perf_table}""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node EXP_TRANS, type EXPRESSION 
# COLUMN COUNT: 52

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE_temp = SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE.toDF(*["SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___" + col for col in SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE.columns])

EXP_TRANS = SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE_temp.selectExpr( \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___sys_row_id as sys_row_id", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___DC_NBR as DC_NBR", \
	"cast(SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___DC_NBR as int) as o_DC_NBR", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___JOB_FUNC_ID as JOB_FUNC_ID", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___NAME as NAME", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___DESCRIPTION as DESCRIPTION", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___STARTUP_TIME as STARTUP_TIME", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___CLEANUP_TIME as CLEANUP_TIME", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___CREATE_DATE_TIME as CREATE_DATE_TIME", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___MOD_DATE_TIME as MOD_DATE_TIME", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___USER_ID as USER_ID", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___WHSE as WHSE", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___TRANSITION_START_TIME as TRANSITION_START_TIME", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___TRANSITION_END_TIME as TRANSITION_END_TIME", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___JF_TYPE as JF_TYPE", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___LEVEL_1 as LEVEL_1", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___LEVEL_2 as LEVEL_2", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___LEVEL_3 as LEVEL_3", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___LEVEL_4 as LEVEL_4", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___LEVEL_5 as LEVEL_5", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___OPS_CODE_ID as OPS_CODE_ID", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___APPLY_TEAM_SETUP_TIME as APPLY_TEAM_SETUP_TIME", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___TEAM_STARTUP_TIME as TEAM_STARTUP_TIME", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___TEAM_CLEANUP_TIME as TEAM_CLEANUP_TIME", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___TEAM_TRANSITION_START_TIME as TEAM_TRANSITION_START_TIME", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___TEAM_TRANSITION_END_TIME as TEAM_TRANSITION_END_TIME", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___MISC_TXT_1 as MISC_TXT_1", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___MISC_TXT_2 as MISC_TXT_2", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___MISC_NUM_1 as MISC_NUM_1", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___MISC_NUM_2 as MISC_NUM_2", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___DFLT_PROC_ZONE_ID as DFLT_PROC_ZONE_ID", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___PROC_ZONE_TEMPL_ID as PROC_ZONE_TEMPL_ID", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___MSRMNT_ID as MSRMNT_ID", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___VERSION_ID as VERSION_ID", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___OBS_THRESHOLD_EP as OBS_THRESHOLD_EP", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___TRACK_HIST_TIME as TRACK_HIST_TIME", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___TRAIN_PERIOD as TRAIN_PERIOD", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___RETRAIN_PERIOD as RETRAIN_PERIOD", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___OS_ONLY as OS_ONLY", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___RETRAIN_REQ_DURATION as RETRAIN_REQ_DURATION", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___PERF_GOAL_IND as PERF_GOAL_IND", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___TRAINING_REQD as TRAINING_REQD", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___USE_JF_TRAIN as USE_JF_TRAIN", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___PERF_EVAL_PERIOD_ID as PERF_EVAL_PERIOD_ID", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___DFLT_MAX_OCCUPANCY as DFLT_MAX_OCCUPANCY", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___UNQ_SEED_ID as UNQ_SEED_ID", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___DEFAULT_ACT_ID as DEFAULT_ACT_ID", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___CREATED_DTTM as CREATED_DTTM", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___PLAN_EP as PLAN_EP", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___WHSE_VISIBILITY_GROUP as WHSE_VISIBILITY_GROUP", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___DEPT_CODE as DEPT_CODE", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION_PRE___LOAD_TSTMP as LOAD_TSTMP" \
)

# COMMAND ----------
# Processing node SQ_Shortcut_to_SITE_PROFILE, type SOURCE 
# COLUMN COUNT: 2

SQ_Shortcut_to_SITE_PROFILE = spark.sql(f"""SELECT LOCATION_ID, STORE_NBR FROM {site_profile_table}""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node JNR_SITE_PROFILE, type JOINER 
# COLUMN COUNT: 53

JNR_SITE_PROFILE = SQ_Shortcut_to_SITE_PROFILE.join(EXP_TRANS,[SQ_Shortcut_to_SITE_PROFILE.STORE_NBR == EXP_TRANS.o_DC_NBR],'inner')

# COMMAND ----------
# Processing node JNR_WM_E_JOB_FUNCTION, type JOINER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 57

# for each involved DataFrame, append the dataframe name to each column
JNR_SITE_PROFILE_temp = JNR_SITE_PROFILE.toDF(*["JNR_SITE_PROFILE___" + col for col in JNR_SITE_PROFILE.columns])
SQ_Shortcut_to_WM_E_JOB_FUNCTION_temp = SQ_Shortcut_to_WM_E_JOB_FUNCTION.toDF(*["SQ_Shortcut_to_WM_E_JOB_FUNCTION___" + col for col in SQ_Shortcut_to_WM_E_JOB_FUNCTION.columns])

JNR_WM_E_JOB_FUNCTION = SQ_Shortcut_to_WM_E_JOB_FUNCTION_temp.join(JNR_SITE_PROFILE_temp,[SQ_Shortcut_to_WM_E_JOB_FUNCTION_temp.SQ_Shortcut_to_WM_E_JOB_FUNCTION___LOCATION_ID == JNR_SITE_PROFILE_temp.JNR_SITE_PROFILE___LOCATION_ID, SQ_Shortcut_to_WM_E_JOB_FUNCTION_temp.SQ_Shortcut_to_WM_E_JOB_FUNCTION___WM_JOB_FUNCTION_ID == JNR_SITE_PROFILE_temp.JNR_SITE_PROFILE___JOB_FUNC_ID],'right_outer').selectExpr( \
	"JNR_SITE_PROFILE___LOCATION_ID as LOCATION_ID", \
	"JNR_SITE_PROFILE___JOB_FUNC_ID as JOB_FUNC_ID", \
	"JNR_SITE_PROFILE___NAME as NAME", \
	"JNR_SITE_PROFILE___DESCRIPTION as DESCRIPTION", \
	"JNR_SITE_PROFILE___STARTUP_TIME as STARTUP_TIME", \
	"JNR_SITE_PROFILE___CLEANUP_TIME as CLEANUP_TIME", \
	"JNR_SITE_PROFILE___CREATE_DATE_TIME as CREATE_DATE_TIME", \
	"JNR_SITE_PROFILE___MOD_DATE_TIME as MOD_DATE_TIME", \
	"JNR_SITE_PROFILE___USER_ID as USER_ID", \
	"JNR_SITE_PROFILE___WHSE as WHSE", \
	"JNR_SITE_PROFILE___TRANSITION_START_TIME as TRANSITION_START_TIME", \
	"JNR_SITE_PROFILE___TRANSITION_END_TIME as TRANSITION_END_TIME", \
	"JNR_SITE_PROFILE___JF_TYPE as JF_TYPE", \
	"JNR_SITE_PROFILE___LEVEL_1 as LEVEL_1", \
	"JNR_SITE_PROFILE___LEVEL_2 as LEVEL_2", \
	"JNR_SITE_PROFILE___LEVEL_3 as LEVEL_3", \
	"JNR_SITE_PROFILE___LEVEL_4 as LEVEL_4", \
	"JNR_SITE_PROFILE___LEVEL_5 as LEVEL_5", \
	"JNR_SITE_PROFILE___OPS_CODE_ID as OPS_CODE_ID", \
	"JNR_SITE_PROFILE___APPLY_TEAM_SETUP_TIME as APPLY_TEAM_SETUP_TIME", \
	"JNR_SITE_PROFILE___TEAM_STARTUP_TIME as TEAM_STARTUP_TIME", \
	"JNR_SITE_PROFILE___TEAM_CLEANUP_TIME as TEAM_CLEANUP_TIME", \
	"JNR_SITE_PROFILE___TEAM_TRANSITION_START_TIME as TEAM_TRANSITION_START_TIME", \
	"JNR_SITE_PROFILE___TEAM_TRANSITION_END_TIME as TEAM_TRANSITION_END_TIME", \
	"JNR_SITE_PROFILE___MISC_TXT_1 as MISC_TXT_1", \
	"JNR_SITE_PROFILE___MISC_TXT_2 as MISC_TXT_2", \
	"JNR_SITE_PROFILE___MISC_NUM_1 as MISC_NUM_1", \
	"JNR_SITE_PROFILE___MISC_NUM_2 as MISC_NUM_2", \
	"JNR_SITE_PROFILE___DFLT_PROC_ZONE_ID as DFLT_PROC_ZONE_ID", \
	"JNR_SITE_PROFILE___PROC_ZONE_TEMPL_ID as PROC_ZONE_TEMPL_ID", \
	"JNR_SITE_PROFILE___MSRMNT_ID as MSRMNT_ID", \
	"JNR_SITE_PROFILE___VERSION_ID as VERSION_ID", \
	"JNR_SITE_PROFILE___OBS_THRESHOLD_EP as OBS_THRESHOLD_EP", \
	"JNR_SITE_PROFILE___TRACK_HIST_TIME as TRACK_HIST_TIME", \
	"JNR_SITE_PROFILE___TRAIN_PERIOD as TRAIN_PERIOD", \
	"JNR_SITE_PROFILE___RETRAIN_PERIOD as RETRAIN_PERIOD", \
	"JNR_SITE_PROFILE___OS_ONLY as OS_ONLY", \
	"JNR_SITE_PROFILE___RETRAIN_REQ_DURATION as RETRAIN_REQ_DURATION", \
	"JNR_SITE_PROFILE___PERF_GOAL_IND as PERF_GOAL_IND", \
	"JNR_SITE_PROFILE___TRAINING_REQD as TRAINING_REQD", \
	"JNR_SITE_PROFILE___USE_JF_TRAIN as USE_JF_TRAIN", \
	"JNR_SITE_PROFILE___PERF_EVAL_PERIOD_ID as PERF_EVAL_PERIOD_ID", \
	"JNR_SITE_PROFILE___DFLT_MAX_OCCUPANCY as DFLT_MAX_OCCUPANCY", \
	"JNR_SITE_PROFILE___UNQ_SEED_ID as UNQ_SEED_ID", \
	"JNR_SITE_PROFILE___DEFAULT_ACT_ID as DEFAULT_ACT_ID", \
	"JNR_SITE_PROFILE___CREATED_DTTM as CREATED_DTTM", \
	"JNR_SITE_PROFILE___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"JNR_SITE_PROFILE___PLAN_EP as PLAN_EP", \
	"JNR_SITE_PROFILE___WHSE_VISIBILITY_GROUP as WHSE_VISIBILITY_GROUP", \
	"JNR_SITE_PROFILE___DEPT_CODE as DEPT_CODE", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION___LOCATION_ID as i_LOCATION_ID", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION___WM_JOB_FUNCTION_ID as i_WM_JOB_FUNCTION_ID", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION___WM_CREATED_TSTMP as i_WM_CREATED_TSTMP", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION___WM_LAST_UPDATED_TSTMP as i_WM_LAST_UPDATED_TSTMP", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION___WM_CREATE_TSTMP as i_WM_CREATE_TSTMP", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION___WM_MOD_TSTMP as i_WM_MOD_TSTMP", \
	"SQ_Shortcut_to_WM_E_JOB_FUNCTION___LOAD_TSTMP as i_LOAD_TSTMP")

# COMMAND ----------
# Processing node FIL_UNCHANGED_RECORDS, type FILTER 
# COLUMN COUNT: 56

# for each involved DataFrame, append the dataframe name to each column
JNR_WM_E_JOB_FUNCTION_temp = JNR_WM_E_JOB_FUNCTION.toDF(*["JNR_WM_E_JOB_FUNCTION___" + col for col in JNR_WM_E_JOB_FUNCTION.columns])

FIL_UNCHANGED_RECORDS = JNR_WM_E_JOB_FUNCTION_temp.selectExpr( \
	"JNR_WM_E_JOB_FUNCTION___LOCATION_ID as LOCATION_ID", \
	"JNR_WM_E_JOB_FUNCTION___JOB_FUNC_ID as JOB_FUNC_ID", \
	"JNR_WM_E_JOB_FUNCTION___NAME as NAME", \
	"JNR_WM_E_JOB_FUNCTION___DESCRIPTION as DESCRIPTION", \
	"JNR_WM_E_JOB_FUNCTION___STARTUP_TIME as STARTUP_TIME", \
	"JNR_WM_E_JOB_FUNCTION___CLEANUP_TIME as CLEANUP_TIME", \
	"JNR_WM_E_JOB_FUNCTION___CREATE_DATE_TIME as CREATE_DATE_TIME", \
	"JNR_WM_E_JOB_FUNCTION___MOD_DATE_TIME as MOD_DATE_TIME", \
	"JNR_WM_E_JOB_FUNCTION___USER_ID as USER_ID", \
	"JNR_WM_E_JOB_FUNCTION___WHSE as WHSE", \
	"JNR_WM_E_JOB_FUNCTION___TRANSITION_START_TIME as TRANSITION_START_TIME", \
	"JNR_WM_E_JOB_FUNCTION___TRANSITION_END_TIME as TRANSITION_END_TIME", \
	"JNR_WM_E_JOB_FUNCTION___JF_TYPE as JF_TYPE", \
	"JNR_WM_E_JOB_FUNCTION___LEVEL_1 as LEVEL_1", \
	"JNR_WM_E_JOB_FUNCTION___LEVEL_2 as LEVEL_2", \
	"JNR_WM_E_JOB_FUNCTION___LEVEL_3 as LEVEL_3", \
	"JNR_WM_E_JOB_FUNCTION___LEVEL_4 as LEVEL_4", \
	"JNR_WM_E_JOB_FUNCTION___LEVEL_5 as LEVEL_5", \
	"JNR_WM_E_JOB_FUNCTION___OPS_CODE_ID as OPS_CODE_ID", \
	"JNR_WM_E_JOB_FUNCTION___APPLY_TEAM_SETUP_TIME as APPLY_TEAM_SETUP_TIME", \
	"JNR_WM_E_JOB_FUNCTION___TEAM_STARTUP_TIME as TEAM_STARTUP_TIME", \
	"JNR_WM_E_JOB_FUNCTION___TEAM_CLEANUP_TIME as TEAM_CLEANUP_TIME", \
	"JNR_WM_E_JOB_FUNCTION___TEAM_TRANSITION_START_TIME as TEAM_TRANSITION_START_TIME", \
	"JNR_WM_E_JOB_FUNCTION___TEAM_TRANSITION_END_TIME as TEAM_TRANSITION_END_TIME", \
	"JNR_WM_E_JOB_FUNCTION___MISC_TXT_1 as MISC_TXT_1", \
	"JNR_WM_E_JOB_FUNCTION___MISC_TXT_2 as MISC_TXT_2", \
	"JNR_WM_E_JOB_FUNCTION___MISC_NUM_1 as MISC_NUM_1", \
	"JNR_WM_E_JOB_FUNCTION___MISC_NUM_2 as MISC_NUM_2", \
	"JNR_WM_E_JOB_FUNCTION___DFLT_PROC_ZONE_ID as DFLT_PROC_ZONE_ID", \
	"JNR_WM_E_JOB_FUNCTION___PROC_ZONE_TEMPL_ID as PROC_ZONE_TEMPL_ID", \
	"JNR_WM_E_JOB_FUNCTION___MSRMNT_ID as MSRMNT_ID", \
	"JNR_WM_E_JOB_FUNCTION___VERSION_ID as VERSION_ID", \
	"JNR_WM_E_JOB_FUNCTION___OBS_THRESHOLD_EP as OBS_THRESHOLD_EP", \
	"JNR_WM_E_JOB_FUNCTION___TRACK_HIST_TIME as TRACK_HIST_TIME", \
	"JNR_WM_E_JOB_FUNCTION___TRAIN_PERIOD as TRAIN_PERIOD", \
	"JNR_WM_E_JOB_FUNCTION___RETRAIN_PERIOD as RETRAIN_PERIOD", \
	"JNR_WM_E_JOB_FUNCTION___OS_ONLY as OS_ONLY", \
	"JNR_WM_E_JOB_FUNCTION___RETRAIN_REQ_DURATION as RETRAIN_REQ_DURATION", \
	"JNR_WM_E_JOB_FUNCTION___PERF_GOAL_IND as PERF_GOAL_IND", \
	"JNR_WM_E_JOB_FUNCTION___TRAINING_REQD as TRAINING_REQD", \
	"JNR_WM_E_JOB_FUNCTION___USE_JF_TRAIN as USE_JF_TRAIN", \
	"JNR_WM_E_JOB_FUNCTION___PERF_EVAL_PERIOD_ID as PERF_EVAL_PERIOD_ID", \
	"JNR_WM_E_JOB_FUNCTION___DFLT_MAX_OCCUPANCY as DFLT_MAX_OCCUPANCY", \
	"JNR_WM_E_JOB_FUNCTION___UNQ_SEED_ID as UNQ_SEED_ID", \
	"JNR_WM_E_JOB_FUNCTION___DEFAULT_ACT_ID as DEFAULT_ACT_ID", \
	"JNR_WM_E_JOB_FUNCTION___CREATED_DTTM as CREATED_DTTM", \
	"JNR_WM_E_JOB_FUNCTION___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"JNR_WM_E_JOB_FUNCTION___PLAN_EP as PLAN_EP", \
	"JNR_WM_E_JOB_FUNCTION___WHSE_VISIBILITY_GROUP as WHSE_VISIBILITY_GROUP", \
	"JNR_WM_E_JOB_FUNCTION___DEPT_CODE as DEPT_CODE", \
	"JNR_WM_E_JOB_FUNCTION___i_WM_JOB_FUNCTION_ID as i_WM_JOB_FUNCTION_ID", \
	"JNR_WM_E_JOB_FUNCTION___i_WM_CREATED_TSTMP as i_WM_CREATED_TSTMP", \
	"JNR_WM_E_JOB_FUNCTION___i_WM_LAST_UPDATED_TSTMP as i_WM_LAST_UPDATED_TSTMP", \
	"JNR_WM_E_JOB_FUNCTION___i_WM_CREATE_TSTMP as i_WM_CREATE_TSTMP", \
	"JNR_WM_E_JOB_FUNCTION___i_WM_MOD_TSTMP as i_WM_MOD_TSTMP", \
	"JNR_WM_E_JOB_FUNCTION___i_LOAD_TSTMP as i_LOAD_TSTMP") \
    .filter("i_WM_JOB_FUNCTION_ID is Null OR (  i_WM_JOB_FUNCTION_ID is NOT Null AND ( COALESCE(CREATE_DATE_TIME, date'1900-01-01') != COALESCE(i_WM_CREATE_TSTMP, date'1900-01-01') \
             OR COALESCE(MOD_DATE_TIME, date'1900-01-01') != COALESCE(i_WM_MOD_TSTMP, date'1900-01-01') \
            OR COALESCE(CREATED_DTTM, date'1900-01-01') != COALESCE(i_WM_CREATED_TSTMP, date'1900-01-01') \
             OR COALESCE(LAST_UPDATED_DTTM, date'1900-01-01') != COALESCE(i_WM_LAST_UPDATED_TSTMP, date'1900-01-01')))").withColumn("sys_row_id", monotonically_increasing_id())


# COMMAND ----------
# Processing node EXP_UPD_VALIDATOR, type EXPRESSION 
# COLUMN COUNT: 61

# for each involved DataFrame, append the dataframe name to each column
FIL_UNCHANGED_RECORDS_temp = FIL_UNCHANGED_RECORDS.toDF(*["FIL_UNCHANGED_RECORDS___" + col for col in FIL_UNCHANGED_RECORDS.columns])

EXP_UPD_VALIDATOR = FIL_UNCHANGED_RECORDS_temp.selectExpr( \
	"FIL_UNCHANGED_RECORDS___sys_row_id as sys_row_id", \
	"FIL_UNCHANGED_RECORDS___LOCATION_ID as LOCATION_ID", \
	"FIL_UNCHANGED_RECORDS___JOB_FUNC_ID as JOB_FUNC_ID", \
	"FIL_UNCHANGED_RECORDS___NAME as NAME", \
	"FIL_UNCHANGED_RECORDS___DESCRIPTION as DESCRIPTION", \
	"FIL_UNCHANGED_RECORDS___STARTUP_TIME as STARTUP_TIME", \
	"FIL_UNCHANGED_RECORDS___CLEANUP_TIME as CLEANUP_TIME", \
	"FIL_UNCHANGED_RECORDS___CREATE_DATE_TIME as CREATE_DATE_TIME", \
	"FIL_UNCHANGED_RECORDS___MOD_DATE_TIME as MOD_DATE_TIME", \
	"FIL_UNCHANGED_RECORDS___USER_ID as USER_ID", \
	"FIL_UNCHANGED_RECORDS___WHSE as WHSE", \
	"FIL_UNCHANGED_RECORDS___TRANSITION_START_TIME as TRANSITION_START_TIME", \
	"FIL_UNCHANGED_RECORDS___TRANSITION_END_TIME as TRANSITION_END_TIME", \
	"FIL_UNCHANGED_RECORDS___JF_TYPE as JF_TYPE", \
	"FIL_UNCHANGED_RECORDS___LEVEL_1 as LEVEL_1", \
	"FIL_UNCHANGED_RECORDS___LEVEL_2 as LEVEL_2", \
	"FIL_UNCHANGED_RECORDS___LEVEL_3 as LEVEL_3", \
	"FIL_UNCHANGED_RECORDS___LEVEL_4 as LEVEL_4", \
	"FIL_UNCHANGED_RECORDS___LEVEL_5 as LEVEL_5", \
	"FIL_UNCHANGED_RECORDS___OPS_CODE_ID as OPS_CODE_ID", \
	"FIL_UNCHANGED_RECORDS___APPLY_TEAM_SETUP_TIME as APPLY_TEAM_SETUP_TIME", \
    "CASE WHEN TRIM(UPPER(FIL_UNCHANGED_RECORDS___APPLY_TEAM_SETUP_TIME)) IN ('Y', '1') THEN '1' ELSE '0' END as APPLY_TEAM_SETUP_TIME_O", \
	"FIL_UNCHANGED_RECORDS___TEAM_STARTUP_TIME as TEAM_STARTUP_TIME", \
	"FIL_UNCHANGED_RECORDS___TEAM_CLEANUP_TIME as TEAM_CLEANUP_TIME", \
	"FIL_UNCHANGED_RECORDS___TEAM_TRANSITION_START_TIME as TEAM_TRANSITION_START_TIME", \
	"FIL_UNCHANGED_RECORDS___TEAM_TRANSITION_END_TIME as TEAM_TRANSITION_END_TIME", \
	"FIL_UNCHANGED_RECORDS___MISC_TXT_1 as MISC_TXT_1", \
	"FIL_UNCHANGED_RECORDS___MISC_TXT_2 as MISC_TXT_2", \
	"FIL_UNCHANGED_RECORDS___MISC_NUM_1 as MISC_NUM_1", \
	"FIL_UNCHANGED_RECORDS___MISC_NUM_2 as MISC_NUM_2", \
	"FIL_UNCHANGED_RECORDS___DFLT_PROC_ZONE_ID as DFLT_PROC_ZONE_ID", \
	"FIL_UNCHANGED_RECORDS___PROC_ZONE_TEMPL_ID as PROC_ZONE_TEMPL_ID", \
	"FIL_UNCHANGED_RECORDS___MSRMNT_ID as MSRMNT_ID", \
	"FIL_UNCHANGED_RECORDS___VERSION_ID as VERSION_ID", \
	"FIL_UNCHANGED_RECORDS___OBS_THRESHOLD_EP as OBS_THRESHOLD_EP", \
	"FIL_UNCHANGED_RECORDS___TRACK_HIST_TIME as TRACK_HIST_TIME", \
    "CASE WHEN TRIM(UPPER(FIL_UNCHANGED_RECORDS___TRACK_HIST_TIME)) IN ('Y', '1') THEN '1' ELSE '0' END as TRACK_HIST_TIME_O", \
	"FIL_UNCHANGED_RECORDS___TRAIN_PERIOD as TRAIN_PERIOD", \
	"FIL_UNCHANGED_RECORDS___RETRAIN_PERIOD as RETRAIN_PERIOD", \
	"FIL_UNCHANGED_RECORDS___OS_ONLY as OS_ONLY", \
    "CASE WHEN TRIM(UPPER(FIL_UNCHANGED_RECORDS___OS_ONLY)) IN ('Y', '1') THEN '1' ELSE '0' END as OS_ONLY_O", \
	"FIL_UNCHANGED_RECORDS___RETRAIN_REQ_DURATION as RETRAIN_REQ_DURATION", \
	"FIL_UNCHANGED_RECORDS___PERF_GOAL_IND as PERF_GOAL_IND", \
    "CASE WHEN TRIM(UPPER(FIL_UNCHANGED_RECORDS___PERF_GOAL_IND)) IN ('Y', '1') THEN '1' ELSE '0' END as PERF_GOAL_IND_O", \
	"FIL_UNCHANGED_RECORDS___TRAINING_REQD as TRAINING_REQD", \
    "CASE WHEN TRIM(UPPER(FIL_UNCHANGED_RECORDS___TRAINING_REQD)) IN ('Y', '1') THEN '1' ELSE '0' END as TRAINING_REQD_O", \
	"FIL_UNCHANGED_RECORDS___USE_JF_TRAIN as USE_JF_TRAIN", \
    "CASE WHEN TRIM(UPPER(FIL_UNCHANGED_RECORDS___USE_JF_TRAIN)) IN ('Y', '1') THEN '1' ELSE '0' END as USE_JF_TRAIN_O", \
	"FIL_UNCHANGED_RECORDS___PERF_EVAL_PERIOD_ID as PERF_EVAL_PERIOD_ID", \
	"FIL_UNCHANGED_RECORDS___DFLT_MAX_OCCUPANCY as DFLT_MAX_OCCUPANCY", \
	"FIL_UNCHANGED_RECORDS___UNQ_SEED_ID as UNQ_SEED_ID", \
	"FIL_UNCHANGED_RECORDS___DEFAULT_ACT_ID as DEFAULT_ACT_ID", \
	"FIL_UNCHANGED_RECORDS___CREATED_DTTM as CREATED_DTTM", \
	"FIL_UNCHANGED_RECORDS___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"FIL_UNCHANGED_RECORDS___PLAN_EP as PLAN_EP", \
	"FIL_UNCHANGED_RECORDS___WHSE_VISIBILITY_GROUP as WHSE_VISIBILITY_GROUP", \
	"FIL_UNCHANGED_RECORDS___DEPT_CODE as DEPT_CODE", \
	"FIL_UNCHANGED_RECORDS___i_WM_JOB_FUNCTION_ID as i_WM_JOB_FUNCTION_ID", \
	"FIL_UNCHANGED_RECORDS___i_LOAD_TSTMP as i_LOAD_TSTMP", \
	"CURRENT_TIMESTAMP as UPDATE_TSTMP", \
	"IF(FIL_UNCHANGED_RECORDS___i_LOAD_TSTMP IS NULL, CURRENT_TIMESTAMP, FIL_UNCHANGED_RECORDS___i_LOAD_TSTMP) as LOAD_TSTMP", \
	"IF(FIL_UNCHANGED_RECORDS___i_WM_JOB_FUNCTION_ID IS NULL, 1, 2) as o_UPDATE_VALIDATOR" \
)

# COMMAND ----------
# Processing node UPD_INS_UPD, type UPDATE_STRATEGY . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 55

# for each involved DataFrame, append the dataframe name to each column
EXP_UPD_VALIDATOR_temp = EXP_UPD_VALIDATOR.toDF(*["EXP_UPD_VALIDATOR___" + col for col in EXP_UPD_VALIDATOR.columns])

UPD_INS_UPD = EXP_UPD_VALIDATOR_temp.selectExpr( \
	"EXP_UPD_VALIDATOR___LOCATION_ID as LOCATION_ID", \
	"EXP_UPD_VALIDATOR___JOB_FUNC_ID as JOB_FUNC_ID", \
	"EXP_UPD_VALIDATOR___NAME as NAME", \
	"EXP_UPD_VALIDATOR___DESCRIPTION as DESCRIPTION", \
	"EXP_UPD_VALIDATOR___STARTUP_TIME as STARTUP_TIME", \
	"EXP_UPD_VALIDATOR___CLEANUP_TIME as CLEANUP_TIME", \
	"EXP_UPD_VALIDATOR___CREATE_DATE_TIME as CREATE_DATE_TIME", \
	"EXP_UPD_VALIDATOR___MOD_DATE_TIME as MOD_DATE_TIME", \
	"EXP_UPD_VALIDATOR___USER_ID as USER_ID", \
	"EXP_UPD_VALIDATOR___WHSE as WHSE", \
	"EXP_UPD_VALIDATOR___TRANSITION_START_TIME as TRANSITION_START_TIME", \
	"EXP_UPD_VALIDATOR___TRANSITION_END_TIME as TRANSITION_END_TIME", \
	"EXP_UPD_VALIDATOR___JF_TYPE as JF_TYPE", \
	"EXP_UPD_VALIDATOR___LEVEL_1 as LEVEL_1", \
	"EXP_UPD_VALIDATOR___LEVEL_2 as LEVEL_2", \
	"EXP_UPD_VALIDATOR___LEVEL_3 as LEVEL_3", \
	"EXP_UPD_VALIDATOR___LEVEL_4 as LEVEL_4", \
	"EXP_UPD_VALIDATOR___LEVEL_5 as LEVEL_5", \
	"EXP_UPD_VALIDATOR___OPS_CODE_ID as OPS_CODE_ID", \
	"EXP_UPD_VALIDATOR___APPLY_TEAM_SETUP_TIME_O as APPLY_TEAM_SETUP_TIME", \
	"EXP_UPD_VALIDATOR___TEAM_STARTUP_TIME as TEAM_STARTUP_TIME", \
	"EXP_UPD_VALIDATOR___TEAM_CLEANUP_TIME as TEAM_CLEANUP_TIME", \
	"EXP_UPD_VALIDATOR___TEAM_TRANSITION_START_TIME as TEAM_TRANSITION_START_TIME", \
	"EXP_UPD_VALIDATOR___TEAM_TRANSITION_END_TIME as TEAM_TRANSITION_END_TIME", \
	"EXP_UPD_VALIDATOR___MISC_TXT_1 as MISC_TXT_1", \
	"EXP_UPD_VALIDATOR___MISC_TXT_2 as MISC_TXT_2", \
	"EXP_UPD_VALIDATOR___MISC_NUM_1 as MISC_NUM_1", \
	"EXP_UPD_VALIDATOR___MISC_NUM_2 as MISC_NUM_2", \
	"EXP_UPD_VALIDATOR___DFLT_PROC_ZONE_ID as DFLT_PROC_ZONE_ID", \
	"EXP_UPD_VALIDATOR___PROC_ZONE_TEMPL_ID as PROC_ZONE_TEMPL_ID", \
	"EXP_UPD_VALIDATOR___MSRMNT_ID as MSRMNT_ID", \
	"EXP_UPD_VALIDATOR___VERSION_ID as VERSION_ID", \
	"EXP_UPD_VALIDATOR___OBS_THRESHOLD_EP as OBS_THRESHOLD_EP", \
	"EXP_UPD_VALIDATOR___TRACK_HIST_TIME_O as TRACK_HIST_TIME", \
	"EXP_UPD_VALIDATOR___TRAIN_PERIOD as TRAIN_PERIOD", \
	"EXP_UPD_VALIDATOR___RETRAIN_PERIOD as RETRAIN_PERIOD", \
	"EXP_UPD_VALIDATOR___OS_ONLY_O as OS_ONLY", \
	"EXP_UPD_VALIDATOR___RETRAIN_REQ_DURATION as RETRAIN_REQ_DURATION", \
	"EXP_UPD_VALIDATOR___PERF_GOAL_IND_O as PERF_GOAL_IND", \
	"EXP_UPD_VALIDATOR___TRAINING_REQD_O as TRAINING_REQD", \
	"EXP_UPD_VALIDATOR___USE_JF_TRAIN_O as USE_JF_TRAIN", \
	"EXP_UPD_VALIDATOR___PERF_EVAL_PERIOD_ID as PERF_EVAL_PERIOD_ID", \
	"EXP_UPD_VALIDATOR___DFLT_MAX_OCCUPANCY as DFLT_MAX_OCCUPANCY", \
	"EXP_UPD_VALIDATOR___UNQ_SEED_ID as UNQ_SEED_ID", \
	"EXP_UPD_VALIDATOR___DEFAULT_ACT_ID as DEFAULT_ACT_ID", \
	"EXP_UPD_VALIDATOR___CREATED_DTTM as CREATED_DTTM", \
	"EXP_UPD_VALIDATOR___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"EXP_UPD_VALIDATOR___PLAN_EP as PLAN_EP", \
	"EXP_UPD_VALIDATOR___WHSE_VISIBILITY_GROUP as WHSE_VISIBILITY_GROUP", \
	"EXP_UPD_VALIDATOR___DEPT_CODE as DEPT_CODE", \
	"EXP_UPD_VALIDATOR___i_WM_JOB_FUNCTION_ID as i_WM_JOB_FUNCTION_ID", \
	"EXP_UPD_VALIDATOR___i_LOAD_TSTMP as i_LOAD_TSTMP", \
	"EXP_UPD_VALIDATOR___UPDATE_TSTMP as UPDATE_TSTMP", \
	"EXP_UPD_VALIDATOR___LOAD_TSTMP as LOAD_TSTMP", \
	"EXP_UPD_VALIDATOR___o_UPDATE_VALIDATOR as o_UPDATE_VALIDATOR") \
	.withColumn('pyspark_data_action', when(col('o_UPDATE_VALIDATOR') ==(lit(1)), lit(0)).when(col('o_UPDATE_VALIDATOR') ==(lit(2)), lit(1)))

# COMMAND ----------
# Processing node Shortcut_to_WM_E_JOB_FUNCTION1, type TARGET 
# COLUMN COUNT: 52

Shortcut_to_WM_E_JOB_FUNCTION1 = UPD_INS_UPD.selectExpr(
	"CAST(LOCATION_ID AS BIGINT) as LOCATION_ID",
	"CAST(JOB_FUNC_ID AS INT) as WM_JOB_FUNCTION_ID",
	"CAST(NAME AS STRING) as WM_JOB_FUNCTION_NAME",
	"CAST(DESCRIPTION AS STRING) as WM_JOB_FUNCTION_DESC",
	"CAST(WHSE AS STRING) as WM_WHSE",
	"CAST(DEPT_CODE AS STRING) as WM_DEPT_CD",
	"CAST(JF_TYPE AS STRING) as WM_JF_TYPE",
	"CAST(UNQ_SEED_ID AS INT) as WM_UNQ_SEED_ID",
	"CAST(DEFAULT_ACT_ID AS INT) as WM_DEFAULT_ACT_ID",
	"CAST(STARTUP_TIME AS DECIMAL(20,7)) as STARTUP_TIME",
	"CAST(CLEANUP_TIME AS DECIMAL(20,7)) as CLEANUP_TIME",
	"CAST(TRANSITION_START_TIME AS DECIMAL(20,7)) as TRANSITION_START_TIME",
	"CAST(TRANSITION_END_TIME AS DECIMAL(20,7)) as TRANSITION_END_TIME",
	"CAST(APPLY_TEAM_SETUP_TIME AS TINYINT) as APPLY_TEAM_SETUP_TIME_FLAG",
	"CAST(TEAM_STARTUP_TIME AS DECIMAL(20,7)) as TEAM_STARTUP_TIME",
	"CAST(TEAM_CLEANUP_TIME AS DECIMAL(20,7)) as TEAM_CLEANUP_TIME",
	"CAST(TEAM_TRANSITION_START_TIME AS DECIMAL(20,7)) as TEAM_TRANSITION_START_TIME",
	"CAST(TEAM_TRANSITION_END_TIME AS DECIMAL(20,7)) as TEAM_TRANSITION_END_TIME",
	"CAST(OPS_CODE_ID AS INT) as WM_OPS_CD_ID",
	"CAST(DFLT_PROC_ZONE_ID AS INT) as WM_DFLT_PROC_ZONE_ID",
	"CAST(PROC_ZONE_TEMPL_ID AS INT) as WM_PROC_ZONE_TEMPL_ID",
	"CAST(MSRMNT_ID AS INT) as WM_MSRMNT_ID",
	"CAST(OBS_THRESHOLD_EP AS DECIMAL(20,7)) as OBS_THRESHOLD_EP",
	"CAST(TRACK_HIST_TIME AS TINYINT) as TRACK_HIST_TIME_FLAG",
	"CAST(TRAIN_PERIOD AS INT) as TRAIN_PERIOD",
	"CAST(RETRAIN_PERIOD AS DECIMAL(7,2)) as RETRAIN_PERIOD",
	"CAST(OS_ONLY AS TINYINT) as OS_ONLY_FLAG",
	"CAST(RETRAIN_REQ_DURATION AS DECIMAL(7,2)) as RETRAIN_REQ_DURATION",
	"CAST(PERF_GOAL_IND AS TINYINT) as PERF_GOAL_FLAG",
	"CAST(TRAINING_REQD AS TINYINT) as TRAINING_REQD_FLAG",
	"CAST(USE_JF_TRAIN AS TINYINT) as USE_JF_TRAIN_FLAG",
	"CAST(PERF_EVAL_PERIOD_ID AS STRING) as WM_PERF_EVAL_PERIOD_ID",
	"CAST(DFLT_MAX_OCCUPANCY AS DECIMAL(20,7)) as DFLT_MAX_OCCUPANCY",
	"CAST(PLAN_EP AS DECIMAL(13,7)) as PLAN_EP",
	"CAST(WHSE_VISIBILITY_GROUP AS STRING) as WM_WHSE_VISIBILITY_GROUP",
	"CAST(LEVEL_1 AS STRING) as LEVEL_1",
	"CAST(LEVEL_2 AS STRING) as LEVEL_2",
	"CAST(LEVEL_3 AS STRING) as LEVEL_3",
	"CAST(LEVEL_4 AS STRING) as LEVEL_4",
	"CAST(LEVEL_5 AS STRING) as LEVEL_5",
	"CAST(MISC_TXT_1 AS STRING) as MISC_TXT_1",
	"CAST(MISC_TXT_2 AS STRING) as MISC_TXT_2",
	"CAST(MISC_NUM_1 AS DECIMAL(20,7)) as MISC_NUM_1",
	"CAST(MISC_NUM_2 AS DECIMAL(20,7)) as MISC_NUM_2",
	"CAST(USER_ID AS STRING) as WM_USER_ID",
	"CAST(VERSION_ID AS INT) as WM_VERSION_ID",
	"CAST(CREATED_DTTM AS TIMESTAMP) as WM_CREATED_TSTMP",
	"CAST(LAST_UPDATED_DTTM AS TIMESTAMP) as WM_LAST_UPDATED_TSTMP",
	"CAST(CREATE_DATE_TIME AS TIMESTAMP) as WM_CREATE_TSTMP",
	"CAST(MOD_DATE_TIME AS TIMESTAMP) as WM_MOD_TSTMP",
	"CAST(UPDATE_TSTMP AS TIMESTAMP) as UPDATE_TSTMP",
	"CAST(LOAD_TSTMP AS TIMESTAMP) as LOAD_TSTMP", 
    "pyspark_data_action" 
)

try:
  primary_key = """source.LOCATION_ID = target.LOCATION_ID AND source.WM_JOB_FUNCTION_ID = target.WM_JOB_FUNCTION_ID"""
#   refined_perf_table = "WM_E_JOB_FUNCTION"
  executeMerge(Shortcut_to_WM_E_JOB_FUNCTION1, refined_perf_table, primary_key)
  logger.info(f"Merge with {refined_perf_table} completed]")
  logPrevRunDt("WM_E_JOB_FUNCTION", "WM_E_JOB_FUNCTION", "Completed", "N/A", f"{raw}.log_run_details")
except Exception as e:
  logPrevRunDt("WM_E_JOB_FUNCTION", "WM_E_JOB_FUNCTION","Failed",str(e), f"{raw}.log_run_details", )
  raise e
	