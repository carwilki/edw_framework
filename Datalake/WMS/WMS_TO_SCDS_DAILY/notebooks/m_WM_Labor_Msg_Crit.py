#Code converted on 2023-06-26 10:19:38
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from pyspark.dbutils import DBUtils
from Datalake.utils.genericUtilities import *
from Datalake.utils.configs import *
from Datalake.utils.mergeUtils import *
from Datalake.utils.logger import *
# COMMAND ----------

parser = argparse.ArgumentParser()
spark = SparkSession.getActiveSession()
dbutils = DBUtils(spark)

parser.add_argument('env', type=str, help='Env Variable')
args = parser.parse_args()
env = args.env
# env = 'dev'

if env is None or env == '':
    raise ValueError('env is not set')

refine = getEnvPrefix(env) + 'refine'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'

# Set global variables
starttime = datetime.now() #start timestamp of the script
refined_perf_table = f"{refine}.WM_LABOR_MSG_CRIT"
raw_perf_table = f"{raw}.WM_LABOR_MSG_CRIT_PRE"
site_profile_table = f"{legacy}.SITE_PROFILE"


# COMMAND ----------
# Processing node SQ_Shortcut_to_WM_LABOR_MSG_CRIT, type SOURCE 
# COLUMN COUNT: 22

SQ_Shortcut_to_WM_LABOR_MSG_CRIT = spark.sql(f"""SELECT
LOCATION_ID,
WM_LABOR_MSG_CRIT_ID,
WM_WHSE,
WM_LABOR_MSG_ID,
WM_TRAN_NBR,
CRIT_SEQ_NBR,
WM_MSG_STAT_CD,
WM_CRIT_TYPE,
WM_CRIT_VALUE,
MISC_TXT_1,
MISC_TXT_2,
MISC_NUM_1,
MISC_NUM_2,
WM_HIBERNATE_VERSION,
WM_CREATED_SOURCE_TYPE,
WM_CREATED_SOURCE,
LAST_UPDATED_SOURCE_TYPE,
LAST_UPDATED_SOURCE,
WM_CREATED_TSTMP,
WM_LAST_UPDATED_TSTMP,
UPDATE_TSTMP,
LOAD_TSTMP
FROM {refined_perf_table}
WHERE WM_LABOR_MSG_CRIT_ID IN (SELECT LABOR_MSG_CRIT_ID FROM {raw_perf_table})""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node SQ_Shortcut_to_WM_LABOR_MSG_CRIT_PRE, type SOURCE 
# COLUMN COUNT: 21

SQ_Shortcut_to_WM_LABOR_MSG_CRIT_PRE = spark.sql(f"""SELECT
DC_NBR,
LABOR_MSG_CRIT_ID,
LABOR_MSG_ID,
TRAN_NBR,
CRIT_SEQ_NBR,
MSG_STAT_CODE,
CRIT_TYPE,
CRIT_VAL,
CREATED_SOURCE_TYPE,
CREATED_SOURCE,
CREATED_DTTM,
LAST_UPDATED_SOURCE_TYPE,
LAST_UPDATED_SOURCE,
LAST_UPDATED_DTTM,
WHSE,
MISC_TXT_1,
MISC_TXT_2,
MISC_NUM_1,
MISC_NUM_2,
HIBERNATE_VERSION,
LOAD_TSTMP
FROM {raw_perf_table}""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node EXP_INT_CONV, type EXPRESSION 
# COLUMN COUNT: 21

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_WM_LABOR_MSG_CRIT_PRE_temp = SQ_Shortcut_to_WM_LABOR_MSG_CRIT_PRE.toDF(*["SQ_Shortcut_to_WM_LABOR_MSG_CRIT_PRE___" + col for col in SQ_Shortcut_to_WM_LABOR_MSG_CRIT_PRE.columns])

EXP_INT_CONV = SQ_Shortcut_to_WM_LABOR_MSG_CRIT_PRE_temp.selectExpr( \
	"SQ_Shortcut_to_WM_LABOR_MSG_CRIT_PRE___sys_row_id as sys_row_id", \
	"cast(SQ_Shortcut_to_WM_LABOR_MSG_CRIT_PRE___DC_NBR as int) as o_DC_NBR", \
	"SQ_Shortcut_to_WM_LABOR_MSG_CRIT_PRE___LABOR_MSG_CRIT_ID as LABOR_MSG_CRIT_ID", \
	"SQ_Shortcut_to_WM_LABOR_MSG_CRIT_PRE___LABOR_MSG_ID as LABOR_MSG_ID", \
	"SQ_Shortcut_to_WM_LABOR_MSG_CRIT_PRE___TRAN_NBR as TRAN_NBR", \
	"SQ_Shortcut_to_WM_LABOR_MSG_CRIT_PRE___CRIT_SEQ_NBR as CRIT_SEQ_NBR", \
	"SQ_Shortcut_to_WM_LABOR_MSG_CRIT_PRE___MSG_STAT_CODE as MSG_STAT_CODE", \
	"SQ_Shortcut_to_WM_LABOR_MSG_CRIT_PRE___CRIT_TYPE as CRIT_TYPE", \
	"SQ_Shortcut_to_WM_LABOR_MSG_CRIT_PRE___CRIT_VAL as CRIT_VAL", \
	"SQ_Shortcut_to_WM_LABOR_MSG_CRIT_PRE___CREATED_SOURCE_TYPE as CREATED_SOURCE_TYPE", \
	"SQ_Shortcut_to_WM_LABOR_MSG_CRIT_PRE___CREATED_SOURCE as CREATED_SOURCE", \
	"SQ_Shortcut_to_WM_LABOR_MSG_CRIT_PRE___CREATED_DTTM as CREATED_DTTM", \
	"SQ_Shortcut_to_WM_LABOR_MSG_CRIT_PRE___LAST_UPDATED_SOURCE_TYPE as LAST_UPDATED_SOURCE_TYPE", \
	"SQ_Shortcut_to_WM_LABOR_MSG_CRIT_PRE___LAST_UPDATED_SOURCE as LAST_UPDATED_SOURCE", \
	"SQ_Shortcut_to_WM_LABOR_MSG_CRIT_PRE___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"SQ_Shortcut_to_WM_LABOR_MSG_CRIT_PRE___WHSE as WHSE", \
	"SQ_Shortcut_to_WM_LABOR_MSG_CRIT_PRE___MISC_TXT_1 as MISC_TXT_1", \
	"SQ_Shortcut_to_WM_LABOR_MSG_CRIT_PRE___MISC_TXT_2 as MISC_TXT_2", \
	"SQ_Shortcut_to_WM_LABOR_MSG_CRIT_PRE___MISC_NUM_1 as MISC_NUM_1", \
	"SQ_Shortcut_to_WM_LABOR_MSG_CRIT_PRE___MISC_NUM_2 as MISC_NUM_2", \
	"SQ_Shortcut_to_WM_LABOR_MSG_CRIT_PRE___HIBERNATE_VERSION as HIBERNATE_VERSION", \
	"SQ_Shortcut_to_WM_LABOR_MSG_CRIT_PRE___LOAD_TSTMP as LOAD_TSTMP" \
)

# COMMAND ----------
# Processing node SQ_Shortcut_to_SITE_PROFILE, type SOURCE 
# COLUMN COUNT: 2

SQ_Shortcut_to_SITE_PROFILE = spark.sql(f"""SELECT LOCATION_ID, STORE_NBR FROM {site_profile_table}""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node JNR_SITE_PROFILE, type JOINER 
# COLUMN COUNT: 23

JNR_SITE_PROFILE = SQ_Shortcut_to_SITE_PROFILE.join(EXP_INT_CONV,[SQ_Shortcut_to_SITE_PROFILE.STORE_NBR == EXP_INT_CONV.o_DC_NBR],'inner')

# COMMAND ----------
# Processing node JNR_WM_LABOR_MSG_CRIT, type JOINER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 42

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_WM_LABOR_MSG_CRIT_temp = SQ_Shortcut_to_WM_LABOR_MSG_CRIT.toDF(*["SQ_Shortcut_to_WM_LABOR_MSG_CRIT___" + col for col in SQ_Shortcut_to_WM_LABOR_MSG_CRIT.columns])
JNR_SITE_PROFILE_temp = JNR_SITE_PROFILE.toDF(*["JNR_SITE_PROFILE___" + col for col in JNR_SITE_PROFILE.columns])

JNR_WM_LABOR_MSG_CRIT = SQ_Shortcut_to_WM_LABOR_MSG_CRIT_temp.join(JNR_SITE_PROFILE_temp,[SQ_Shortcut_to_WM_LABOR_MSG_CRIT_temp.SQ_Shortcut_to_WM_LABOR_MSG_CRIT___LOCATION_ID == JNR_SITE_PROFILE_temp.JNR_SITE_PROFILE___LOCATION_ID, SQ_Shortcut_to_WM_LABOR_MSG_CRIT_temp.SQ_Shortcut_to_WM_LABOR_MSG_CRIT___WM_LABOR_MSG_CRIT_ID == JNR_SITE_PROFILE_temp.JNR_SITE_PROFILE___LABOR_MSG_CRIT_ID],'right_outer').selectExpr( \
	"JNR_SITE_PROFILE___LABOR_MSG_CRIT_ID as LABOR_MSG_CRIT_ID", \
	"JNR_SITE_PROFILE___LABOR_MSG_ID as LABOR_MSG_ID", \
	"JNR_SITE_PROFILE___TRAN_NBR as TRAN_NBR", \
	"JNR_SITE_PROFILE___CRIT_SEQ_NBR as CRIT_SEQ_NBR", \
	"JNR_SITE_PROFILE___MSG_STAT_CODE as MSG_STAT_CODE", \
	"JNR_SITE_PROFILE___CRIT_TYPE as CRIT_TYPE", \
	"JNR_SITE_PROFILE___CRIT_VAL as CRIT_VAL", \
	"JNR_SITE_PROFILE___CREATED_SOURCE_TYPE as CREATED_SOURCE_TYPE", \
	"JNR_SITE_PROFILE___CREATED_SOURCE as CREATED_SOURCE", \
	"JNR_SITE_PROFILE___CREATED_DTTM as CREATED_DTTM", \
	"JNR_SITE_PROFILE___LAST_UPDATED_SOURCE_TYPE as LAST_UPDATED_SOURCE_TYPE", \
	"JNR_SITE_PROFILE___LAST_UPDATED_SOURCE as LAST_UPDATED_SOURCE", \
	"JNR_SITE_PROFILE___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"JNR_SITE_PROFILE___WHSE as WHSE", \
	"JNR_SITE_PROFILE___MISC_TXT_1 as MISC_TXT_1", \
	"JNR_SITE_PROFILE___MISC_TXT_2 as MISC_TXT_2", \
	"JNR_SITE_PROFILE___MISC_NUM_1 as MISC_NUM_1", \
	"JNR_SITE_PROFILE___MISC_NUM_2 as MISC_NUM_2", \
	"JNR_SITE_PROFILE___HIBERNATE_VERSION as HIBERNATE_VERSION", \
	"JNR_SITE_PROFILE___LOCATION_ID as LOCATION_ID", \
	"SQ_Shortcut_to_WM_LABOR_MSG_CRIT___LOCATION_ID as in_LOCATION_ID", \
	"SQ_Shortcut_to_WM_LABOR_MSG_CRIT___WM_LABOR_MSG_CRIT_ID as WM_LABOR_MSG_CRIT_ID", \
	"SQ_Shortcut_to_WM_LABOR_MSG_CRIT___WM_WHSE as WM_WHSE", \
	"SQ_Shortcut_to_WM_LABOR_MSG_CRIT___WM_LABOR_MSG_ID as WM_LABOR_MSG_ID", \
	"SQ_Shortcut_to_WM_LABOR_MSG_CRIT___WM_TRAN_NBR as WM_TRAN_NBR", \
	"SQ_Shortcut_to_WM_LABOR_MSG_CRIT___CRIT_SEQ_NBR as CRIT_SEQ_NBR1", \
	"SQ_Shortcut_to_WM_LABOR_MSG_CRIT___WM_MSG_STAT_CD as WM_MSG_STAT_CD", \
	"SQ_Shortcut_to_WM_LABOR_MSG_CRIT___WM_CRIT_TYPE as WM_CRIT_TYPE", \
	"SQ_Shortcut_to_WM_LABOR_MSG_CRIT___WM_CRIT_VALUE as WM_CRIT_VALUE", \
	"SQ_Shortcut_to_WM_LABOR_MSG_CRIT___MISC_TXT_1 as in_MISC_TXT_1", \
	"SQ_Shortcut_to_WM_LABOR_MSG_CRIT___MISC_TXT_2 as in_MISC_TXT_2", \
	"SQ_Shortcut_to_WM_LABOR_MSG_CRIT___MISC_NUM_1 as in_MISC_NUM_1", \
	"SQ_Shortcut_to_WM_LABOR_MSG_CRIT___MISC_NUM_2 as in_MISC_NUM_2", \
	"SQ_Shortcut_to_WM_LABOR_MSG_CRIT___WM_HIBERNATE_VERSION as WM_HIBERNATE_VERSION", \
	"SQ_Shortcut_to_WM_LABOR_MSG_CRIT___WM_CREATED_SOURCE_TYPE as WM_CREATED_SOURCE_TYPE", \
	"SQ_Shortcut_to_WM_LABOR_MSG_CRIT___WM_CREATED_SOURCE as WM_CREATED_SOURCE", \
	"SQ_Shortcut_to_WM_LABOR_MSG_CRIT___LAST_UPDATED_SOURCE_TYPE as in_LAST_UPDATED_SOURCE_TYPE", \
	"SQ_Shortcut_to_WM_LABOR_MSG_CRIT___LAST_UPDATED_SOURCE as in_LAST_UPDATED_SOURCE", \
	"SQ_Shortcut_to_WM_LABOR_MSG_CRIT___WM_CREATED_TSTMP as WM_CREATED_TSTMP", \
	"SQ_Shortcut_to_WM_LABOR_MSG_CRIT___WM_LAST_UPDATED_TSTMP as WM_LAST_UPDATED_TSTMP", \
	"SQ_Shortcut_to_WM_LABOR_MSG_CRIT___UPDATE_TSTMP as in_UPDATE_TSTMP", \
	"SQ_Shortcut_to_WM_LABOR_MSG_CRIT___LOAD_TSTMP as in_LOAD_TSTMP")

# COMMAND ----------
# Processing node FIL_NO_CHANGE_REC, type FILTER 
# COLUMN COUNT: 42

# for each involved DataFrame, append the dataframe name to each column
JNR_WM_LABOR_MSG_CRIT_temp = JNR_WM_LABOR_MSG_CRIT.toDF(*["JNR_WM_LABOR_MSG_CRIT___" + col for col in JNR_WM_LABOR_MSG_CRIT.columns])

FIL_NO_CHANGE_REC = JNR_WM_LABOR_MSG_CRIT_temp.selectExpr( \
	"JNR_WM_LABOR_MSG_CRIT___LABOR_MSG_CRIT_ID as LABOR_MSG_CRIT_ID", \
	"JNR_WM_LABOR_MSG_CRIT___LABOR_MSG_ID as LABOR_MSG_ID", \
	"JNR_WM_LABOR_MSG_CRIT___TRAN_NBR as TRAN_NBR", \
	"JNR_WM_LABOR_MSG_CRIT___CRIT_SEQ_NBR as CRIT_SEQ_NBR", \
	"JNR_WM_LABOR_MSG_CRIT___MSG_STAT_CODE as MSG_STAT_CODE", \
	"JNR_WM_LABOR_MSG_CRIT___CRIT_TYPE as CRIT_TYPE", \
	"JNR_WM_LABOR_MSG_CRIT___CRIT_VAL as CRIT_VAL", \
	"JNR_WM_LABOR_MSG_CRIT___CREATED_SOURCE_TYPE as CREATED_SOURCE_TYPE", \
	"JNR_WM_LABOR_MSG_CRIT___CREATED_SOURCE as CREATED_SOURCE", \
	"JNR_WM_LABOR_MSG_CRIT___CREATED_DTTM as CREATED_DTTM", \
	"JNR_WM_LABOR_MSG_CRIT___LAST_UPDATED_SOURCE_TYPE as LAST_UPDATED_SOURCE_TYPE", \
	"JNR_WM_LABOR_MSG_CRIT___LAST_UPDATED_SOURCE as LAST_UPDATED_SOURCE", \
	"JNR_WM_LABOR_MSG_CRIT___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"JNR_WM_LABOR_MSG_CRIT___WHSE as WHSE", \
	"JNR_WM_LABOR_MSG_CRIT___MISC_TXT_1 as MISC_TXT_1", \
	"JNR_WM_LABOR_MSG_CRIT___MISC_TXT_2 as MISC_TXT_2", \
	"JNR_WM_LABOR_MSG_CRIT___MISC_NUM_1 as MISC_NUM_1", \
	"JNR_WM_LABOR_MSG_CRIT___MISC_NUM_2 as MISC_NUM_2", \
	"JNR_WM_LABOR_MSG_CRIT___HIBERNATE_VERSION as HIBERNATE_VERSION", \
	"JNR_WM_LABOR_MSG_CRIT___LOCATION_ID as LOCATION_ID", \
	"JNR_WM_LABOR_MSG_CRIT___in_LOCATION_ID as in_LOCATION_ID", \
	"JNR_WM_LABOR_MSG_CRIT___WM_LABOR_MSG_CRIT_ID as WM_LABOR_MSG_CRIT_ID", \
	"JNR_WM_LABOR_MSG_CRIT___WM_WHSE as WM_WHSE", \
	"JNR_WM_LABOR_MSG_CRIT___WM_LABOR_MSG_ID as WM_LABOR_MSG_ID", \
	"JNR_WM_LABOR_MSG_CRIT___WM_TRAN_NBR as WM_TRAN_NBR", \
	"JNR_WM_LABOR_MSG_CRIT___CRIT_SEQ_NBR1 as CRIT_SEQ_NBR1", \
	"JNR_WM_LABOR_MSG_CRIT___WM_MSG_STAT_CD as WM_MSG_STAT_CD", \
	"JNR_WM_LABOR_MSG_CRIT___WM_CRIT_TYPE as WM_CRIT_TYPE", \
	"JNR_WM_LABOR_MSG_CRIT___WM_CRIT_VALUE as WM_CRIT_VALUE", \
	"JNR_WM_LABOR_MSG_CRIT___in_MISC_TXT_1 as in_MISC_TXT_1", \
	"JNR_WM_LABOR_MSG_CRIT___in_MISC_TXT_2 as in_MISC_TXT_2", \
	"JNR_WM_LABOR_MSG_CRIT___in_MISC_NUM_1 as in_MISC_NUM_1", \
	"JNR_WM_LABOR_MSG_CRIT___in_MISC_NUM_2 as in_MISC_NUM_2", \
	"JNR_WM_LABOR_MSG_CRIT___WM_HIBERNATE_VERSION as WM_HIBERNATE_VERSION", \
	"JNR_WM_LABOR_MSG_CRIT___WM_CREATED_SOURCE_TYPE as WM_CREATED_SOURCE_TYPE", \
	"JNR_WM_LABOR_MSG_CRIT___WM_CREATED_SOURCE as WM_CREATED_SOURCE", \
	"JNR_WM_LABOR_MSG_CRIT___in_LAST_UPDATED_SOURCE_TYPE as in_LAST_UPDATED_SOURCE_TYPE", \
	"JNR_WM_LABOR_MSG_CRIT___in_LAST_UPDATED_SOURCE as in_LAST_UPDATED_SOURCE", \
	"JNR_WM_LABOR_MSG_CRIT___WM_CREATED_TSTMP as WM_CREATED_TSTMP", \
	"JNR_WM_LABOR_MSG_CRIT___WM_LAST_UPDATED_TSTMP as WM_LAST_UPDATED_TSTMP", \
	"JNR_WM_LABOR_MSG_CRIT___in_UPDATE_TSTMP as in_UPDATE_TSTMP", \
	"JNR_WM_LABOR_MSG_CRIT___in_LOAD_TSTMP as in_LOAD_TSTMP") \
	.filter("WM_LABOR_MSG_CRIT_ID IS NULL OR ( WM_LABOR_MSG_CRIT_ID IS NOT NULL AND ( COALESCE(CREATED_DTTM, date'1900-01-01') != COALESCE(WM_CREATED_TSTMP, date'1900-01-01') OR COALESCE(LAST_UPDATED_DTTM, date'1900-01-01') != COALESCE(WM_LAST_UPDATED_TSTMP, date'1900-01-01')))").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node EXP_EVAL_VALUES, type EXPRESSION 
# COLUMN COUNT: 44

# for each involved DataFrame, append the dataframe name to each column
FIL_NO_CHANGE_REC_temp = FIL_NO_CHANGE_REC.toDF(*["FIL_NO_CHANGE_REC___" + col for col in FIL_NO_CHANGE_REC.columns])

EXP_EVAL_VALUES = FIL_NO_CHANGE_REC_temp.selectExpr( \
	"FIL_NO_CHANGE_REC___sys_row_id as sys_row_id", \
	"FIL_NO_CHANGE_REC___LABOR_MSG_CRIT_ID as LABOR_MSG_CRIT_ID", \
	"FIL_NO_CHANGE_REC___LABOR_MSG_ID as LABOR_MSG_ID", \
	"FIL_NO_CHANGE_REC___TRAN_NBR as TRAN_NBR", \
	"FIL_NO_CHANGE_REC___CRIT_SEQ_NBR as CRIT_SEQ_NBR", \
	"FIL_NO_CHANGE_REC___MSG_STAT_CODE as MSG_STAT_CODE", \
	"FIL_NO_CHANGE_REC___CRIT_TYPE as CRIT_TYPE", \
	"FIL_NO_CHANGE_REC___CRIT_VAL as CRIT_VAL", \
	"FIL_NO_CHANGE_REC___CREATED_SOURCE_TYPE as CREATED_SOURCE_TYPE", \
	"FIL_NO_CHANGE_REC___CREATED_SOURCE as CREATED_SOURCE", \
	"FIL_NO_CHANGE_REC___CREATED_DTTM as CREATED_DTTM", \
	"FIL_NO_CHANGE_REC___LAST_UPDATED_SOURCE_TYPE as LAST_UPDATED_SOURCE_TYPE", \
	"FIL_NO_CHANGE_REC___LAST_UPDATED_SOURCE as LAST_UPDATED_SOURCE", \
	"FIL_NO_CHANGE_REC___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"FIL_NO_CHANGE_REC___WHSE as WHSE", \
	"FIL_NO_CHANGE_REC___MISC_TXT_1 as MISC_TXT_1", \
	"FIL_NO_CHANGE_REC___MISC_TXT_2 as MISC_TXT_2", \
	"FIL_NO_CHANGE_REC___MISC_NUM_1 as MISC_NUM_1", \
	"FIL_NO_CHANGE_REC___MISC_NUM_2 as MISC_NUM_2", \
	"FIL_NO_CHANGE_REC___HIBERNATE_VERSION as HIBERNATE_VERSION", \
	"FIL_NO_CHANGE_REC___LOCATION_ID as LOCATION_ID", \
	"FIL_NO_CHANGE_REC___in_LOCATION_ID as in_LOCATION_ID", \
	"FIL_NO_CHANGE_REC___WM_LABOR_MSG_CRIT_ID as WM_LABOR_MSG_CRIT_ID", \
	"FIL_NO_CHANGE_REC___WM_WHSE as WM_WHSE", \
	"FIL_NO_CHANGE_REC___WM_LABOR_MSG_ID as WM_LABOR_MSG_ID", \
	"FIL_NO_CHANGE_REC___WM_TRAN_NBR as WM_TRAN_NBR", \
	"FIL_NO_CHANGE_REC___CRIT_SEQ_NBR1 as CRIT_SEQ_NBR1", \
	"FIL_NO_CHANGE_REC___WM_MSG_STAT_CD as WM_MSG_STAT_CD", \
	"FIL_NO_CHANGE_REC___WM_CRIT_TYPE as WM_CRIT_TYPE", \
	"FIL_NO_CHANGE_REC___WM_CRIT_VALUE as WM_CRIT_VALUE", \
	"FIL_NO_CHANGE_REC___in_MISC_TXT_1 as in_MISC_TXT_1", \
	"FIL_NO_CHANGE_REC___in_MISC_TXT_2 as in_MISC_TXT_2", \
	"FIL_NO_CHANGE_REC___in_MISC_NUM_1 as in_MISC_NUM_1", \
	"FIL_NO_CHANGE_REC___in_MISC_NUM_2 as in_MISC_NUM_2", \
	"FIL_NO_CHANGE_REC___WM_HIBERNATE_VERSION as WM_HIBERNATE_VERSION", \
	"FIL_NO_CHANGE_REC___WM_CREATED_SOURCE_TYPE as WM_CREATED_SOURCE_TYPE", \
	"FIL_NO_CHANGE_REC___WM_CREATED_SOURCE as WM_CREATED_SOURCE", \
	"FIL_NO_CHANGE_REC___in_LAST_UPDATED_SOURCE_TYPE as in_LAST_UPDATED_SOURCE_TYPE", \
	"FIL_NO_CHANGE_REC___in_LAST_UPDATED_SOURCE as in_LAST_UPDATED_SOURCE", \
	"FIL_NO_CHANGE_REC___WM_CREATED_TSTMP as WM_CREATED_TSTMP", \
	"FIL_NO_CHANGE_REC___WM_LAST_UPDATED_TSTMP as WM_LAST_UPDATED_TSTMP", \
	"FIL_NO_CHANGE_REC___in_UPDATE_TSTMP as in_UPDATE_TSTMP", \
	"FIL_NO_CHANGE_REC___in_LOAD_TSTMP as in_LOAD_TSTMP", \
	"IF(FIL_NO_CHANGE_REC___in_LOAD_TSTMP IS NULL, CURRENT_TIMESTAMP, FIL_NO_CHANGE_REC___in_LOAD_TSTMP) as LOAD_TSTMP", \
	"CURRENT_TIMESTAMP as UPDATE_TSTMP" \
)

# COMMAND ----------
# Processing node UPD_VALIDATE, type UPDATE_STRATEGY 
# COLUMN COUNT: 23

# for each involved DataFrame, append the dataframe name to each column
EXP_EVAL_VALUES_temp = EXP_EVAL_VALUES.toDF(*["EXP_EVAL_VALUES___" + col for col in EXP_EVAL_VALUES.columns])

UPD_VALIDATE = EXP_EVAL_VALUES_temp.selectExpr( \
	"EXP_EVAL_VALUES___LOCATION_ID as LOCATION_ID", \
	"EXP_EVAL_VALUES___LABOR_MSG_CRIT_ID as LABOR_MSG_CRIT_ID", \
	"EXP_EVAL_VALUES___WHSE as WHSE", \
	"EXP_EVAL_VALUES___LABOR_MSG_ID as LABOR_MSG_ID", \
	"EXP_EVAL_VALUES___TRAN_NBR as TRAN_NBR", \
	"EXP_EVAL_VALUES___CRIT_SEQ_NBR as CRIT_SEQ_NBR", \
	"EXP_EVAL_VALUES___MSG_STAT_CODE as MSG_STAT_CODE", \
	"EXP_EVAL_VALUES___CRIT_TYPE as CRIT_TYPE", \
	"EXP_EVAL_VALUES___CRIT_VAL as CRIT_VAL", \
	"EXP_EVAL_VALUES___MISC_TXT_1 as MISC_TXT_1", \
	"EXP_EVAL_VALUES___MISC_TXT_2 as MISC_TXT_2", \
	"EXP_EVAL_VALUES___MISC_NUM_1 as MISC_NUM_1", \
	"EXP_EVAL_VALUES___MISC_NUM_2 as MISC_NUM_2", \
	"EXP_EVAL_VALUES___HIBERNATE_VERSION as HIBERNATE_VERSION", \
	"EXP_EVAL_VALUES___CREATED_SOURCE_TYPE as CREATED_SOURCE_TYPE", \
	"EXP_EVAL_VALUES___CREATED_SOURCE as CREATED_SOURCE", \
	"EXP_EVAL_VALUES___LAST_UPDATED_SOURCE_TYPE as LAST_UPDATED_SOURCE_TYPE", \
	"EXP_EVAL_VALUES___LAST_UPDATED_SOURCE as LAST_UPDATED_SOURCE", \
	"EXP_EVAL_VALUES___CREATED_DTTM as CREATED_DTTM", \
	"EXP_EVAL_VALUES___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"EXP_EVAL_VALUES___UPDATE_TSTMP as UPDATE_TSTMP", \
	"EXP_EVAL_VALUES___LOAD_TSTMP as LOAD_TSTMP", \
	"EXP_EVAL_VALUES___WM_LABOR_MSG_CRIT_ID as WM_LABOR_MSG_CRIT_ID") \
	.withColumn('pyspark_data_action', when((col('WM_LABOR_MSG_CRIT_ID').isNull()) ,(lit(0))) .otherwise(lit(1)))

# COMMAND ----------
# Processing node Shortcut_to_WM_LABOR_MSG_CRIT1, type TARGET 
# COLUMN COUNT: 22

Shortcut_to_WM_LABOR_MSG_CRIT1 = UPD_VALIDATE.selectExpr(
	"CAST(LOCATION_ID AS BIGINT) as LOCATION_ID",
	"CAST(LABOR_MSG_CRIT_ID AS BIGINT) as WM_LABOR_MSG_CRIT_ID",
	"CAST(WHSE AS STRING) as WM_WHSE",
	"CAST(LABOR_MSG_ID AS BIGINT) as WM_LABOR_MSG_ID",
	"CAST(TRAN_NBR AS INT) as WM_TRAN_NBR",
	"CAST(CRIT_SEQ_NBR AS INT) as CRIT_SEQ_NBR",
	"CAST(MSG_STAT_CODE AS STRING) as WM_MSG_STAT_CD",
	"CAST(CRIT_TYPE AS STRING) as WM_CRIT_TYPE",
	"CAST(CRIT_VAL AS STRING) as WM_CRIT_VALUE",
	"CAST(MISC_TXT_1 AS STRING) as MISC_TXT_1",
	"CAST(MISC_TXT_2 AS STRING) as MISC_TXT_2",
	"CAST(MISC_NUM_1 AS DECIMAL(20,7)) as MISC_NUM_1",
	"CAST(MISC_NUM_2 AS DECIMAL(20,7)) as MISC_NUM_2",
	"CAST(HIBERNATE_VERSION AS BIGINT) as WM_HIBERNATE_VERSION",
	"CAST(CREATED_SOURCE_TYPE AS SMALLINT) as WM_CREATED_SOURCE_TYPE",
	"CAST(CREATED_SOURCE AS STRING) as WM_CREATED_SOURCE",
	"CAST(LAST_UPDATED_SOURCE_TYPE AS SMALLINT) as LAST_UPDATED_SOURCE_TYPE",
	"CAST(LAST_UPDATED_SOURCE AS STRING) as LAST_UPDATED_SOURCE",
	"CAST(CREATED_DTTM AS TIMESTAMP) as WM_CREATED_TSTMP",
	"CAST(LAST_UPDATED_DTTM AS TIMESTAMP) as WM_LAST_UPDATED_TSTMP",
	"CAST(UPDATE_TSTMP AS TIMESTAMP) as UPDATE_TSTMP",
	"CAST(LOAD_TSTMP AS TIMESTAMP) as LOAD_TSTMP", 
    "pyspark_data_action" 
)

try:
  primary_key = """source.LOCATION_ID = target.LOCATION_ID AND source.WM_LABOR_MSG_CRIT_ID = target.WM_LABOR_MSG_CRIT_ID"""
#   refined_perf_table = "WM_LABOR_MSG_CRIT"
  executeMerge(Shortcut_to_WM_LABOR_MSG_CRIT1, refined_perf_table, primary_key)
  logger.info(f"Merge with {refined_perf_table} completed]")
  logPrevRunDt("WM_LABOR_MSG_CRIT", "WM_LABOR_MSG_CRIT", "Completed", "N/A", f"{raw}.log_run_details")
except Exception as e:
  logPrevRunDt("WM_LABOR_MSG_CRIT", "WM_LABOR_MSG_CRIT","Failed",str(e), f"{raw}.log_run_details", )
  raise e
	