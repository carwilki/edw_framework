#Code converted on 2023-06-26 10:04:01
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from pyspark.dbutils import DBUtils
from Datalake.utils.genericUtilities import *
from Datalake.utils.configs import *
from Datalake.utils.mergeUtils import *
from Datalake.utils.logger import *
# COMMAND ----------

parser = argparse.ArgumentParser()
spark = SparkSession.getActiveSession()
dbutils = DBUtils(spark)

parser.add_argument('env', type=str, help='Env Variable')
# args = parser.parse_args()
# env = args.env
env = args.env

if env is None or env == '':
    raise ValueError('env is not set')

refine = getEnvPrefix(env) + 'refine'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'

# Set global variables
starttime = datetime.now() #start timestamp of the script
refined_perf_table = f"{refine}.WM_DOCK_DOOR"
raw_perf_table = f"{raw}.WM_DOCK_DOOR_PRE"
site_profile_table = f"{legacy}.SITE_PROFILE"

# COMMAND ----------
# Processing node SQ_Shortcut_to_WM_DOCK_DOOR, type SOURCE 
# COLUMN COUNT: 5

SQ_Shortcut_to_WM_DOCK_DOOR = spark.sql(f"""SELECT
LOCATION_ID,
WM_DOCK_DOOR_ID,
WM_CREATED_TSTMP,
WM_LAST_UPDATED_TSTMP,
LOAD_TSTMP
FROM {refined_perf_table}
WHERE WM_DOCK_DOOR_ID IN (SELECT DOCK_DOOR_ID FROM {raw_perf_table})""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node SQ_Shortcut_to_WM_DOCK_DOOR_PRE, type SOURCE 
# COLUMN COUNT: 28

SQ_Shortcut_to_WM_DOCK_DOOR_PRE = spark.sql(f"""SELECT
DC_NBR,
DOCK_DOOR_ID,
FACILITY_ID,
DOCK_ID,
TC_COMPANY_ID,
DOCK_DOOR_NAME,
DOCK_DOOR_STATUS,
DESCRIPTION,
MARK_FOR_DELETION,
CREATED_SOURCE_TYPE,
CREATED_SOURCE,
CREATED_DTTM,
LAST_UPDATED_SOURCE_TYPE,
LAST_UPDATED_SOURCE,
LAST_UPDATED_DTTM,
OLD_DOCK_DOOR_STATUS,
ACTIVITY_TYPE,
APPOINTMENT_TYPE,
BARCODE,
TIME_FROM_INDUCTION,
PALLETIZATION_SPUR,
SORT_ZONE,
ILM_APPOINTMENT_NUMBER,
FLOWTHRU_ALLOC_SORT_PRTY,
LOCN_HDR_ID,
DOCK_DOOR_LOCN_ID,
OUTBD_STAGING_LOCN_ID,
LOAD_TSTMP
FROM {raw_perf_table}""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node EXP_INT_CONV, type EXPRESSION 
# COLUMN COUNT: 28

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_WM_DOCK_DOOR_PRE_temp = SQ_Shortcut_to_WM_DOCK_DOOR_PRE.toDF(*["SQ_Shortcut_to_WM_DOCK_DOOR_PRE___" + col for col in SQ_Shortcut_to_WM_DOCK_DOOR_PRE.columns])

EXP_INT_CONV = SQ_Shortcut_to_WM_DOCK_DOOR_PRE_temp.selectExpr( \
	"SQ_Shortcut_to_WM_DOCK_DOOR_PRE___sys_row_id as sys_row_id", \
	"cast(SQ_Shortcut_to_WM_DOCK_DOOR_PRE___DC_NBR as int) as o_DC_NBR", \
	"SQ_Shortcut_to_WM_DOCK_DOOR_PRE___DOCK_DOOR_ID as DOCK_DOOR_ID", \
	"SQ_Shortcut_to_WM_DOCK_DOOR_PRE___FACILITY_ID as FACILITY_ID", \
	"SQ_Shortcut_to_WM_DOCK_DOOR_PRE___DOCK_ID as DOCK_ID", \
	"SQ_Shortcut_to_WM_DOCK_DOOR_PRE___TC_COMPANY_ID as TC_COMPANY_ID", \
	"SQ_Shortcut_to_WM_DOCK_DOOR_PRE___DOCK_DOOR_NAME as DOCK_DOOR_NAME", \
	"SQ_Shortcut_to_WM_DOCK_DOOR_PRE___DOCK_DOOR_STATUS as DOCK_DOOR_STATUS", \
	"SQ_Shortcut_to_WM_DOCK_DOOR_PRE___DESCRIPTION as DESCRIPTION", \
	"SQ_Shortcut_to_WM_DOCK_DOOR_PRE___MARK_FOR_DELETION as MARK_FOR_DELETION", \
	"SQ_Shortcut_to_WM_DOCK_DOOR_PRE___CREATED_SOURCE_TYPE as CREATED_SOURCE_TYPE", \
	"SQ_Shortcut_to_WM_DOCK_DOOR_PRE___CREATED_SOURCE as CREATED_SOURCE", \
	"SQ_Shortcut_to_WM_DOCK_DOOR_PRE___CREATED_DTTM as CREATED_DTTM", \
	"SQ_Shortcut_to_WM_DOCK_DOOR_PRE___LAST_UPDATED_SOURCE_TYPE as LAST_UPDATED_SOURCE_TYPE", \
	"SQ_Shortcut_to_WM_DOCK_DOOR_PRE___LAST_UPDATED_SOURCE as LAST_UPDATED_SOURCE", \
	"SQ_Shortcut_to_WM_DOCK_DOOR_PRE___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"SQ_Shortcut_to_WM_DOCK_DOOR_PRE___OLD_DOCK_DOOR_STATUS as OLD_DOCK_DOOR_STATUS", \
	"SQ_Shortcut_to_WM_DOCK_DOOR_PRE___ACTIVITY_TYPE as ACTIVITY_TYPE", \
	"SQ_Shortcut_to_WM_DOCK_DOOR_PRE___APPOINTMENT_TYPE as APPOINTMENT_TYPE", \
	"SQ_Shortcut_to_WM_DOCK_DOOR_PRE___BARCODE as BARCODE", \
	"SQ_Shortcut_to_WM_DOCK_DOOR_PRE___TIME_FROM_INDUCTION as TIME_FROM_INDUCTION", \
	"SQ_Shortcut_to_WM_DOCK_DOOR_PRE___PALLETIZATION_SPUR as PALLETIZATION_SPUR", \
	"SQ_Shortcut_to_WM_DOCK_DOOR_PRE___SORT_ZONE as SORT_ZONE", \
	"SQ_Shortcut_to_WM_DOCK_DOOR_PRE___ILM_APPOINTMENT_NUMBER as ILM_APPOINTMENT_NUMBER", \
	"SQ_Shortcut_to_WM_DOCK_DOOR_PRE___FLOWTHRU_ALLOC_SORT_PRTY as FLOWTHRU_ALLOC_SORT_PRTY", \
	"SQ_Shortcut_to_WM_DOCK_DOOR_PRE___LOCN_HDR_ID as LOCN_HDR_ID", \
	"SQ_Shortcut_to_WM_DOCK_DOOR_PRE___DOCK_DOOR_LOCN_ID as DOCK_DOOR_LOCN_ID", \
	"SQ_Shortcut_to_WM_DOCK_DOOR_PRE___OUTBD_STAGING_LOCN_ID as OUTBD_STAGING_LOCN_ID", \
	"SQ_Shortcut_to_WM_DOCK_DOOR_PRE___LOAD_TSTMP as LOAD_TSTMP" \
)

# COMMAND ----------
# Processing node SQ_Shortcut_to_SITE_PROFILE, type SOURCE 
# COLUMN COUNT: 2

SQ_Shortcut_to_SITE_PROFILE = spark.sql(f"""SELECT LOCATION_ID, STORE_NBR FROM {site_profile_table}""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node JNR_SITE_PROFILE, type JOINER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 30

# for each involved DataFrame, append the dataframe name to each column
EXP_INT_CONV_temp = EXP_INT_CONV.toDF(*["EXP_INT_CONV___" + col for col in EXP_INT_CONV.columns])
SQ_Shortcut_to_SITE_PROFILE_temp = SQ_Shortcut_to_SITE_PROFILE.toDF(*["SQ_Shortcut_to_SITE_PROFILE___" + col for col in SQ_Shortcut_to_SITE_PROFILE.columns])

JNR_SITE_PROFILE = SQ_Shortcut_to_SITE_PROFILE_temp.join(EXP_INT_CONV_temp,[SQ_Shortcut_to_SITE_PROFILE_temp.SQ_Shortcut_to_SITE_PROFILE___STORE_NBR == EXP_INT_CONV_temp.EXP_INT_CONV___o_DC_NBR],'inner').selectExpr( \
	"EXP_INT_CONV___o_DC_NBR as DC_NBR", \
	"EXP_INT_CONV___DOCK_DOOR_ID as DOCK_DOOR_ID", \
	"EXP_INT_CONV___FACILITY_ID as FACILITY_ID", \
	"EXP_INT_CONV___DOCK_ID as DOCK_ID", \
	"EXP_INT_CONV___TC_COMPANY_ID as TC_COMPANY_ID", \
	"EXP_INT_CONV___DOCK_DOOR_NAME as DOCK_DOOR_NAME", \
	"EXP_INT_CONV___DOCK_DOOR_STATUS as DOCK_DOOR_STATUS", \
	"EXP_INT_CONV___DESCRIPTION as DESCRIPTION", \
	"EXP_INT_CONV___MARK_FOR_DELETION as MARK_FOR_DELETION", \
	"EXP_INT_CONV___CREATED_SOURCE_TYPE as CREATED_SOURCE_TYPE", \
	"EXP_INT_CONV___CREATED_SOURCE as CREATED_SOURCE", \
	"EXP_INT_CONV___CREATED_DTTM as CREATED_DTTM", \
	"EXP_INT_CONV___LAST_UPDATED_SOURCE_TYPE as LAST_UPDATED_SOURCE_TYPE", \
	"EXP_INT_CONV___LAST_UPDATED_SOURCE as LAST_UPDATED_SOURCE", \
	"EXP_INT_CONV___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"EXP_INT_CONV___OLD_DOCK_DOOR_STATUS as OLD_DOCK_DOOR_STATUS", \
	"EXP_INT_CONV___ACTIVITY_TYPE as ACTIVITY_TYPE", \
	"EXP_INT_CONV___APPOINTMENT_TYPE as APPOINTMENT_TYPE", \
	"EXP_INT_CONV___BARCODE as BARCODE", \
	"EXP_INT_CONV___TIME_FROM_INDUCTION as TIME_FROM_INDUCTION", \
	"EXP_INT_CONV___PALLETIZATION_SPUR as PALLETIZATION_SPUR", \
	"EXP_INT_CONV___SORT_ZONE as SORT_ZONE", \
	"EXP_INT_CONV___ILM_APPOINTMENT_NUMBER as ILM_APPOINTMENT_NUMBER", \
	"EXP_INT_CONV___FLOWTHRU_ALLOC_SORT_PRTY as FLOWTHRU_ALLOC_SORT_PRTY", \
	"EXP_INT_CONV___LOCN_HDR_ID as LOCN_HDR_ID", \
	"EXP_INT_CONV___DOCK_DOOR_LOCN_ID as DOCK_DOOR_LOCN_ID", \
	"EXP_INT_CONV___OUTBD_STAGING_LOCN_ID as OUTBD_STAGING_LOCN_ID", \
	"EXP_INT_CONV___LOAD_TSTMP as LOAD_TSTMP", \
	"SQ_Shortcut_to_SITE_PROFILE___LOCATION_ID as LOCATION_ID", \
	"SQ_Shortcut_to_SITE_PROFILE___STORE_NBR as STORE_NBR")

# COMMAND ----------
# Processing node JNR_WM_DOCK_DOOR, type JOINER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 33

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_WM_DOCK_DOOR_temp = SQ_Shortcut_to_WM_DOCK_DOOR.toDF(*["SQ_Shortcut_to_WM_DOCK_DOOR___" + col for col in SQ_Shortcut_to_WM_DOCK_DOOR.columns])
JNR_SITE_PROFILE_temp = JNR_SITE_PROFILE.toDF(*["JNR_SITE_PROFILE___" + col for col in JNR_SITE_PROFILE.columns])

JNR_WM_DOCK_DOOR = SQ_Shortcut_to_WM_DOCK_DOOR_temp.join(JNR_SITE_PROFILE_temp,[SQ_Shortcut_to_WM_DOCK_DOOR_temp.SQ_Shortcut_to_WM_DOCK_DOOR___LOCATION_ID == JNR_SITE_PROFILE_temp.JNR_SITE_PROFILE___LOCATION_ID, SQ_Shortcut_to_WM_DOCK_DOOR_temp.SQ_Shortcut_to_WM_DOCK_DOOR___WM_DOCK_DOOR_ID == JNR_SITE_PROFILE_temp.JNR_SITE_PROFILE___DOCK_DOOR_ID],'right_outer').selectExpr( \
	"JNR_SITE_PROFILE___DOCK_DOOR_ID as DOCK_DOOR_ID", \
	"JNR_SITE_PROFILE___FACILITY_ID as FACILITY_ID", \
	"JNR_SITE_PROFILE___DOCK_ID as DOCK_ID", \
	"JNR_SITE_PROFILE___TC_COMPANY_ID as TC_COMPANY_ID", \
	"JNR_SITE_PROFILE___DOCK_DOOR_NAME as DOCK_DOOR_NAME", \
	"JNR_SITE_PROFILE___DOCK_DOOR_STATUS as DOCK_DOOR_STATUS", \
	"JNR_SITE_PROFILE___DESCRIPTION as DESCRIPTION", \
	"JNR_SITE_PROFILE___MARK_FOR_DELETION as MARK_FOR_DELETION", \
	"JNR_SITE_PROFILE___CREATED_SOURCE_TYPE as CREATED_SOURCE_TYPE", \
	"JNR_SITE_PROFILE___CREATED_SOURCE as CREATED_SOURCE", \
	"JNR_SITE_PROFILE___CREATED_DTTM as CREATED_DTTM", \
	"JNR_SITE_PROFILE___LAST_UPDATED_SOURCE_TYPE as LAST_UPDATED_SOURCE_TYPE", \
	"JNR_SITE_PROFILE___LAST_UPDATED_SOURCE as LAST_UPDATED_SOURCE", \
	"JNR_SITE_PROFILE___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"JNR_SITE_PROFILE___OLD_DOCK_DOOR_STATUS as OLD_DOCK_DOOR_STATUS", \
	"JNR_SITE_PROFILE___ACTIVITY_TYPE as ACTIVITY_TYPE", \
	"JNR_SITE_PROFILE___APPOINTMENT_TYPE as APPOINTMENT_TYPE", \
	"JNR_SITE_PROFILE___BARCODE as BARCODE", \
	"JNR_SITE_PROFILE___TIME_FROM_INDUCTION as TIME_FROM_INDUCTION", \
	"JNR_SITE_PROFILE___PALLETIZATION_SPUR as PALLETIZATION_SPUR", \
	"JNR_SITE_PROFILE___SORT_ZONE as SORT_ZONE", \
	"JNR_SITE_PROFILE___ILM_APPOINTMENT_NUMBER as ILM_APPOINTMENT_NUMBER", \
	"JNR_SITE_PROFILE___FLOWTHRU_ALLOC_SORT_PRTY as FLOWTHRU_ALLOC_SORT_PRTY", \
	"JNR_SITE_PROFILE___LOCN_HDR_ID as LOCN_HDR_ID", \
	"JNR_SITE_PROFILE___DOCK_DOOR_LOCN_ID as DOCK_DOOR_LOCN_ID", \
	"JNR_SITE_PROFILE___OUTBD_STAGING_LOCN_ID as OUTBD_STAGING_LOCN_ID", \
	"JNR_SITE_PROFILE___LOCATION_ID as LOCATION_ID", \
	"SQ_Shortcut_to_WM_DOCK_DOOR___LOCATION_ID as in_LOCATION_ID", \
	"SQ_Shortcut_to_WM_DOCK_DOOR___WM_DOCK_DOOR_ID as in_WM_DOCK_DOOR_ID", \
	"SQ_Shortcut_to_WM_DOCK_DOOR___LOAD_TSTMP as in_LOAD_TSTMP", \
	"SQ_Shortcut_to_WM_DOCK_DOOR___WM_CREATED_TSTMP as in_WM_CREATED_TSTMP", \
	"SQ_Shortcut_to_WM_DOCK_DOOR___WM_LAST_UPDATED_TSTMP as in_WM_LAST_UPDATED_TSTMP") \
	.withColumn('DC_NBR', lit(None)) \
	

# COMMAND ----------
# Processing node FIL_NO_CHANGE_REC, type FILTER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 31

# for each involved DataFrame, append the dataframe name to each column
JNR_WM_DOCK_DOOR_temp = JNR_WM_DOCK_DOOR.toDF(*["JNR_WM_DOCK_DOOR___" + col for col in JNR_WM_DOCK_DOOR.columns])

FIL_NO_CHANGE_REC = JNR_WM_DOCK_DOOR_temp.selectExpr( \
	"JNR_WM_DOCK_DOOR___LOCATION_ID as New_LOCATION_ID", \
	"JNR_WM_DOCK_DOOR___DOCK_DOOR_ID as DOCK_DOOR_ID", \
	"JNR_WM_DOCK_DOOR___FACILITY_ID as FACILITY_ID", \
	"JNR_WM_DOCK_DOOR___DOCK_ID as DOCK_ID", \
	"JNR_WM_DOCK_DOOR___TC_COMPANY_ID as TC_COMPANY_ID", \
	"JNR_WM_DOCK_DOOR___DOCK_DOOR_NAME as DOCK_DOOR_NAME", \
	"JNR_WM_DOCK_DOOR___DOCK_DOOR_STATUS as DOCK_DOOR_STATUS", \
	"JNR_WM_DOCK_DOOR___DESCRIPTION as DESCRIPTION", \
	"JNR_WM_DOCK_DOOR___MARK_FOR_DELETION as MARK_FOR_DELETION", \
	"JNR_WM_DOCK_DOOR___CREATED_SOURCE_TYPE as CREATED_SOURCE_TYPE", \
	"JNR_WM_DOCK_DOOR___CREATED_SOURCE as CREATED_SOURCE", \
	"JNR_WM_DOCK_DOOR___CREATED_DTTM as CREATED_DTTM", \
	"JNR_WM_DOCK_DOOR___LAST_UPDATED_SOURCE_TYPE as LAST_UPDATED_SOURCE_TYPE", \
	"JNR_WM_DOCK_DOOR___LAST_UPDATED_SOURCE as LAST_UPDATED_SOURCE", \
	"JNR_WM_DOCK_DOOR___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"JNR_WM_DOCK_DOOR___OLD_DOCK_DOOR_STATUS as OLD_DOCK_DOOR_STATUS", \
	"JNR_WM_DOCK_DOOR___ACTIVITY_TYPE as ACTIVITY_TYPE", \
	"JNR_WM_DOCK_DOOR___APPOINTMENT_TYPE as APPOINTMENT_TYPE", \
	"JNR_WM_DOCK_DOOR___BARCODE as BARCODE", \
	"JNR_WM_DOCK_DOOR___TIME_FROM_INDUCTION as TIME_FROM_INDUCTION", \
	"JNR_WM_DOCK_DOOR___PALLETIZATION_SPUR as PALLETIZATION_SPUR", \
	"JNR_WM_DOCK_DOOR___SORT_ZONE as SORT_ZONE", \
	"JNR_WM_DOCK_DOOR___ILM_APPOINTMENT_NUMBER as ILM_APPOINTMENT_NUMBER", \
	"JNR_WM_DOCK_DOOR___FLOWTHRU_ALLOC_SORT_PRTY as FLOWTHRU_ALLOC_SORT_PRTY", \
	"JNR_WM_DOCK_DOOR___LOCN_HDR_ID as LOCN_HDR_ID", \
	"JNR_WM_DOCK_DOOR___DOCK_DOOR_LOCN_ID as DOCK_DOOR_LOCN_ID", \
	"JNR_WM_DOCK_DOOR___OUTBD_STAGING_LOCN_ID as OUTBD_STAGING_LOCN_ID", \
	"JNR_WM_DOCK_DOOR___in_WM_DOCK_DOOR_ID as in_WM_DOCK_DOOR_ID", \
	"JNR_WM_DOCK_DOOR___in_LOAD_TSTMP as in_LOAD_TSTMP", \
	"JNR_WM_DOCK_DOOR___in_WM_CREATED_TSTMP as in_WM_CREATED_TSTMP", \
	"JNR_WM_DOCK_DOOR___in_WM_LAST_UPDATED_TSTMP as in_WM_LAST_UPDATED_TSTMP") \
    .filter("in_WM_DOCK_DOOR_ID is Null OR (  in_WM_DOCK_DOOR_ID is NOT Null AND ( COALESCE(CREATED_DTTM, date'1900-01-01') != COALESCE(in_WM_CREATED_TSTMP, date'1900-01-01') \
             OR COALESCE(LAST_UPDATED_DTTM, date'1900-01-01') != COALESCE(in_WM_LAST_UPDATED_TSTMP, date'1900-01-01') ) )").withColumn("sys_row_id", monotonically_increasing_id())


# COMMAND ----------
# Processing node EXP_EVAL_VALUES, type EXPRESSION . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 30

# for each involved DataFrame, append the dataframe name to each column
FIL_NO_CHANGE_REC_temp = FIL_NO_CHANGE_REC.toDF(*["FIL_NO_CHANGE_REC___" + col for col in FIL_NO_CHANGE_REC.columns])

EXP_EVAL_VALUES = FIL_NO_CHANGE_REC_temp.selectExpr( \
	"FIL_NO_CHANGE_REC___New_LOCATION_ID as LOCATION_ID", \
	"FIL_NO_CHANGE_REC___DOCK_DOOR_ID as DOCK_DOOR_ID", \
	"FIL_NO_CHANGE_REC___FACILITY_ID as FACILITY_ID", \
	"FIL_NO_CHANGE_REC___DOCK_ID as DOCK_ID", \
	"FIL_NO_CHANGE_REC___TC_COMPANY_ID as TC_COMPANY_ID", \
	"FIL_NO_CHANGE_REC___DOCK_DOOR_NAME as DOCK_DOOR_NAME", \
	"FIL_NO_CHANGE_REC___DOCK_DOOR_STATUS as DOCK_DOOR_STATUS", \
	"FIL_NO_CHANGE_REC___DESCRIPTION as DESCRIPTION", \
	"FIL_NO_CHANGE_REC___MARK_FOR_DELETION as MARK_FOR_DELETION", \
	"FIL_NO_CHANGE_REC___CREATED_SOURCE_TYPE as CREATED_SOURCE_TYPE", \
	"FIL_NO_CHANGE_REC___CREATED_SOURCE as CREATED_SOURCE", \
	"FIL_NO_CHANGE_REC___CREATED_DTTM as CREATED_DTTM", \
	"FIL_NO_CHANGE_REC___LAST_UPDATED_SOURCE_TYPE as LAST_UPDATED_SOURCE_TYPE", \
	"FIL_NO_CHANGE_REC___LAST_UPDATED_SOURCE as LAST_UPDATED_SOURCE", \
	"FIL_NO_CHANGE_REC___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"FIL_NO_CHANGE_REC___OLD_DOCK_DOOR_STATUS as OLD_DOCK_DOOR_STATUS", \
	"FIL_NO_CHANGE_REC___ACTIVITY_TYPE as ACTIVITY_TYPE", \
	"FIL_NO_CHANGE_REC___APPOINTMENT_TYPE as APPOINTMENT_TYPE", \
	"FIL_NO_CHANGE_REC___BARCODE as BARCODE", \
	"FIL_NO_CHANGE_REC___TIME_FROM_INDUCTION as TIME_FROM_INDUCTION", \
	"FIL_NO_CHANGE_REC___PALLETIZATION_SPUR as PALLETIZATION_SPUR", \
	"FIL_NO_CHANGE_REC___SORT_ZONE as SORT_ZONE", \
	"FIL_NO_CHANGE_REC___ILM_APPOINTMENT_NUMBER as ILM_APPOINTMENT_NUMBER", \
	"FIL_NO_CHANGE_REC___FLOWTHRU_ALLOC_SORT_PRTY as FLOWTHRU_ALLOC_SORT_PRTY", \
	"FIL_NO_CHANGE_REC___LOCN_HDR_ID as LOCN_HDR_ID", \
	"FIL_NO_CHANGE_REC___DOCK_DOOR_LOCN_ID as DOCK_DOOR_LOCN_ID", \
	"FIL_NO_CHANGE_REC___OUTBD_STAGING_LOCN_ID as OUTBD_STAGING_LOCN_ID", \
	"FIL_NO_CHANGE_REC___in_LOAD_TSTMP as in_LOAD_TSTMP", \
	"FIL_NO_CHANGE_REC___in_WM_DOCK_DOOR_ID as in_WM_DOCK_DOOR_ID").selectExpr( \
	"FIL_NO_CHANGE_REC___sys_row_id as sys_row_id", \
	"FIL_NO_CHANGE_REC___LOCATION_ID as LOCATION_ID", \
	"FIL_NO_CHANGE_REC___DOCK_DOOR_ID as DOCK_DOOR_ID", \
	"FIL_NO_CHANGE_REC___FACILITY_ID as FACILITY_ID", \
	"FIL_NO_CHANGE_REC___DOCK_ID as DOCK_ID", \
	"FIL_NO_CHANGE_REC___TC_COMPANY_ID as TC_COMPANY_ID", \
	"FIL_NO_CHANGE_REC___DOCK_DOOR_NAME as DOCK_DOOR_NAME", \
	"FIL_NO_CHANGE_REC___DOCK_DOOR_STATUS as DOCK_DOOR_STATUS", \
	"FIL_NO_CHANGE_REC___DESCRIPTION as DESCRIPTION", \
	"FIL_NO_CHANGE_REC___MARK_FOR_DELETION as MARK_FOR_DELETION", \
	"FIL_NO_CHANGE_REC___CREATED_SOURCE_TYPE as CREATED_SOURCE_TYPE", \
	"FIL_NO_CHANGE_REC___CREATED_SOURCE as CREATED_SOURCE", \
	"FIL_NO_CHANGE_REC___CREATED_DTTM as CREATED_DTTM", \
	"FIL_NO_CHANGE_REC___LAST_UPDATED_SOURCE_TYPE as LAST_UPDATED_SOURCE_TYPE", \
	"FIL_NO_CHANGE_REC___LAST_UPDATED_SOURCE as LAST_UPDATED_SOURCE", \
	"FIL_NO_CHANGE_REC___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"FIL_NO_CHANGE_REC___OLD_DOCK_DOOR_STATUS as OLD_DOCK_DOOR_STATUS", \
	"FIL_NO_CHANGE_REC___ACTIVITY_TYPE as ACTIVITY_TYPE", \
	"FIL_NO_CHANGE_REC___APPOINTMENT_TYPE as APPOINTMENT_TYPE", \
	"FIL_NO_CHANGE_REC___BARCODE as BARCODE", \
	"FIL_NO_CHANGE_REC___TIME_FROM_INDUCTION as TIME_FROM_INDUCTION", \
	"FIL_NO_CHANGE_REC___PALLETIZATION_SPUR as PALLETIZATION_SPUR", \
	"FIL_NO_CHANGE_REC___SORT_ZONE as SORT_ZONE", \
	"FIL_NO_CHANGE_REC___ILM_APPOINTMENT_NUMBER as ILM_APPOINTMENT_NUMBER", \
	"FIL_NO_CHANGE_REC___FLOWTHRU_ALLOC_SORT_PRTY as FLOWTHRU_ALLOC_SORT_PRTY", \
	"FIL_NO_CHANGE_REC___LOCN_HDR_ID as LOCN_HDR_ID", \
	"FIL_NO_CHANGE_REC___DOCK_DOOR_LOCN_ID as DOCK_DOOR_LOCN_ID", \
	"FIL_NO_CHANGE_REC___OUTBD_STAGING_LOCN_ID as OUTBD_STAGING_LOCN_ID", \
	"IF(FIL_NO_CHANGE_REC___in_LOAD_TSTMP IS NULL, CURRENT_TIMESTAMP, FIL_NO_CHANGE_REC___in_LOAD_TSTMP) as LOAD_TSTMP", \
	"CURRENT_TIMESTAMP as UPDATE_TSTMP", \
	"FIL_NO_CHANGE_REC___in_WM_DOCK_DOOR_ID as in_WM_DOCK_DOOR_ID" \
)

# COMMAND ----------
# Processing node UPD_VALIDATE, type UPDATE_STRATEGY 
# COLUMN COUNT: 30

# for each involved DataFrame, append the dataframe name to each column
EXP_EVAL_VALUES_temp = EXP_EVAL_VALUES.toDF(*["EXP_EVAL_VALUES___" + col for col in EXP_EVAL_VALUES.columns])

UPD_VALIDATE = EXP_EVAL_VALUES_temp.selectExpr( \
	"EXP_EVAL_VALUES___LOCATION_ID as LOCATION_ID", \
	"EXP_EVAL_VALUES___DOCK_DOOR_ID as DOCK_DOOR_ID", \
	"EXP_EVAL_VALUES___FACILITY_ID as FACILITY_ID", \
	"EXP_EVAL_VALUES___DOCK_ID as DOCK_ID", \
	"EXP_EVAL_VALUES___TC_COMPANY_ID as TC_COMPANY_ID", \
	"EXP_EVAL_VALUES___DOCK_DOOR_NAME as DOCK_DOOR_NAME", \
	"EXP_EVAL_VALUES___DOCK_DOOR_STATUS as DOCK_DOOR_STATUS", \
	"EXP_EVAL_VALUES___DESCRIPTION as DESCRIPTION", \
	"EXP_EVAL_VALUES___MARK_FOR_DELETION as MARK_FOR_DELETION", \
	"EXP_EVAL_VALUES___CREATED_SOURCE_TYPE as CREATED_SOURCE_TYPE", \
	"EXP_EVAL_VALUES___CREATED_SOURCE as CREATED_SOURCE", \
	"EXP_EVAL_VALUES___CREATED_DTTM as CREATED_DTTM", \
	"EXP_EVAL_VALUES___LAST_UPDATED_SOURCE_TYPE as LAST_UPDATED_SOURCE_TYPE", \
	"EXP_EVAL_VALUES___LAST_UPDATED_SOURCE as LAST_UPDATED_SOURCE", \
	"EXP_EVAL_VALUES___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"EXP_EVAL_VALUES___OLD_DOCK_DOOR_STATUS as OLD_DOCK_DOOR_STATUS", \
	"EXP_EVAL_VALUES___ACTIVITY_TYPE as ACTIVITY_TYPE", \
	"EXP_EVAL_VALUES___APPOINTMENT_TYPE as APPOINTMENT_TYPE", \
	"EXP_EVAL_VALUES___BARCODE as BARCODE", \
	"EXP_EVAL_VALUES___TIME_FROM_INDUCTION as TIME_FROM_INDUCTION", \
	"EXP_EVAL_VALUES___PALLETIZATION_SPUR as PALLETIZATION_SPUR", \
	"EXP_EVAL_VALUES___SORT_ZONE as SORT_ZONE", \
	"EXP_EVAL_VALUES___ILM_APPOINTMENT_NUMBER as ILM_APPOINTMENT_NUMBER", \
	"EXP_EVAL_VALUES___FLOWTHRU_ALLOC_SORT_PRTY as FLOWTHRU_ALLOC_SORT_PRTY", \
	"EXP_EVAL_VALUES___LOCN_HDR_ID as LOCN_HDR_ID", \
	"EXP_EVAL_VALUES___DOCK_DOOR_LOCN_ID as DOCK_DOOR_LOCN_ID", \
	"EXP_EVAL_VALUES___OUTBD_STAGING_LOCN_ID as OUTBD_STAGING_LOCN_ID", \
	"EXP_EVAL_VALUES___LOAD_TSTMP as LOAD_TSTMP", \
	"EXP_EVAL_VALUES___UPDATE_TSTMP as UPDATE_TSTMP", \
	"EXP_EVAL_VALUES___in_WM_DOCK_DOOR_ID as in_WM_DOCK_DOOR_ID") \
	.withColumn('pyspark_data_action', when((col('in_WM_DOCK_DOOR_ID').isNull()) ,(lit(0))).otherwise(lit(1)))

# COMMAND ----------
# Processing node Shortcut_to_WM_DOCK_DOOR, type TARGET 
# COLUMN COUNT: 29


Shortcut_to_WM_DOCK_DOOR = UPD_VALIDATE.selectExpr(
	"CAST(LOCATION_ID AS BIGINT) as LOCATION_ID",
	"CAST(DOCK_DOOR_ID AS BIGINT) as WM_DOCK_DOOR_ID",
	"CAST(TC_COMPANY_ID AS INT) as WM_TC_COMPANY_ID",
	"CAST(FACILITY_ID AS INT) as WM_FACILITY_ID",
	"CAST(DOCK_ID AS STRING) as WM_DOCK_ID",
	"CAST(DOCK_DOOR_NAME AS STRING) as WM_DOCK_DOOR_NAME",
	"CAST(DESCRIPTION AS STRING) as WM_DOCK_DOOR_DESC",
	"CAST(DOCK_DOOR_STATUS AS SMALLINT) as WM_DOCK_DOOR_STATUS",
	"CAST(OLD_DOCK_DOOR_STATUS AS SMALLINT) as WM_OLD_DOCK_DOOR_STATUS",
	"CAST(BARCODE AS STRING) as WM_DOCK_DOOR_BARCODE",
	"CAST(DOCK_DOOR_LOCN_ID AS STRING) as WM_DOCK_DOOR_LOCN_ID",
	"CAST(LOCN_HDR_ID AS INT) as WM_LOCN_HDR_ID",
	"CAST(OUTBD_STAGING_LOCN_ID AS STRING) as WM_OUTBD_STAGING_LOCN_ID",
	"CAST(FLOWTHRU_ALLOC_SORT_PRTY AS STRING) as WM_FLOWTHRU_ALLOC_SORT_PRTY",
	"CAST(SORT_ZONE AS STRING) as WM_SORT_ZONE",
	"CAST(ILM_APPOINTMENT_NUMBER AS STRING) as WM_ILM_APPOINTMENT_NBR",
	"CAST(ACTIVITY_TYPE AS STRING) as WM_ACTIVITY_TYPE",
	"CAST(APPOINTMENT_TYPE AS STRING) as WM_APPOINTMENT_TYPE",
	"CAST(TIME_FROM_INDUCTION AS DECIMAL(5,2)) as TIME_FROM_INDUCTION",
	"CAST(PALLETIZATION_SPUR AS STRING) as WM_PALLETIZATION_SPUR",
	"CAST(MARK_FOR_DELETION AS SMALLINT) as MARK_FOR_DELETION_FLAG",
	"CAST(CREATED_SOURCE_TYPE AS SMALLINT) as WM_CREATED_SOURCE_TYPE",
	"CAST(CREATED_SOURCE AS STRING) as WM_CREATED_SOURCE",
	"CAST(CREATED_DTTM AS TIMESTAMP) as WM_CREATED_TSTMP",
	"CAST(LAST_UPDATED_SOURCE_TYPE AS SMALLINT) as WM_LAST_UPDATED_SOURCE_TYPE",
	"CAST(LAST_UPDATED_SOURCE AS STRING) as WM_LAST_UPDATED_SOURCE",
	"CAST(LAST_UPDATED_DTTM AS TIMESTAMP) as WM_LAST_UPDATED_TSTMP",
	"CAST(UPDATE_TSTMP AS TIMESTAMP) as UPDATE_TSTMP",
	"CAST(LOAD_TSTMP AS TIMESTAMP) as LOAD_TSTMP", 
    "pyspark_data_action" 

)

try:
  primary_key = """source.LOCATION_ID = target.LOCATION_ID AND source.WM_DOCK_DOOR_ID = target.WM_DOCK_DOOR_ID"""
#   refined_perf_table = "WM_DOCK_DOOR"
  executeMerge(Shortcut_to_WM_DOCK_DOOR, refined_perf_table, primary_key)
  logger.info(f"Merge with {refined_perf_table} completed]")
  logPrevRunDt("WM_DOCK_DOOR", "WM_DOCK_DOOR", "Completed", "N/A", f"{raw}.log_run_details")
except Exception as e:
  logPrevRunDt("WM_DOCK_DOOR", "WM_DOCK_DOOR","Failed",str(e), f"{raw}.log_run_details", )
  raise e
	