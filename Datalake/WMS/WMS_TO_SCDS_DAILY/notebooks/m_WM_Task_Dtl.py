#Code converted on 2023-06-22 21:01:44
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from pyspark.dbutils import DBUtils
from Datalake.utils.genericUtilities import *
from Datalake.utils.configs import *
from Datalake.utils.mergeUtils import *
from Datalake.utils.logger import *
# COMMAND ----------

parser = argparse.ArgumentParser()
spark = SparkSession.getActiveSession()
dbutils = DBUtils(spark)

parser.add_argument('env', type=str, help='Env Variable')
args = parser.parse_args()
env = args.env
# env = 'dev'

if env is None or env == '':
    raise ValueError('env is not set')

refine = getEnvPrefix(env) + 'refine'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'

# Set global variables
starttime = datetime.now() #start timestamp of the script
refined_perf_table = f"{refine}.WM_TASK_DTL"
raw_perf_table = f"{raw}.WM_TASK_DTL_PRE"
site_profile_table = f"{legacy}.SITE_PROFILE"


# COMMAND ----------
# Processing node SQ_Shortcut_to_WM_TASK_DTL, type SOURCE 
# COLUMN COUNT: 5

SQ_Shortcut_to_WM_TASK_DTL = spark.sql(f"""SELECT
LOCATION_ID,
WM_TASK_DTL_ID,
WM_CREATE_TSTMP,
WM_MOD_TSTMP,
LOAD_TSTMP
FROM {refined_perf_table}
WHERE WM_TASK_DTL_ID IN (SELECT TASK_DTL_ID FROM {raw_perf_table})""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node SQ_Shortcut_to_WM_TASK_DTL_PRE, type SOURCE 
# COLUMN COUNT: 88

SQ_Shortcut_to_WM_TASK_DTL_PRE = spark.sql(f"""SELECT
DC_NBR,
TASK_DTL_ID,
TASK_ID,
TASK_SEQ_NBR,
CNTR_NBR,
INVN_TYPE,
PROD_STAT,
BATCH_NBR,
SKU_ATTR_1,
SKU_ATTR_2,
SKU_ATTR_3,
SKU_ATTR_4,
SKU_ATTR_5,
CNTRY_OF_ORGN,
ALLOC_INVN_CODE,
PULL_LOCN_ID,
ALLOC_UOM_QTY,
FULL_CNTR_ALLOCD,
INVN_NEED_TYPE,
TASK_PRTY,
TASK_GENRTN_REF_CODE,
TASK_GENRTN_REF_NBR,
TASK_CMPL_REF_CODE,
TASK_CMPL_REF_NBR,
ERLST_START_DATE_TIME,
LTST_START_DATE_TIME,
LTST_CMPL_DATE_TIME,
ALLOC_UOM,
ORIG_REQMT,
QTY_ALLOC,
QTY_PULLD,
DEST_LOCN_ID,
DEST_LOCN_SEQ,
STAT_CODE,
TASK_TYPE,
CURR_WORK_GRP,
CURR_WORK_AREA,
REPL_DIVRT_LOCN,
PICK_SEQ_CODE,
TASK_LOCN_SEQ,
CREATE_DATE_TIME,
MOD_DATE_TIME,
USER_ID,
PKT_CTRL_NBR,
REQD_INVN_TYPE,
REQD_PROD_STAT,
REQD_BATCH_NBR,
REQD_SKU_ATTR_1,
REQD_SKU_ATTR_2,
REQD_SKU_ATTR_3,
REQD_SKU_ATTR_4,
REQD_SKU_ATTR_5,
REQD_CNTRY_OF_ORGN,
PKT_SEQ_NBR,
CARTON_NBR,
CARTON_SEQ_NBR,
PIKR_NBR,
TASK_CMPL_REF_NBR_SEQ,
ALLOC_INVN_DTL_ID,
SUBSTITUTION_FLAG,
NEXT_TASK_ID,
NEXT_TASK_SEQ_NBR,
NEXT_TASK_DESC,
NEXT_TASK_TYPE,
MISC_ALPHA_FIELD_1,
MISC_ALPHA_FIELD_2,
MISC_ALPHA_FIELD_3,
VOCOLLECT_POSN,
VOCOLLECT_SHORT_FLAG,
PAGE_NBR,
RSN_CODE,
SLOT_NBR,
SUBSLOT_NBR,
CD_MASTER_ID,
TASK_HDR_ID,
WM_VERSION_ID,
ITEM_ID,
TC_ORDER_ID,
LINE_ITEM_ID,
TRANS_INVN_TYPE,
TOTE_NBR,
IS_CHASE_CREATED,
RESOURCE_GROUP_ID,
WORK_RESOURCE_ID,
WORK_RELEASE_BATCH_NUMBER,
ALLOCATION_KEY,
DISTRIBUTION_KEY,
LOAD_TSTMP
FROM {raw_perf_table}""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node SQ_Shortcut_to_SITE_PROFILE, type SOURCE 
# COLUMN COUNT: 2

SQ_Shortcut_to_SITE_PROFILE = spark.sql(f"""SELECT LOCATION_ID, STORE_NBR FROM {site_profile_table}""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node EXP_TRANS, type EXPRESSION 
# COLUMN COUNT: 89

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_WM_TASK_DTL_PRE_temp = SQ_Shortcut_to_WM_TASK_DTL_PRE.toDF(*["SQ_Shortcut_to_WM_TASK_DTL_PRE___" + col for col in SQ_Shortcut_to_WM_TASK_DTL_PRE.columns])

EXP_TRANS = SQ_Shortcut_to_WM_TASK_DTL_PRE_temp.selectExpr( 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___sys_row_id as sys_row_id", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___DC_NBR as DC_NBR", 
	"cast(SQ_Shortcut_to_WM_TASK_DTL_PRE___DC_NBR as int) as o_DC_NBR", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___TASK_DTL_ID as TASK_DTL_ID", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___TASK_ID as TASK_ID", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___TASK_SEQ_NBR as TASK_SEQ_NBR", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___CNTR_NBR as CNTR_NBR", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___INVN_TYPE as INVN_TYPE", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___PROD_STAT as PROD_STAT", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___BATCH_NBR as BATCH_NBR", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___SKU_ATTR_1 as SKU_ATTR_1", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___SKU_ATTR_2 as SKU_ATTR_2", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___SKU_ATTR_3 as SKU_ATTR_3", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___SKU_ATTR_4 as SKU_ATTR_4", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___SKU_ATTR_5 as SKU_ATTR_5", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___CNTRY_OF_ORGN as CNTRY_OF_ORGN", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___ALLOC_INVN_CODE as ALLOC_INVN_CODE", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___PULL_LOCN_ID as PULL_LOCN_ID", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___ALLOC_UOM_QTY as ALLOC_UOM_QTY", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___FULL_CNTR_ALLOCD as FULL_CNTR_ALLOCD", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___INVN_NEED_TYPE as INVN_NEED_TYPE", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___TASK_PRTY as TASK_PRTY", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___TASK_GENRTN_REF_CODE as TASK_GENRTN_REF_CODE", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___TASK_GENRTN_REF_NBR as TASK_GENRTN_REF_NBR", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___TASK_CMPL_REF_CODE as TASK_CMPL_REF_CODE", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___TASK_CMPL_REF_NBR as TASK_CMPL_REF_NBR", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___ERLST_START_DATE_TIME as ERLST_START_DATE_TIME", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___LTST_START_DATE_TIME as LTST_START_DATE_TIME", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___LTST_CMPL_DATE_TIME as LTST_CMPL_DATE_TIME", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___ALLOC_UOM as ALLOC_UOM", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___ORIG_REQMT as ORIG_REQMT", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___QTY_ALLOC as QTY_ALLOC", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___QTY_PULLD as QTY_PULLD", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___DEST_LOCN_ID as DEST_LOCN_ID", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___DEST_LOCN_SEQ as DEST_LOCN_SEQ", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___STAT_CODE as STAT_CODE", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___TASK_TYPE as TASK_TYPE", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___CURR_WORK_GRP as CURR_WORK_GRP", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___CURR_WORK_AREA as CURR_WORK_AREA", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___REPL_DIVRT_LOCN as REPL_DIVRT_LOCN", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___PICK_SEQ_CODE as PICK_SEQ_CODE", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___TASK_LOCN_SEQ as TASK_LOCN_SEQ", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___CREATE_DATE_TIME as CREATE_DATE_TIME", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___MOD_DATE_TIME as MOD_DATE_TIME", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___USER_ID as USER_ID", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___PKT_CTRL_NBR as PKT_CTRL_NBR", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___REQD_INVN_TYPE as REQD_INVN_TYPE", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___REQD_PROD_STAT as REQD_PROD_STAT", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___REQD_BATCH_NBR as REQD_BATCH_NBR", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___REQD_SKU_ATTR_1 as REQD_SKU_ATTR_1", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___REQD_SKU_ATTR_2 as REQD_SKU_ATTR_2", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___REQD_SKU_ATTR_3 as REQD_SKU_ATTR_3", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___REQD_SKU_ATTR_4 as REQD_SKU_ATTR_4", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___REQD_SKU_ATTR_5 as REQD_SKU_ATTR_5", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___REQD_CNTRY_OF_ORGN as REQD_CNTRY_OF_ORGN", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___PKT_SEQ_NBR as PKT_SEQ_NBR", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___CARTON_NBR as CARTON_NBR", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___CARTON_SEQ_NBR as CARTON_SEQ_NBR", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___PIKR_NBR as PIKR_NBR", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___TASK_CMPL_REF_NBR_SEQ as TASK_CMPL_REF_NBR_SEQ", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___ALLOC_INVN_DTL_ID as ALLOC_INVN_DTL_ID", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___SUBSTITUTION_FLAG as SUBSTITUTION_FLAG", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___NEXT_TASK_ID as NEXT_TASK_ID", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___NEXT_TASK_SEQ_NBR as NEXT_TASK_SEQ_NBR", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___NEXT_TASK_DESC as NEXT_TASK_DESC", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___NEXT_TASK_TYPE as NEXT_TASK_TYPE", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___MISC_ALPHA_FIELD_1 as MISC_ALPHA_FIELD_1", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___MISC_ALPHA_FIELD_2 as MISC_ALPHA_FIELD_2", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___MISC_ALPHA_FIELD_3 as MISC_ALPHA_FIELD_3", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___VOCOLLECT_POSN as VOCOLLECT_POSN", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___VOCOLLECT_SHORT_FLAG as VOCOLLECT_SHORT_FLAG", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___PAGE_NBR as PAGE_NBR", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___RSN_CODE as RSN_CODE", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___SLOT_NBR as SLOT_NBR", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___SUBSLOT_NBR as SUBSLOT_NBR", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___CD_MASTER_ID as CD_MASTER_ID", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___TASK_HDR_ID as TASK_HDR_ID", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___WM_VERSION_ID as WM_VERSION_ID", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___ITEM_ID as ITEM_ID", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___TC_ORDER_ID as TC_ORDER_ID", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___LINE_ITEM_ID as LINE_ITEM_ID", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___TRANS_INVN_TYPE as TRANS_INVN_TYPE", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___TOTE_NBR as TOTE_NBR", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___IS_CHASE_CREATED as IS_CHASE_CREATED", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___RESOURCE_GROUP_ID as RESOURCE_GROUP_ID", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___WORK_RESOURCE_ID as WORK_RESOURCE_ID", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___WORK_RELEASE_BATCH_NUMBER as WORK_RELEASE_BATCH_NUMBER", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___ALLOCATION_KEY as ALLOCATION_KEY", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___DISTRIBUTION_KEY as DISTRIBUTION_KEY", 
	"SQ_Shortcut_to_WM_TASK_DTL_PRE___LOAD_TSTMP as LOAD_TSTMP" 
)

# COMMAND ----------
# Processing node JNR_SITE_PROFILE, type JOINER 
# COLUMN COUNT: 89

JNR_SITE_PROFILE = SQ_Shortcut_to_SITE_PROFILE.join(EXP_TRANS,[SQ_Shortcut_to_SITE_PROFILE.STORE_NBR == EXP_TRANS.o_DC_NBR],'inner')

# COMMAND ----------
# Processing node JNR_WM_TASK_DTL, type JOINER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 92

# for each involved DataFrame, append the dataframe name to each column
JNR_SITE_PROFILE_temp = JNR_SITE_PROFILE.toDF(*["JNR_SITE_PROFILE___" + col for col in JNR_SITE_PROFILE.columns])
SQ_Shortcut_to_WM_TASK_DTL_temp = SQ_Shortcut_to_WM_TASK_DTL.toDF(*["SQ_Shortcut_to_WM_TASK_DTL___" + col for col in SQ_Shortcut_to_WM_TASK_DTL.columns])

JNR_WM_TASK_DTL = SQ_Shortcut_to_WM_TASK_DTL_temp.join(JNR_SITE_PROFILE_temp,[SQ_Shortcut_to_WM_TASK_DTL_temp.SQ_Shortcut_to_WM_TASK_DTL___LOCATION_ID == JNR_SITE_PROFILE_temp.JNR_SITE_PROFILE___LOCATION_ID, SQ_Shortcut_to_WM_TASK_DTL_temp.SQ_Shortcut_to_WM_TASK_DTL___WM_TASK_DTL_ID == JNR_SITE_PROFILE_temp.JNR_SITE_PROFILE___TASK_DTL_ID],'right_outer').selectExpr( 
	"JNR_SITE_PROFILE___LOCATION_ID as LOCATION_ID", 
	"JNR_SITE_PROFILE___TASK_DTL_ID as TASK_DTL_ID", 
	"JNR_SITE_PROFILE___TASK_ID as TASK_ID", 
	"JNR_SITE_PROFILE___TASK_SEQ_NBR as TASK_SEQ_NBR", 
	"JNR_SITE_PROFILE___CNTR_NBR as CNTR_NBR", 
	"JNR_SITE_PROFILE___INVN_TYPE as INVN_TYPE", 
	"JNR_SITE_PROFILE___PROD_STAT as PROD_STAT", 
	"JNR_SITE_PROFILE___BATCH_NBR as BATCH_NBR", 
	"JNR_SITE_PROFILE___SKU_ATTR_1 as SKU_ATTR_1", 
	"JNR_SITE_PROFILE___SKU_ATTR_2 as SKU_ATTR_2", 
	"JNR_SITE_PROFILE___SKU_ATTR_3 as SKU_ATTR_3", 
	"JNR_SITE_PROFILE___SKU_ATTR_4 as SKU_ATTR_4", 
	"JNR_SITE_PROFILE___SKU_ATTR_5 as SKU_ATTR_5", 
	"JNR_SITE_PROFILE___CNTRY_OF_ORGN as CNTRY_OF_ORGN", 
	"JNR_SITE_PROFILE___ALLOC_INVN_CODE as ALLOC_INVN_CODE", 
	"JNR_SITE_PROFILE___PULL_LOCN_ID as PULL_LOCN_ID", 
	"JNR_SITE_PROFILE___ALLOC_UOM_QTY as ALLOC_UOM_QTY", 
	"JNR_SITE_PROFILE___FULL_CNTR_ALLOCD as FULL_CNTR_ALLOCD", 
	"JNR_SITE_PROFILE___INVN_NEED_TYPE as INVN_NEED_TYPE", 
	"JNR_SITE_PROFILE___TASK_PRTY as TASK_PRTY", 
	"JNR_SITE_PROFILE___TASK_GENRTN_REF_CODE as TASK_GENRTN_REF_CODE", 
	"JNR_SITE_PROFILE___TASK_GENRTN_REF_NBR as TASK_GENRTN_REF_NBR", 
	"JNR_SITE_PROFILE___TASK_CMPL_REF_CODE as TASK_CMPL_REF_CODE", 
	"JNR_SITE_PROFILE___TASK_CMPL_REF_NBR as TASK_CMPL_REF_NBR", 
	"JNR_SITE_PROFILE___ERLST_START_DATE_TIME as ERLST_START_DATE_TIME", 
	"JNR_SITE_PROFILE___LTST_START_DATE_TIME as LTST_START_DATE_TIME", 
	"JNR_SITE_PROFILE___LTST_CMPL_DATE_TIME as LTST_CMPL_DATE_TIME", 
	"JNR_SITE_PROFILE___ALLOC_UOM as ALLOC_UOM", 
	"JNR_SITE_PROFILE___ORIG_REQMT as ORIG_REQMT", 
	"JNR_SITE_PROFILE___QTY_ALLOC as QTY_ALLOC", 
	"JNR_SITE_PROFILE___QTY_PULLD as QTY_PULLD", 
	"JNR_SITE_PROFILE___DEST_LOCN_ID as DEST_LOCN_ID", 
	"JNR_SITE_PROFILE___DEST_LOCN_SEQ as DEST_LOCN_SEQ", 
	"JNR_SITE_PROFILE___STAT_CODE as STAT_CODE", 
	"JNR_SITE_PROFILE___TASK_TYPE as TASK_TYPE", 
	"JNR_SITE_PROFILE___CURR_WORK_GRP as CURR_WORK_GRP", 
	"JNR_SITE_PROFILE___CURR_WORK_AREA as CURR_WORK_AREA", 
	"JNR_SITE_PROFILE___REPL_DIVRT_LOCN as REPL_DIVRT_LOCN", 
	"JNR_SITE_PROFILE___PICK_SEQ_CODE as PICK_SEQ_CODE", 
	"JNR_SITE_PROFILE___TASK_LOCN_SEQ as TASK_LOCN_SEQ", 
	"JNR_SITE_PROFILE___CREATE_DATE_TIME as CREATE_DATE_TIME", 
	"JNR_SITE_PROFILE___MOD_DATE_TIME as MOD_DATE_TIME", 
	"JNR_SITE_PROFILE___USER_ID as USER_ID", 
	"JNR_SITE_PROFILE___PKT_CTRL_NBR as PKT_CTRL_NBR", 
	"JNR_SITE_PROFILE___REQD_INVN_TYPE as REQD_INVN_TYPE", 
	"JNR_SITE_PROFILE___REQD_PROD_STAT as REQD_PROD_STAT", 
	"JNR_SITE_PROFILE___REQD_BATCH_NBR as REQD_BATCH_NBR", 
	"JNR_SITE_PROFILE___REQD_SKU_ATTR_1 as REQD_SKU_ATTR_1", 
	"JNR_SITE_PROFILE___REQD_SKU_ATTR_2 as REQD_SKU_ATTR_2", 
	"JNR_SITE_PROFILE___REQD_SKU_ATTR_3 as REQD_SKU_ATTR_3", 
	"JNR_SITE_PROFILE___REQD_SKU_ATTR_4 as REQD_SKU_ATTR_4", 
	"JNR_SITE_PROFILE___REQD_SKU_ATTR_5 as REQD_SKU_ATTR_5", 
	"JNR_SITE_PROFILE___REQD_CNTRY_OF_ORGN as REQD_CNTRY_OF_ORGN", 
	"JNR_SITE_PROFILE___PKT_SEQ_NBR as PKT_SEQ_NBR", 
	"JNR_SITE_PROFILE___CARTON_NBR as CARTON_NBR", 
	"JNR_SITE_PROFILE___CARTON_SEQ_NBR as CARTON_SEQ_NBR", 
	"JNR_SITE_PROFILE___PIKR_NBR as PIKR_NBR", 
	"JNR_SITE_PROFILE___TASK_CMPL_REF_NBR_SEQ as TASK_CMPL_REF_NBR_SEQ", 
	"JNR_SITE_PROFILE___ALLOC_INVN_DTL_ID as ALLOC_INVN_DTL_ID", 
	"JNR_SITE_PROFILE___SUBSTITUTION_FLAG as SUBSTITUTION_FLAG", 
	"JNR_SITE_PROFILE___NEXT_TASK_ID as NEXT_TASK_ID", 
	"JNR_SITE_PROFILE___NEXT_TASK_SEQ_NBR as NEXT_TASK_SEQ_NBR", 
	"JNR_SITE_PROFILE___NEXT_TASK_DESC as NEXT_TASK_DESC", 
	"JNR_SITE_PROFILE___NEXT_TASK_TYPE as NEXT_TASK_TYPE", 
	"JNR_SITE_PROFILE___MISC_ALPHA_FIELD_1 as MISC_ALPHA_FIELD_1", 
	"JNR_SITE_PROFILE___MISC_ALPHA_FIELD_2 as MISC_ALPHA_FIELD_2", 
	"JNR_SITE_PROFILE___MISC_ALPHA_FIELD_3 as MISC_ALPHA_FIELD_3", 
	"JNR_SITE_PROFILE___VOCOLLECT_POSN as VOCOLLECT_POSN", 
	"JNR_SITE_PROFILE___VOCOLLECT_SHORT_FLAG as VOCOLLECT_SHORT_FLAG", 
	"JNR_SITE_PROFILE___PAGE_NBR as PAGE_NBR", 
	"JNR_SITE_PROFILE___RSN_CODE as RSN_CODE", 
	"JNR_SITE_PROFILE___SLOT_NBR as SLOT_NBR", 
	"JNR_SITE_PROFILE___SUBSLOT_NBR as SUBSLOT_NBR", 
	"JNR_SITE_PROFILE___CD_MASTER_ID as CD_MASTER_ID", 
	"JNR_SITE_PROFILE___TASK_HDR_ID as TASK_HDR_ID", 
	"JNR_SITE_PROFILE___WM_VERSION_ID as WM_VERSION_ID", 
	"JNR_SITE_PROFILE___ITEM_ID as ITEM_ID", 
	"JNR_SITE_PROFILE___TC_ORDER_ID as TC_ORDER_ID", 
	"JNR_SITE_PROFILE___LINE_ITEM_ID as LINE_ITEM_ID", 
	"JNR_SITE_PROFILE___TRANS_INVN_TYPE as TRANS_INVN_TYPE", 
	"JNR_SITE_PROFILE___TOTE_NBR as TOTE_NBR", 
	"JNR_SITE_PROFILE___IS_CHASE_CREATED as IS_CHASE_CREATED", 
	"JNR_SITE_PROFILE___RESOURCE_GROUP_ID as RESOURCE_GROUP_ID", 
	"JNR_SITE_PROFILE___WORK_RESOURCE_ID as WORK_RESOURCE_ID", 
	"JNR_SITE_PROFILE___WORK_RELEASE_BATCH_NUMBER as WORK_RELEASE_BATCH_NUMBER", 
	"JNR_SITE_PROFILE___ALLOCATION_KEY as ALLOCATION_KEY", 
	"JNR_SITE_PROFILE___DISTRIBUTION_KEY as DISTRIBUTION_KEY", 
	"SQ_Shortcut_to_WM_TASK_DTL___LOCATION_ID as i_LOCATION_ID", 
	"SQ_Shortcut_to_WM_TASK_DTL___WM_TASK_DTL_ID as i_WM_TASK_DTL_ID", 
	"SQ_Shortcut_to_WM_TASK_DTL___WM_CREATE_TSTMP as i_WM_CREATE_TSTMP", 
	"SQ_Shortcut_to_WM_TASK_DTL___WM_MOD_TSTMP as i_WM_MOD_TSTMP", 
	"SQ_Shortcut_to_WM_TASK_DTL___LOAD_TSTMP as i_LOAD_TSTMP")

# COMMAND ----------
# Processing node FIL_UNCHANGED_RECORDS, type FILTER 
# COLUMN COUNT: 91

# for each involved DataFrame, append the dataframe name to each column
JNR_WM_TASK_DTL_temp = JNR_WM_TASK_DTL.toDF(*["JNR_WM_TASK_DTL___" + col for col in JNR_WM_TASK_DTL.columns])

FIL_UNCHANGED_RECORDS = JNR_WM_TASK_DTL_temp.selectExpr( 
	"JNR_WM_TASK_DTL___LOCATION_ID as LOCATION_ID", 
	"JNR_WM_TASK_DTL___TASK_DTL_ID as TASK_DTL_ID", 
	"JNR_WM_TASK_DTL___TASK_ID as TASK_ID", 
	"JNR_WM_TASK_DTL___TASK_SEQ_NBR as TASK_SEQ_NBR", 
	"JNR_WM_TASK_DTL___CNTR_NBR as CNTR_NBR", 
	"JNR_WM_TASK_DTL___INVN_TYPE as INVN_TYPE", 
	"JNR_WM_TASK_DTL___PROD_STAT as PROD_STAT", 
	"JNR_WM_TASK_DTL___BATCH_NBR as BATCH_NBR", 
	"JNR_WM_TASK_DTL___SKU_ATTR_1 as SKU_ATTR_1", 
	"JNR_WM_TASK_DTL___SKU_ATTR_2 as SKU_ATTR_2", 
	"JNR_WM_TASK_DTL___SKU_ATTR_3 as SKU_ATTR_3", 
	"JNR_WM_TASK_DTL___SKU_ATTR_4 as SKU_ATTR_4", 
	"JNR_WM_TASK_DTL___SKU_ATTR_5 as SKU_ATTR_5", 
	"JNR_WM_TASK_DTL___CNTRY_OF_ORGN as CNTRY_OF_ORGN", 
	"JNR_WM_TASK_DTL___ALLOC_INVN_CODE as ALLOC_INVN_CODE", 
	"JNR_WM_TASK_DTL___PULL_LOCN_ID as PULL_LOCN_ID", 
	"JNR_WM_TASK_DTL___ALLOC_UOM_QTY as ALLOC_UOM_QTY", 
	"JNR_WM_TASK_DTL___FULL_CNTR_ALLOCD as FULL_CNTR_ALLOCD", 
	"JNR_WM_TASK_DTL___INVN_NEED_TYPE as INVN_NEED_TYPE", 
	"JNR_WM_TASK_DTL___TASK_PRTY as TASK_PRTY", 
	"JNR_WM_TASK_DTL___TASK_GENRTN_REF_CODE as TASK_GENRTN_REF_CODE", 
	"JNR_WM_TASK_DTL___TASK_GENRTN_REF_NBR as TASK_GENRTN_REF_NBR", 
	"JNR_WM_TASK_DTL___TASK_CMPL_REF_CODE as TASK_CMPL_REF_CODE", 
	"JNR_WM_TASK_DTL___TASK_CMPL_REF_NBR as TASK_CMPL_REF_NBR", 
	"JNR_WM_TASK_DTL___ERLST_START_DATE_TIME as ERLST_START_DATE_TIME", 
	"JNR_WM_TASK_DTL___LTST_START_DATE_TIME as LTST_START_DATE_TIME", 
	"JNR_WM_TASK_DTL___LTST_CMPL_DATE_TIME as LTST_CMPL_DATE_TIME", 
	"JNR_WM_TASK_DTL___ALLOC_UOM as ALLOC_UOM", 
	"JNR_WM_TASK_DTL___ORIG_REQMT as ORIG_REQMT", 
	"JNR_WM_TASK_DTL___QTY_ALLOC as QTY_ALLOC", 
	"JNR_WM_TASK_DTL___QTY_PULLD as QTY_PULLD", 
	"JNR_WM_TASK_DTL___DEST_LOCN_ID as DEST_LOCN_ID", 
	"JNR_WM_TASK_DTL___DEST_LOCN_SEQ as DEST_LOCN_SEQ", 
	"JNR_WM_TASK_DTL___STAT_CODE as STAT_CODE", 
	"JNR_WM_TASK_DTL___TASK_TYPE as TASK_TYPE", 
	"JNR_WM_TASK_DTL___CURR_WORK_GRP as CURR_WORK_GRP", 
	"JNR_WM_TASK_DTL___CURR_WORK_AREA as CURR_WORK_AREA", 
	"JNR_WM_TASK_DTL___REPL_DIVRT_LOCN as REPL_DIVRT_LOCN", 
	"JNR_WM_TASK_DTL___PICK_SEQ_CODE as PICK_SEQ_CODE", 
	"JNR_WM_TASK_DTL___TASK_LOCN_SEQ as TASK_LOCN_SEQ", 
	"JNR_WM_TASK_DTL___CREATE_DATE_TIME as CREATE_DATE_TIME", 
	"JNR_WM_TASK_DTL___MOD_DATE_TIME as MOD_DATE_TIME", 
	"JNR_WM_TASK_DTL___USER_ID as USER_ID", 
	"JNR_WM_TASK_DTL___PKT_CTRL_NBR as PKT_CTRL_NBR", 
	"JNR_WM_TASK_DTL___REQD_INVN_TYPE as REQD_INVN_TYPE", 
	"JNR_WM_TASK_DTL___REQD_PROD_STAT as REQD_PROD_STAT", 
	"JNR_WM_TASK_DTL___REQD_BATCH_NBR as REQD_BATCH_NBR", 
	"JNR_WM_TASK_DTL___REQD_SKU_ATTR_1 as REQD_SKU_ATTR_1", 
	"JNR_WM_TASK_DTL___REQD_SKU_ATTR_2 as REQD_SKU_ATTR_2", 
	"JNR_WM_TASK_DTL___REQD_SKU_ATTR_3 as REQD_SKU_ATTR_3", 
	"JNR_WM_TASK_DTL___REQD_SKU_ATTR_4 as REQD_SKU_ATTR_4", 
	"JNR_WM_TASK_DTL___REQD_SKU_ATTR_5 as REQD_SKU_ATTR_5", 
	"JNR_WM_TASK_DTL___REQD_CNTRY_OF_ORGN as REQD_CNTRY_OF_ORGN", 
	"JNR_WM_TASK_DTL___PKT_SEQ_NBR as PKT_SEQ_NBR", 
	"JNR_WM_TASK_DTL___CARTON_NBR as CARTON_NBR", 
	"JNR_WM_TASK_DTL___CARTON_SEQ_NBR as CARTON_SEQ_NBR", 
	"JNR_WM_TASK_DTL___PIKR_NBR as PIKR_NBR", 
	"JNR_WM_TASK_DTL___TASK_CMPL_REF_NBR_SEQ as TASK_CMPL_REF_NBR_SEQ", 
	"JNR_WM_TASK_DTL___ALLOC_INVN_DTL_ID as ALLOC_INVN_DTL_ID", 
	"JNR_WM_TASK_DTL___SUBSTITUTION_FLAG as SUBSTITUTION_FLAG", 
	"JNR_WM_TASK_DTL___NEXT_TASK_ID as NEXT_TASK_ID", 
	"JNR_WM_TASK_DTL___NEXT_TASK_SEQ_NBR as NEXT_TASK_SEQ_NBR", 
	"JNR_WM_TASK_DTL___NEXT_TASK_DESC as NEXT_TASK_DESC", 
	"JNR_WM_TASK_DTL___NEXT_TASK_TYPE as NEXT_TASK_TYPE", 
	"JNR_WM_TASK_DTL___MISC_ALPHA_FIELD_1 as MISC_ALPHA_FIELD_1", 
	"JNR_WM_TASK_DTL___MISC_ALPHA_FIELD_2 as MISC_ALPHA_FIELD_2", 
	"JNR_WM_TASK_DTL___MISC_ALPHA_FIELD_3 as MISC_ALPHA_FIELD_3", 
	"JNR_WM_TASK_DTL___VOCOLLECT_POSN as VOCOLLECT_POSN", 
	"JNR_WM_TASK_DTL___VOCOLLECT_SHORT_FLAG as VOCOLLECT_SHORT_FLAG", 
	"JNR_WM_TASK_DTL___PAGE_NBR as PAGE_NBR", 
	"JNR_WM_TASK_DTL___RSN_CODE as RSN_CODE", 
	"JNR_WM_TASK_DTL___SLOT_NBR as SLOT_NBR", 
	"JNR_WM_TASK_DTL___SUBSLOT_NBR as SUBSLOT_NBR", 
	"JNR_WM_TASK_DTL___CD_MASTER_ID as CD_MASTER_ID", 
	"JNR_WM_TASK_DTL___TASK_HDR_ID as TASK_HDR_ID", 
	"JNR_WM_TASK_DTL___WM_VERSION_ID as WM_VERSION_ID", 
	"JNR_WM_TASK_DTL___ITEM_ID as ITEM_ID", 
	"JNR_WM_TASK_DTL___TC_ORDER_ID as TC_ORDER_ID", 
	"JNR_WM_TASK_DTL___LINE_ITEM_ID as LINE_ITEM_ID", 
	"JNR_WM_TASK_DTL___TRANS_INVN_TYPE as TRANS_INVN_TYPE", 
	"JNR_WM_TASK_DTL___TOTE_NBR as TOTE_NBR", 
	"JNR_WM_TASK_DTL___IS_CHASE_CREATED as IS_CHASE_CREATED", 
	"JNR_WM_TASK_DTL___RESOURCE_GROUP_ID as RESOURCE_GROUP_ID", 
	"JNR_WM_TASK_DTL___WORK_RESOURCE_ID as WORK_RESOURCE_ID", 
	"JNR_WM_TASK_DTL___WORK_RELEASE_BATCH_NUMBER as WORK_RELEASE_BATCH_NUMBER", 
	"JNR_WM_TASK_DTL___ALLOCATION_KEY as ALLOCATION_KEY", 
	"JNR_WM_TASK_DTL___DISTRIBUTION_KEY as DISTRIBUTION_KEY", 
	"JNR_WM_TASK_DTL___i_WM_TASK_DTL_ID as i_WM_TASK_DTL_ID", 
	"JNR_WM_TASK_DTL___i_WM_CREATE_TSTMP as i_WM_CREATE_TSTMP", 
	"JNR_WM_TASK_DTL___i_WM_MOD_TSTMP as i_WM_MOD_TSTMP", 
	"JNR_WM_TASK_DTL___i_LOAD_TSTMP as i_LOAD_TSTMP").filter(expr("i_WM_TASK_DTL_ID IS NULL OR (NOT i_WM_TASK_DTL_ID IS NULL AND (COALESCE(CREATE_DATE_TIME, date'1900-01-01') != COALESCE(i_WM_CREATE_TSTMP, date'1900-01-01')) OR (COALESCE(MOD_DATE_TIME, date'1900-01-01') != COALESCE(i_WM_MOD_TSTMP, date'1900-01-01')))")).withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node EXP_UPDATE_VALIDATOR, type EXPRESSION 
# COLUMN COUNT: 92

# for each involved DataFrame, append the dataframe name to each column
FIL_UNCHANGED_RECORDS_temp = FIL_UNCHANGED_RECORDS.toDF(*["FIL_UNCHANGED_RECORDS___" + col for col in FIL_UNCHANGED_RECORDS.columns])

EXP_UPDATE_VALIDATOR = FIL_UNCHANGED_RECORDS_temp.selectExpr( 
	"FIL_UNCHANGED_RECORDS___sys_row_id as sys_row_id", 
	"FIL_UNCHANGED_RECORDS___LOCATION_ID as LOCATION_ID", 
	"FIL_UNCHANGED_RECORDS___TASK_DTL_ID as TASK_DTL_ID", 
	"FIL_UNCHANGED_RECORDS___TASK_ID as TASK_ID", 
	"FIL_UNCHANGED_RECORDS___TASK_SEQ_NBR as TASK_SEQ_NBR", 
	"FIL_UNCHANGED_RECORDS___CNTR_NBR as CNTR_NBR", 
	"FIL_UNCHANGED_RECORDS___INVN_TYPE as INVN_TYPE", 
	"FIL_UNCHANGED_RECORDS___PROD_STAT as PROD_STAT", 
	"FIL_UNCHANGED_RECORDS___BATCH_NBR as BATCH_NBR", 
	"FIL_UNCHANGED_RECORDS___SKU_ATTR_1 as SKU_ATTR_1", 
	"FIL_UNCHANGED_RECORDS___SKU_ATTR_2 as SKU_ATTR_2", 
	"FIL_UNCHANGED_RECORDS___SKU_ATTR_3 as SKU_ATTR_3", 
	"FIL_UNCHANGED_RECORDS___SKU_ATTR_4 as SKU_ATTR_4", 
	"FIL_UNCHANGED_RECORDS___SKU_ATTR_5 as SKU_ATTR_5", 
	"FIL_UNCHANGED_RECORDS___CNTRY_OF_ORGN as CNTRY_OF_ORGN", 
	"FIL_UNCHANGED_RECORDS___ALLOC_INVN_CODE as ALLOC_INVN_CODE", 
	"FIL_UNCHANGED_RECORDS___PULL_LOCN_ID as PULL_LOCN_ID", 
	"FIL_UNCHANGED_RECORDS___ALLOC_UOM_QTY as ALLOC_UOM_QTY", 
	"CASE WHEN TRIM(UPPER(FIL_UNCHANGED_RECORDS___FULL_CNTR_ALLOCD)) IN ('1', 'Y') THEN '1' ELSE '0' END as FULL_CNTR_ALLOCD_EXP", 
	"FIL_UNCHANGED_RECORDS___INVN_NEED_TYPE as INVN_NEED_TYPE", 
	"FIL_UNCHANGED_RECORDS___TASK_PRTY as TASK_PRTY", 
	"FIL_UNCHANGED_RECORDS___TASK_GENRTN_REF_CODE as TASK_GENRTN_REF_CODE", 
	"FIL_UNCHANGED_RECORDS___TASK_GENRTN_REF_NBR as TASK_GENRTN_REF_NBR", 
	"FIL_UNCHANGED_RECORDS___TASK_CMPL_REF_CODE as TASK_CMPL_REF_CODE", 
	"FIL_UNCHANGED_RECORDS___TASK_CMPL_REF_NBR as TASK_CMPL_REF_NBR", 
	"FIL_UNCHANGED_RECORDS___ERLST_START_DATE_TIME as ERLST_START_DATE_TIME", 
	"FIL_UNCHANGED_RECORDS___LTST_START_DATE_TIME as LTST_START_DATE_TIME", 
	"FIL_UNCHANGED_RECORDS___LTST_CMPL_DATE_TIME as LTST_CMPL_DATE_TIME", 
	"FIL_UNCHANGED_RECORDS___ALLOC_UOM as ALLOC_UOM", 
	"FIL_UNCHANGED_RECORDS___ORIG_REQMT as ORIG_REQMT", 
	"FIL_UNCHANGED_RECORDS___QTY_ALLOC as QTY_ALLOC", 
	"FIL_UNCHANGED_RECORDS___QTY_PULLD as QTY_PULLD", 
	"FIL_UNCHANGED_RECORDS___DEST_LOCN_ID as DEST_LOCN_ID", 
	"FIL_UNCHANGED_RECORDS___DEST_LOCN_SEQ as DEST_LOCN_SEQ", 
	"FIL_UNCHANGED_RECORDS___STAT_CODE as STAT_CODE", 
	"FIL_UNCHANGED_RECORDS___TASK_TYPE as TASK_TYPE", 
	"FIL_UNCHANGED_RECORDS___CURR_WORK_GRP as CURR_WORK_GRP", 
	"FIL_UNCHANGED_RECORDS___CURR_WORK_AREA as CURR_WORK_AREA", 
	"FIL_UNCHANGED_RECORDS___REPL_DIVRT_LOCN as REPL_DIVRT_LOCN", 
	"FIL_UNCHANGED_RECORDS___PICK_SEQ_CODE as PICK_SEQ_CODE", 
	"FIL_UNCHANGED_RECORDS___TASK_LOCN_SEQ as TASK_LOCN_SEQ", 
	"FIL_UNCHANGED_RECORDS___CREATE_DATE_TIME as CREATE_DATE_TIME", 
	"FIL_UNCHANGED_RECORDS___MOD_DATE_TIME as MOD_DATE_TIME", 
	"FIL_UNCHANGED_RECORDS___USER_ID as USER_ID", 
	"FIL_UNCHANGED_RECORDS___PKT_CTRL_NBR as PKT_CTRL_NBR", 
	"FIL_UNCHANGED_RECORDS___REQD_INVN_TYPE as REQD_INVN_TYPE", 
	"FIL_UNCHANGED_RECORDS___REQD_PROD_STAT as REQD_PROD_STAT", 
	"FIL_UNCHANGED_RECORDS___REQD_BATCH_NBR as REQD_BATCH_NBR", 
	"FIL_UNCHANGED_RECORDS___REQD_SKU_ATTR_1 as REQD_SKU_ATTR_1", 
	"FIL_UNCHANGED_RECORDS___REQD_SKU_ATTR_2 as REQD_SKU_ATTR_2", 
	"FIL_UNCHANGED_RECORDS___REQD_SKU_ATTR_3 as REQD_SKU_ATTR_3", 
	"FIL_UNCHANGED_RECORDS___REQD_SKU_ATTR_4 as REQD_SKU_ATTR_4", 
	"FIL_UNCHANGED_RECORDS___REQD_SKU_ATTR_5 as REQD_SKU_ATTR_5", 
	"FIL_UNCHANGED_RECORDS___REQD_CNTRY_OF_ORGN as REQD_CNTRY_OF_ORGN", 
	"FIL_UNCHANGED_RECORDS___PKT_SEQ_NBR as PKT_SEQ_NBR", 
	"FIL_UNCHANGED_RECORDS___CARTON_NBR as CARTON_NBR", 
	"FIL_UNCHANGED_RECORDS___CARTON_SEQ_NBR as CARTON_SEQ_NBR", 
	"FIL_UNCHANGED_RECORDS___PIKR_NBR as PIKR_NBR", 
	"FIL_UNCHANGED_RECORDS___TASK_CMPL_REF_NBR_SEQ as TASK_CMPL_REF_NBR_SEQ", 
	"FIL_UNCHANGED_RECORDS___ALLOC_INVN_DTL_ID as ALLOC_INVN_DTL_ID", 
	"FIL_UNCHANGED_RECORDS___SUBSTITUTION_FLAG as SUBSTITUTION_FLAG_EXP", 
	"FIL_UNCHANGED_RECORDS___NEXT_TASK_ID as NEXT_TASK_ID", 
	"FIL_UNCHANGED_RECORDS___NEXT_TASK_SEQ_NBR as NEXT_TASK_SEQ_NBR", 
	"FIL_UNCHANGED_RECORDS___NEXT_TASK_DESC as NEXT_TASK_DESC", 
	"FIL_UNCHANGED_RECORDS___NEXT_TASK_TYPE as NEXT_TASK_TYPE", 
	"FIL_UNCHANGED_RECORDS___MISC_ALPHA_FIELD_1 as MISC_ALPHA_FIELD_1", 
	"FIL_UNCHANGED_RECORDS___MISC_ALPHA_FIELD_2 as MISC_ALPHA_FIELD_2", 
	"FIL_UNCHANGED_RECORDS___MISC_ALPHA_FIELD_3 as MISC_ALPHA_FIELD_3", 
	"FIL_UNCHANGED_RECORDS___VOCOLLECT_POSN as VOCOLLECT_POSN", 
	"FIL_UNCHANGED_RECORDS___VOCOLLECT_SHORT_FLAG as VOCOLLECT_SHORT_FLAG", 
	"FIL_UNCHANGED_RECORDS___PAGE_NBR as PAGE_NBR", 
	"FIL_UNCHANGED_RECORDS___RSN_CODE as RSN_CODE", 
	"FIL_UNCHANGED_RECORDS___SLOT_NBR as SLOT_NBR", 
	"FIL_UNCHANGED_RECORDS___SUBSLOT_NBR as SUBSLOT_NBR", 
	"FIL_UNCHANGED_RECORDS___CD_MASTER_ID as CD_MASTER_ID", 
	"FIL_UNCHANGED_RECORDS___TASK_HDR_ID as TASK_HDR_ID", 
	"FIL_UNCHANGED_RECORDS___WM_VERSION_ID as WM_VERSION_ID", 
	"FIL_UNCHANGED_RECORDS___ITEM_ID as ITEM_ID", 
	"FIL_UNCHANGED_RECORDS___TC_ORDER_ID as TC_ORDER_ID", 
	"FIL_UNCHANGED_RECORDS___LINE_ITEM_ID as LINE_ITEM_ID", 
	"FIL_UNCHANGED_RECORDS___TRANS_INVN_TYPE as TRANS_INVN_TYPE", 
	"FIL_UNCHANGED_RECORDS___TOTE_NBR as TOTE_NBR", 
	"FIL_UNCHANGED_RECORDS___IS_CHASE_CREATED as IS_CHASE_CREATED", 
	"FIL_UNCHANGED_RECORDS___RESOURCE_GROUP_ID as RESOURCE_GROUP_ID", 
	"FIL_UNCHANGED_RECORDS___WORK_RESOURCE_ID as WORK_RESOURCE_ID", 
	"FIL_UNCHANGED_RECORDS___WORK_RELEASE_BATCH_NUMBER as WORK_RELEASE_BATCH_NUMBER", 
	"FIL_UNCHANGED_RECORDS___ALLOCATION_KEY as ALLOCATION_KEY", 
	"FIL_UNCHANGED_RECORDS___DISTRIBUTION_KEY as DISTRIBUTION_KEY", 
	"FIL_UNCHANGED_RECORDS___i_WM_TASK_DTL_ID as i_WM_TASK_DTL_ID", 
	"FIL_UNCHANGED_RECORDS___i_LOAD_TSTMP as i_LOAD_TSTMP", 
	"CURRENT_TIMESTAMP as UPDATE_TSTMP", 
	"IF(FIL_UNCHANGED_RECORDS___i_LOAD_TSTMP IS NULL, CURRENT_TIMESTAMP, FIL_UNCHANGED_RECORDS___i_LOAD_TSTMP) as LOAD_TSTMP", 
	"IF(FIL_UNCHANGED_RECORDS___i_WM_TASK_DTL_ID IS NULL, 1, 2) as o_UPDATE_VALIDATOR" 
)

# COMMAND ----------
# Processing node UPD_INS_UPD, type UPDATE_STRATEGY . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 90

# for each involved DataFrame, append the dataframe name to each column
EXP_UPDATE_VALIDATOR_temp = EXP_UPDATE_VALIDATOR.toDF(*["EXP_UPDATE_VALIDATOR___" + col for col in EXP_UPDATE_VALIDATOR.columns])

UPD_INS_UPD = EXP_UPDATE_VALIDATOR_temp.selectExpr( 
	"EXP_UPDATE_VALIDATOR___LOCATION_ID as LOCATION_ID", 
	"EXP_UPDATE_VALIDATOR___TASK_DTL_ID as TASK_DTL_ID", 
	"EXP_UPDATE_VALIDATOR___TASK_ID as TASK_ID", 
	"EXP_UPDATE_VALIDATOR___TASK_SEQ_NBR as TASK_SEQ_NBR", 
	"EXP_UPDATE_VALIDATOR___CNTR_NBR as CNTR_NBR", 
	"EXP_UPDATE_VALIDATOR___INVN_TYPE as INVN_TYPE", 
	"EXP_UPDATE_VALIDATOR___PROD_STAT as PROD_STAT", 
	"EXP_UPDATE_VALIDATOR___BATCH_NBR as BATCH_NBR", 
	"EXP_UPDATE_VALIDATOR___SKU_ATTR_1 as SKU_ATTR_1", 
	"EXP_UPDATE_VALIDATOR___SKU_ATTR_2 as SKU_ATTR_2", 
	"EXP_UPDATE_VALIDATOR___SKU_ATTR_3 as SKU_ATTR_3", 
	"EXP_UPDATE_VALIDATOR___SKU_ATTR_4 as SKU_ATTR_4", 
	"EXP_UPDATE_VALIDATOR___SKU_ATTR_5 as SKU_ATTR_5", 
	"EXP_UPDATE_VALIDATOR___CNTRY_OF_ORGN as CNTRY_OF_ORGN", 
	"EXP_UPDATE_VALIDATOR___ALLOC_INVN_CODE as ALLOC_INVN_CODE", 
	"EXP_UPDATE_VALIDATOR___PULL_LOCN_ID as PULL_LOCN_ID", 
	"EXP_UPDATE_VALIDATOR___ALLOC_UOM_QTY as ALLOC_UOM_QTY", 
	"EXP_UPDATE_VALIDATOR___FULL_CNTR_ALLOCD_EXP as FULL_CNTR_ALLOCD", 
	"EXP_UPDATE_VALIDATOR___INVN_NEED_TYPE as INVN_NEED_TYPE", 
	"EXP_UPDATE_VALIDATOR___TASK_PRTY as TASK_PRTY", 
	"EXP_UPDATE_VALIDATOR___TASK_GENRTN_REF_CODE as TASK_GENRTN_REF_CODE", 
	"EXP_UPDATE_VALIDATOR___TASK_GENRTN_REF_NBR as TASK_GENRTN_REF_NBR", 
	"EXP_UPDATE_VALIDATOR___TASK_CMPL_REF_CODE as TASK_CMPL_REF_CODE", 
	"EXP_UPDATE_VALIDATOR___TASK_CMPL_REF_NBR as TASK_CMPL_REF_NBR", 
	"EXP_UPDATE_VALIDATOR___ERLST_START_DATE_TIME as ERLST_START_DATE_TIME", 
	"EXP_UPDATE_VALIDATOR___LTST_START_DATE_TIME as LTST_START_DATE_TIME", 
	"EXP_UPDATE_VALIDATOR___LTST_CMPL_DATE_TIME as LTST_CMPL_DATE_TIME", 
	"EXP_UPDATE_VALIDATOR___ALLOC_UOM as ALLOC_UOM", 
	"EXP_UPDATE_VALIDATOR___ORIG_REQMT as ORIG_REQMT", 
	"EXP_UPDATE_VALIDATOR___QTY_ALLOC as QTY_ALLOC", 
	"EXP_UPDATE_VALIDATOR___QTY_PULLD as QTY_PULLD", 
	"EXP_UPDATE_VALIDATOR___DEST_LOCN_ID as DEST_LOCN_ID", 
	"EXP_UPDATE_VALIDATOR___DEST_LOCN_SEQ as DEST_LOCN_SEQ", 
	"EXP_UPDATE_VALIDATOR___STAT_CODE as STAT_CODE", 
	"EXP_UPDATE_VALIDATOR___TASK_TYPE as TASK_TYPE", 
	"EXP_UPDATE_VALIDATOR___CURR_WORK_GRP as CURR_WORK_GRP", 
	"EXP_UPDATE_VALIDATOR___CURR_WORK_AREA as CURR_WORK_AREA", 
	"EXP_UPDATE_VALIDATOR___REPL_DIVRT_LOCN as REPL_DIVRT_LOCN", 
	"EXP_UPDATE_VALIDATOR___PICK_SEQ_CODE as PICK_SEQ_CODE", 
	"EXP_UPDATE_VALIDATOR___TASK_LOCN_SEQ as TASK_LOCN_SEQ", 
	"EXP_UPDATE_VALIDATOR___CREATE_DATE_TIME as CREATE_DATE_TIME", 
	"EXP_UPDATE_VALIDATOR___MOD_DATE_TIME as MOD_DATE_TIME", 
	"EXP_UPDATE_VALIDATOR___USER_ID as USER_ID", 
	"EXP_UPDATE_VALIDATOR___PKT_CTRL_NBR as PKT_CTRL_NBR", 
	"EXP_UPDATE_VALIDATOR___REQD_INVN_TYPE as REQD_INVN_TYPE", 
	"EXP_UPDATE_VALIDATOR___REQD_PROD_STAT as REQD_PROD_STAT", 
	"EXP_UPDATE_VALIDATOR___REQD_BATCH_NBR as REQD_BATCH_NBR", 
	"EXP_UPDATE_VALIDATOR___REQD_SKU_ATTR_1 as REQD_SKU_ATTR_1", 
	"EXP_UPDATE_VALIDATOR___REQD_SKU_ATTR_2 as REQD_SKU_ATTR_2", 
	"EXP_UPDATE_VALIDATOR___REQD_SKU_ATTR_3 as REQD_SKU_ATTR_3", 
	"EXP_UPDATE_VALIDATOR___REQD_SKU_ATTR_4 as REQD_SKU_ATTR_4", 
	"EXP_UPDATE_VALIDATOR___REQD_SKU_ATTR_5 as REQD_SKU_ATTR_5", 
	"EXP_UPDATE_VALIDATOR___REQD_CNTRY_OF_ORGN as REQD_CNTRY_OF_ORGN", 
	"EXP_UPDATE_VALIDATOR___PKT_SEQ_NBR as PKT_SEQ_NBR", 
	"EXP_UPDATE_VALIDATOR___CARTON_NBR as CARTON_NBR", 
	"EXP_UPDATE_VALIDATOR___CARTON_SEQ_NBR as CARTON_SEQ_NBR", 
	"EXP_UPDATE_VALIDATOR___PIKR_NBR as PIKR_NBR", 
	"EXP_UPDATE_VALIDATOR___TASK_CMPL_REF_NBR_SEQ as TASK_CMPL_REF_NBR_SEQ", 
	"EXP_UPDATE_VALIDATOR___ALLOC_INVN_DTL_ID as ALLOC_INVN_DTL_ID", 
	"EXP_UPDATE_VALIDATOR___SUBSTITUTION_FLAG_EXP as SUBSTITUTION_FLAG", 
	"EXP_UPDATE_VALIDATOR___NEXT_TASK_ID as NEXT_TASK_ID", 
	"EXP_UPDATE_VALIDATOR___NEXT_TASK_SEQ_NBR as NEXT_TASK_SEQ_NBR", 
	"EXP_UPDATE_VALIDATOR___NEXT_TASK_DESC as NEXT_TASK_DESC", 
	"EXP_UPDATE_VALIDATOR___NEXT_TASK_TYPE as NEXT_TASK_TYPE", 
	"EXP_UPDATE_VALIDATOR___MISC_ALPHA_FIELD_1 as MISC_ALPHA_FIELD_1", 
	"EXP_UPDATE_VALIDATOR___MISC_ALPHA_FIELD_2 as MISC_ALPHA_FIELD_2", 
	"EXP_UPDATE_VALIDATOR___MISC_ALPHA_FIELD_3 as MISC_ALPHA_FIELD_3", 
	"EXP_UPDATE_VALIDATOR___VOCOLLECT_POSN as VOCOLLECT_POSN", 
	"EXP_UPDATE_VALIDATOR___VOCOLLECT_SHORT_FLAG as VOCOLLECT_SHORT_FLAG", 
	"EXP_UPDATE_VALIDATOR___PAGE_NBR as PAGE_NBR", 
	"EXP_UPDATE_VALIDATOR___RSN_CODE as RSN_CODE", 
	"EXP_UPDATE_VALIDATOR___SLOT_NBR as SLOT_NBR", 
	"EXP_UPDATE_VALIDATOR___SUBSLOT_NBR as SUBSLOT_NBR", 
	"EXP_UPDATE_VALIDATOR___CD_MASTER_ID as CD_MASTER_ID", 
	"EXP_UPDATE_VALIDATOR___TASK_HDR_ID as TASK_HDR_ID", 
	"EXP_UPDATE_VALIDATOR___WM_VERSION_ID as WM_VERSION_ID", 
	"EXP_UPDATE_VALIDATOR___ITEM_ID as ITEM_ID", 
	"EXP_UPDATE_VALIDATOR___TC_ORDER_ID as TC_ORDER_ID", 
	"EXP_UPDATE_VALIDATOR___LINE_ITEM_ID as LINE_ITEM_ID", 
	"EXP_UPDATE_VALIDATOR___TRANS_INVN_TYPE as TRANS_INVN_TYPE", 
	"EXP_UPDATE_VALIDATOR___TOTE_NBR as TOTE_NBR", 
	"EXP_UPDATE_VALIDATOR___IS_CHASE_CREATED as IS_CHASE_CREATED", 
	"EXP_UPDATE_VALIDATOR___RESOURCE_GROUP_ID as RESOURCE_GROUP_ID", 
	"EXP_UPDATE_VALIDATOR___WORK_RESOURCE_ID as WORK_RESOURCE_ID", 
	"EXP_UPDATE_VALIDATOR___WORK_RELEASE_BATCH_NUMBER as WORK_RELEASE_BATCH_NUMBER", 
	"EXP_UPDATE_VALIDATOR___ALLOCATION_KEY as ALLOCATION_KEY", 
	"EXP_UPDATE_VALIDATOR___DISTRIBUTION_KEY as DISTRIBUTION_KEY", 
	"EXP_UPDATE_VALIDATOR___UPDATE_TSTMP as UPDATE_TSTMP", 
	"EXP_UPDATE_VALIDATOR___LOAD_TSTMP as LOAD_TSTMP", 
	"EXP_UPDATE_VALIDATOR___o_UPDATE_VALIDATOR as o_UPDATE_VALIDATOR"
).withColumn('pyspark_data_action', when(col('o_UPDATE_VALIDATOR') ==(lit(1)),lit(0)).when(col('o_UPDATE_VALIDATOR') ==(lit(2)),lit(1)))

# COMMAND ----------
# Processing node Shortcut_to_WM_TASK_DTL_1, type TARGET 
# COLUMN COUNT: 89


Shortcut_to_WM_TASK_DTL_1 = UPD_INS_UPD.selectExpr(
	"CAST(LOCATION_ID AS BIGINT) as LOCATION_ID",
	"CAST(TASK_DTL_ID AS INT) as WM_TASK_DTL_ID",
	"CAST(TASK_HDR_ID AS INT) as WM_TASK_HDR_ID",
	"CAST(TASK_ID AS INT) as WM_TASK_ID",
	"CAST(TASK_SEQ_NBR AS SMALLINT) as WM_TASK_SEQ_NBR",
	"CAST(TC_ORDER_ID AS STRING) as WM_TC_ORDER_ID",
	"CAST(LINE_ITEM_ID AS BIGINT) as WM_LINE_ITEM_ID",
	"CAST(ITEM_ID AS BIGINT) as WM_ITEM_ID",
	"CAST(TASK_TYPE AS STRING) as WM_TASK_TYPE",
	"CAST(INVN_TYPE AS STRING) as WM_INVN_TYPE",
	"CAST(TRANS_INVN_TYPE AS SMALLINT) as WM_TRANS_INVN_TYPE",
	"CAST(CNTR_NBR AS STRING) as WM_CNTR_NBR",
	"CAST(STAT_CODE AS SMALLINT) as WM_STAT_CD",
	"CAST(PROD_STAT AS STRING) as WM_PROD_STAT",
	"CAST(RSN_CODE AS STRING) as WM_RSN_CD",
	"CAST(BATCH_NBR AS STRING) as WM_BATCH_NBR",
	"CAST(CARTON_NBR AS STRING) as WM_CARTON_NBR",
	"CAST(CARTON_SEQ_NBR AS INT) as WM_CARTON_SEQ_NBR",
	"CAST(PIKR_NBR AS SMALLINT) as WM_PIKR_NBR",
	"CAST(PKT_CTRL_NBR AS STRING) as WM_PKT_CTRL_NBR",
	"CAST(PKT_SEQ_NBR AS INT) as WM_PKT_SEQ_NBR",
	"CAST(PICK_SEQ_CODE AS STRING) as WM_PICK_SEQ_CD",
	"CAST(CNTRY_OF_ORGN AS STRING) as COUNTRY_OF_ORIGIN",
	"CAST(ALLOC_INVN_CODE AS SMALLINT) as WM_ALLOC_INVN_CD",
	"CAST(CURR_WORK_AREA AS STRING) as CURR_WORK_AREA",
	"CAST(CURR_WORK_GRP AS STRING) as WM_CURR_WORK_GRP",
	"CAST(TASK_LOCN_SEQ AS SMALLINT) as WM_TASK_LOCN_SEQ",
	"CAST(SLOT_NBR AS INT) as SLOT_NBR",
	"CAST(SUBSLOT_NBR AS INT) as SUB_SLOT_NBR",
	"CAST(CD_MASTER_ID AS INT) as WM_CD_MASTER_ID",
	"CAST(TOTE_NBR AS STRING) as WM_TOTE_NBR",
	"CAST(REPL_DIVRT_LOCN AS STRING) as WM_REPL_DIVRT_LOCN",
	"CAST(PULL_LOCN_ID AS STRING) as WM_PULL_LOCN_ID",
	"CAST(DEST_LOCN_ID AS STRING) as WM_DEST_LOCN_ID",
	"CAST(DEST_LOCN_SEQ AS INT) as WM_DEST_LOCN_SEQ",
	"CAST(FULL_CNTR_ALLOCD AS TINYINT) as FULL_CNTR_ALLOCD_FLAG",
	"CAST(INVN_NEED_TYPE AS SMALLINT) as WM_INVN_NEED_TYPE",
	"CAST(TASK_PRTY AS INT) as TASK_PRTY",
	"CAST(TASK_GENRTN_REF_CODE AS STRING) as WM_TASK_GENRTN_REF_CD",
	"CAST(TASK_GENRTN_REF_NBR AS STRING) as WM_TASK_GENRTN_REF_NBR",
	"CAST(TASK_CMPL_REF_CODE AS STRING) as WM_TASK_CMPL_REF_CD",
	"CAST(TASK_CMPL_REF_NBR AS STRING) as WM_TASK_CMPL_REF_NBR",
	"CAST(NEXT_TASK_ID AS INT) as WM_NEXT_TASK_ID",
	"CAST(NEXT_TASK_SEQ_NBR AS SMALLINT) as WM_NEXT_TASK_SEQ_NBR",
	"CAST(NEXT_TASK_DESC AS STRING) as NEXT_TASK_DESC",
	"CAST(NEXT_TASK_TYPE AS STRING) as WM_NEXT_TASK_TYPE",
	"CAST(REQD_INVN_TYPE AS STRING) as WM_REQD_INVN_TYPE",
	"CAST(REQD_PROD_STAT AS STRING) as WM_REQD_PROD_STAT",
	"CAST(REQD_BATCH_NBR AS STRING) as WM_REQD_BATCH_NBR",
	"CAST(REQD_CNTRY_OF_ORGN AS STRING) as REQD_COUNTRY_OF_ORIGIN",
	"CAST(TASK_CMPL_REF_NBR_SEQ AS INT) as WM_TASK_CMPL_REF_NBR_SEQ",
	"CAST(ALLOC_INVN_DTL_ID AS INT) as WM_ALLOC_INVN_DTL_ID",
	"CAST(SUBSTITUTION_FLAG AS TINYINT) as SUBSTITUTION_FLAG",
	"CAST(VOCOLLECT_POSN AS SMALLINT) as VOCOLLECT_POSN",
	"CAST(VOCOLLECT_SHORT_FLAG AS STRING) as VOCOLLECT_SHORT_FLAG",
	"CAST(PAGE_NBR AS INT) as PAGE_NBR",
	"CAST(IS_CHASE_CREATED AS TINYINT) as CHASE_CREATED_FLAG",
	"CAST(RESOURCE_GROUP_ID AS STRING) as WM_RESOURCE_GROUP_ID",
	"CAST(WORK_RESOURCE_ID AS STRING) as WM_WORK_RESOURCE_ID",
	"CAST(WORK_RELEASE_BATCH_NUMBER AS STRING) as WM_WORK_RELEASE_BATCH_NBR",
	"CAST(ALLOCATION_KEY AS STRING) as WM_ALLOCATION_KEY",
	"CAST(DISTRIBUTION_KEY AS STRING) as WM_DISTRIBUTION_KEY",
	"CAST(ERLST_START_DATE_TIME AS TIMESTAMP) as ERLST_START_TSTMP",
	"CAST(LTST_START_DATE_TIME AS TIMESTAMP) as LTST_START_TSTMP",
	"CAST(LTST_CMPL_DATE_TIME AS TIMESTAMP) as LTST_CMPL_TSTMP",
	"CAST(ORIG_REQMT AS DECIMAL(13,5)) as ORIG_REQMT",
	"CAST(QTY_ALLOC AS DECIMAL(13,5)) as QTY_ALLOC",
	"CAST(QTY_PULLD AS DECIMAL(13,5)) as QTY_PULLD",
	"CAST(ALLOC_UOM_QTY AS DECIMAL(9,2)) as ALLOC_UOM_QTY",
	"CAST(ALLOC_UOM AS STRING) as ALLOC_UOM",
	"CAST(SKU_ATTR_1 AS STRING) as SKU_ATTR_1",
	"CAST(SKU_ATTR_2 AS STRING) as SKU_ATTR_2",
	"CAST(SKU_ATTR_3 AS STRING) as SKU_ATTR_3",
	"CAST(SKU_ATTR_4 AS STRING) as SKU_ATTR_4",
	"CAST(SKU_ATTR_5 AS STRING) as SKU_ATTR_5",
	"CAST(REQD_SKU_ATTR_1 AS STRING) as REQD_SKU_ATTR_1",
	"CAST(REQD_SKU_ATTR_2 AS STRING) as REQD_SKU_ATTR_2",
	"CAST(REQD_SKU_ATTR_3 AS STRING) as REQD_SKU_ATTR_3",
	"CAST(REQD_SKU_ATTR_4 AS STRING) as REQD_SKU_ATTR_4",
	"CAST(REQD_SKU_ATTR_5 AS STRING) as REQD_SKU_ATTR_5",
	"CAST(MISC_ALPHA_FIELD_1 AS STRING) as MISC_ALPHA_FIELD_1",
	"CAST(MISC_ALPHA_FIELD_2 AS STRING) as MISC_ALPHA_FIELD_2",
	"CAST(MISC_ALPHA_FIELD_3 AS STRING) as MISC_ALPHA_FIELD_3",
	"CAST(USER_ID AS STRING) as WM_USER_ID",
	"CAST(WM_VERSION_ID AS INT) as WM_VERSION_ID",
	"CAST(CREATE_DATE_TIME AS TIMESTAMP) as WM_CREATE_TSTMP",
	"CAST(MOD_DATE_TIME AS TIMESTAMP) as WM_MOD_TSTMP",
	"CAST(UPDATE_TSTMP AS TIMESTAMP) as UPDATE_TSTMP",
	"CAST(LOAD_TSTMP AS TIMESTAMP) as LOAD_TSTMP" , 
    "pyspark_data_action"
)


try:
  primary_key = """source.LOCATION_ID = target.LOCATION_ID AND source.WM_TASK_DTL_ID = target.WM_TASK_DTL_ID"""
  # refined_perf_table = "WM_TASK_DTL"
  executeMerge(Shortcut_to_WM_TASK_DTL_1, refined_perf_table, primary_key)
  logger.info(f"Merge with {refined_perf_table} completed]")
  logPrevRunDt("WM_TASK_DTL", "WM_TASK_DTL", "Completed", "N/A", f"{raw}.log_run_details")
except Exception as e:
  logPrevRunDt("WM_TASK_DTL", "WM_TASK_DTL","Failed",str(e), f"{raw}.log_run_details", )
  raise e
	