#Code converted on 2023-06-26 10:03:15
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from pyspark.dbutils import DBUtils
from Datalake.utils.genericUtilities import *
from Datalake.utils.configs import *
from Datalake.utils.mergeUtils import *
from Datalake.utils.logger import *
# COMMAND ----------

parser = argparse.ArgumentParser()
spark = SparkSession.getActiveSession()
dbutils = DBUtils(spark)

parser.add_argument('env', type=str, help='Env Variable')
# args = parser.parse_args()
# env = args.env
env = 'dev'

if env is None or env == '':
    raise ValueError('env is not set')

refine = getEnvPrefix(env) + 'refine'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'

# Set global variables
starttime = datetime.now() #start timestamp of the script

refined_perf_table = f"{refine}.WM_EQUIPMENT"

raw_perf_table = f"{raw}.WM_EQUIPMENT_PRE"
site_profile_table = f"{legacy}.SITE_PROFILE"


# COMMAND ----------
# Processing node SQ_Shortcut_to_WM_EQUIPMENT_PRE, type SOURCE 
# COLUMN COUNT: 46

SQ_Shortcut_to_WM_EQUIPMENT_PRE = spark.sql(f"""SELECT
DC_NBR,
EQUIPMENT_ID,
TC_COMPANY_ID,
EQUIPMENT_CODE,
DESCRIPTION,
MASTER_EQUIPMENT_ID,
EQUIPMENT_TYPE,
SHAPE_TYPE,
TRAILER_TYPE,
OWNERSHIP_TYPE,
TAX_BAND_NAME,
BACKIN_TIME,
BACKOUT_TIME,
NUMBER_OF_AXLES,
PER_USAGE_COST,
PER_USAGE_COST_CURRENCY_CODE,
IS_ALLOW_TRAILER_SWAPPING,
IS_TANDEM_CAPABLE,
VOLUME_CALC_VALUE,
VOLUME_CALC_STANDARD_UOM,
WEIGHT_EMPTY_VALUE,
WEIGHT_EMPTY_STANDARD_UOM,
WEIGHT_EMPTY_SIZE_UOM_ID,
PLATED_WEIGHT,
PLATED_WEIGHT_SIZE_UOM_ID,
WEIGHT_VALUE,
WEIGHT_STANDARD_UOM,
EQUIP_DW_HEIGHT_VALUE,
EQUIP_DW_HEIGHT_STANDARD_UOM,
EQUIP_HEIGHT_VALUE,
EQUIP_HEIGHT_STANDARD_UOM,
FLOOR_SPACE_VALUE,
FLOOR_SPACE_SIZE_UOM_ID,
DIM01_VALUE,
DIM01_STANDARD_UOM,
DIM02_VALUE,
DIM02_STANDARD_UOM,
DIM03_VALUE,
DIM03_STANDARD_UOM,
MARK_FOR_DELETION,
CREATED_SOURCE_TYPE,
CREATED_SOURCE,
CREATED_DTTM,
LAST_UPDATED_SOURCE_TYPE,
LAST_UPDATED_SOURCE,
LAST_UPDATED_DTTM
FROM {raw_perf_table} """).withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node SQ_Shortcut_to_WM_EQUIPMENT, type SOURCE 
# COLUMN COUNT: 47

SQ_Shortcut_to_WM_EQUIPMENT = spark.sql(f"""SELECT
LOCATION_ID,
WM_EQUIPMENT_ID,
WM_TC_COMPANY_ID,
WM_EQUIPMENT_CD,
WM_EQUIPMENT_DESC,
WM_MASTER_EQUIPMENT_ID,
WM_EQUIPMENT_TYPE_ID,
WM_SHAPE_TYPE,
WM_TRAILER_TYPE_ID,
WM_OWNERSHIP_TYPE_ID,
TAX_BAND_NAME,
BACK_IN_TIME,
BACK_OUT_TIME,
NUMBER_OF_AXLES,
PER_USAGE_COST,
PER_USAGE_COST_CURRENCY_CD,
ALLOW_TRAILER_SWAPPING_FLAG,
TANDEM_CAPABLE_FLAG,
WM_VOLUME_CALC_VALUE,
WM_VOLUME_CALC_STANDARD_UOM_ID,
WM_WEIGHT_EMPTY_VALUE,
WM_WEIGHT_EMPTY_STANDARD_UOM_ID,
WM_WEIGHT_EMPTY_SIZE_UOM_ID,
WM_PLATED_WEIGHT,
WM_PLATED_WEIGHT_SIZE_UOM_ID,
WM_WEIGHT_VALUE,
WM_WEIGHT_STANDARD_UOM_ID,
WM_EQUIP_DW_HEIGHT_VALUE,
WM_EQUIP_DW_HEIGHT_STANDARD_UOM_ID,
WM_EQUIP_HEIGHT_VALUE,
WM_EQUIP_HEIGHT_STANDARD_UOM_ID,
WM_FLOOR_SPACE_VALUE,
WM_FLOOR_SPACE_SIZE_UOM_ID,
WM_DIM_01_VALUE,
WM_DIM_01_STANDARD_UOM_ID,
WM_DIM_02_VALUE,
WM_DIM_02_STANDARD_UOM_ID,
WM_DIM_03_VALUE,
WM_DIM_03_STANDARD_UOM_ID,
MARK_FOR_DELETION,
WM_CREATED_SOURCE_TYPE,
WM_CREATED_SOURCE,
WM_CREATED_TSTMP,
WM_LAST_UPDATED_SOURCE_TYPE,
WM_LAST_UPDATED_SOURCE,
WM_LAST_UPDATED_TSTMP,
LOAD_TSTMP
FROM {refined_perf_table}
WHERE WM_EQUIPMENT_ID IN ( SELECT EQUIPMENT_ID FROM {raw_perf_table} )""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node EXP_INT_CONVERSION, type EXPRESSION 
# COLUMN COUNT: 46

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_WM_EQUIPMENT_PRE_temp = SQ_Shortcut_to_WM_EQUIPMENT_PRE.toDF(*["SQ_Shortcut_to_WM_EQUIPMENT_PRE___" + col for col in SQ_Shortcut_to_WM_EQUIPMENT_PRE.columns])

EXP_INT_CONVERSION = SQ_Shortcut_to_WM_EQUIPMENT_PRE_temp.selectExpr( \
	"SQ_Shortcut_to_WM_EQUIPMENT_PRE___sys_row_id as sys_row_id", \
	"cast(SQ_Shortcut_to_WM_EQUIPMENT_PRE___DC_NBR as int) as o_DC_NBR", \
	"SQ_Shortcut_to_WM_EQUIPMENT_PRE___EQUIPMENT_ID as EQUIPMENT_ID", \
	"SQ_Shortcut_to_WM_EQUIPMENT_PRE___TC_COMPANY_ID as TC_COMPANY_ID", \
	"SQ_Shortcut_to_WM_EQUIPMENT_PRE___EQUIPMENT_CODE as EQUIPMENT_CODE", \
	"SQ_Shortcut_to_WM_EQUIPMENT_PRE___DESCRIPTION as DESCRIPTION", \
	"SQ_Shortcut_to_WM_EQUIPMENT_PRE___MASTER_EQUIPMENT_ID as MASTER_EQUIPMENT_ID", \
	"SQ_Shortcut_to_WM_EQUIPMENT_PRE___EQUIPMENT_TYPE as EQUIPMENT_TYPE", \
	"SQ_Shortcut_to_WM_EQUIPMENT_PRE___SHAPE_TYPE as SHAPE_TYPE", \
	"SQ_Shortcut_to_WM_EQUIPMENT_PRE___TRAILER_TYPE as TRAILER_TYPE", \
	"SQ_Shortcut_to_WM_EQUIPMENT_PRE___OWNERSHIP_TYPE as OWNERSHIP_TYPE", \
	"SQ_Shortcut_to_WM_EQUIPMENT_PRE___TAX_BAND_NAME as TAX_BAND_NAME", \
	"SQ_Shortcut_to_WM_EQUIPMENT_PRE___BACKIN_TIME as BACKIN_TIME", \
	"SQ_Shortcut_to_WM_EQUIPMENT_PRE___BACKOUT_TIME as BACKOUT_TIME", \
	"SQ_Shortcut_to_WM_EQUIPMENT_PRE___NUMBER_OF_AXLES as NUMBER_OF_AXLES", \
	"SQ_Shortcut_to_WM_EQUIPMENT_PRE___PER_USAGE_COST as PER_USAGE_COST", \
	"SQ_Shortcut_to_WM_EQUIPMENT_PRE___PER_USAGE_COST_CURRENCY_CODE as PER_USAGE_COST_CURRENCY_CODE", \
	"SQ_Shortcut_to_WM_EQUIPMENT_PRE___IS_ALLOW_TRAILER_SWAPPING as IS_ALLOW_TRAILER_SWAPPING", \
	"SQ_Shortcut_to_WM_EQUIPMENT_PRE___IS_TANDEM_CAPABLE as IS_TANDEM_CAPABLE", \
	"SQ_Shortcut_to_WM_EQUIPMENT_PRE___VOLUME_CALC_VALUE as VOLUME_CALC_VALUE", \
	"SQ_Shortcut_to_WM_EQUIPMENT_PRE___VOLUME_CALC_STANDARD_UOM as VOLUME_CALC_STANDARD_UOM", \
	"SQ_Shortcut_to_WM_EQUIPMENT_PRE___WEIGHT_EMPTY_VALUE as WEIGHT_EMPTY_VALUE", \
	"SQ_Shortcut_to_WM_EQUIPMENT_PRE___WEIGHT_EMPTY_STANDARD_UOM as WEIGHT_EMPTY_STANDARD_UOM", \
	"SQ_Shortcut_to_WM_EQUIPMENT_PRE___WEIGHT_EMPTY_SIZE_UOM_ID as WEIGHT_EMPTY_SIZE_UOM_ID", \
	"SQ_Shortcut_to_WM_EQUIPMENT_PRE___PLATED_WEIGHT as PLATED_WEIGHT", \
	"SQ_Shortcut_to_WM_EQUIPMENT_PRE___PLATED_WEIGHT_SIZE_UOM_ID as PLATED_WEIGHT_SIZE_UOM_ID", \
	"SQ_Shortcut_to_WM_EQUIPMENT_PRE___WEIGHT_VALUE as WEIGHT_VALUE", \
	"SQ_Shortcut_to_WM_EQUIPMENT_PRE___WEIGHT_STANDARD_UOM as WEIGHT_STANDARD_UOM", \
	"SQ_Shortcut_to_WM_EQUIPMENT_PRE___EQUIP_DW_HEIGHT_VALUE as EQUIP_DW_HEIGHT_VALUE", \
	"SQ_Shortcut_to_WM_EQUIPMENT_PRE___EQUIP_DW_HEIGHT_STANDARD_UOM as EQUIP_DW_HEIGHT_STANDARD_UOM", \
	"SQ_Shortcut_to_WM_EQUIPMENT_PRE___EQUIP_HEIGHT_VALUE as EQUIP_HEIGHT_VALUE", \
	"SQ_Shortcut_to_WM_EQUIPMENT_PRE___EQUIP_HEIGHT_STANDARD_UOM as EQUIP_HEIGHT_STANDARD_UOM", \
	"SQ_Shortcut_to_WM_EQUIPMENT_PRE___FLOOR_SPACE_VALUE as FLOOR_SPACE_VALUE", \
	"SQ_Shortcut_to_WM_EQUIPMENT_PRE___FLOOR_SPACE_SIZE_UOM_ID as FLOOR_SPACE_SIZE_UOM_ID", \
	"SQ_Shortcut_to_WM_EQUIPMENT_PRE___DIM01_VALUE as DIM01_VALUE", \
	"SQ_Shortcut_to_WM_EQUIPMENT_PRE___DIM01_STANDARD_UOM as DIM01_STANDARD_UOM", \
	"SQ_Shortcut_to_WM_EQUIPMENT_PRE___DIM02_VALUE as DIM02_VALUE", \
	"SQ_Shortcut_to_WM_EQUIPMENT_PRE___DIM02_STANDARD_UOM as DIM02_STANDARD_UOM", \
	"SQ_Shortcut_to_WM_EQUIPMENT_PRE___DIM03_VALUE as DIM03_VALUE", \
	"SQ_Shortcut_to_WM_EQUIPMENT_PRE___DIM03_STANDARD_UOM as DIM03_STANDARD_UOM", \
	"SQ_Shortcut_to_WM_EQUIPMENT_PRE___MARK_FOR_DELETION as MARK_FOR_DELETION", \
	"SQ_Shortcut_to_WM_EQUIPMENT_PRE___CREATED_SOURCE_TYPE as CREATED_SOURCE_TYPE", \
	"SQ_Shortcut_to_WM_EQUIPMENT_PRE___CREATED_SOURCE as CREATED_SOURCE", \
	"SQ_Shortcut_to_WM_EQUIPMENT_PRE___CREATED_DTTM as CREATED_DTTM", \
	"SQ_Shortcut_to_WM_EQUIPMENT_PRE___LAST_UPDATED_SOURCE_TYPE as LAST_UPDATED_SOURCE_TYPE", \
	"SQ_Shortcut_to_WM_EQUIPMENT_PRE___LAST_UPDATED_SOURCE as LAST_UPDATED_SOURCE", \
	"SQ_Shortcut_to_WM_EQUIPMENT_PRE___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM" \
)

# COMMAND ----------
# Processing node SQ_Shortcut_to_SITE_PROFILE, type SOURCE 
# COLUMN COUNT: 2

SQ_Shortcut_to_SITE_PROFILE = spark.sql(f"""SELECT LOCATION_ID, STORE_NBR FROM {site_profile_table}""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node JNR_SITE_PROFILE, type JOINER 
# COLUMN COUNT: 48

JNR_SITE_PROFILE = SQ_Shortcut_to_SITE_PROFILE.join(EXP_INT_CONVERSION,[SQ_Shortcut_to_SITE_PROFILE.STORE_NBR == EXP_INT_CONVERSION.o_DC_NBR],'inner')

# COMMAND ----------
# Processing node JNR_WM_EQUIPMENT, type JOINER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 93

# for each involved DataFrame, append the dataframe name to each column
JNR_SITE_PROFILE_temp = JNR_SITE_PROFILE.toDF(*["JNR_SITE_PROFILE___" + col for col in JNR_SITE_PROFILE.columns])
SQ_Shortcut_to_WM_EQUIPMENT_temp = SQ_Shortcut_to_WM_EQUIPMENT.toDF(*["SQ_Shortcut_to_WM_EQUIPMENT___" + col for col in SQ_Shortcut_to_WM_EQUIPMENT.columns])

JNR_WM_EQUIPMENT = SQ_Shortcut_to_WM_EQUIPMENT_temp.join(JNR_SITE_PROFILE_temp,[SQ_Shortcut_to_WM_EQUIPMENT_temp.SQ_Shortcut_to_WM_EQUIPMENT___LOCATION_ID == JNR_SITE_PROFILE_temp.JNR_SITE_PROFILE___LOCATION_ID, SQ_Shortcut_to_WM_EQUIPMENT_temp.SQ_Shortcut_to_WM_EQUIPMENT___WM_EQUIPMENT_ID == JNR_SITE_PROFILE_temp.JNR_SITE_PROFILE___EQUIPMENT_ID],'right_outer').selectExpr( \
	"JNR_SITE_PROFILE___EQUIPMENT_ID as EQUIPMENT_ID", \
	"JNR_SITE_PROFILE___TC_COMPANY_ID as TC_COMPANY_ID", \
	"JNR_SITE_PROFILE___EQUIPMENT_CODE as EQUIPMENT_CODE", \
	"JNR_SITE_PROFILE___DESCRIPTION as DESCRIPTION", \
	"JNR_SITE_PROFILE___MASTER_EQUIPMENT_ID as MASTER_EQUIPMENT_ID", \
	"JNR_SITE_PROFILE___EQUIPMENT_TYPE as EQUIPMENT_TYPE", \
	"JNR_SITE_PROFILE___SHAPE_TYPE as SHAPE_TYPE", \
	"JNR_SITE_PROFILE___TRAILER_TYPE as TRAILER_TYPE", \
	"JNR_SITE_PROFILE___OWNERSHIP_TYPE as OWNERSHIP_TYPE", \
	"JNR_SITE_PROFILE___TAX_BAND_NAME as TAX_BAND_NAME", \
	"JNR_SITE_PROFILE___BACKIN_TIME as BACKIN_TIME", \
	"JNR_SITE_PROFILE___BACKOUT_TIME as BACKOUT_TIME", \
	"JNR_SITE_PROFILE___NUMBER_OF_AXLES as NUMBER_OF_AXLES", \
	"JNR_SITE_PROFILE___PER_USAGE_COST as PER_USAGE_COST", \
	"JNR_SITE_PROFILE___PER_USAGE_COST_CURRENCY_CODE as PER_USAGE_COST_CURRENCY_CODE", \
	"JNR_SITE_PROFILE___IS_ALLOW_TRAILER_SWAPPING as IS_ALLOW_TRAILER_SWAPPING", \
	"JNR_SITE_PROFILE___IS_TANDEM_CAPABLE as IS_TANDEM_CAPABLE", \
	"JNR_SITE_PROFILE___VOLUME_CALC_VALUE as VOLUME_CALC_VALUE", \
	"JNR_SITE_PROFILE___VOLUME_CALC_STANDARD_UOM as VOLUME_CALC_STANDARD_UOM", \
	"JNR_SITE_PROFILE___WEIGHT_EMPTY_VALUE as WEIGHT_EMPTY_VALUE", \
	"JNR_SITE_PROFILE___WEIGHT_EMPTY_STANDARD_UOM as WEIGHT_EMPTY_STANDARD_UOM", \
	"JNR_SITE_PROFILE___WEIGHT_EMPTY_SIZE_UOM_ID as WEIGHT_EMPTY_SIZE_UOM_ID", \
	"JNR_SITE_PROFILE___PLATED_WEIGHT as PLATED_WEIGHT", \
	"JNR_SITE_PROFILE___PLATED_WEIGHT_SIZE_UOM_ID as PLATED_WEIGHT_SIZE_UOM_ID", \
	"JNR_SITE_PROFILE___WEIGHT_VALUE as WEIGHT_VALUE", \
	"JNR_SITE_PROFILE___WEIGHT_STANDARD_UOM as WEIGHT_STANDARD_UOM", \
	"JNR_SITE_PROFILE___EQUIP_DW_HEIGHT_VALUE as EQUIP_DW_HEIGHT_VALUE", \
	"JNR_SITE_PROFILE___EQUIP_DW_HEIGHT_STANDARD_UOM as EQUIP_DW_HEIGHT_STANDARD_UOM", \
	"JNR_SITE_PROFILE___EQUIP_HEIGHT_VALUE as EQUIP_HEIGHT_VALUE", \
	"JNR_SITE_PROFILE___EQUIP_HEIGHT_STANDARD_UOM as EQUIP_HEIGHT_STANDARD_UOM", \
	"JNR_SITE_PROFILE___FLOOR_SPACE_VALUE as FLOOR_SPACE_VALUE", \
	"JNR_SITE_PROFILE___FLOOR_SPACE_SIZE_UOM_ID as FLOOR_SPACE_SIZE_UOM_ID", \
	"JNR_SITE_PROFILE___DIM01_VALUE as DIM01_VALUE", \
	"JNR_SITE_PROFILE___DIM01_STANDARD_UOM as DIM01_STANDARD_UOM", \
	"JNR_SITE_PROFILE___DIM02_VALUE as DIM02_VALUE", \
	"JNR_SITE_PROFILE___DIM02_STANDARD_UOM as DIM02_STANDARD_UOM", \
	"JNR_SITE_PROFILE___DIM03_VALUE as DIM03_VALUE", \
	"JNR_SITE_PROFILE___DIM03_STANDARD_UOM as DIM03_STANDARD_UOM", \
	"JNR_SITE_PROFILE___MARK_FOR_DELETION as MARK_FOR_DELETION", \
	"JNR_SITE_PROFILE___CREATED_SOURCE_TYPE as CREATED_SOURCE_TYPE", \
	"JNR_SITE_PROFILE___CREATED_SOURCE as CREATED_SOURCE", \
	"JNR_SITE_PROFILE___CREATED_DTTM as CREATED_DTTM", \
	"JNR_SITE_PROFILE___LAST_UPDATED_SOURCE_TYPE as LAST_UPDATED_SOURCE_TYPE", \
	"JNR_SITE_PROFILE___LAST_UPDATED_SOURCE as LAST_UPDATED_SOURCE", \
	"JNR_SITE_PROFILE___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"JNR_SITE_PROFILE___LOCATION_ID as LOCATION_ID", \
	"SQ_Shortcut_to_WM_EQUIPMENT___LOCATION_ID as in_LOCATION_ID", \
	"SQ_Shortcut_to_WM_EQUIPMENT___WM_EQUIPMENT_ID as WM_EQUIPMENT_ID", \
	"SQ_Shortcut_to_WM_EQUIPMENT___WM_TC_COMPANY_ID as WM_TC_COMPANY_ID", \
	"SQ_Shortcut_to_WM_EQUIPMENT___WM_EQUIPMENT_CD as WM_EQUIPMENT_CD", \
	"SQ_Shortcut_to_WM_EQUIPMENT___WM_EQUIPMENT_DESC as WM_EQUIPMENT_DESC", \
	"SQ_Shortcut_to_WM_EQUIPMENT___WM_MASTER_EQUIPMENT_ID as WM_MASTER_EQUIPMENT_ID", \
	"SQ_Shortcut_to_WM_EQUIPMENT___WM_EQUIPMENT_TYPE_ID as WM_EQUIPMENT_TYPE_ID", \
	"SQ_Shortcut_to_WM_EQUIPMENT___WM_SHAPE_TYPE as WM_SHAPE_TYPE", \
	"SQ_Shortcut_to_WM_EQUIPMENT___WM_TRAILER_TYPE_ID as WM_TRAILER_TYPE_ID", \
	"SQ_Shortcut_to_WM_EQUIPMENT___WM_OWNERSHIP_TYPE_ID as WM_OWNERSHIP_TYPE_ID", \
	"SQ_Shortcut_to_WM_EQUIPMENT___TAX_BAND_NAME as in_TAX_BAND_NAME", \
	"SQ_Shortcut_to_WM_EQUIPMENT___BACK_IN_TIME as BACK_IN_TIME", \
	"SQ_Shortcut_to_WM_EQUIPMENT___BACK_OUT_TIME as BACK_OUT_TIME", \
	"SQ_Shortcut_to_WM_EQUIPMENT___NUMBER_OF_AXLES as in_NUMBER_OF_AXLES", \
	"SQ_Shortcut_to_WM_EQUIPMENT___PER_USAGE_COST as in_PER_USAGE_COST", \
	"SQ_Shortcut_to_WM_EQUIPMENT___PER_USAGE_COST_CURRENCY_CD as PER_USAGE_COST_CURRENCY_CD", \
	"SQ_Shortcut_to_WM_EQUIPMENT___ALLOW_TRAILER_SWAPPING_FLAG as ALLOW_TRAILER_SWAPPING_FLAG", \
	"SQ_Shortcut_to_WM_EQUIPMENT___TANDEM_CAPABLE_FLAG as TANDEM_CAPABLE_FLAG", \
	"SQ_Shortcut_to_WM_EQUIPMENT___WM_VOLUME_CALC_VALUE as WM_VOLUME_CALC_VALUE", \
	"SQ_Shortcut_to_WM_EQUIPMENT___WM_VOLUME_CALC_STANDARD_UOM_ID as WM_VOLUME_CALC_STANDARD_UOM_ID", \
	"SQ_Shortcut_to_WM_EQUIPMENT___WM_WEIGHT_EMPTY_VALUE as WM_WEIGHT_EMPTY_VALUE", \
	"SQ_Shortcut_to_WM_EQUIPMENT___WM_WEIGHT_EMPTY_STANDARD_UOM_ID as WM_WEIGHT_EMPTY_STANDARD_UOM_ID", \
	"SQ_Shortcut_to_WM_EQUIPMENT___WM_WEIGHT_EMPTY_SIZE_UOM_ID as WM_WEIGHT_EMPTY_SIZE_UOM_ID", \
	"SQ_Shortcut_to_WM_EQUIPMENT___WM_PLATED_WEIGHT as WM_PLATED_WEIGHT", \
	"SQ_Shortcut_to_WM_EQUIPMENT___WM_PLATED_WEIGHT_SIZE_UOM_ID as WM_PLATED_WEIGHT_SIZE_UOM_ID", \
	"SQ_Shortcut_to_WM_EQUIPMENT___WM_WEIGHT_VALUE as WM_WEIGHT_VALUE", \
	"SQ_Shortcut_to_WM_EQUIPMENT___WM_WEIGHT_STANDARD_UOM_ID as WM_WEIGHT_STANDARD_UOM_ID", \
	"SQ_Shortcut_to_WM_EQUIPMENT___WM_EQUIP_DW_HEIGHT_VALUE as WM_EQUIP_DW_HEIGHT_VALUE", \
	"SQ_Shortcut_to_WM_EQUIPMENT___WM_EQUIP_DW_HEIGHT_STANDARD_UOM_ID as WM_EQUIP_DW_HEIGHT_STANDARD_UOM_ID", \
	"SQ_Shortcut_to_WM_EQUIPMENT___WM_EQUIP_HEIGHT_VALUE as WM_EQUIP_HEIGHT_VALUE", \
	"SQ_Shortcut_to_WM_EQUIPMENT___WM_EQUIP_HEIGHT_STANDARD_UOM_ID as WM_EQUIP_HEIGHT_STANDARD_UOM_ID", \
	"SQ_Shortcut_to_WM_EQUIPMENT___WM_FLOOR_SPACE_VALUE as WM_FLOOR_SPACE_VALUE", \
	"SQ_Shortcut_to_WM_EQUIPMENT___WM_FLOOR_SPACE_SIZE_UOM_ID as WM_FLOOR_SPACE_SIZE_UOM_ID", \
	"SQ_Shortcut_to_WM_EQUIPMENT___WM_DIM_01_VALUE as WM_DIM_01_VALUE", \
	"SQ_Shortcut_to_WM_EQUIPMENT___WM_DIM_01_STANDARD_UOM_ID as WM_DIM_01_STANDARD_UOM_ID", \
	"SQ_Shortcut_to_WM_EQUIPMENT___WM_DIM_02_VALUE as WM_DIM_02_VALUE", \
	"SQ_Shortcut_to_WM_EQUIPMENT___WM_DIM_02_STANDARD_UOM_ID as WM_DIM_02_STANDARD_UOM_ID", \
	"SQ_Shortcut_to_WM_EQUIPMENT___WM_DIM_03_VALUE as WM_DIM_03_VALUE", \
	"SQ_Shortcut_to_WM_EQUIPMENT___WM_DIM_03_STANDARD_UOM_ID as WM_DIM_03_STANDARD_UOM_ID", \
	"SQ_Shortcut_to_WM_EQUIPMENT___MARK_FOR_DELETION as MARK_FOR_DELETION1", \
	"SQ_Shortcut_to_WM_EQUIPMENT___WM_CREATED_SOURCE_TYPE as WM_CREATED_SOURCE_TYPE", \
	"SQ_Shortcut_to_WM_EQUIPMENT___WM_CREATED_SOURCE as WM_CREATED_SOURCE", \
	"SQ_Shortcut_to_WM_EQUIPMENT___WM_CREATED_TSTMP as WM_CREATED_TSTMP", \
	"SQ_Shortcut_to_WM_EQUIPMENT___WM_LAST_UPDATED_SOURCE_TYPE as WM_LAST_UPDATED_SOURCE_TYPE", \
	"SQ_Shortcut_to_WM_EQUIPMENT___WM_LAST_UPDATED_SOURCE as WM_LAST_UPDATED_SOURCE", \
	"SQ_Shortcut_to_WM_EQUIPMENT___WM_LAST_UPDATED_TSTMP as WM_LAST_UPDATED_TSTMP", \
	"SQ_Shortcut_to_WM_EQUIPMENT___LOAD_TSTMP as in_LOAD_TSTMP")

# COMMAND ----------
# Processing node FIL_UNCHANGED_REC, type FILTER 
# COLUMN COUNT: 93

# for each involved DataFrame, append the dataframe name to each column
JNR_WM_EQUIPMENT_temp = JNR_WM_EQUIPMENT.toDF(*["JNR_WM_EQUIPMENT___" + col for col in JNR_WM_EQUIPMENT.columns])

FIL_UNCHANGED_REC = JNR_WM_EQUIPMENT_temp.selectExpr( \
	"JNR_WM_EQUIPMENT___EQUIPMENT_ID as EQUIPMENT_ID", \
	"JNR_WM_EQUIPMENT___TC_COMPANY_ID as TC_COMPANY_ID", \
	"JNR_WM_EQUIPMENT___EQUIPMENT_CODE as EQUIPMENT_CODE", \
	"JNR_WM_EQUIPMENT___DESCRIPTION as DESCRIPTION", \
	"JNR_WM_EQUIPMENT___MASTER_EQUIPMENT_ID as MASTER_EQUIPMENT_ID", \
	"JNR_WM_EQUIPMENT___EQUIPMENT_TYPE as EQUIPMENT_TYPE", \
	"JNR_WM_EQUIPMENT___SHAPE_TYPE as SHAPE_TYPE", \
	"JNR_WM_EQUIPMENT___TRAILER_TYPE as TRAILER_TYPE", \
	"JNR_WM_EQUIPMENT___OWNERSHIP_TYPE as OWNERSHIP_TYPE", \
	"JNR_WM_EQUIPMENT___TAX_BAND_NAME as TAX_BAND_NAME", \
	"JNR_WM_EQUIPMENT___BACKIN_TIME as BACKIN_TIME", \
	"JNR_WM_EQUIPMENT___BACKOUT_TIME as BACKOUT_TIME", \
	"JNR_WM_EQUIPMENT___NUMBER_OF_AXLES as NUMBER_OF_AXLES", \
	"JNR_WM_EQUIPMENT___PER_USAGE_COST as PER_USAGE_COST", \
	"JNR_WM_EQUIPMENT___PER_USAGE_COST_CURRENCY_CODE as PER_USAGE_COST_CURRENCY_CODE", \
	"JNR_WM_EQUIPMENT___IS_ALLOW_TRAILER_SWAPPING as IS_ALLOW_TRAILER_SWAPPING", \
	"JNR_WM_EQUIPMENT___IS_TANDEM_CAPABLE as IS_TANDEM_CAPABLE", \
	"JNR_WM_EQUIPMENT___VOLUME_CALC_VALUE as VOLUME_CALC_VALUE", \
	"JNR_WM_EQUIPMENT___VOLUME_CALC_STANDARD_UOM as VOLUME_CALC_STANDARD_UOM", \
	"JNR_WM_EQUIPMENT___WEIGHT_EMPTY_VALUE as WEIGHT_EMPTY_VALUE", \
	"JNR_WM_EQUIPMENT___WEIGHT_EMPTY_STANDARD_UOM as WEIGHT_EMPTY_STANDARD_UOM", \
	"JNR_WM_EQUIPMENT___WEIGHT_EMPTY_SIZE_UOM_ID as WEIGHT_EMPTY_SIZE_UOM_ID", \
	"JNR_WM_EQUIPMENT___PLATED_WEIGHT as PLATED_WEIGHT", \
	"JNR_WM_EQUIPMENT___PLATED_WEIGHT_SIZE_UOM_ID as PLATED_WEIGHT_SIZE_UOM_ID", \
	"JNR_WM_EQUIPMENT___WEIGHT_VALUE as WEIGHT_VALUE", \
	"JNR_WM_EQUIPMENT___WEIGHT_STANDARD_UOM as WEIGHT_STANDARD_UOM", \
	"JNR_WM_EQUIPMENT___EQUIP_DW_HEIGHT_VALUE as EQUIP_DW_HEIGHT_VALUE", \
	"JNR_WM_EQUIPMENT___EQUIP_DW_HEIGHT_STANDARD_UOM as EQUIP_DW_HEIGHT_STANDARD_UOM", \
	"JNR_WM_EQUIPMENT___EQUIP_HEIGHT_VALUE as EQUIP_HEIGHT_VALUE", \
	"JNR_WM_EQUIPMENT___EQUIP_HEIGHT_STANDARD_UOM as EQUIP_HEIGHT_STANDARD_UOM", \
	"JNR_WM_EQUIPMENT___FLOOR_SPACE_VALUE as FLOOR_SPACE_VALUE", \
	"JNR_WM_EQUIPMENT___FLOOR_SPACE_SIZE_UOM_ID as FLOOR_SPACE_SIZE_UOM_ID", \
	"JNR_WM_EQUIPMENT___DIM01_VALUE as DIM01_VALUE", \
	"JNR_WM_EQUIPMENT___DIM01_STANDARD_UOM as DIM01_STANDARD_UOM", \
	"JNR_WM_EQUIPMENT___DIM02_VALUE as DIM02_VALUE", \
	"JNR_WM_EQUIPMENT___DIM02_STANDARD_UOM as DIM02_STANDARD_UOM", \
	"JNR_WM_EQUIPMENT___DIM03_VALUE as DIM03_VALUE", \
	"JNR_WM_EQUIPMENT___DIM03_STANDARD_UOM as DIM03_STANDARD_UOM", \
	"JNR_WM_EQUIPMENT___MARK_FOR_DELETION as MARK_FOR_DELETION", \
	"JNR_WM_EQUIPMENT___CREATED_SOURCE_TYPE as CREATED_SOURCE_TYPE", \
	"JNR_WM_EQUIPMENT___CREATED_SOURCE as CREATED_SOURCE", \
	"JNR_WM_EQUIPMENT___CREATED_DTTM as CREATED_DTTM", \
	"JNR_WM_EQUIPMENT___LAST_UPDATED_SOURCE_TYPE as LAST_UPDATED_SOURCE_TYPE", \
	"JNR_WM_EQUIPMENT___LAST_UPDATED_SOURCE as LAST_UPDATED_SOURCE", \
	"JNR_WM_EQUIPMENT___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"JNR_WM_EQUIPMENT___LOCATION_ID as LOCATION_ID", \
	"JNR_WM_EQUIPMENT___in_LOCATION_ID as in_LOCATION_ID", \
	"JNR_WM_EQUIPMENT___WM_EQUIPMENT_ID as WM_EQUIPMENT_ID", \
	"JNR_WM_EQUIPMENT___WM_TC_COMPANY_ID as WM_TC_COMPANY_ID", \
	"JNR_WM_EQUIPMENT___WM_EQUIPMENT_CD as WM_EQUIPMENT_CD", \
	"JNR_WM_EQUIPMENT___WM_EQUIPMENT_DESC as WM_EQUIPMENT_DESC", \
	"JNR_WM_EQUIPMENT___WM_MASTER_EQUIPMENT_ID as WM_MASTER_EQUIPMENT_ID", \
	"JNR_WM_EQUIPMENT___WM_EQUIPMENT_TYPE_ID as WM_EQUIPMENT_TYPE_ID", \
	"JNR_WM_EQUIPMENT___WM_SHAPE_TYPE as WM_SHAPE_TYPE", \
	"JNR_WM_EQUIPMENT___WM_TRAILER_TYPE_ID as WM_TRAILER_TYPE_ID", \
	"JNR_WM_EQUIPMENT___WM_OWNERSHIP_TYPE_ID as WM_OWNERSHIP_TYPE_ID", \
	"JNR_WM_EQUIPMENT___in_TAX_BAND_NAME as in_TAX_BAND_NAME", \
	"JNR_WM_EQUIPMENT___BACK_IN_TIME as BACK_IN_TIME", \
	"JNR_WM_EQUIPMENT___BACK_OUT_TIME as BACK_OUT_TIME", \
	"JNR_WM_EQUIPMENT___in_NUMBER_OF_AXLES as in_NUMBER_OF_AXLES", \
	"JNR_WM_EQUIPMENT___in_PER_USAGE_COST as in_PER_USAGE_COST", \
	"JNR_WM_EQUIPMENT___PER_USAGE_COST_CURRENCY_CD as PER_USAGE_COST_CURRENCY_CD", \
	"JNR_WM_EQUIPMENT___ALLOW_TRAILER_SWAPPING_FLAG as ALLOW_TRAILER_SWAPPING_FLAG", \
	"JNR_WM_EQUIPMENT___TANDEM_CAPABLE_FLAG as TANDEM_CAPABLE_FLAG", \
	"JNR_WM_EQUIPMENT___WM_VOLUME_CALC_VALUE as WM_VOLUME_CALC_VALUE", \
	"JNR_WM_EQUIPMENT___WM_VOLUME_CALC_STANDARD_UOM_ID as WM_VOLUME_CALC_STANDARD_UOM_ID", \
	"JNR_WM_EQUIPMENT___WM_WEIGHT_EMPTY_VALUE as WM_WEIGHT_EMPTY_VALUE", \
	"JNR_WM_EQUIPMENT___WM_WEIGHT_EMPTY_STANDARD_UOM_ID as WM_WEIGHT_EMPTY_STANDARD_UOM_ID", \
	"JNR_WM_EQUIPMENT___WM_WEIGHT_EMPTY_SIZE_UOM_ID as WM_WEIGHT_EMPTY_SIZE_UOM_ID", \
	"JNR_WM_EQUIPMENT___WM_PLATED_WEIGHT as WM_PLATED_WEIGHT", \
	"JNR_WM_EQUIPMENT___WM_PLATED_WEIGHT_SIZE_UOM_ID as WM_PLATED_WEIGHT_SIZE_UOM_ID", \
	"JNR_WM_EQUIPMENT___WM_WEIGHT_VALUE as WM_WEIGHT_VALUE", \
	"JNR_WM_EQUIPMENT___WM_WEIGHT_STANDARD_UOM_ID as WM_WEIGHT_STANDARD_UOM_ID", \
	"JNR_WM_EQUIPMENT___WM_EQUIP_DW_HEIGHT_VALUE as WM_EQUIP_DW_HEIGHT_VALUE", \
	"JNR_WM_EQUIPMENT___WM_EQUIP_DW_HEIGHT_STANDARD_UOM_ID as WM_EQUIP_DW_HEIGHT_STANDARD_UOM_ID", \
	"JNR_WM_EQUIPMENT___WM_EQUIP_HEIGHT_VALUE as WM_EQUIP_HEIGHT_VALUE", \
	"JNR_WM_EQUIPMENT___WM_EQUIP_HEIGHT_STANDARD_UOM_ID as WM_EQUIP_HEIGHT_STANDARD_UOM_ID", \
	"JNR_WM_EQUIPMENT___WM_FLOOR_SPACE_VALUE as WM_FLOOR_SPACE_VALUE", \
	"JNR_WM_EQUIPMENT___WM_FLOOR_SPACE_SIZE_UOM_ID as WM_FLOOR_SPACE_SIZE_UOM_ID", \
	"JNR_WM_EQUIPMENT___WM_DIM_01_VALUE as WM_DIM_01_VALUE", \
	"JNR_WM_EQUIPMENT___WM_DIM_01_STANDARD_UOM_ID as WM_DIM_01_STANDARD_UOM_ID", \
	"JNR_WM_EQUIPMENT___WM_DIM_02_VALUE as WM_DIM_02_VALUE", \
	"JNR_WM_EQUIPMENT___WM_DIM_02_STANDARD_UOM_ID as WM_DIM_02_STANDARD_UOM_ID", \
	"JNR_WM_EQUIPMENT___WM_DIM_03_VALUE as WM_DIM_03_VALUE", \
	"JNR_WM_EQUIPMENT___WM_DIM_03_STANDARD_UOM_ID as WM_DIM_03_STANDARD_UOM_ID", \
	"JNR_WM_EQUIPMENT___MARK_FOR_DELETION1 as MARK_FOR_DELETION1", \
	"JNR_WM_EQUIPMENT___WM_CREATED_SOURCE_TYPE as WM_CREATED_SOURCE_TYPE", \
	"JNR_WM_EQUIPMENT___WM_CREATED_SOURCE as WM_CREATED_SOURCE", \
	"JNR_WM_EQUIPMENT___WM_CREATED_TSTMP as WM_CREATED_TSTMP", \
	"JNR_WM_EQUIPMENT___WM_LAST_UPDATED_SOURCE_TYPE as WM_LAST_UPDATED_SOURCE_TYPE", \
	"JNR_WM_EQUIPMENT___WM_LAST_UPDATED_SOURCE as WM_LAST_UPDATED_SOURCE", \
	"JNR_WM_EQUIPMENT___WM_LAST_UPDATED_TSTMP as WM_LAST_UPDATED_TSTMP", \
	"JNR_WM_EQUIPMENT___in_LOAD_TSTMP as in_LOAD_TSTMP") \
	.filter("WM_EQUIPMENT_ID IS NULL OR ( WM_EQUIPMENT_ID IS NOT NULL AND ( COALESCE(CREATED_DTTM, date'1900-01-01') != COALESCE(WM_CREATED_TSTMP, date'1900-01-01') OR COALESCE(LAST_UPDATED_DTTM, date'1900-01-01') != COALESCE(WM_LAST_UPDATED_TSTMP, date'1900-01-01')))").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node EXP_UPD_VALIDATOR, type EXPRESSION 
# COLUMN COUNT: 96

# for each involved DataFrame, append the dataframe name to each column
FIL_UNCHANGED_REC_temp = FIL_UNCHANGED_REC.toDF(*["FIL_UNCHANGED_REC___" + col for col in FIL_UNCHANGED_REC.columns])

EXP_UPD_VALIDATOR = FIL_UNCHANGED_REC_temp.selectExpr( \
	"FIL_UNCHANGED_REC___sys_row_id as sys_row_id", \
	"FIL_UNCHANGED_REC___EQUIPMENT_ID as EQUIPMENT_ID", \
	"FIL_UNCHANGED_REC___TC_COMPANY_ID as TC_COMPANY_ID", \
	"FIL_UNCHANGED_REC___EQUIPMENT_CODE as EQUIPMENT_CODE", \
	"FIL_UNCHANGED_REC___DESCRIPTION as DESCRIPTION", \
	"FIL_UNCHANGED_REC___MASTER_EQUIPMENT_ID as MASTER_EQUIPMENT_ID", \
	"FIL_UNCHANGED_REC___EQUIPMENT_TYPE as EQUIPMENT_TYPE", \
	"FIL_UNCHANGED_REC___SHAPE_TYPE as SHAPE_TYPE", \
	"FIL_UNCHANGED_REC___TRAILER_TYPE as TRAILER_TYPE", \
	"FIL_UNCHANGED_REC___OWNERSHIP_TYPE as OWNERSHIP_TYPE", \
	"FIL_UNCHANGED_REC___TAX_BAND_NAME as TAX_BAND_NAME", \
	"FIL_UNCHANGED_REC___BACKIN_TIME as BACKIN_TIME", \
	"FIL_UNCHANGED_REC___BACKOUT_TIME as BACKOUT_TIME", \
	"FIL_UNCHANGED_REC___NUMBER_OF_AXLES as NUMBER_OF_AXLES", \
	"FIL_UNCHANGED_REC___PER_USAGE_COST as PER_USAGE_COST", \
	"FIL_UNCHANGED_REC___PER_USAGE_COST_CURRENCY_CODE as PER_USAGE_COST_CURRENCY_CODE", \
	"FIL_UNCHANGED_REC___IS_ALLOW_TRAILER_SWAPPING as IS_ALLOW_TRAILER_SWAPPING", \
	"FIL_UNCHANGED_REC___IS_TANDEM_CAPABLE as IS_TANDEM_CAPABLE", \
	"FIL_UNCHANGED_REC___VOLUME_CALC_VALUE as VOLUME_CALC_VALUE", \
	"FIL_UNCHANGED_REC___VOLUME_CALC_STANDARD_UOM as VOLUME_CALC_STANDARD_UOM", \
	"FIL_UNCHANGED_REC___WEIGHT_EMPTY_VALUE as WEIGHT_EMPTY_VALUE", \
	"FIL_UNCHANGED_REC___WEIGHT_EMPTY_STANDARD_UOM as WEIGHT_EMPTY_STANDARD_UOM", \
	"FIL_UNCHANGED_REC___WEIGHT_EMPTY_SIZE_UOM_ID as WEIGHT_EMPTY_SIZE_UOM_ID", \
	"FIL_UNCHANGED_REC___PLATED_WEIGHT as PLATED_WEIGHT", \
	"FIL_UNCHANGED_REC___PLATED_WEIGHT_SIZE_UOM_ID as PLATED_WEIGHT_SIZE_UOM_ID", \
	"FIL_UNCHANGED_REC___WEIGHT_VALUE as WEIGHT_VALUE", \
	"FIL_UNCHANGED_REC___WEIGHT_STANDARD_UOM as WEIGHT_STANDARD_UOM", \
	"FIL_UNCHANGED_REC___EQUIP_DW_HEIGHT_VALUE as EQUIP_DW_HEIGHT_VALUE", \
	"FIL_UNCHANGED_REC___EQUIP_DW_HEIGHT_STANDARD_UOM as EQUIP_DW_HEIGHT_STANDARD_UOM", \
	"FIL_UNCHANGED_REC___EQUIP_HEIGHT_VALUE as EQUIP_HEIGHT_VALUE", \
	"FIL_UNCHANGED_REC___EQUIP_HEIGHT_STANDARD_UOM as EQUIP_HEIGHT_STANDARD_UOM", \
	"FIL_UNCHANGED_REC___FLOOR_SPACE_VALUE as FLOOR_SPACE_VALUE", \
	"FIL_UNCHANGED_REC___FLOOR_SPACE_SIZE_UOM_ID as FLOOR_SPACE_SIZE_UOM_ID", \
	"FIL_UNCHANGED_REC___DIM01_VALUE as DIM01_VALUE", \
	"FIL_UNCHANGED_REC___DIM01_STANDARD_UOM as DIM01_STANDARD_UOM", \
	"FIL_UNCHANGED_REC___DIM02_VALUE as DIM02_VALUE", \
	"FIL_UNCHANGED_REC___DIM02_STANDARD_UOM as DIM02_STANDARD_UOM", \
	"FIL_UNCHANGED_REC___DIM03_VALUE as DIM03_VALUE", \
	"FIL_UNCHANGED_REC___DIM03_STANDARD_UOM as DIM03_STANDARD_UOM", \
	"FIL_UNCHANGED_REC___MARK_FOR_DELETION as MARK_FOR_DELETION", \
	"FIL_UNCHANGED_REC___CREATED_SOURCE_TYPE as CREATED_SOURCE_TYPE", \
	"FIL_UNCHANGED_REC___CREATED_SOURCE as CREATED_SOURCE", \
	"FIL_UNCHANGED_REC___CREATED_DTTM as CREATED_DTTM", \
	"FIL_UNCHANGED_REC___LAST_UPDATED_SOURCE_TYPE as LAST_UPDATED_SOURCE_TYPE", \
	"FIL_UNCHANGED_REC___LAST_UPDATED_SOURCE as LAST_UPDATED_SOURCE", \
	"FIL_UNCHANGED_REC___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"FIL_UNCHANGED_REC___LOCATION_ID as LOCATION_ID", \
	"FIL_UNCHANGED_REC___in_LOCATION_ID as in_LOCATION_ID", \
	"FIL_UNCHANGED_REC___WM_EQUIPMENT_ID as WM_EQUIPMENT_ID", \
	"FIL_UNCHANGED_REC___WM_TC_COMPANY_ID as WM_TC_COMPANY_ID", \
	"FIL_UNCHANGED_REC___WM_EQUIPMENT_CD as WM_EQUIPMENT_CD", \
	"FIL_UNCHANGED_REC___WM_EQUIPMENT_DESC as WM_EQUIPMENT_DESC", \
	"FIL_UNCHANGED_REC___WM_MASTER_EQUIPMENT_ID as WM_MASTER_EQUIPMENT_ID", \
	"FIL_UNCHANGED_REC___WM_EQUIPMENT_TYPE_ID as WM_EQUIPMENT_TYPE_ID", \
	"FIL_UNCHANGED_REC___WM_SHAPE_TYPE as WM_SHAPE_TYPE", \
	"FIL_UNCHANGED_REC___WM_TRAILER_TYPE_ID as WM_TRAILER_TYPE_ID", \
	"FIL_UNCHANGED_REC___WM_OWNERSHIP_TYPE_ID as WM_OWNERSHIP_TYPE_ID", \
	"FIL_UNCHANGED_REC___in_TAX_BAND_NAME as in_TAX_BAND_NAME", \
	"FIL_UNCHANGED_REC___BACK_IN_TIME as BACK_IN_TIME", \
	"FIL_UNCHANGED_REC___BACK_OUT_TIME as BACK_OUT_TIME", \
	"FIL_UNCHANGED_REC___in_NUMBER_OF_AXLES as in_NUMBER_OF_AXLES", \
	"FIL_UNCHANGED_REC___in_PER_USAGE_COST as in_PER_USAGE_COST", \
	"FIL_UNCHANGED_REC___PER_USAGE_COST_CURRENCY_CD as PER_USAGE_COST_CURRENCY_CD", \
	"FIL_UNCHANGED_REC___ALLOW_TRAILER_SWAPPING_FLAG as ALLOW_TRAILER_SWAPPING_FLAG", \
	"FIL_UNCHANGED_REC___TANDEM_CAPABLE_FLAG as TANDEM_CAPABLE_FLAG", \
	"FIL_UNCHANGED_REC___WM_VOLUME_CALC_VALUE as WM_VOLUME_CALC_VALUE", \
	"FIL_UNCHANGED_REC___WM_VOLUME_CALC_STANDARD_UOM_ID as WM_VOLUME_CALC_STANDARD_UOM_ID", \
	"FIL_UNCHANGED_REC___WM_WEIGHT_EMPTY_VALUE as WM_WEIGHT_EMPTY_VALUE", \
	"FIL_UNCHANGED_REC___WM_WEIGHT_EMPTY_STANDARD_UOM_ID as WM_WEIGHT_EMPTY_STANDARD_UOM_ID", \
	"FIL_UNCHANGED_REC___WM_WEIGHT_EMPTY_SIZE_UOM_ID as WM_WEIGHT_EMPTY_SIZE_UOM_ID", \
	"FIL_UNCHANGED_REC___WM_PLATED_WEIGHT as WM_PLATED_WEIGHT", \
	"FIL_UNCHANGED_REC___WM_PLATED_WEIGHT_SIZE_UOM_ID as WM_PLATED_WEIGHT_SIZE_UOM_ID", \
	"FIL_UNCHANGED_REC___WM_WEIGHT_VALUE as WM_WEIGHT_VALUE", \
	"FIL_UNCHANGED_REC___WM_WEIGHT_STANDARD_UOM_ID as WM_WEIGHT_STANDARD_UOM_ID", \
	"FIL_UNCHANGED_REC___WM_EQUIP_DW_HEIGHT_VALUE as WM_EQUIP_DW_HEIGHT_VALUE", \
	"FIL_UNCHANGED_REC___WM_EQUIP_DW_HEIGHT_STANDARD_UOM_ID as WM_EQUIP_DW_HEIGHT_STANDARD_UOM_ID", \
	"FIL_UNCHANGED_REC___WM_EQUIP_HEIGHT_VALUE as WM_EQUIP_HEIGHT_VALUE", \
	"FIL_UNCHANGED_REC___WM_EQUIP_HEIGHT_STANDARD_UOM_ID as WM_EQUIP_HEIGHT_STANDARD_UOM_ID", \
	"FIL_UNCHANGED_REC___WM_FLOOR_SPACE_VALUE as WM_FLOOR_SPACE_VALUE", \
	"FIL_UNCHANGED_REC___WM_FLOOR_SPACE_SIZE_UOM_ID as WM_FLOOR_SPACE_SIZE_UOM_ID", \
	"FIL_UNCHANGED_REC___WM_DIM_01_VALUE as WM_DIM_01_VALUE", \
	"FIL_UNCHANGED_REC___WM_DIM_01_STANDARD_UOM_ID as WM_DIM_01_STANDARD_UOM_ID", \
	"FIL_UNCHANGED_REC___WM_DIM_02_VALUE as WM_DIM_02_VALUE", \
	"FIL_UNCHANGED_REC___WM_DIM_02_STANDARD_UOM_ID as WM_DIM_02_STANDARD_UOM_ID", \
	"FIL_UNCHANGED_REC___WM_DIM_03_VALUE as WM_DIM_03_VALUE", \
	"FIL_UNCHANGED_REC___WM_DIM_03_STANDARD_UOM_ID as WM_DIM_03_STANDARD_UOM_ID", \
	"FIL_UNCHANGED_REC___MARK_FOR_DELETION1 as MARK_FOR_DELETION1", \
	"FIL_UNCHANGED_REC___WM_CREATED_SOURCE_TYPE as WM_CREATED_SOURCE_TYPE", \
	"FIL_UNCHANGED_REC___WM_CREATED_SOURCE as WM_CREATED_SOURCE", \
	"FIL_UNCHANGED_REC___WM_CREATED_TSTMP as WM_CREATED_TSTMP", \
	"FIL_UNCHANGED_REC___WM_LAST_UPDATED_SOURCE_TYPE as WM_LAST_UPDATED_SOURCE_TYPE", \
	"FIL_UNCHANGED_REC___WM_LAST_UPDATED_SOURCE as WM_LAST_UPDATED_SOURCE", \
	"FIL_UNCHANGED_REC___WM_LAST_UPDATED_TSTMP as WM_LAST_UPDATED_TSTMP", \
	"FIL_UNCHANGED_REC___in_LOAD_TSTMP as in_LOAD_TSTMP", \
	"CURRENT_TIMESTAMP() as UPDATE_TSTMP", \
	"IF(FIL_UNCHANGED_REC___in_LOAD_TSTMP IS NULL, CURRENT_TIMESTAMP(), FIL_UNCHANGED_REC___in_LOAD_TSTMP) as LOAD_TSTMP_exp", \
	"IF(FIL_UNCHANGED_REC___WM_EQUIPMENT_ID IS NULL, 1, 2) as o_UPD_VALIDATOR" \
)

# COMMAND ----------
# Processing node UPS_INS_UPD, type UPDATE_STRATEGY 
# COLUMN COUNT: 49

# for each involved DataFrame, append the dataframe name to each column
EXP_UPD_VALIDATOR_temp = EXP_UPD_VALIDATOR.toDF(*["EXP_UPD_VALIDATOR___" + col for col in EXP_UPD_VALIDATOR.columns])

UPS_INS_UPD = EXP_UPD_VALIDATOR_temp.selectExpr( \
	"EXP_UPD_VALIDATOR___LOCATION_ID as LOCATION_ID", \
	"EXP_UPD_VALIDATOR___EQUIPMENT_ID as EQUIPMENT_ID", \
	"EXP_UPD_VALIDATOR___TC_COMPANY_ID as TC_COMPANY_ID", \
	"EXP_UPD_VALIDATOR___EQUIPMENT_CODE as EQUIPMENT_CODE", \
	"EXP_UPD_VALIDATOR___DESCRIPTION as DESCRIPTION", \
	"EXP_UPD_VALIDATOR___MASTER_EQUIPMENT_ID as MASTER_EQUIPMENT_ID", \
	"EXP_UPD_VALIDATOR___EQUIPMENT_TYPE as EQUIPMENT_TYPE", \
	"EXP_UPD_VALIDATOR___SHAPE_TYPE as SHAPE_TYPE", \
	"EXP_UPD_VALIDATOR___TRAILER_TYPE as TRAILER_TYPE", \
	"EXP_UPD_VALIDATOR___OWNERSHIP_TYPE as OWNERSHIP_TYPE", \
	"EXP_UPD_VALIDATOR___TAX_BAND_NAME as TAX_BAND_NAME", \
	"EXP_UPD_VALIDATOR___BACKIN_TIME as BACKIN_TIME", \
	"EXP_UPD_VALIDATOR___BACKOUT_TIME as BACKOUT_TIME", \
	"EXP_UPD_VALIDATOR___NUMBER_OF_AXLES as NUMBER_OF_AXLES", \
	"EXP_UPD_VALIDATOR___PER_USAGE_COST as PER_USAGE_COST", \
	"EXP_UPD_VALIDATOR___PER_USAGE_COST_CURRENCY_CODE as PER_USAGE_COST_CURRENCY_CODE", \
	"EXP_UPD_VALIDATOR___IS_ALLOW_TRAILER_SWAPPING as IS_ALLOW_TRAILER_SWAPPING", \
	"EXP_UPD_VALIDATOR___IS_TANDEM_CAPABLE as IS_TANDEM_CAPABLE", \
	"EXP_UPD_VALIDATOR___VOLUME_CALC_VALUE as VOLUME_CALC_VALUE", \
	"EXP_UPD_VALIDATOR___VOLUME_CALC_STANDARD_UOM as VOLUME_CALC_STANDARD_UOM", \
	"EXP_UPD_VALIDATOR___WEIGHT_EMPTY_VALUE as WEIGHT_EMPTY_VALUE", \
	"EXP_UPD_VALIDATOR___WEIGHT_EMPTY_STANDARD_UOM as WEIGHT_EMPTY_STANDARD_UOM", \
	"EXP_UPD_VALIDATOR___WEIGHT_EMPTY_SIZE_UOM_ID as WEIGHT_EMPTY_SIZE_UOM_ID", \
	"EXP_UPD_VALIDATOR___PLATED_WEIGHT as PLATED_WEIGHT", \
	"EXP_UPD_VALIDATOR___PLATED_WEIGHT_SIZE_UOM_ID as PLATED_WEIGHT_SIZE_UOM_ID", \
	"EXP_UPD_VALIDATOR___WEIGHT_VALUE as WEIGHT_VALUE", \
	"EXP_UPD_VALIDATOR___WEIGHT_STANDARD_UOM as WEIGHT_STANDARD_UOM", \
	"EXP_UPD_VALIDATOR___EQUIP_DW_HEIGHT_VALUE as EQUIP_DW_HEIGHT_VALUE", \
	"EXP_UPD_VALIDATOR___EQUIP_DW_HEIGHT_STANDARD_UOM as EQUIP_DW_HEIGHT_STANDARD_UOM", \
	"EXP_UPD_VALIDATOR___EQUIP_HEIGHT_VALUE as EQUIP_HEIGHT_VALUE", \
	"EXP_UPD_VALIDATOR___EQUIP_HEIGHT_STANDARD_UOM as EQUIP_HEIGHT_STANDARD_UOM", \
	"EXP_UPD_VALIDATOR___FLOOR_SPACE_VALUE as FLOOR_SPACE_VALUE", \
	"EXP_UPD_VALIDATOR___FLOOR_SPACE_SIZE_UOM_ID as FLOOR_SPACE_SIZE_UOM_ID", \
	"EXP_UPD_VALIDATOR___DIM01_VALUE as DIM01_VALUE", \
	"EXP_UPD_VALIDATOR___DIM01_STANDARD_UOM as DIM01_STANDARD_UOM", \
	"EXP_UPD_VALIDATOR___DIM02_VALUE as DIM02_VALUE", \
	"EXP_UPD_VALIDATOR___DIM02_STANDARD_UOM as DIM02_STANDARD_UOM", \
	"EXP_UPD_VALIDATOR___DIM03_VALUE as DIM03_VALUE", \
	"EXP_UPD_VALIDATOR___DIM03_STANDARD_UOM as DIM03_STANDARD_UOM", \
	"EXP_UPD_VALIDATOR___MARK_FOR_DELETION as MARK_FOR_DELETION", \
	"EXP_UPD_VALIDATOR___CREATED_SOURCE_TYPE as CREATED_SOURCE_TYPE", \
	"EXP_UPD_VALIDATOR___CREATED_SOURCE as CREATED_SOURCE", \
	"EXP_UPD_VALIDATOR___CREATED_DTTM as CREATED_DTTM", \
	"EXP_UPD_VALIDATOR___LAST_UPDATED_SOURCE_TYPE as LAST_UPDATED_SOURCE_TYPE", \
	"EXP_UPD_VALIDATOR___LAST_UPDATED_SOURCE as LAST_UPDATED_SOURCE", \
	"EXP_UPD_VALIDATOR___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"EXP_UPD_VALIDATOR___UPDATE_TSTMP as UPDATE_TSTMP", \
	"EXP_UPD_VALIDATOR___LOAD_TSTMP_exp as LOAD_TSTMP_exp", \
	"EXP_UPD_VALIDATOR___o_UPD_VALIDATOR as o_UPD_VALIDATOR") \
	.withColumn('pyspark_data_action', when(col('o_UPD_VALIDATOR') ==(lit(1)), lit(0)).when(col('o_UPD_VALIDATOR') ==(lit(2)), lit(1)))

# COMMAND ----------
# Processing node Shortcut_to_WM_EQUIPMENT1, type TARGET 
# COLUMN COUNT: 48


Shortcut_to_WM_EQUIPMENT1 = UPS_INS_UPD.selectExpr(
	"CAST(LOCATION_ID AS BIGINT) as LOCATION_ID",
	"CAST(EQUIPMENT_ID AS BIGINT) as WM_EQUIPMENT_ID",
	"CAST(TC_COMPANY_ID AS INT) as WM_TC_COMPANY_ID",
	"CAST(EQUIPMENT_CODE AS STRING) as WM_EQUIPMENT_CD",
	"CAST(DESCRIPTION AS STRING) as WM_EQUIPMENT_DESC",
	"CAST(MASTER_EQUIPMENT_ID AS BIGINT) as WM_MASTER_EQUIPMENT_ID",
	"CAST(EQUIPMENT_TYPE AS SMALLINT) as WM_EQUIPMENT_TYPE_ID",
	"CAST(SHAPE_TYPE AS SMALLINT) as WM_SHAPE_TYPE",
	"CAST(TRAILER_TYPE AS TINYINT) as WM_TRAILER_TYPE_ID",
	"CAST(OWNERSHIP_TYPE AS SMALLINT) as WM_OWNERSHIP_TYPE_ID",
	"CAST(TAX_BAND_NAME AS STRING) as TAX_BAND_NAME",
	"CAST(BACKIN_TIME AS SMALLINT) as BACK_IN_TIME",
	"CAST(BACKOUT_TIME AS SMALLINT) as BACK_OUT_TIME",
	"CAST(NUMBER_OF_AXLES AS SMALLINT) as NUMBER_OF_AXLES",
	"CAST(PER_USAGE_COST AS DECIMAL(13,2)) as PER_USAGE_COST",
	"CAST(PER_USAGE_COST_CURRENCY_CODE AS STRING) as PER_USAGE_COST_CURRENCY_CD",
	"CAST(IS_ALLOW_TRAILER_SWAPPING AS TINYINT) as ALLOW_TRAILER_SWAPPING_FLAG",
	"CAST(IS_TANDEM_CAPABLE AS TINYINT) as TANDEM_CAPABLE_FLAG",
	"CAST(VOLUME_CALC_VALUE AS DECIMAL(16,4)) as WM_VOLUME_CALC_VALUE",
	"CAST(VOLUME_CALC_STANDARD_UOM AS INT) as WM_VOLUME_CALC_STANDARD_UOM_ID",
	"CAST(WEIGHT_EMPTY_VALUE AS DECIMAL(16,4)) as WM_WEIGHT_EMPTY_VALUE",
	"CAST(WEIGHT_EMPTY_STANDARD_UOM AS INT) as WM_WEIGHT_EMPTY_STANDARD_UOM_ID",
	"CAST(WEIGHT_EMPTY_SIZE_UOM_ID AS INT) as WM_WEIGHT_EMPTY_SIZE_UOM_ID",
	"CAST(PLATED_WEIGHT AS DECIMAL(13,2)) as WM_PLATED_WEIGHT",
	"CAST(PLATED_WEIGHT_SIZE_UOM_ID AS INT) as WM_PLATED_WEIGHT_SIZE_UOM_ID",
	"CAST(WEIGHT_VALUE AS DECIMAL(13,4)) as WM_WEIGHT_VALUE",
	"CAST(WEIGHT_STANDARD_UOM AS INT) as WM_WEIGHT_STANDARD_UOM_ID",
	"CAST(EQUIP_DW_HEIGHT_VALUE AS DECIMAL(16,4)) as WM_EQUIP_DW_HEIGHT_VALUE",
	"CAST(EQUIP_DW_HEIGHT_STANDARD_UOM AS INT) as WM_EQUIP_DW_HEIGHT_STANDARD_UOM_ID",
	"CAST(EQUIP_HEIGHT_VALUE AS INT) as WM_EQUIP_HEIGHT_VALUE",
	"CAST(EQUIP_HEIGHT_STANDARD_UOM AS INT) as WM_EQUIP_HEIGHT_STANDARD_UOM_ID",
	"CAST(FLOOR_SPACE_VALUE AS BIGINT) as WM_FLOOR_SPACE_VALUE",
	"CAST(FLOOR_SPACE_SIZE_UOM_ID AS INT) as WM_FLOOR_SPACE_SIZE_UOM_ID",
	"CAST(DIM01_VALUE AS DECIMAL(16,4)) as WM_DIM_01_VALUE",
	"CAST(DIM01_STANDARD_UOM AS INT) as WM_DIM_01_STANDARD_UOM_ID",
	"CAST(DIM02_VALUE AS DECIMAL(16,4)) as WM_DIM_02_VALUE",
	"CAST(DIM02_STANDARD_UOM AS INT) as WM_DIM_02_STANDARD_UOM_ID",
	"CAST(DIM03_VALUE AS DECIMAL(16,4)) as WM_DIM_03_VALUE",
	"CAST(DIM03_STANDARD_UOM AS INT) as WM_DIM_03_STANDARD_UOM_ID",
	"CAST(MARK_FOR_DELETION AS SMALLINT) as MARK_FOR_DELETION",
	"CAST(CREATED_SOURCE_TYPE AS SMALLINT) as WM_CREATED_SOURCE_TYPE",
	"CAST(CREATED_SOURCE AS STRING) as WM_CREATED_SOURCE",
	"CAST(CREATED_DTTM AS TIMESTAMP) as WM_CREATED_TSTMP",
	"CAST(LAST_UPDATED_SOURCE_TYPE AS SMALLINT) as WM_LAST_UPDATED_SOURCE_TYPE",
	"CAST(LAST_UPDATED_SOURCE AS STRING) as WM_LAST_UPDATED_SOURCE",
	"CAST(LAST_UPDATED_DTTM AS TIMESTAMP) as WM_LAST_UPDATED_TSTMP",
	"CAST(UPDATE_TSTMP AS TIMESTAMP) as UPDATE_TSTMP",
	"CAST(LOAD_TSTMP_exp AS TIMESTAMP) as LOAD_TSTMP", 
    "pyspark_data_action" 
)

try:
  primary_key = """source.LOCATION_ID = target.LOCATION_ID AND source.WM_EQUIPMENT_ID = target.WM_EQUIPMENT_ID"""
  executeMerge(Shortcut_to_WM_EQUIPMENT1, refined_perf_table, primary_key)
  logger.info(f"Merge with {refined_perf_table} completed]")
  logPrevRunDt("WM_EQUIPMENT", "WM_EQUIPMENT", "Completed", "N/A", f"{raw}.log_run_details")
except Exception as e:
  logPrevRunDt("WM_EQUIPMENT", "WM_EQUIPMENT","Failed",str(e), f"{raw}.log_run_details", )
  raise e
	