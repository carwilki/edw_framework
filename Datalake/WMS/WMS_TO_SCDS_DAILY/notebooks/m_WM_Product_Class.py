#Code converted on 2023-06-22 15:26:06
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from pyspark.dbutils import DBUtils
from Datalake.utils.genericUtilities import *
from Datalake.utils.configs import *
from Datalake.utils.mergeUtils import *
from Datalake.utils.logger import *
# COMMAND ----------

parser = argparse.ArgumentParser()
spark = SparkSession.getActiveSession()
dbutils = DBUtils(spark)

parser.add_argument('env', type=str, help='Env Variable')
args = parser.parse_args()
env = args.env

if env is None or env == '':
    raise ValueError('env is not set')

refine = getEnvPrefix(env) + 'refine'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'

# Set global variables
starttime = datetime.now() #start timestamp of the script
refined_perf_table = f"{refine}.WM_PRODUCT_CLASS"
raw_perf_table = f"{raw}.WM_PRODUCT_CLASS_PRE"
site_profile_table = f"{legacy}.SITE_PROFILE"


# COMMAND ----------
# Processing node SQ_Shortcut_to_WM_PRODUCT_CLASS_PRE, type SOURCE 
# COLUMN COUNT: 12

SQ_Shortcut_to_WM_PRODUCT_CLASS_PRE = spark.sql(f"""SELECT
DC_NBR,
PRODUCT_CLASS_ID,
TC_COMPANY_ID,
PRODUCT_CLASS,
DESCRIPTION,
MARK_FOR_DELETION,
HAS_SPLIT,
RANK,
MIN_THRESHOLD,
CREATED_DTTM,
LAST_UPDATED_DTTM,
STACKING_FACTOR
FROM {raw_perf_table}""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node EXPTRANS, type EXPRESSION 
# COLUMN COUNT: 12

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_WM_PRODUCT_CLASS_PRE_temp = SQ_Shortcut_to_WM_PRODUCT_CLASS_PRE.toDF(*["SQ_Shortcut_to_WM_PRODUCT_CLASS_PRE___" + col for col in SQ_Shortcut_to_WM_PRODUCT_CLASS_PRE.columns])

EXPTRANS = SQ_Shortcut_to_WM_PRODUCT_CLASS_PRE_temp.selectExpr( 
	"SQ_Shortcut_to_WM_PRODUCT_CLASS_PRE___sys_row_id as sys_row_id", 
	"cast(SQ_Shortcut_to_WM_PRODUCT_CLASS_PRE___DC_NBR as int) as DC_NBR_EXP", 
	"SQ_Shortcut_to_WM_PRODUCT_CLASS_PRE___PRODUCT_CLASS_ID as PRODUCT_CLASS_ID", 
	"SQ_Shortcut_to_WM_PRODUCT_CLASS_PRE___TC_COMPANY_ID as TC_COMPANY_ID", 
	"SQ_Shortcut_to_WM_PRODUCT_CLASS_PRE___PRODUCT_CLASS as PRODUCT_CLASS", 
	"SQ_Shortcut_to_WM_PRODUCT_CLASS_PRE___DESCRIPTION as DESCRIPTION", 
	"SQ_Shortcut_to_WM_PRODUCT_CLASS_PRE___MARK_FOR_DELETION as MARK_FOR_DELETION", 
	"SQ_Shortcut_to_WM_PRODUCT_CLASS_PRE___HAS_SPLIT as HAS_SPLIT", 
	"SQ_Shortcut_to_WM_PRODUCT_CLASS_PRE___RANK as RANK", 
	"SQ_Shortcut_to_WM_PRODUCT_CLASS_PRE___MIN_THRESHOLD as MIN_THRESHOLD", 
	"SQ_Shortcut_to_WM_PRODUCT_CLASS_PRE___CREATED_DTTM as CREATED_DTTM", 
	"SQ_Shortcut_to_WM_PRODUCT_CLASS_PRE___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", 
	"SQ_Shortcut_to_WM_PRODUCT_CLASS_PRE___STACKING_FACTOR as STACKING_FACTOR" 
)

# COMMAND ----------
# Processing node SQ_Shortcut_to_WM_PRODUCT_CLASS, type SOURCE 
# COLUMN COUNT: 13

SQ_Shortcut_to_WM_PRODUCT_CLASS = spark.sql(f"""SELECT
LOCATION_ID,
WM_PRODUCT_CLASS_ID,
WM_PRODUCT_CLASS,
WM_TC_COMPANY_ID,
WM_PRODUCT_CLASS_DESC,
SPLIT_FLAG,
RANK,
MIN_THRESHOLD,
STACKING_FACTOR,
MARK_FOR_DELETION_FLAG,
WM_CREATED_TSTMP,
WM_LAST_UPDATED_TSTMP,
LOAD_TSTMP
FROM {refined_perf_table}
WHERE WM_PRODUCT_CLASS_ID IN (SELECT PRODUCT_CLASS_ID FROM {raw_perf_table})""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node SQ_Shortcut_to_SITE_PROFILE, type SOURCE 
# COLUMN COUNT: 2

SQ_Shortcut_to_SITE_PROFILE = spark.sql(f"""SELECT LOCATION_ID, STORE_NBR FROM {site_profile_table}""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node JNR_SITE_PROFILE, type JOINER 
# COLUMN COUNT: 14

JNR_SITE_PROFILE = EXPTRANS.join(SQ_Shortcut_to_SITE_PROFILE,[EXPTRANS.DC_NBR_EXP == SQ_Shortcut_to_SITE_PROFILE.STORE_NBR],'inner')

# COMMAND ----------
# Processing node JNR_WM_PRODUCT_CLASS, type JOINER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 25

# for each involved DataFrame, append the dataframe name to each column
JNR_SITE_PROFILE_temp = JNR_SITE_PROFILE.toDF(*["JNR_SITE_PROFILE___" + col for col in JNR_SITE_PROFILE.columns])
SQ_Shortcut_to_WM_PRODUCT_CLASS_temp = SQ_Shortcut_to_WM_PRODUCT_CLASS.toDF(*["SQ_Shortcut_to_WM_PRODUCT_CLASS___" + col for col in SQ_Shortcut_to_WM_PRODUCT_CLASS.columns])

JNR_WM_PRODUCT_CLASS = SQ_Shortcut_to_WM_PRODUCT_CLASS_temp.join(JNR_SITE_PROFILE_temp,[SQ_Shortcut_to_WM_PRODUCT_CLASS_temp.SQ_Shortcut_to_WM_PRODUCT_CLASS___LOCATION_ID == JNR_SITE_PROFILE_temp.JNR_SITE_PROFILE___LOCATION_ID, SQ_Shortcut_to_WM_PRODUCT_CLASS_temp.SQ_Shortcut_to_WM_PRODUCT_CLASS___WM_PRODUCT_CLASS_ID == JNR_SITE_PROFILE_temp.JNR_SITE_PROFILE___PRODUCT_CLASS_ID],'right_outer').selectExpr( 
	"JNR_SITE_PROFILE___LOCATION_ID as LOCATION_ID", 
	"JNR_SITE_PROFILE___PRODUCT_CLASS_ID as PRODUCT_CLASS_ID", 
	"JNR_SITE_PROFILE___TC_COMPANY_ID as TC_COMPANY_ID", 
	"JNR_SITE_PROFILE___PRODUCT_CLASS as PRODUCT_CLASS", 
	"JNR_SITE_PROFILE___DESCRIPTION as DESCRIPTION", 
	"JNR_SITE_PROFILE___MARK_FOR_DELETION as MARK_FOR_DELETION", 
	"JNR_SITE_PROFILE___HAS_SPLIT as HAS_SPLIT", 
	"JNR_SITE_PROFILE___RANK as RANK", 
	"JNR_SITE_PROFILE___MIN_THRESHOLD as MIN_THRESHOLD", 
	"JNR_SITE_PROFILE___CREATED_DTTM as CREATED_DTTM", 
	"JNR_SITE_PROFILE___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", 
	"JNR_SITE_PROFILE___STACKING_FACTOR as STACKING_FACTOR", 
	"SQ_Shortcut_to_WM_PRODUCT_CLASS___LOCATION_ID as in_LOCATION_ID", 
	"SQ_Shortcut_to_WM_PRODUCT_CLASS___WM_PRODUCT_CLASS_ID as WM_PRODUCT_CLASS_ID", 
	"SQ_Shortcut_to_WM_PRODUCT_CLASS___WM_PRODUCT_CLASS as WM_PRODUCT_CLASS", 
	"SQ_Shortcut_to_WM_PRODUCT_CLASS___WM_TC_COMPANY_ID as WM_TC_COMPANY_ID", 
	"SQ_Shortcut_to_WM_PRODUCT_CLASS___WM_PRODUCT_CLASS_DESC as WM_PRODUCT_CLASS_DESC", 
	"SQ_Shortcut_to_WM_PRODUCT_CLASS___SPLIT_FLAG as SPLIT_FLAG", 
	"SQ_Shortcut_to_WM_PRODUCT_CLASS___RANK as in_RANK", 
	"SQ_Shortcut_to_WM_PRODUCT_CLASS___MIN_THRESHOLD as in_MIN_THRESHOLD", 
	"SQ_Shortcut_to_WM_PRODUCT_CLASS___STACKING_FACTOR as in_STACKING_FACTOR", 
	"SQ_Shortcut_to_WM_PRODUCT_CLASS___MARK_FOR_DELETION_FLAG as MARK_FOR_DELETION_FLAG", 
	"SQ_Shortcut_to_WM_PRODUCT_CLASS___WM_CREATED_TSTMP as WM_CREATED_TSTMP", 
	"SQ_Shortcut_to_WM_PRODUCT_CLASS___WM_LAST_UPDATED_TSTMP as WM_LAST_UPDATED_TSTMP", 
	"SQ_Shortcut_to_WM_PRODUCT_CLASS___LOAD_TSTMP as in_LOAD_TSTMP")

# COMMAND ----------
# Processing node FIL_UNCHANGED_REC, type FILTER 
# COLUMN COUNT: 25

# for each involved DataFrame, append the dataframe name to each column
JNR_WM_PRODUCT_CLASS_temp = JNR_WM_PRODUCT_CLASS.toDF(*["JNR_WM_PRODUCT_CLASS___" + col for col in JNR_WM_PRODUCT_CLASS.columns])

FIL_UNCHANGED_REC = JNR_WM_PRODUCT_CLASS_temp.selectExpr( 
	"JNR_WM_PRODUCT_CLASS___LOCATION_ID as LOCATION_ID", 
	"JNR_WM_PRODUCT_CLASS___PRODUCT_CLASS_ID as PRODUCT_CLASS_ID", 
	"JNR_WM_PRODUCT_CLASS___TC_COMPANY_ID as TC_COMPANY_ID", 
	"JNR_WM_PRODUCT_CLASS___PRODUCT_CLASS as PRODUCT_CLASS", 
	"JNR_WM_PRODUCT_CLASS___DESCRIPTION as DESCRIPTION", 
	"JNR_WM_PRODUCT_CLASS___MARK_FOR_DELETION as MARK_FOR_DELETION", 
	"JNR_WM_PRODUCT_CLASS___HAS_SPLIT as HAS_SPLIT", 
	"JNR_WM_PRODUCT_CLASS___RANK as RANK", 
	"JNR_WM_PRODUCT_CLASS___MIN_THRESHOLD as MIN_THRESHOLD", 
	"JNR_WM_PRODUCT_CLASS___CREATED_DTTM as CREATED_DTTM", 
	"JNR_WM_PRODUCT_CLASS___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", 
	"JNR_WM_PRODUCT_CLASS___STACKING_FACTOR as STACKING_FACTOR", 
	"JNR_WM_PRODUCT_CLASS___in_LOCATION_ID as in_LOCATION_ID", 
	"JNR_WM_PRODUCT_CLASS___WM_PRODUCT_CLASS_ID as WM_PRODUCT_CLASS_ID", 
	"JNR_WM_PRODUCT_CLASS___WM_PRODUCT_CLASS as WM_PRODUCT_CLASS", 
	"JNR_WM_PRODUCT_CLASS___WM_TC_COMPANY_ID as WM_TC_COMPANY_ID", 
	"JNR_WM_PRODUCT_CLASS___WM_PRODUCT_CLASS_DESC as WM_PRODUCT_CLASS_DESC", 
	"JNR_WM_PRODUCT_CLASS___SPLIT_FLAG as SPLIT_FLAG", 
	"JNR_WM_PRODUCT_CLASS___in_RANK as in_RANK", 
	"JNR_WM_PRODUCT_CLASS___in_MIN_THRESHOLD as in_MIN_THRESHOLD", 
	"JNR_WM_PRODUCT_CLASS___in_STACKING_FACTOR as in_STACKING_FACTOR", 
	"JNR_WM_PRODUCT_CLASS___MARK_FOR_DELETION_FLAG as MARK_FOR_DELETION_FLAG", 
	"JNR_WM_PRODUCT_CLASS___WM_CREATED_TSTMP as WM_CREATED_TSTMP", 
	"JNR_WM_PRODUCT_CLASS___WM_LAST_UPDATED_TSTMP as WM_LAST_UPDATED_TSTMP", 
	"JNR_WM_PRODUCT_CLASS___in_LOAD_TSTMP as in_LOAD_TSTMP").filter(expr("WM_PRODUCT_CLASS_ID IS NULL OR (WM_PRODUCT_CLASS_ID IS NOT NULL AND (COALESCE(CREATED_DTTM, DATE '1900-01-01') != COALESCE(WM_CREATED_TSTMP, DATE '1900-01-01') OR COALESCE(LAST_UPDATED_DTTM, DATE '1900-01-01') != COALESCE(WM_LAST_UPDATED_TSTMP, DATE '1900-01-01')))")).withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node EXP_UPD_VALIDATOR, type EXPRESSION 
# COLUMN COUNT: 28

# for each involved DataFrame, append the dataframe name to each column
FIL_UNCHANGED_REC_temp = FIL_UNCHANGED_REC.toDF(*["FIL_UNCHANGED_REC___" + col for col in FIL_UNCHANGED_REC.columns])

EXP_UPD_VALIDATOR = FIL_UNCHANGED_REC_temp.selectExpr( 
	"FIL_UNCHANGED_REC___sys_row_id as sys_row_id", 
	"FIL_UNCHANGED_REC___LOCATION_ID as LOCATION_ID", 
	"FIL_UNCHANGED_REC___PRODUCT_CLASS_ID as PRODUCT_CLASS_ID", 
	"FIL_UNCHANGED_REC___TC_COMPANY_ID as TC_COMPANY_ID", 
	"FIL_UNCHANGED_REC___PRODUCT_CLASS as PRODUCT_CLASS", 
	"FIL_UNCHANGED_REC___DESCRIPTION as DESCRIPTION", 
	"FIL_UNCHANGED_REC___MARK_FOR_DELETION as MARK_FOR_DELETION", 
	"FIL_UNCHANGED_REC___HAS_SPLIT as HAS_SPLIT", 
	"FIL_UNCHANGED_REC___RANK as RANK", 
	"FIL_UNCHANGED_REC___MIN_THRESHOLD as MIN_THRESHOLD", 
	"FIL_UNCHANGED_REC___CREATED_DTTM as CREATED_DTTM", 
	"FIL_UNCHANGED_REC___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", 
	"FIL_UNCHANGED_REC___STACKING_FACTOR as STACKING_FACTOR", 
	"FIL_UNCHANGED_REC___in_LOCATION_ID as in_LOCATION_ID", 
	"FIL_UNCHANGED_REC___WM_PRODUCT_CLASS_ID as WM_PRODUCT_CLASS_ID", 
	"FIL_UNCHANGED_REC___WM_PRODUCT_CLASS as WM_PRODUCT_CLASS", 
	"FIL_UNCHANGED_REC___WM_TC_COMPANY_ID as WM_TC_COMPANY_ID", 
	"FIL_UNCHANGED_REC___WM_PRODUCT_CLASS_DESC as WM_PRODUCT_CLASS_DESC", 
	"FIL_UNCHANGED_REC___SPLIT_FLAG as SPLIT_FLAG", 
	"FIL_UNCHANGED_REC___in_RANK as in_RANK", 
	"FIL_UNCHANGED_REC___in_MIN_THRESHOLD as in_MIN_THRESHOLD", 
	"FIL_UNCHANGED_REC___in_STACKING_FACTOR as in_STACKING_FACTOR", 
	"FIL_UNCHANGED_REC___MARK_FOR_DELETION_FLAG as MARK_FOR_DELETION_FLAG", 
	"FIL_UNCHANGED_REC___WM_CREATED_TSTMP as WM_CREATED_TSTMP", 
	"FIL_UNCHANGED_REC___WM_LAST_UPDATED_TSTMP as WM_LAST_UPDATED_TSTMP", 
	"FIL_UNCHANGED_REC___in_LOAD_TSTMP as in_LOAD_TSTMP", 
	"CURRENT_TIMESTAMP as UPDATE_TSTMP", 
	"IF(FIL_UNCHANGED_REC___in_LOAD_TSTMP IS NULL, CURRENT_TIMESTAMP, FIL_UNCHANGED_REC___in_LOAD_TSTMP) as LOAD_TSTMP", 
	"IF(FIL_UNCHANGED_REC___WM_PRODUCT_CLASS_ID IS NULL, 1, 2) as o_UPD_VALIDATOR" 
)

# COMMAND ----------
# Processing node UPD_INS_UPD, type UPDATE_STRATEGY 
# COLUMN COUNT: 15

# for each involved DataFrame, append the dataframe name to each column
EXP_UPD_VALIDATOR_temp = EXP_UPD_VALIDATOR.toDF(*["EXP_UPD_VALIDATOR___" + col for col in EXP_UPD_VALIDATOR.columns])

UPD_INS_UPD = EXP_UPD_VALIDATOR_temp.selectExpr( 
	"EXP_UPD_VALIDATOR___LOCATION_ID as LOCATION_ID", 
	"EXP_UPD_VALIDATOR___PRODUCT_CLASS_ID as PRODUCT_CLASS_ID", 
	"EXP_UPD_VALIDATOR___PRODUCT_CLASS as PRODUCT_CLASS", 
	"EXP_UPD_VALIDATOR___TC_COMPANY_ID as TC_COMPANY_ID", 
	"EXP_UPD_VALIDATOR___DESCRIPTION as DESCRIPTION", 
	"EXP_UPD_VALIDATOR___HAS_SPLIT as HAS_SPLIT", 
	"EXP_UPD_VALIDATOR___RANK as RANK", 
	"EXP_UPD_VALIDATOR___MIN_THRESHOLD as MIN_THRESHOLD", 
	"EXP_UPD_VALIDATOR___STACKING_FACTOR as STACKING_FACTOR", 
	"EXP_UPD_VALIDATOR___MARK_FOR_DELETION as MARK_FOR_DELETION", 
	"EXP_UPD_VALIDATOR___CREATED_DTTM as CREATED_DTTM", 
	"EXP_UPD_VALIDATOR___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", 
	"EXP_UPD_VALIDATOR___UPDATE_TSTMP as UPDATE_TSTMP", 
	"EXP_UPD_VALIDATOR___LOAD_TSTMP as LOAD_TSTMP", 
	"EXP_UPD_VALIDATOR___o_UPD_VALIDATOR as o_UPD_VALIDATOR"
).withColumn('pyspark_data_action', when(EXP_UPD_VALIDATOR.o_UPD_VALIDATOR ==(lit(1)),lit(0)).when(EXP_UPD_VALIDATOR.o_UPD_VALIDATOR == (lit(2)),lit(1)))

# COMMAND ----------
# Processing node Shortcut_to_WM_PRODUCT_CLASS, type TARGET 
# COLUMN COUNT: 14


Shortcut_to_WM_PRODUCT_CLASS = UPD_INS_UPD.selectExpr( 
	"CAST(LOCATION_ID AS BIGINT) as LOCATION_ID", 
	"CAST(PRODUCT_CLASS_ID AS BIGINT) as WM_PRODUCT_CLASS_ID", 
	"CAST(PRODUCT_CLASS AS STRING) as WM_PRODUCT_CLASS", 
	"CAST(TC_COMPANY_ID AS BIGINT) as WM_TC_COMPANY_ID", 
	"CAST(DESCRIPTION AS STRING) as WM_PRODUCT_CLASS_DESC", 
	"CAST(HAS_SPLIT AS BIGINT) as SPLIT_FLAG", 
	"CAST(RANK AS BIGINT) as RANK", 
	"CAST(MIN_THRESHOLD AS BIGINT) as MIN_THRESHOLD", 
	"CAST(STACKING_FACTOR AS BIGINT) as STACKING_FACTOR", 
	"CAST(MARK_FOR_DELETION AS BIGINT) as MARK_FOR_DELETION_FLAG", 
	"CAST(CREATED_DTTM AS TIMESTAMP) as WM_CREATED_TSTMP", 
	"CAST(LAST_UPDATED_DTTM AS TIMESTAMP) as WM_LAST_UPDATED_TSTMP", 
	"CAST(UPDATE_TSTMP AS TIMESTAMP) as UPDATE_TSTMP", 
	"CAST(LOAD_TSTMP AS TIMESTAMP) as LOAD_TSTMP" , 
    "pyspark_data_action"
)

try:
  primary_key = """source.LOCATION_ID = target.LOCATION_ID AND source.WM_PRODUCT_CLASS_ID = target.WM_PRODUCT_CLASS_ID"""
  # refined_perf_table = "WM_PRODUCT_CLASS"
  executeMerge(Shortcut_to_WM_PRODUCT_CLASS, refined_perf_table, primary_key)
  logger.info(f"Merge with {refined_perf_table} completed]")
  logPrevRunDt("WM_PRODUCT_CLASS", "WM_PRODUCT_CLASS", "Completed", "N/A", f"{raw}.log_run_details")
except Exception as e:
  logPrevRunDt("WM_PRODUCT_CLASS", "WM_PRODUCT_CLASS","Failed",str(e), f"{raw}.log_run_details", )
  raise e
	