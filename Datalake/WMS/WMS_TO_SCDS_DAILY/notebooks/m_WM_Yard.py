#Code converted on 2023-06-22 21:04:46
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from pyspark.dbutils import DBUtils
from Datalake.utils.genericUtilities import *
from Datalake.utils.configs import *
from Datalake.utils.mergeUtils import *
from Datalake.utils.logger import *
# COMMAND ----------

parser = argparse.ArgumentParser()
spark = SparkSession.getActiveSession()
dbutils = DBUtils(spark)

parser.add_argument('env', type=str, help='Env Variable')
args = parser.parse_args()
env = args.env
# env = 'dev'

if env is None or env == '':
    raise ValueError('env is not set')

refine = getEnvPrefix(env) + 'refine'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'

# Set global variables
starttime = datetime.now() #start timestamp of the script
refined_perf_table = f"{refine}.WM_YARD"
raw_perf_table = f"{raw}.WM_YARD_PRE"
site_profile_table = f"{legacy}.SITE_PROFILE"


# COMMAND ----------
# Processing node SQ_Shortcut_to_WM_YARD_PRE, type SOURCE 
# COLUMN COUNT: 32

SQ_Shortcut_to_WM_YARD_PRE = spark.sql(f"""SELECT
DC_NBR,
YARD_ID,
TC_COMPANY_ID,
YARD_NAME,
CREATED_SOURCE_TYPE,
CREATED_SOURCE,
CREATED_DTTM,
LAST_UPDATED_SOURCE_TYPE,
LAST_UPDATED_SOURCE,
LAST_UPDATED_DTTM,
DO_GENERATE_MOVE_TASK,
DO_GENERATE_NEXT_EQUIP,
IS_RANGE_TASKS,
IS_SEAL_TASK_TRGD,
DO_OVERRIDE_SYSTEM_TASKS,
IS_TASKING_ALLOWED,
ADDRESS,
CITY,
STATE_PROV,
POSTAL_CODE,
COUNTY,
COUNTRY_CODE,
TIME_ZONE_ID,
MAX_EQUIPMENT_ALLOWED,
UPPER_CHECKIN_TIME_MINS,
LOWER_CHECKIN_TIME_MINS,
FIXED_TIME_MINS,
MARK_FOR_DELETION,
LOCK_TRAILER_ON_MOVE_TO_DOOR,
YARD_SVG_FILE,
LOCATION_ID,
THRESHOLD_PERCENT
FROM {raw_perf_table}""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node SQ_Shortcut_to_WM_YARD, type SOURCE 
# COLUMN COUNT: 5

SQ_Shortcut_to_WM_YARD = spark.sql(f"""SELECT
LOCATION_ID,
WM_YARD_ID,
WM_CREATED_TSTMP,
WM_LAST_UPDATED_TSTMP,
LOAD_TSTMP
FROM {refined_perf_table}
WHERE WM_YARD_ID IN (SELECT YARD_ID FROM {raw_perf_table})""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node EXP_INT_CONVERSION, type EXPRESSION 
# COLUMN COUNT: 32

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_WM_YARD_PRE_temp = SQ_Shortcut_to_WM_YARD_PRE.toDF(*["SQ_Shortcut_to_WM_YARD_PRE___" + col for col in SQ_Shortcut_to_WM_YARD_PRE.columns])

EXP_INT_CONVERSION = SQ_Shortcut_to_WM_YARD_PRE_temp.selectExpr( 
	"SQ_Shortcut_to_WM_YARD_PRE___sys_row_id as sys_row_id", 
	"cast(SQ_Shortcut_to_WM_YARD_PRE___DC_NBR as int) as o_DC_NBR", 
	"SQ_Shortcut_to_WM_YARD_PRE___YARD_ID as YARD_ID", 
	"SQ_Shortcut_to_WM_YARD_PRE___TC_COMPANY_ID as TC_COMPANY_ID", 
	"SQ_Shortcut_to_WM_YARD_PRE___YARD_NAME as YARD_NAME", 
	"SQ_Shortcut_to_WM_YARD_PRE___CREATED_SOURCE_TYPE as CREATED_SOURCE_TYPE", 
	"SQ_Shortcut_to_WM_YARD_PRE___CREATED_SOURCE as CREATED_SOURCE", 
	"SQ_Shortcut_to_WM_YARD_PRE___CREATED_DTTM as CREATED_DTTM", 
	"SQ_Shortcut_to_WM_YARD_PRE___LAST_UPDATED_SOURCE_TYPE as LAST_UPDATED_SOURCE_TYPE", 
	"SQ_Shortcut_to_WM_YARD_PRE___LAST_UPDATED_SOURCE as LAST_UPDATED_SOURCE", 
	"SQ_Shortcut_to_WM_YARD_PRE___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", 
	"SQ_Shortcut_to_WM_YARD_PRE___DO_GENERATE_MOVE_TASK as DO_GENERATE_MOVE_TASK", 
	"SQ_Shortcut_to_WM_YARD_PRE___DO_GENERATE_NEXT_EQUIP as DO_GENERATE_NEXT_EQUIP", 
	"SQ_Shortcut_to_WM_YARD_PRE___IS_RANGE_TASKS as IS_RANGE_TASKS", 
	"SQ_Shortcut_to_WM_YARD_PRE___IS_SEAL_TASK_TRGD as IS_SEAL_TASK_TRGD", 
	"SQ_Shortcut_to_WM_YARD_PRE___DO_OVERRIDE_SYSTEM_TASKS as DO_OVERRIDE_SYSTEM_TASKS", 
	"SQ_Shortcut_to_WM_YARD_PRE___IS_TASKING_ALLOWED as IS_TASKING_ALLOWED", 
	"SQ_Shortcut_to_WM_YARD_PRE___ADDRESS as ADDRESS", 
	"SQ_Shortcut_to_WM_YARD_PRE___CITY as CITY", 
	"SQ_Shortcut_to_WM_YARD_PRE___STATE_PROV as STATE_PROV", 
	"SQ_Shortcut_to_WM_YARD_PRE___POSTAL_CODE as POSTAL_CODE", 
	"SQ_Shortcut_to_WM_YARD_PRE___COUNTY as COUNTY", 
	"SQ_Shortcut_to_WM_YARD_PRE___COUNTRY_CODE as COUNTRY_CODE", 
	"SQ_Shortcut_to_WM_YARD_PRE___TIME_ZONE_ID as TIME_ZONE_ID", 
	"SQ_Shortcut_to_WM_YARD_PRE___MAX_EQUIPMENT_ALLOWED as MAX_EQUIPMENT_ALLOWED", 
	"SQ_Shortcut_to_WM_YARD_PRE___UPPER_CHECKIN_TIME_MINS as UPPER_CHECKIN_TIME_MINS", 
	"SQ_Shortcut_to_WM_YARD_PRE___LOWER_CHECKIN_TIME_MINS as LOWER_CHECKIN_TIME_MINS", 
	"SQ_Shortcut_to_WM_YARD_PRE___FIXED_TIME_MINS as FIXED_TIME_MINS", 
	"SQ_Shortcut_to_WM_YARD_PRE___MARK_FOR_DELETION as MARK_FOR_DELETION", 
	"SQ_Shortcut_to_WM_YARD_PRE___LOCK_TRAILER_ON_MOVE_TO_DOOR as LOCK_TRAILER_ON_MOVE_TO_DOOR", 
	"SQ_Shortcut_to_WM_YARD_PRE___YARD_SVG_FILE as YARD_SVG_FILE", 
	"SQ_Shortcut_to_WM_YARD_PRE___LOCATION_ID as LOCATION_ID", 
	"SQ_Shortcut_to_WM_YARD_PRE___THRESHOLD_PERCENT as THRESHOLD_PERCENT" 
)

# COMMAND ----------
# Processing node SQ_Shortcut_to_SITE_PROFILE, type SOURCE 
# COLUMN COUNT: 2

SQ_Shortcut_to_SITE_PROFILE = spark.sql(f"""SELECT LOCATION_ID, STORE_NBR FROM {site_profile_table}""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node JNR_SITE_PROFILE, type JOINER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 34

# for each involved DataFrame, append the dataframe name to each column
EXP_INT_CONVERSION_temp = EXP_INT_CONVERSION.toDF(*["EXP_INT_CONVERSION___" + col for col in EXP_INT_CONVERSION.columns])
SQ_Shortcut_to_SITE_PROFILE_temp = SQ_Shortcut_to_SITE_PROFILE.toDF(*["SQ_Shortcut_to_SITE_PROFILE___" + col for col in SQ_Shortcut_to_SITE_PROFILE.columns])

JNR_SITE_PROFILE = SQ_Shortcut_to_SITE_PROFILE_temp.join(EXP_INT_CONVERSION_temp,[SQ_Shortcut_to_SITE_PROFILE_temp.SQ_Shortcut_to_SITE_PROFILE___STORE_NBR == EXP_INT_CONVERSION_temp.EXP_INT_CONVERSION___o_DC_NBR],'inner').selectExpr( 
	"EXP_INT_CONVERSION___o_DC_NBR as o_DC_NBR", 
	"EXP_INT_CONVERSION___YARD_ID as YARD_ID", 
	"EXP_INT_CONVERSION___TC_COMPANY_ID as TC_COMPANY_ID", 
	"EXP_INT_CONVERSION___YARD_NAME as YARD_NAME", 
	"EXP_INT_CONVERSION___CREATED_SOURCE_TYPE as CREATED_SOURCE_TYPE", 
	"EXP_INT_CONVERSION___CREATED_SOURCE as CREATED_SOURCE", 
	"EXP_INT_CONVERSION___CREATED_DTTM as CREATED_DTTM", 
	"EXP_INT_CONVERSION___LAST_UPDATED_SOURCE_TYPE as LAST_UPDATED_SOURCE_TYPE", 
	"EXP_INT_CONVERSION___LAST_UPDATED_SOURCE as LAST_UPDATED_SOURCE", 
	"EXP_INT_CONVERSION___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", 
	"EXP_INT_CONVERSION___DO_GENERATE_MOVE_TASK as DO_GENERATE_MOVE_TASK", 
	"EXP_INT_CONVERSION___DO_GENERATE_NEXT_EQUIP as DO_GENERATE_NEXT_EQUIP", 
	"EXP_INT_CONVERSION___IS_RANGE_TASKS as IS_RANGE_TASKS", 
	"EXP_INT_CONVERSION___IS_SEAL_TASK_TRGD as IS_SEAL_TASK_TRGD", 
	"EXP_INT_CONVERSION___DO_OVERRIDE_SYSTEM_TASKS as DO_OVERRIDE_SYSTEM_TASKS", 
	"EXP_INT_CONVERSION___IS_TASKING_ALLOWED as IS_TASKING_ALLOWED", 
	"EXP_INT_CONVERSION___ADDRESS as ADDRESS", 
	"EXP_INT_CONVERSION___CITY as CITY", 
	"EXP_INT_CONVERSION___STATE_PROV as STATE_PROV", 
	"EXP_INT_CONVERSION___POSTAL_CODE as POSTAL_CODE", 
	"EXP_INT_CONVERSION___COUNTY as COUNTY", 
	"EXP_INT_CONVERSION___COUNTRY_CODE as COUNTRY_CODE", 
	"EXP_INT_CONVERSION___TIME_ZONE_ID as TIME_ZONE_ID", 
	"EXP_INT_CONVERSION___MAX_EQUIPMENT_ALLOWED as MAX_EQUIPMENT_ALLOWED", 
	"EXP_INT_CONVERSION___UPPER_CHECKIN_TIME_MINS as UPPER_CHECKIN_TIME_MINS", 
	"EXP_INT_CONVERSION___LOWER_CHECKIN_TIME_MINS as LOWER_CHECKIN_TIME_MINS", 
	"EXP_INT_CONVERSION___FIXED_TIME_MINS as FIXED_TIME_MINS", 
	"EXP_INT_CONVERSION___MARK_FOR_DELETION as MARK_FOR_DELETION", 
	"EXP_INT_CONVERSION___LOCK_TRAILER_ON_MOVE_TO_DOOR as LOCK_TRAILER_ON_MOVE_TO_DOOR", 
	"EXP_INT_CONVERSION___YARD_SVG_FILE as YARD_SVG_FILE", 
	"EXP_INT_CONVERSION___LOCATION_ID as LOCATION_ID", 
	"EXP_INT_CONVERSION___THRESHOLD_PERCENT as THRESHOLD_PERCENT", 
	"SQ_Shortcut_to_SITE_PROFILE___LOCATION_ID as LOCATION_ID1", 
	"SQ_Shortcut_to_SITE_PROFILE___STORE_NBR as STORE_NBR")

# COMMAND ----------
# Processing node JNR_WM_YARD, type JOINER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 37

# for each involved DataFrame, append the dataframe name to each column
JNR_SITE_PROFILE_temp = JNR_SITE_PROFILE.toDF(*["JNR_SITE_PROFILE___" + col for col in JNR_SITE_PROFILE.columns])
SQ_Shortcut_to_WM_YARD_temp = SQ_Shortcut_to_WM_YARD.toDF(*["SQ_Shortcut_to_WM_YARD___" + col for col in SQ_Shortcut_to_WM_YARD.columns])

JNR_WM_YARD = SQ_Shortcut_to_WM_YARD_temp.join(JNR_SITE_PROFILE_temp,[SQ_Shortcut_to_WM_YARD_temp.SQ_Shortcut_to_WM_YARD___LOCATION_ID == JNR_SITE_PROFILE_temp.JNR_SITE_PROFILE___LOCATION_ID1, SQ_Shortcut_to_WM_YARD_temp.SQ_Shortcut_to_WM_YARD___WM_YARD_ID == JNR_SITE_PROFILE_temp.JNR_SITE_PROFILE___YARD_ID],'right_outer').selectExpr( 
	"JNR_SITE_PROFILE___LOCATION_ID1 as LOCATION_ID1", 
	"JNR_SITE_PROFILE___YARD_ID as YARD_ID", 
	"JNR_SITE_PROFILE___TC_COMPANY_ID as TC_COMPANY_ID", 
	"JNR_SITE_PROFILE___YARD_NAME as YARD_NAME", 
	"JNR_SITE_PROFILE___CREATED_SOURCE_TYPE as CREATED_SOURCE_TYPE", 
	"JNR_SITE_PROFILE___CREATED_SOURCE as CREATED_SOURCE", 
	"JNR_SITE_PROFILE___CREATED_DTTM as CREATED_DTTM", 
	"JNR_SITE_PROFILE___LAST_UPDATED_SOURCE_TYPE as LAST_UPDATED_SOURCE_TYPE", 
	"JNR_SITE_PROFILE___LAST_UPDATED_SOURCE as LAST_UPDATED_SOURCE", 
	"JNR_SITE_PROFILE___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", 
	"JNR_SITE_PROFILE___DO_GENERATE_MOVE_TASK as DO_GENERATE_MOVE_TASK", 
	"JNR_SITE_PROFILE___DO_GENERATE_NEXT_EQUIP as DO_GENERATE_NEXT_EQUIP", 
	"JNR_SITE_PROFILE___IS_RANGE_TASKS as IS_RANGE_TASKS", 
	"JNR_SITE_PROFILE___IS_SEAL_TASK_TRGD as IS_SEAL_TASK_TRGD", 
	"JNR_SITE_PROFILE___DO_OVERRIDE_SYSTEM_TASKS as DO_OVERRIDE_SYSTEM_TASKS", 
	"JNR_SITE_PROFILE___IS_TASKING_ALLOWED as IS_TASKING_ALLOWED", 
	"JNR_SITE_PROFILE___ADDRESS as ADDRESS", 
	"JNR_SITE_PROFILE___CITY as CITY", 
	"JNR_SITE_PROFILE___STATE_PROV as STATE_PROV", 
	"JNR_SITE_PROFILE___POSTAL_CODE as POSTAL_CODE", 
	"JNR_SITE_PROFILE___COUNTY as COUNTY", 
	"JNR_SITE_PROFILE___COUNTRY_CODE as COUNTRY_CODE", 
	"JNR_SITE_PROFILE___TIME_ZONE_ID as TIME_ZONE_ID", 
	"JNR_SITE_PROFILE___MAX_EQUIPMENT_ALLOWED as MAX_EQUIPMENT_ALLOWED", 
	"JNR_SITE_PROFILE___UPPER_CHECKIN_TIME_MINS as UPPER_CHECKIN_TIME_MINS", 
	"JNR_SITE_PROFILE___LOWER_CHECKIN_TIME_MINS as LOWER_CHECKIN_TIME_MINS", 
	"JNR_SITE_PROFILE___FIXED_TIME_MINS as FIXED_TIME_MINS", 
	"JNR_SITE_PROFILE___MARK_FOR_DELETION as MARK_FOR_DELETION", 
	"JNR_SITE_PROFILE___LOCK_TRAILER_ON_MOVE_TO_DOOR as LOCK_TRAILER_ON_MOVE_TO_DOOR", 
	"JNR_SITE_PROFILE___YARD_SVG_FILE as YARD_SVG_FILE", 
	"JNR_SITE_PROFILE___LOCATION_ID as LOCATION_ID", 
	"JNR_SITE_PROFILE___THRESHOLD_PERCENT as THRESHOLD_PERCENT", 
	"SQ_Shortcut_to_WM_YARD___LOCATION_ID as i_LOCATION_ID", 
	"SQ_Shortcut_to_WM_YARD___WM_YARD_ID as i_WM_YARD_ID", 
	"SQ_Shortcut_to_WM_YARD___WM_CREATED_TSTMP as i_WM_CREATED_TSTMP", 
	"SQ_Shortcut_to_WM_YARD___WM_LAST_UPDATED_TSTMP as i_WM_LAST_UPDATED_TSTMP", 
	"SQ_Shortcut_to_WM_YARD___LOAD_TSTMP as i_LOAD_TSTMP")

# COMMAND ----------
# Processing node FIL_UNCHANGED_RECORDS, type FILTER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 36

# for each involved DataFrame, append the dataframe name to each column
JNR_WM_YARD_temp = JNR_WM_YARD.toDF(*["JNR_WM_YARD___" + col for col in JNR_WM_YARD.columns])

FIL_UNCHANGED_RECORDS = JNR_WM_YARD_temp.selectExpr( 
	"JNR_WM_YARD___LOCATION_ID1 as LOCATION_ID1", 
	"JNR_WM_YARD___YARD_ID as YARD_ID", 
	"JNR_WM_YARD___TC_COMPANY_ID as TC_COMPANY_ID", 
	"JNR_WM_YARD___YARD_NAME as YARD_NAME", 
	"JNR_WM_YARD___CREATED_SOURCE_TYPE as CREATED_SOURCE_TYPE", 
	"JNR_WM_YARD___CREATED_SOURCE as CREATED_SOURCE", 
	"JNR_WM_YARD___CREATED_DTTM as CREATED_DTTM", 
	"JNR_WM_YARD___LAST_UPDATED_SOURCE_TYPE as LAST_UPDATED_SOURCE_TYPE", 
	"JNR_WM_YARD___LAST_UPDATED_SOURCE as LAST_UPDATED_SOURCE", 
	"JNR_WM_YARD___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", 
	"JNR_WM_YARD___DO_GENERATE_MOVE_TASK as DO_GENERATE_MOVE_TASK", 
	"JNR_WM_YARD___DO_GENERATE_NEXT_EQUIP as DO_GENERATE_NEXT_EQUIP", 
	"JNR_WM_YARD___IS_RANGE_TASKS as IS_RANGE_TASKS", 
	"JNR_WM_YARD___IS_SEAL_TASK_TRGD as IS_SEAL_TASK_TRGD", 
	"JNR_WM_YARD___DO_OVERRIDE_SYSTEM_TASKS as DO_OVERRIDE_SYSTEM_TASKS", 
	"JNR_WM_YARD___IS_TASKING_ALLOWED as IS_TASKING_ALLOWED", 
	"JNR_WM_YARD___ADDRESS as ADDRESS1", 
	"JNR_WM_YARD___CITY as CITY1", 
	"JNR_WM_YARD___STATE_PROV as STATE_PROV1", 
	"JNR_WM_YARD___POSTAL_CODE as POSTAL_CODE", 
	"JNR_WM_YARD___COUNTY as COUNTY1", 
	"JNR_WM_YARD___COUNTRY_CODE as COUNTRY_CODE", 
	"JNR_WM_YARD___TIME_ZONE_ID as TIME_ZONE_ID", 
	"JNR_WM_YARD___MAX_EQUIPMENT_ALLOWED as MAX_EQUIPMENT_ALLOWED1", 
	"JNR_WM_YARD___UPPER_CHECKIN_TIME_MINS as UPPER_CHECKIN_TIME_MINS", 
	"JNR_WM_YARD___LOWER_CHECKIN_TIME_MINS as LOWER_CHECKIN_TIME_MINS", 
	"JNR_WM_YARD___FIXED_TIME_MINS as FIXED_TIME_MINS1", 
	"JNR_WM_YARD___MARK_FOR_DELETION as MARK_FOR_DELETION1", 
	"JNR_WM_YARD___LOCK_TRAILER_ON_MOVE_TO_DOOR as LOCK_TRAILER_ON_MOVE_TO_DOOR", 
	"JNR_WM_YARD___YARD_SVG_FILE as YARD_SVG_FILE1", 
	"JNR_WM_YARD___LOCATION_ID as LOCATION_ID2", 
	"JNR_WM_YARD___THRESHOLD_PERCENT as THRESHOLD_PERCENT1", 
	"JNR_WM_YARD___i_WM_YARD_ID as i_WM_YARD_ID", 
	"JNR_WM_YARD___i_WM_CREATED_TSTMP as i_WM_CREATED_TSTMP", 
	"JNR_WM_YARD___i_WM_LAST_UPDATED_TSTMP as i_WM_LAST_UPDATED_TSTMP", 
	"JNR_WM_YARD___i_LOAD_TSTMP as i_LOAD_TSTMP").filter(expr("i_WM_YARD_ID IS NULL OR (NOT i_WM_YARD_ID IS NULL AND (COALESCE(CREATED_DTTM, date'1900-01-01') != COALESCE(i_WM_CREATED_TSTMP, date'1900-01-01')) OR (COALESCE(LAST_UPDATED_DTTM, date'1900-01-01') != COALESCE(i_WM_LAST_UPDATED_TSTMP, date'1900-01-01')))")).withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node EXP_UPD_VALIDATOR, type EXPRESSION 
# COLUMN COUNT: 35

# for each involved DataFrame, append the dataframe name to each column
FIL_UNCHANGED_RECORDS_temp = FIL_UNCHANGED_RECORDS.toDF(*["FIL_UNCHANGED_RECORDS___" + col for col in FIL_UNCHANGED_RECORDS.columns])

EXP_UPD_VALIDATOR = FIL_UNCHANGED_RECORDS_temp.selectExpr( 
	"FIL_UNCHANGED_RECORDS___sys_row_id as sys_row_id", 
	"FIL_UNCHANGED_RECORDS___LOCATION_ID1 as LOCATION_ID1", 
	"FIL_UNCHANGED_RECORDS___YARD_ID as YARD_ID", 
	"FIL_UNCHANGED_RECORDS___TC_COMPANY_ID as TC_COMPANY_ID", 
	"FIL_UNCHANGED_RECORDS___YARD_NAME as YARD_NAME", 
	"FIL_UNCHANGED_RECORDS___CREATED_SOURCE_TYPE as CREATED_SOURCE_TYPE", 
	"FIL_UNCHANGED_RECORDS___CREATED_SOURCE as CREATED_SOURCE", 
	"FIL_UNCHANGED_RECORDS___CREATED_DTTM as CREATED_DTTM", 
	"FIL_UNCHANGED_RECORDS___LAST_UPDATED_SOURCE_TYPE as LAST_UPDATED_SOURCE_TYPE", 
	"FIL_UNCHANGED_RECORDS___LAST_UPDATED_SOURCE as LAST_UPDATED_SOURCE", 
	"FIL_UNCHANGED_RECORDS___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", 
	"FIL_UNCHANGED_RECORDS___DO_GENERATE_MOVE_TASK as DO_GENERATE_MOVE_TASK", 
	"FIL_UNCHANGED_RECORDS___DO_GENERATE_NEXT_EQUIP as DO_GENERATE_NEXT_EQUIP", 
	"FIL_UNCHANGED_RECORDS___IS_RANGE_TASKS as IS_RANGE_TASKS", 
	"FIL_UNCHANGED_RECORDS___IS_SEAL_TASK_TRGD as IS_SEAL_TASK_TRGD", 
	"FIL_UNCHANGED_RECORDS___DO_OVERRIDE_SYSTEM_TASKS as DO_OVERRIDE_SYSTEM_TASKS", 
	"FIL_UNCHANGED_RECORDS___IS_TASKING_ALLOWED as IS_TASKING_ALLOWED", 
	"FIL_UNCHANGED_RECORDS___ADDRESS1 as ADDRESS1", 
	"FIL_UNCHANGED_RECORDS___CITY1 as CITY1", 
	"FIL_UNCHANGED_RECORDS___STATE_PROV1 as STATE_PROV1", 
	"FIL_UNCHANGED_RECORDS___POSTAL_CODE as POSTAL_CODE", 
	"FIL_UNCHANGED_RECORDS___COUNTY1 as COUNTY1", 
	"FIL_UNCHANGED_RECORDS___COUNTRY_CODE as COUNTRY_CODE", 
	"FIL_UNCHANGED_RECORDS___TIME_ZONE_ID as TIME_ZONE_ID", 
	"FIL_UNCHANGED_RECORDS___MAX_EQUIPMENT_ALLOWED1 as MAX_EQUIPMENT_ALLOWED1", 
	"FIL_UNCHANGED_RECORDS___UPPER_CHECKIN_TIME_MINS as UPPER_CHECKIN_TIME_MINS", 
	"FIL_UNCHANGED_RECORDS___LOWER_CHECKIN_TIME_MINS as LOWER_CHECKIN_TIME_MINS", 
	"FIL_UNCHANGED_RECORDS___FIXED_TIME_MINS1 as FIXED_TIME_MINS1", 
	"FIL_UNCHANGED_RECORDS___MARK_FOR_DELETION1 as MARK_FOR_DELETION1", 
	"FIL_UNCHANGED_RECORDS___LOCK_TRAILER_ON_MOVE_TO_DOOR as LOCK_TRAILER_ON_MOVE_TO_DOOR", 
	"FIL_UNCHANGED_RECORDS___YARD_SVG_FILE1 as YARD_SVG_FILE1", 
	"FIL_UNCHANGED_RECORDS___LOCATION_ID2 as LOCATION_ID2", 
	"FIL_UNCHANGED_RECORDS___THRESHOLD_PERCENT1 as THRESHOLD_PERCENT1", 
	"CURRENT_TIMESTAMP as UPDATE_TSTMP", 
	"IF(FIL_UNCHANGED_RECORDS___i_LOAD_TSTMP IS NULL, CURRENT_TIMESTAMP, FIL_UNCHANGED_RECORDS___i_LOAD_TSTMP) as LOAD_TSTMP", 
	"IF(FIL_UNCHANGED_RECORDS___i_WM_YARD_ID IS NULL, 1, 2) as o_UPDATE_VALIDATOR" 
)

# COMMAND ----------
# Processing node UPD_INS_UPD, type UPDATE_STRATEGY 
# COLUMN COUNT: 35

# for each involved DataFrame, append the dataframe name to each column
EXP_UPD_VALIDATOR_temp = EXP_UPD_VALIDATOR.toDF(*["EXP_UPD_VALIDATOR___" + col for col in EXP_UPD_VALIDATOR.columns])

UPD_INS_UPD = EXP_UPD_VALIDATOR_temp.selectExpr( 
	"EXP_UPD_VALIDATOR___LOCATION_ID1 as LOCATION_ID1", 
	"EXP_UPD_VALIDATOR___YARD_ID as YARD_ID", 
	"EXP_UPD_VALIDATOR___TC_COMPANY_ID as TC_COMPANY_ID", 
	"EXP_UPD_VALIDATOR___YARD_NAME as YARD_NAME", 
	"EXP_UPD_VALIDATOR___CREATED_SOURCE_TYPE as CREATED_SOURCE_TYPE", 
	"EXP_UPD_VALIDATOR___CREATED_SOURCE as CREATED_SOURCE", 
	"EXP_UPD_VALIDATOR___CREATED_DTTM as CREATED_DTTM", 
	"EXP_UPD_VALIDATOR___LAST_UPDATED_SOURCE_TYPE as LAST_UPDATED_SOURCE_TYPE", 
	"EXP_UPD_VALIDATOR___LAST_UPDATED_SOURCE as LAST_UPDATED_SOURCE", 
	"EXP_UPD_VALIDATOR___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", 
	"EXP_UPD_VALIDATOR___DO_GENERATE_MOVE_TASK as DO_GENERATE_MOVE_TASK", 
	"EXP_UPD_VALIDATOR___DO_GENERATE_NEXT_EQUIP as DO_GENERATE_NEXT_EQUIP", 
	"EXP_UPD_VALIDATOR___IS_RANGE_TASKS as IS_RANGE_TASKS", 
	"EXP_UPD_VALIDATOR___IS_SEAL_TASK_TRGD as IS_SEAL_TASK_TRGD", 
	"EXP_UPD_VALIDATOR___DO_OVERRIDE_SYSTEM_TASKS as DO_OVERRIDE_SYSTEM_TASKS", 
	"EXP_UPD_VALIDATOR___IS_TASKING_ALLOWED as IS_TASKING_ALLOWED", 
	"EXP_UPD_VALIDATOR___ADDRESS1 as ADDRESS1", 
	"EXP_UPD_VALIDATOR___CITY1 as CITY1", 
	"EXP_UPD_VALIDATOR___STATE_PROV1 as STATE_PROV1", 
	"EXP_UPD_VALIDATOR___POSTAL_CODE as POSTAL_CODE", 
	"EXP_UPD_VALIDATOR___COUNTY1 as COUNTY1", 
	"EXP_UPD_VALIDATOR___COUNTRY_CODE as COUNTRY_CODE", 
	"EXP_UPD_VALIDATOR___TIME_ZONE_ID as TIME_ZONE_ID", 
	"EXP_UPD_VALIDATOR___MAX_EQUIPMENT_ALLOWED1 as MAX_EQUIPMENT_ALLOWED1", 
	"EXP_UPD_VALIDATOR___UPPER_CHECKIN_TIME_MINS as UPPER_CHECKIN_TIME_MINS", 
	"EXP_UPD_VALIDATOR___LOWER_CHECKIN_TIME_MINS as LOWER_CHECKIN_TIME_MINS", 
	"EXP_UPD_VALIDATOR___FIXED_TIME_MINS1 as FIXED_TIME_MINS1", 
	"EXP_UPD_VALIDATOR___MARK_FOR_DELETION1 as MARK_FOR_DELETION1", 
	"EXP_UPD_VALIDATOR___LOCK_TRAILER_ON_MOVE_TO_DOOR as LOCK_TRAILER_ON_MOVE_TO_DOOR", 
	"EXP_UPD_VALIDATOR___YARD_SVG_FILE1 as YARD_SVG_FILE1", 
	"EXP_UPD_VALIDATOR___LOCATION_ID2 as LOCATION_ID2", 
	"EXP_UPD_VALIDATOR___THRESHOLD_PERCENT1 as THRESHOLD_PERCENT1", 
	"EXP_UPD_VALIDATOR___UPDATE_TSTMP as UPDATE_TSTMP", 
	"EXP_UPD_VALIDATOR___LOAD_TSTMP as LOAD_TSTMP", 
	"EXP_UPD_VALIDATOR___o_UPDATE_VALIDATOR as o_UPDATE_VALIDATOR"
).withColumn('pyspark_data_action', when(col('o_UPDATE_VALIDATOR') ==(lit(1)),lit(0)).when(col('o_UPDATE_VALIDATOR') ==(lit(2)),lit(1)))

# COMMAND ----------
# Processing node Shortcut_to_WM_YARD, type TARGET 
# COLUMN COUNT: 34


Shortcut_to_WM_YARD = UPD_INS_UPD.selectExpr(
	"CAST(LOCATION_ID1 AS BIGINT) as LOCATION_ID",
	"CAST(YARD_ID AS BIGINT) as WM_YARD_ID",
	"CAST(TC_COMPANY_ID AS INT) as WM_TC_COMPANY_ID",
	"CAST(YARD_NAME AS STRING) as WM_YARD_NAME",
	"CAST(LOCATION_ID2 AS BIGINT) as WM_LOCATION_ID",
	"CAST(TIME_ZONE_ID AS SMALLINT) as WM_TIME_ZONE_ID",
	"CAST(DO_GENERATE_MOVE_TASK AS TINYINT) as GENERATE_MOVE_TASK_FLAG",
	"CAST(DO_GENERATE_NEXT_EQUIP AS TINYINT) as GENERATE_NEXT_EQUIP_FLAG",
	"CAST(IS_RANGE_TASKS AS TINYINT) as RANGE_TASKS_FLAG",
	"CAST(IS_SEAL_TASK_TRGD AS TINYINT) as SEAL_TASK_TRGD_FLAG",
	"CAST(DO_OVERRIDE_SYSTEM_TASKS AS TINYINT) as OVERRIDE_SYSTEM_TASKS_FLAG",
	"CAST(IS_TASKING_ALLOWED AS TINYINT) as TASKING_ALLOWED_FLAG",
	"CAST(LOCK_TRAILER_ON_MOVE_TO_DOOR AS TINYINT) as LOCK_TRAILER_ON_MOVE_TO_DOOR_FLAG",
	"CAST(YARD_SVG_FILE1 AS STRING) as YARD_SVG_FILE",
	"CAST(ADDRESS1 AS STRING) as ADDRESS",
	"CAST(CITY1 AS STRING) as CITY",
	"CAST(STATE_PROV1 AS STRING) as STATE_PROV",
	"CAST(POSTAL_CODE AS STRING) as POSTAL_CD",
	"CAST(COUNTY1 AS STRING) as COUNTY",
	"CAST(COUNTRY_CODE AS STRING) as COUNTRY_CD",
	"CAST(MAX_EQUIPMENT_ALLOWED1 AS INT) as MAX_EQUIPMENT_ALLOWED",
	"CAST(UPPER_CHECKIN_TIME_MINS AS SMALLINT) as UPPER_CHECK_IN_TIME_MINS",
	"CAST(LOWER_CHECKIN_TIME_MINS AS SMALLINT) as LOWER_CHECK_IN_TIME_MINS",
	"CAST(FIXED_TIME_MINS1 AS SMALLINT) as FIXED_TIME_MINS",
	"CAST(THRESHOLD_PERCENT1 AS INT) as THRESHOLD_PERCENT",
	"CAST(MARK_FOR_DELETION1 AS TINYINT) as MARK_FOR_DELETION",
	"CAST(CREATED_SOURCE_TYPE AS TINYINT) as WM_CREATED_SOURCE_TYPE",
	"CAST(CREATED_SOURCE AS STRING) as WM_CREATED_SOURCE",
	"CAST(CREATED_DTTM AS TIMESTAMP) as WM_CREATED_TSTMP",
	"CAST(LAST_UPDATED_SOURCE_TYPE AS TINYINT) as WM_LAST_UPDATED_SOURCE_TYPE",
	"CAST(LAST_UPDATED_SOURCE AS STRING) as WM_LAST_UPDATED_SOURCE",
	"CAST(LAST_UPDATED_DTTM AS TIMESTAMP) as WM_LAST_UPDATED_TSTMP",
	"CAST(UPDATE_TSTMP AS TIMESTAMP) as UPDATE_TSTMP",
	"CAST(LOAD_TSTMP AS TIMESTAMP) as LOAD_TSTMP" , 
    "pyspark_data_action"
)

try:
  primary_key = """source.LOCATION_ID = target.LOCATION_ID AND source.WM_YARD_ID = target.WM_YARD_ID"""
  # refined_perf_table = "WM_YARD"
  executeMerge(Shortcut_to_WM_YARD, refined_perf_table, primary_key)
  logger.info(f"Merge with {refined_perf_table} completed]")
  logPrevRunDt("WM_YARD", "WM_YARD", "Completed", "N/A", f"{raw}.log_run_details")
except Exception as e:
  logPrevRunDt("WM_YARD", "WM_YARD","Failed",str(e), f"{raw}.log_run_details", )
  raise e
