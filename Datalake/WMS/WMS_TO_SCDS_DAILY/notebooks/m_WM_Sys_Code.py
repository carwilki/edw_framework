#Code converted on 2023-06-22 21:01:49
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from pyspark.dbutils import DBUtils
from Datalake.utils.genericUtilities import *
from Datalake.utils.configs import *
from Datalake.utils.mergeUtils import *
from Datalake.utils.logger import *
# COMMAND ----------

parser = argparse.ArgumentParser()
spark = SparkSession.getActiveSession()
dbutils = DBUtils(spark)

parser.add_argument('env', type=str, help='Env Variable')
args = parser.parse_args()
env = args.env
# env = 'dev'

if env is None or env == '':
    raise ValueError('env is not set')

refine = getEnvPrefix(env) + 'refine'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'

# Set global variables
starttime = datetime.now() #start timestamp of the script
refined_perf_table = f"{refine}.WM_SYS_CODE"
raw_perf_table = f"{raw}.WM_SYS_CODE_PRE"
site_profile_table = f"{legacy}.SITE_PROFILE"


Prev_Run_Dt=genPrevRunDt(refined_perf_table.split(".")[1], refine,raw)
Del_Logic= ' -- ' # args.Del_Logic

# COMMAND ----------
# Processing node SQ_Shortcut_to_WM_SYS_CODE1, type SOURCE 
# COLUMN COUNT: 17

SQ_Shortcut_to_WM_SYS_CODE1 = spark.sql(f"""SELECT
LOCATION_ID,
WM_REC_TYPE,
WM_CD_TYPE,
WM_CD_ID,
WM_SYS_CD_TYPE_ID,
WM_SYS_CD_ID,
WM_CD_DESC,
WM_CD_SHORT_DESC,
WM_MISC_FLAGS,
WM_USER_ID,
WM_VERSION_ID,
WM_CREATED_TSTMP,
WM_LAST_UPDATED_TSTMP,
WM_CREATE_TSTMP,
WM_MOD_TSTMP,
DELETE_FLAG,
LOAD_TSTMP
FROM {refined_perf_table}
WHERE {Del_Logic} 1=0 and 
DELETE_FLAG =0""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node SQ_Shortcut_to_WM_SYS_CODE_PRE, type SOURCE 
# COLUMN COUNT: 15

SQ_Shortcut_to_WM_SYS_CODE_PRE = spark.sql(f"""SELECT
DC_NBR,
REC_TYPE,
CODE_TYPE,
CODE_ID,
CODE_DESC,
SHORT_DESC,
MISC_FLAGS,
CREATE_DATE_TIME,
MOD_DATE_TIME,
USER_ID,
WM_VERSION_ID,
SYS_CODE_ID,
SYS_CODE_TYPE_ID,
CREATED_DTTM,
LAST_UPDATED_DTTM
FROM {raw_perf_table}""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node EXP_INT_CONVERSION, type EXPRESSION 
# COLUMN COUNT: 15

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_WM_SYS_CODE_PRE_temp = SQ_Shortcut_to_WM_SYS_CODE_PRE.toDF(*["SQ_Shortcut_to_WM_SYS_CODE_PRE___" + col for col in SQ_Shortcut_to_WM_SYS_CODE_PRE.columns])

EXP_INT_CONVERSION = SQ_Shortcut_to_WM_SYS_CODE_PRE_temp.selectExpr( 
	"SQ_Shortcut_to_WM_SYS_CODE_PRE___sys_row_id as sys_row_id", 
	"cast(SQ_Shortcut_to_WM_SYS_CODE_PRE___DC_NBR as int) as o_DC_NBR", 
	"SQ_Shortcut_to_WM_SYS_CODE_PRE___REC_TYPE as REC_TYPE", 
	"SQ_Shortcut_to_WM_SYS_CODE_PRE___CODE_TYPE as CODE_TYPE", 
	"SQ_Shortcut_to_WM_SYS_CODE_PRE___CODE_ID as CODE_ID", 
	"SQ_Shortcut_to_WM_SYS_CODE_PRE___CODE_DESC as CODE_DESC", 
	"SQ_Shortcut_to_WM_SYS_CODE_PRE___SHORT_DESC as SHORT_DESC", 
	"SQ_Shortcut_to_WM_SYS_CODE_PRE___MISC_FLAGS as MISC_FLAGS", 
	"SQ_Shortcut_to_WM_SYS_CODE_PRE___CREATE_DATE_TIME as CREATE_DATE_TIME", 
	"SQ_Shortcut_to_WM_SYS_CODE_PRE___MOD_DATE_TIME as MOD_DATE_TIME", 
	"SQ_Shortcut_to_WM_SYS_CODE_PRE___USER_ID as USER_ID", 
	"SQ_Shortcut_to_WM_SYS_CODE_PRE___WM_VERSION_ID as WM_VERSION_ID", 
	"SQ_Shortcut_to_WM_SYS_CODE_PRE___SYS_CODE_ID as SYS_CODE_ID", 
	"SQ_Shortcut_to_WM_SYS_CODE_PRE___SYS_CODE_TYPE_ID as SYS_CODE_TYPE_ID", 
	"SQ_Shortcut_to_WM_SYS_CODE_PRE___CREATED_DTTM as CREATED_DTTM", 
	"SQ_Shortcut_to_WM_SYS_CODE_PRE___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM" 
)

# COMMAND ----------
# Processing node SQ_Shortcut_to_SITE_PROFILE, type SOURCE 
# COLUMN COUNT: 2

SQ_Shortcut_to_SITE_PROFILE = spark.sql(f"""SELECT LOCATION_ID, STORE_NBR FROM {site_profile_table}""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node JNR_SITE_PROFILE, type JOINER 
# COLUMN COUNT: 17

JNR_SITE_PROFILE = SQ_Shortcut_to_SITE_PROFILE.join(EXP_INT_CONVERSION,[SQ_Shortcut_to_SITE_PROFILE.STORE_NBR == EXP_INT_CONVERSION.o_DC_NBR],'inner')

# COMMAND ----------
# Processing node JNR_WM_SYS_CODE, type JOINER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 32

# for each involved DataFrame, append the dataframe name to each column
JNR_SITE_PROFILE_temp = JNR_SITE_PROFILE.toDF(*["JNR_SITE_PROFILE___" + col for col in JNR_SITE_PROFILE.columns])
SQ_Shortcut_to_WM_SYS_CODE1_temp = SQ_Shortcut_to_WM_SYS_CODE1.toDF(*["SQ_Shortcut_to_WM_SYS_CODE1___" + col for col in SQ_Shortcut_to_WM_SYS_CODE1.columns])

JNR_WM_SYS_CODE = SQ_Shortcut_to_WM_SYS_CODE1_temp.join(JNR_SITE_PROFILE_temp,[SQ_Shortcut_to_WM_SYS_CODE1_temp.SQ_Shortcut_to_WM_SYS_CODE1___LOCATION_ID == JNR_SITE_PROFILE_temp.JNR_SITE_PROFILE___LOCATION_ID, SQ_Shortcut_to_WM_SYS_CODE1_temp.SQ_Shortcut_to_WM_SYS_CODE1___WM_REC_TYPE == JNR_SITE_PROFILE_temp.JNR_SITE_PROFILE___REC_TYPE, SQ_Shortcut_to_WM_SYS_CODE1_temp.SQ_Shortcut_to_WM_SYS_CODE1___WM_CD_TYPE == JNR_SITE_PROFILE_temp.JNR_SITE_PROFILE___CODE_TYPE, SQ_Shortcut_to_WM_SYS_CODE1_temp.SQ_Shortcut_to_WM_SYS_CODE1___WM_CD_ID == JNR_SITE_PROFILE_temp.JNR_SITE_PROFILE___CODE_ID],'fullouter').selectExpr( 
	"JNR_SITE_PROFILE___LOCATION_ID as LOCATION_ID", 
	"JNR_SITE_PROFILE___REC_TYPE as REC_TYPE", 
	"JNR_SITE_PROFILE___CODE_TYPE as CODE_TYPE", 
	"JNR_SITE_PROFILE___CODE_ID as CODE_ID", 
	"JNR_SITE_PROFILE___CODE_DESC as CODE_DESC", 
	"JNR_SITE_PROFILE___SHORT_DESC as SHORT_DESC", 
	"JNR_SITE_PROFILE___MISC_FLAGS as MISC_FLAGS", 
	"JNR_SITE_PROFILE___CREATE_DATE_TIME as CREATE_DATE_TIME", 
	"JNR_SITE_PROFILE___MOD_DATE_TIME as MOD_DATE_TIME", 
	"JNR_SITE_PROFILE___USER_ID as USER_ID", 
	"JNR_SITE_PROFILE___WM_VERSION_ID as WM_VERSION_ID", 
	"JNR_SITE_PROFILE___SYS_CODE_ID as SYS_CODE_ID", 
	"JNR_SITE_PROFILE___SYS_CODE_TYPE_ID as SYS_CODE_TYPE_ID", 
	"JNR_SITE_PROFILE___CREATED_DTTM as CREATED_DTTM", 
	"JNR_SITE_PROFILE___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", 
	"SQ_Shortcut_to_WM_SYS_CODE1___LOCATION_ID as i_LOCATION_ID", 
	"SQ_Shortcut_to_WM_SYS_CODE1___WM_REC_TYPE as i_WM_REC_TYPE", 
	"SQ_Shortcut_to_WM_SYS_CODE1___WM_CD_TYPE as i_WM_CD_TYPE", 
	"SQ_Shortcut_to_WM_SYS_CODE1___WM_CD_ID as i_WM_CD_ID", 
	"SQ_Shortcut_to_WM_SYS_CODE1___WM_CREATED_TSTMP as i_WM_CREATED_TSTMP", 
	"SQ_Shortcut_to_WM_SYS_CODE1___WM_LAST_UPDATED_TSTMP as i_WM_LAST_UPDATED_TSTMP", 
	"SQ_Shortcut_to_WM_SYS_CODE1___WM_CREATE_TSTMP as i_WM_CREATE_TSTMP", 
	"SQ_Shortcut_to_WM_SYS_CODE1___WM_MOD_TSTMP as i_WM_MOD_TSTMP", 
	"SQ_Shortcut_to_WM_SYS_CODE1___LOAD_TSTMP as i_LOAD_TSTMP", 
	"SQ_Shortcut_to_WM_SYS_CODE1___WM_SYS_CD_TYPE_ID as WM_SYS_CD_TYPE_ID", 
	"SQ_Shortcut_to_WM_SYS_CODE1___WM_SYS_CD_ID as WM_SYS_CD_ID", 
	"SQ_Shortcut_to_WM_SYS_CODE1___WM_CD_DESC as WM_CD_DESC", 
	"SQ_Shortcut_to_WM_SYS_CODE1___WM_CD_SHORT_DESC as WM_CD_SHORT_DESC", 
	"SQ_Shortcut_to_WM_SYS_CODE1___WM_MISC_FLAGS as WM_MISC_FLAGS", 
	"SQ_Shortcut_to_WM_SYS_CODE1___WM_USER_ID as WM_USER_ID", 
	"SQ_Shortcut_to_WM_SYS_CODE1___WM_VERSION_ID as WM_VERSION_ID1", 
	"SQ_Shortcut_to_WM_SYS_CODE1___DELETE_FLAG as i_WM_DELETE_FLAG")

# COMMAND ----------
# Processing node FIL_UNCHANGED_RECORDS, type FILTER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 32

# for each involved DataFrame, append the dataframe name to each column
JNR_WM_SYS_CODE_temp = JNR_WM_SYS_CODE.toDF(*["JNR_WM_SYS_CODE___" + col for col in JNR_WM_SYS_CODE.columns])

FIL_UNCHANGED_RECORDS = JNR_WM_SYS_CODE_temp.selectExpr( 
	"JNR_WM_SYS_CODE___LOCATION_ID as LOCATION_ID1", 
	"JNR_WM_SYS_CODE___REC_TYPE as REC_TYPE", 
	"JNR_WM_SYS_CODE___CODE_TYPE as CODE_TYPE", 
	"JNR_WM_SYS_CODE___CODE_ID as CODE_ID", 
	"JNR_WM_SYS_CODE___CODE_DESC as CODE_DESC", 
	"JNR_WM_SYS_CODE___SHORT_DESC as SHORT_DESC", 
	"JNR_WM_SYS_CODE___MISC_FLAGS as MISC_FLAGS", 
	"JNR_WM_SYS_CODE___CREATE_DATE_TIME as CREATE_DATE_TIME", 
	"JNR_WM_SYS_CODE___MOD_DATE_TIME as MOD_DATE_TIME", 
	"JNR_WM_SYS_CODE___USER_ID as USER_ID", 
	"JNR_WM_SYS_CODE___WM_VERSION_ID as WM_VERSION_ID1", 
	"JNR_WM_SYS_CODE___SYS_CODE_ID as SYS_CODE_ID", 
	"JNR_WM_SYS_CODE___SYS_CODE_TYPE_ID as SYS_CODE_TYPE_ID", 
	"JNR_WM_SYS_CODE___CREATED_DTTM as CREATED_DTTM", 
	"JNR_WM_SYS_CODE___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", 
	"JNR_WM_SYS_CODE___i_WM_REC_TYPE as i_WM_REC_TYPE", 
	"JNR_WM_SYS_CODE___i_WM_CD_TYPE as i_WM_CD_TYPE", 
	"JNR_WM_SYS_CODE___i_WM_CD_ID as i_WM_CD_ID", 
	"JNR_WM_SYS_CODE___i_WM_CREATED_TSTMP as i_WM_CREATED_TSTMP", 
	"JNR_WM_SYS_CODE___i_WM_LAST_UPDATED_TSTMP as i_WM_LAST_UPDATED_TSTMP", 
	"JNR_WM_SYS_CODE___i_WM_CREATE_TSTMP as i_WM_CREATE_TSTMP", 
	"JNR_WM_SYS_CODE___i_WM_MOD_TSTMP as i_WM_MOD_TSTMP", 
	"JNR_WM_SYS_CODE___i_LOAD_TSTMP as i_LOAD_TSTMP", 
	"JNR_WM_SYS_CODE___WM_SYS_CD_TYPE_ID as WM_SYS_CD_TYPE_ID", 
	"JNR_WM_SYS_CODE___WM_SYS_CD_ID as WM_SYS_CD_ID", 
	"JNR_WM_SYS_CODE___WM_CD_DESC as WM_CD_DESC", 
	"JNR_WM_SYS_CODE___WM_CD_SHORT_DESC as WM_CD_SHORT_DESC", 
	"JNR_WM_SYS_CODE___WM_MISC_FLAGS as WM_MISC_FLAGS", 
	"JNR_WM_SYS_CODE___WM_USER_ID as WM_USER_ID", 
	"JNR_WM_SYS_CODE___WM_VERSION_ID1 as WM_VERSION_ID11", 
	"JNR_WM_SYS_CODE___i_WM_DELETE_FLAG as i_WM_DELETE_FLAG", 
	"JNR_WM_SYS_CODE___i_LOCATION_ID as i_LOCATION_ID")\
	.filter("REC_TYPE IS NULL OR i_WM_REC_TYPE IS NULL OR (NOT i_WM_REC_TYPE IS NULL AND (COALESCE(CREATE_DATE_TIME, date'1900-01-01') != COALESCE(i_WM_CREATED_TSTMP, date'1900-01-01')) OR \
	(COALESCE(MOD_DATE_TIME, date'1900-01-01') != COALESCE(i_WM_MOD_TSTMP, date'1900-01-01')) OR (COALESCE(CREATED_DTTM, date'1900-01-01') != COALESCE(i_WM_CREATED_TSTMP, date'1900-01-01')) OR \
	(COALESCE(LAST_UPDATED_DTTM, date'1900-01-01') != COALESCE(i_WM_LAST_UPDATED_TSTMP, date'1900-01-01')))").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node EXP_UPD_VALIDATOR, type EXPRESSION 
# COLUMN COUNT: 36

# for each involved DataFrame, append the dataframe name to each column
FIL_UNCHANGED_RECORDS_temp = FIL_UNCHANGED_RECORDS.toDF(*["FIL_UNCHANGED_RECORDS___" + col for col in FIL_UNCHANGED_RECORDS.columns]) \
    .withColumn("FIL_UNCHANGED_RECORDS___v_CREATE_DATE_TIME", expr("""IF(FIL_UNCHANGED_RECORDS___CREATE_DATE_TIME IS NULL, date'1900-01-01', FIL_UNCHANGED_RECORDS___CREATE_DATE_TIME)""")) \
	.withColumn("FIL_UNCHANGED_RECORDS___v_MOD_DATE_TIME", expr("""IF(FIL_UNCHANGED_RECORDS___MOD_DATE_TIME IS NULL, date'1900-01-01', FIL_UNCHANGED_RECORDS___MOD_DATE_TIME)""")) \
	.withColumn("FIL_UNCHANGED_RECORDS___v_CREATED_DTTM", expr("""IF(FIL_UNCHANGED_RECORDS___CREATED_DTTM IS NULL, date'1900-01-01', FIL_UNCHANGED_RECORDS___CREATED_DTTM)""")) \
	.withColumn("FIL_UNCHANGED_RECORDS___v_LAST_UPDATED_DTTM", expr("""IF(FIL_UNCHANGED_RECORDS___LAST_UPDATED_DTTM IS NULL, date'1900-01-01', FIL_UNCHANGED_RECORDS___LAST_UPDATED_DTTM)""")) \
	.withColumn("FIL_UNCHANGED_RECORDS___v_i_WM_CREATED_TSTMP", expr("""IF(FIL_UNCHANGED_RECORDS___i_WM_CREATED_TSTMP IS NULL, date'1900-01-01', FIL_UNCHANGED_RECORDS___i_WM_CREATED_TSTMP)""")) \
	.withColumn("FIL_UNCHANGED_RECORDS___v_i_WM_LAST_UPDATED_TSTMP", expr("""IF(FIL_UNCHANGED_RECORDS___i_WM_LAST_UPDATED_TSTMP IS NULL, date'1900-01-01', FIL_UNCHANGED_RECORDS___i_WM_LAST_UPDATED_TSTMP)""")) \
	.withColumn("FIL_UNCHANGED_RECORDS___v_i_WM_CREATE_TSTMP", expr("""IF(FIL_UNCHANGED_RECORDS___i_WM_CREATE_TSTMP IS NULL, date'1900-01-01', FIL_UNCHANGED_RECORDS___i_WM_CREATE_TSTMP)""")) \
	.withColumn("FIL_UNCHANGED_RECORDS___v_i_WM_MOD_TSTMP", expr("""IF(FIL_UNCHANGED_RECORDS___i_WM_MOD_TSTMP IS NULL, date'1900-01-01', FIL_UNCHANGED_RECORDS___i_WM_MOD_TSTMP)"""))
    
EXP_UPD_VALIDATOR = FIL_UNCHANGED_RECORDS_temp.selectExpr( 
	"FIL_UNCHANGED_RECORDS___sys_row_id as sys_row_id", 
	"FIL_UNCHANGED_RECORDS___LOCATION_ID1 as LOCATION_ID1", 
	"FIL_UNCHANGED_RECORDS___REC_TYPE as REC_TYPE", 
	"FIL_UNCHANGED_RECORDS___CODE_TYPE as CODE_TYPE", 
	"FIL_UNCHANGED_RECORDS___CODE_ID as CODE_ID", 
	"FIL_UNCHANGED_RECORDS___CODE_DESC as CODE_DESC", 
	"FIL_UNCHANGED_RECORDS___SHORT_DESC as SHORT_DESC", 
	"FIL_UNCHANGED_RECORDS___MISC_FLAGS as MISC_FLAGS", 
	"FIL_UNCHANGED_RECORDS___CREATE_DATE_TIME as CREATE_DATE_TIME", 
	"FIL_UNCHANGED_RECORDS___MOD_DATE_TIME as MOD_DATE_TIME", 
	"FIL_UNCHANGED_RECORDS___USER_ID as USER_ID", 
	"FIL_UNCHANGED_RECORDS___WM_VERSION_ID1 as WM_VERSION_ID1", 
	"FIL_UNCHANGED_RECORDS___SYS_CODE_ID as SYS_CODE_ID", 
	"FIL_UNCHANGED_RECORDS___SYS_CODE_TYPE_ID as SYS_CODE_TYPE_ID", 
	"FIL_UNCHANGED_RECORDS___CREATED_DTTM as CREATED_DTTM", 
	"FIL_UNCHANGED_RECORDS___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", 
	"FIL_UNCHANGED_RECORDS___i_WM_REC_TYPE as i_WM_REC_TYPE", 
	"FIL_UNCHANGED_RECORDS___i_WM_CD_TYPE as i_WM_CD_TYPE", 
	"FIL_UNCHANGED_RECORDS___i_WM_CD_ID as i_WM_CD_ID", 
	"FIL_UNCHANGED_RECORDS___i_LOAD_TSTMP as i_LOAD_TSTMP", 
	"FIL_UNCHANGED_RECORDS___i_WM_CREATED_TSTMP as i_WM_CREATED_TSTMP", 
	"FIL_UNCHANGED_RECORDS___i_WM_LAST_UPDATED_TSTMP as i_WM_LAST_UPDATED_TSTMP", 
	"FIL_UNCHANGED_RECORDS___i_WM_CREATE_TSTMP as i_WM_CREATE_TSTMP", 
	"FIL_UNCHANGED_RECORDS___i_WM_MOD_TSTMP as i_WM_MOD_TSTMP", 
	"FIL_UNCHANGED_RECORDS___WM_SYS_CD_TYPE_ID as WM_SYS_CD_TYPE_ID", 
	"FIL_UNCHANGED_RECORDS___WM_SYS_CD_ID as WM_SYS_CD_ID", 
	"FIL_UNCHANGED_RECORDS___WM_CD_DESC as WM_CD_DESC", 
	"FIL_UNCHANGED_RECORDS___WM_CD_SHORT_DESC as WM_CD_SHORT_DESC", 
	"FIL_UNCHANGED_RECORDS___WM_MISC_FLAGS as WM_MISC_FLAGS", 
	"FIL_UNCHANGED_RECORDS___WM_USER_ID as WM_USER_ID", 
	"FIL_UNCHANGED_RECORDS___WM_VERSION_ID11 as WM_VERSION_ID11", 
	"FIL_UNCHANGED_RECORDS___i_WM_DELETE_FLAG as i_WM_DELETE_FLAG", 
	"FIL_UNCHANGED_RECORDS___i_LOCATION_ID as i_LOCATION_ID", 
	"IF(FIL_UNCHANGED_RECORDS___REC_TYPE IS NULL AND FIL_UNCHANGED_RECORDS___i_WM_REC_TYPE IS NOT NULL OR ( FIL_UNCHANGED_RECORDS___CODE_TYPE IS NULL AND FIL_UNCHANGED_RECORDS___i_WM_CD_TYPE IS NOT NULL ) OR ( FIL_UNCHANGED_RECORDS___CODE_ID IS NULL AND FIL_UNCHANGED_RECORDS___i_WM_CD_ID IS NOT NULL ), 1, 0) as DELETE_FLAG_EXP", 
	"IF(FIL_UNCHANGED_RECORDS___i_LOAD_TSTMP IS NULL, CURRENT_TIMESTAMP, FIL_UNCHANGED_RECORDS___i_LOAD_TSTMP) as LOAD_TSTMP", 
	"CURRENT_TIMESTAMP as UPDATE_TSTMP", 
	f"IF(FIL_UNCHANGED_RECORDS___REC_TYPE IS NOT NULL AND FIL_UNCHANGED_RECORDS___i_WM_REC_TYPE IS NULL, 'INSERT', IF(FIL_UNCHANGED_RECORDS___REC_TYPE IS NULL AND FIL_UNCHANGED_RECORDS___i_WM_REC_TYPE IS NOT NULL AND ( FIL_UNCHANGED_RECORDS___v_i_WM_CREATE_TSTMP >= DATE_ADD('{Prev_Run_Dt}',-14) OR FIL_UNCHANGED_RECORDS___v_i_WM_MOD_TSTMP >= DATE_ADD('{Prev_Run_Dt}',-14) OR FIL_UNCHANGED_RECORDS___v_i_WM_CREATED_TSTMP >= DATE_ADD('{Prev_Run_Dt}',-14) OR FIL_UNCHANGED_RECORDS___v_i_WM_LAST_UPDATED_TSTMP >= DATE_ADD('{Prev_Run_Dt}',-14) ), 'DELETE', IF(FIL_UNCHANGED_RECORDS___REC_TYPE IS NOT NULL AND FIL_UNCHANGED_RECORDS___i_WM_REC_TYPE IS NOT NULL AND ( FIL_UNCHANGED_RECORDS___v_i_WM_CREATE_TSTMP <> FIL_UNCHANGED_RECORDS___v_CREATE_DATE_TIME OR FIL_UNCHANGED_RECORDS___v_i_WM_MOD_TSTMP <> FIL_UNCHANGED_RECORDS___v_MOD_DATE_TIME OR FIL_UNCHANGED_RECORDS___v_i_WM_CREATED_TSTMP <> FIL_UNCHANGED_RECORDS___v_CREATED_DTTM OR FIL_UNCHANGED_RECORDS___v_i_WM_LAST_UPDATED_TSTMP <> FIL_UNCHANGED_RECORDS___v_LAST_UPDATED_DTTM ), 'UPDATE', NULL))) as o_UPDATE_VALIDATOR" 
)

# COMMAND ----------
# Processing node RTR_DELETE, type ROUTER 
# COLUMN COUNT: 36


# Creating output dataframe for RTR_DELETE, output group DELETE
# RTR_DELETE_DELETE = EXP_UPD_VALIDATOR.select(EXP_UPD_VALIDATOR.sys_row_id.alias('sys_row_id'), 
# 	EXP_UPD_VALIDATOR.LOCATION_ID1.alias('LOCATION_ID13'), 
# 	EXP_UPD_VALIDATOR.REC_TYPE.alias('REC_TYPE3'), 
# 	EXP_UPD_VALIDATOR.CODE_TYPE.alias('CODE_TYPE3'), 
# 	EXP_UPD_VALIDATOR.CODE_ID.alias('CODE_ID3'), 
# 	EXP_UPD_VALIDATOR.CODE_DESC.alias('CODE_DESC3'), 
# 	EXP_UPD_VALIDATOR.SHORT_DESC.alias('SHORT_DESC3'), 
# 	EXP_UPD_VALIDATOR.MISC_FLAGS.alias('MISC_FLAGS3'), 
# 	EXP_UPD_VALIDATOR.CREATE_DATE_TIME.alias('CREATE_DATE_TIME3'), 
# 	EXP_UPD_VALIDATOR.MOD_DATE_TIME.alias('MOD_DATE_TIME3'), 
# 	EXP_UPD_VALIDATOR.USER_ID.alias('USER_ID3'), 
# 	EXP_UPD_VALIDATOR.WM_VERSION_ID1.alias('WM_VERSION_ID14'), 
# 	EXP_UPD_VALIDATOR.SYS_CODE_ID.alias('SYS_CODE_ID3'), 
# 	EXP_UPD_VALIDATOR.SYS_CODE_TYPE_ID.alias('SYS_CODE_TYPE_ID3'), 
# 	EXP_UPD_VALIDATOR.CREATED_DTTM.alias('CREATED_DTTM3'), 
# 	EXP_UPD_VALIDATOR.LAST_UPDATED_DTTM.alias('LAST_UPDATED_DTTM3'), 
# 	EXP_UPD_VALIDATOR.i_WM_REC_TYPE.alias('i_WM_REC_TYPE3'), 
# 	EXP_UPD_VALIDATOR.i_WM_CD_TYPE.alias('i_WM_CD_TYPE3'), 
# 	EXP_UPD_VALIDATOR.i_WM_CD_ID.alias('i_WM_CD_ID3'), 
# 	EXP_UPD_VALIDATOR.i_LOAD_TSTMP.alias('i_LOAD_TSTMP3'), 
# 	EXP_UPD_VALIDATOR.UPDATE_TSTMP.alias('UPDATE_TSTMP3'), 
# 	EXP_UPD_VALIDATOR.LOAD_TSTMP.alias('LOAD_TSTMP3'), 
# 	EXP_UPD_VALIDATOR.o_UPDATE_VALIDATOR.alias('o_UPDATE_VALIDATOR3'), 
# 	EXP_UPD_VALIDATOR.i_WM_CREATED_TSTMP.alias('i_WM_CREATED_TSTMP3'), 
# 	EXP_UPD_VALIDATOR.i_WM_LAST_UPDATED_TSTMP.alias('i_WM_LAST_UPDATED_TSTMP3'), 
# 	EXP_UPD_VALIDATOR.i_WM_CREATE_TSTMP.alias('i_WM_CREATE_TSTMP3'), 
# 	EXP_UPD_VALIDATOR.i_WM_MOD_TSTMP.alias('i_WM_MOD_TSTMP3'), 
# 	EXP_UPD_VALIDATOR.WM_SYS_CD_TYPE_ID.alias('WM_SYS_CD_TYPE_ID3'), 
# 	EXP_UPD_VALIDATOR.WM_SYS_CD_ID.alias('WM_SYS_CD_ID3'), 
# 	EXP_UPD_VALIDATOR.WM_CD_DESC.alias('WM_CD_DESC3'), 
# 	EXP_UPD_VALIDATOR.WM_CD_SHORT_DESC.alias('WM_CD_SHORT_DESC3'), 
# 	EXP_UPD_VALIDATOR.WM_MISC_FLAGS.alias('WM_MISC_FLAGS3'), 
# 	EXP_UPD_VALIDATOR.WM_USER_ID.alias('WM_USER_ID3'), 
# 	EXP_UPD_VALIDATOR.WM_VERSION_ID11.alias('WM_VERSION_ID113'), 
# 	EXP_UPD_VALIDATOR.i_WM_DELETE_FLAG.alias('i_WM_DELETE_FLAG3'), 
# 	EXP_UPD_VALIDATOR.i_LOCATION_ID.alias('i_LOCATION_ID3'), 
# 	EXP_UPD_VALIDATOR.DELETE_FLAG_EXP.alias('DELETE_FLAG_EXP3')).filter("o_UPDATE_VALIDATOR = 'DELETE'")

# Creating output dataframe for RTR_DELETE, output group INSERT_UPDATE
RTR_DELETE_INSERT_UPDATE = EXP_UPD_VALIDATOR.select(EXP_UPD_VALIDATOR.sys_row_id.alias('sys_row_id'), 
	EXP_UPD_VALIDATOR.LOCATION_ID1.alias('LOCATION_ID11'), 
	EXP_UPD_VALIDATOR.REC_TYPE.alias('REC_TYPE1'), 
	EXP_UPD_VALIDATOR.CODE_TYPE.alias('CODE_TYPE1'), 
	EXP_UPD_VALIDATOR.CODE_ID.alias('CODE_ID1'), 
	EXP_UPD_VALIDATOR.CODE_DESC.alias('CODE_DESC1'), 
	EXP_UPD_VALIDATOR.SHORT_DESC.alias('SHORT_DESC1'), 
	EXP_UPD_VALIDATOR.MISC_FLAGS.alias('MISC_FLAGS1'), 
	EXP_UPD_VALIDATOR.CREATE_DATE_TIME.alias('CREATE_DATE_TIME1'), 
	EXP_UPD_VALIDATOR.MOD_DATE_TIME.alias('MOD_DATE_TIME1'), 
	EXP_UPD_VALIDATOR.USER_ID.alias('USER_ID1'), 
	EXP_UPD_VALIDATOR.WM_VERSION_ID1.alias('WM_VERSION_ID12'), 
	EXP_UPD_VALIDATOR.SYS_CODE_ID.alias('SYS_CODE_ID1'), 
	EXP_UPD_VALIDATOR.SYS_CODE_TYPE_ID.alias('SYS_CODE_TYPE_ID1'), 
	EXP_UPD_VALIDATOR.CREATED_DTTM.alias('CREATED_DTTM1'), 
	EXP_UPD_VALIDATOR.LAST_UPDATED_DTTM.alias('LAST_UPDATED_DTTM1'), 
	EXP_UPD_VALIDATOR.i_WM_REC_TYPE.alias('i_WM_REC_TYPE1'), 
	EXP_UPD_VALIDATOR.i_WM_CD_TYPE.alias('i_WM_CD_TYPE1'), 
	EXP_UPD_VALIDATOR.i_WM_CD_ID.alias('i_WM_CD_ID1'), 
	EXP_UPD_VALIDATOR.i_LOAD_TSTMP.alias('i_LOAD_TSTMP1'), 
	EXP_UPD_VALIDATOR.UPDATE_TSTMP.alias('UPDATE_TSTMP1'), 
	EXP_UPD_VALIDATOR.LOAD_TSTMP.alias('LOAD_TSTMP1'), 
	EXP_UPD_VALIDATOR.o_UPDATE_VALIDATOR.alias('o_UPDATE_VALIDATOR1'), 
	EXP_UPD_VALIDATOR.i_WM_CREATED_TSTMP.alias('i_WM_CREATED_TSTMP1'), 
	EXP_UPD_VALIDATOR.i_WM_LAST_UPDATED_TSTMP.alias('i_WM_LAST_UPDATED_TSTMP1'), 
	EXP_UPD_VALIDATOR.i_WM_CREATE_TSTMP.alias('i_WM_CREATE_TSTMP1'), 
	EXP_UPD_VALIDATOR.i_WM_MOD_TSTMP.alias('i_WM_MOD_TSTMP1'), 
	EXP_UPD_VALIDATOR.WM_SYS_CD_TYPE_ID.alias('WM_SYS_CD_TYPE_ID1'), 
	EXP_UPD_VALIDATOR.WM_SYS_CD_ID.alias('WM_SYS_CD_ID1'), 
	EXP_UPD_VALIDATOR.WM_CD_DESC.alias('WM_CD_DESC1'), 
	EXP_UPD_VALIDATOR.WM_CD_SHORT_DESC.alias('WM_CD_SHORT_DESC1'), 
	EXP_UPD_VALIDATOR.WM_MISC_FLAGS.alias('WM_MISC_FLAGS1'), 
	EXP_UPD_VALIDATOR.WM_USER_ID.alias('WM_USER_ID1'), 
	EXP_UPD_VALIDATOR.WM_VERSION_ID11.alias('WM_VERSION_ID111'), 
	EXP_UPD_VALIDATOR.i_WM_DELETE_FLAG.alias('i_WM_DELETE_FLAG1'), 
	EXP_UPD_VALIDATOR.i_LOCATION_ID.alias('i_LOCATION_ID1'), 
	EXP_UPD_VALIDATOR.DELETE_FLAG_EXP.alias('DELETE_FLAG_EXP1')).filter("o_UPDATE_VALIDATOR = 'INSERT' OR o_UPDATE_VALIDATOR = 'UPDATE'")


# COMMAND ----------
# Processing node UPD_DELETE, type UPDATE_STRATEGY 
# COLUMN COUNT: 18

# for each involved DataFrame, append the dataframe name to each column
# RTR_DELETE_DELETE_temp = RTR_DELETE_DELETE.toDF(*["RTR_DELETE_DELETE___" + col for col in RTR_DELETE_DELETE.columns])

# UPD_DELETE = RTR_DELETE_DELETE_temp.selectExpr( 
# 	"RTR_DELETE_DELETE___i_LOCATION_ID3 as i_LOCATION_ID3", 
# 	"RTR_DELETE_DELETE___i_WM_REC_TYPE3 as i_WM_REC_TYPE3", 
# 	"RTR_DELETE_DELETE___i_WM_CD_TYPE3 as i_WM_CD_TYPE3", 
# 	"RTR_DELETE_DELETE___i_WM_CD_ID3 as i_WM_CD_ID3", 
# 	"RTR_DELETE_DELETE___WM_SYS_CD_TYPE_ID3 as WM_SYS_CD_TYPE_ID3", 
# 	"RTR_DELETE_DELETE___WM_SYS_CD_ID3 as WM_SYS_CD_ID3", 
# 	"RTR_DELETE_DELETE___WM_CD_DESC3 as WM_CD_DESC3", 
# 	"RTR_DELETE_DELETE___WM_CD_SHORT_DESC3 as WM_CD_SHORT_DESC3", 
# 	"RTR_DELETE_DELETE___WM_MISC_FLAGS3 as WM_MISC_FLAGS3", 
# 	"RTR_DELETE_DELETE___WM_USER_ID3 as WM_USER_ID3", 
# 	"RTR_DELETE_DELETE___WM_VERSION_ID113 as WM_VERSION_ID113", 
# 	"RTR_DELETE_DELETE___i_WM_CREATED_TSTMP3 as i_WM_CREATED_TSTMP3", 
# 	"RTR_DELETE_DELETE___i_WM_LAST_UPDATED_TSTMP3 as i_WM_LAST_UPDATED_TSTMP3", 
# 	"RTR_DELETE_DELETE___i_WM_CREATE_TSTMP3 as i_WM_CREATE_TSTMP3", 
# 	"RTR_DELETE_DELETE___i_WM_MOD_TSTMP3 as i_WM_MOD_TSTMP3", 
# 	"RTR_DELETE_DELETE___DELETE_FLAG_EXP3 as DELETE_FLAG_EXP3", 
# 	"RTR_DELETE_DELETE___UPDATE_TSTMP3 as UPDATE_TSTMP3", 
# 	"RTR_DELETE_DELETE___LOAD_TSTMP3 as LOAD_TSTMP3"
# ).withColumn('pyspark_data_action', lit(1))

# COMMAND ----------
# Processing node Shortcut_to_WM_SYS_CODE1, type TARGET 
# COLUMN COUNT: 18


# Shortcut_to_WM_SYS_CODE1 = UPD_DELETE.selectExpr( 
# 	"CAST(i_LOCATION_ID3 AS BIGINT) as LOCATION_ID", 
# 	"CAST(i_WM_REC_TYPE3 AS STRING) as WM_REC_TYPE", 
# 	"CAST(i_WM_CD_TYPE3 AS STRING) as WM_CD_TYPE", 
# 	"CAST(i_WM_CD_ID3 AS STRING) as WM_CD_ID", 
# 	"CAST(NULL AS BIGINT) as WM_SYS_CD_TYPE_ID", 
# 	"CAST(NULL AS BIGINT) as WM_SYS_CD_ID", 
# 	"CAST(NULL AS STRING) as WM_CD_DESC", 
# 	"CAST(NULL AS STRING) as WM_CD_SHORT_DESC", 
# 	"CAST(NULL AS STRING) as WM_MISC_FLAGS", 
# 	"CAST(NULL AS STRING) as WM_USER_ID", 
# 	"CAST(NULL AS BIGINT) as WM_VERSION_ID", 
# 	"CAST(NULL AS TIMESTAMP) as WM_CREATED_TSTMP", 
# 	"CAST(NULL AS TIMESTAMP) as WM_LAST_UPDATED_TSTMP", 
# 	"CAST(NULL AS TIMESTAMP) as WM_CREATE_TSTMP", 
# 	"CAST(NULL AS TIMESTAMP) as WM_MOD_TSTMP", 
# 	"CAST(DELETE_FLAG_EXP3 AS BIGINT) as DELETE_FLAG", 
# 	"CAST(UPDATE_TSTMP3 AS TIMESTAMP) as UPDATE_TSTMP", 
# 	"CAST(NULL AS TIMESTAMP) as LOAD_TSTMP" 
# )
# Shortcut_to_WM_SYS_CODE1.write.saveAsTable(f'{raw}.WM_SYS_CODE')

# COMMAND ----------
# Processing node UPD_INSERT_UPDATE, type UPDATE_STRATEGY 
# COLUMN COUNT: 19

# for each involved DataFrame, append the dataframe name to each column
RTR_DELETE_INSERT_UPDATE_temp = RTR_DELETE_INSERT_UPDATE.toDF(*["RTR_DELETE_INSERT_UPDATE___" + col for col in RTR_DELETE_INSERT_UPDATE.columns])

UPD_INSERT_UPDATE = RTR_DELETE_INSERT_UPDATE_temp.selectExpr( 
	"RTR_DELETE_INSERT_UPDATE___LOCATION_ID11 as LOCATION_ID11", 
	"RTR_DELETE_INSERT_UPDATE___REC_TYPE1 as REC_TYPE1", 
	"RTR_DELETE_INSERT_UPDATE___CODE_TYPE1 as CODE_TYPE1", 
	"RTR_DELETE_INSERT_UPDATE___CODE_ID1 as CODE_ID1", 
	"RTR_DELETE_INSERT_UPDATE___CODE_DESC1 as CODE_DESC1", 
	"RTR_DELETE_INSERT_UPDATE___SHORT_DESC1 as SHORT_DESC1", 
	"RTR_DELETE_INSERT_UPDATE___MISC_FLAGS1 as MISC_FLAGS1", 
	"RTR_DELETE_INSERT_UPDATE___CREATE_DATE_TIME1 as CREATE_DATE_TIME1", 
	"RTR_DELETE_INSERT_UPDATE___MOD_DATE_TIME1 as MOD_DATE_TIME1", 
	"RTR_DELETE_INSERT_UPDATE___USER_ID1 as USER_ID1", 
	"RTR_DELETE_INSERT_UPDATE___WM_VERSION_ID12 as WM_VERSION_ID12", 
	"RTR_DELETE_INSERT_UPDATE___SYS_CODE_ID1 as SYS_CODE_ID1", 
	"RTR_DELETE_INSERT_UPDATE___SYS_CODE_TYPE_ID1 as SYS_CODE_TYPE_ID1", 
	"RTR_DELETE_INSERT_UPDATE___CREATED_DTTM1 as CREATED_DTTM1", 
	"RTR_DELETE_INSERT_UPDATE___LAST_UPDATED_DTTM1 as LAST_UPDATED_DTTM1", 
	"RTR_DELETE_INSERT_UPDATE___UPDATE_TSTMP1 as UPDATE_TSTMP1", 
	"RTR_DELETE_INSERT_UPDATE___LOAD_TSTMP1 as LOAD_TSTMP1", 
	"RTR_DELETE_INSERT_UPDATE___o_UPDATE_VALIDATOR1 as o_UPDATE_VALIDATOR1", 
	"RTR_DELETE_INSERT_UPDATE___DELETE_FLAG_EXP1 as DELETE_FLAG_EXP1"
).withColumn('pyspark_data_action', when(col('o_UPDATE_VALIDATOR1') ==(lit('INSERT')),lit(0)).when(col('o_UPDATE_VALIDATOR1') ==(lit('UPDATE')),lit(1)))

# COMMAND ----------
# Processing node Shortcut_to_WM_SYS_CODE, type TARGET 
# COLUMN COUNT: 18


Shortcut_to_WM_SYS_CODE = UPD_INSERT_UPDATE.selectExpr(
	"CAST(LOCATION_ID11 AS BIGINT) as LOCATION_ID",
	"CAST(REC_TYPE1 AS STRING) as WM_REC_TYPE",
	"CAST(CODE_TYPE1 AS STRING) as WM_CD_TYPE",
	"CAST(CODE_ID1 AS STRING) as WM_CD_ID",
	"CAST(SYS_CODE_TYPE_ID1 AS INT) as WM_SYS_CD_TYPE_ID",
	"CAST(SYS_CODE_ID1 AS INT) as WM_SYS_CD_ID",
	"CAST(CODE_DESC1 AS STRING) as WM_CD_DESC",
	"CAST(SHORT_DESC1 AS STRING) as WM_CD_SHORT_DESC",
	"CAST(MISC_FLAGS1 AS STRING) as WM_MISC_FLAGS",
	"CAST(USER_ID1 AS STRING) as WM_USER_ID",
	"CAST(WM_VERSION_ID12 AS INT) as WM_VERSION_ID",
	"CAST(CREATED_DTTM1 AS TIMESTAMP) as WM_CREATED_TSTMP",
	"CAST(LAST_UPDATED_DTTM1 AS TIMESTAMP) as WM_LAST_UPDATED_TSTMP",
	"CAST(CREATE_DATE_TIME1 AS TIMESTAMP) as WM_CREATE_TSTMP",
	"CAST(MOD_DATE_TIME1 AS TIMESTAMP) as WM_MOD_TSTMP",
	"CAST(DELETE_FLAG_EXP1 AS TINYINT) as DELETE_FLAG",
	"CAST(UPDATE_TSTMP1 AS TIMESTAMP) as UPDATE_TSTMP",
	"CAST(LOAD_TSTMP1 AS TIMESTAMP) as LOAD_TSTMP", 
    "pyspark_data_action"
)

try:
  primary_key = """source.LOCATION_ID = target.LOCATION_ID AND source.WM_REC_TYPE = target.WM_REC_TYPE AND source.WM_CD_TYPE = target.WM_CD_TYPE AND source.WM_CD_ID = target.WM_CD_ID"""
  # refined_perf_table = "WM_SYS_CODE"
  executeMerge(Shortcut_to_WM_SYS_CODE, refined_perf_table, primary_key)
  logger.info(f"Merge with {refined_perf_table} completed]")
  logPrevRunDt("WM_SYS_CODE", "WM_SYS_CODE", "Completed", "N/A", f"{raw}.log_run_details")
except Exception as e:
  logPrevRunDt("WM_SYS_CODE", "WM_SYS_CODE","Failed",str(e), f"{raw}.log_run_details", )
  raise e
