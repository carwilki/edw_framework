#Code converted on 2023-06-26 09:57:53
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from pyspark.dbutils import DBUtils
from Datalake.utils.genericUtilities import *
from Datalake.utils.configs import *
from Datalake.utils.mergeUtils import *
from Datalake.utils.logger import *
# COMMAND ----------

parser = argparse.ArgumentParser()
spark = SparkSession.getActiveSession()
dbutils = DBUtils(spark)

parser.add_argument('env', type=str, help='Env Variable')
args = parser.parse_args()
env = args.env
# env = 'dev'

if env is None or env == '':
    raise ValueError('env is not set')

refine = getEnvPrefix(env) + 'refine'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'

# Set global variables
starttime = datetime.now() #start timestamp of the script
raw_perf_table = f"{raw}.WM_E_EMP_STAT_CODE_PRE"
refined_perf_table = f"{refine}.WM_E_EMP_STAT_CODE"
site_profile_table = f"{legacy}.SITE_PROFILE"

Del_Logic= ' -- '  #args.Del_Logic
Prev_Run_Dt=genPrevRunDt(refined_perf_table.split(".")[1], refine,raw)

# COMMAND ----------
# Processing node SQ_Shortcut_to_WM_E_EMP_STAT_CODE, type SOURCE 
# COLUMN COUNT: 17

SQ_Shortcut_to_WM_E_EMP_STAT_CODE = spark.sql(f"""SELECT
LOCATION_ID,
WM_EMP_STAT_ID,
WM_EMP_STAT_CODE,
WM_EMP_STAT_DESC,
WM_UNQ_SEED_ID,
MISC_TXT_1,
MISC_TXT_2,
MISC_NUM_1,
MISC_NUM_2,
WM_USER_ID,
WM_VERSION_ID,
WM_CREATE_TSTMP,
WM_MOD_TSTMP,
WM_CREATED_TSTMP,
WM_LAST_UPDATED_TSTMP,
DELETE_FLAG,
LOAD_TSTMP
FROM {refined_perf_table}
WHERE {Del_Logic} 1=0 and 

DELETE_FLAG = 0""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node SQ_Shortcut_to_WM_E_EMP_STAT_CODE_PRE, type SOURCE 
# COLUMN COUNT: 16

SQ_Shortcut_to_WM_E_EMP_STAT_CODE_PRE = spark.sql(f"""SELECT
DC_NBR,
EMP_STAT_ID,
EMP_STAT_CODE,
DESCRIPTION,
CREATE_DATE_TIME,
MOD_DATE_TIME,
USER_ID,
MISC_TXT_1,
MISC_TXT_2,
MISC_NUM_1,
MISC_NUM_2,
VERSION_ID,
UNQ_SEED_ID,
CREATED_DTTM,
LAST_UPDATED_DTTM,
LOAD_TSTMP
FROM {raw_perf_table}""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node EXPTRANS, type EXPRESSION 
# COLUMN COUNT: 16

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_WM_E_EMP_STAT_CODE_PRE_temp = SQ_Shortcut_to_WM_E_EMP_STAT_CODE_PRE.toDF(*["SQ_Shortcut_to_WM_E_EMP_STAT_CODE_PRE___" + col for col in SQ_Shortcut_to_WM_E_EMP_STAT_CODE_PRE.columns])

EXPTRANS = SQ_Shortcut_to_WM_E_EMP_STAT_CODE_PRE_temp.selectExpr( \
	"SQ_Shortcut_to_WM_E_EMP_STAT_CODE_PRE___sys_row_id as sys_row_id", \
	"cast(SQ_Shortcut_to_WM_E_EMP_STAT_CODE_PRE___DC_NBR as int) as o_DC_NBR", \
	"SQ_Shortcut_to_WM_E_EMP_STAT_CODE_PRE___EMP_STAT_ID as EMP_STAT_ID", \
	"SQ_Shortcut_to_WM_E_EMP_STAT_CODE_PRE___EMP_STAT_CODE as EMP_STAT_CODE", \
	"SQ_Shortcut_to_WM_E_EMP_STAT_CODE_PRE___DESCRIPTION as DESCRIPTION", \
	"SQ_Shortcut_to_WM_E_EMP_STAT_CODE_PRE___CREATE_DATE_TIME as CREATE_DATE_TIME", \
	"SQ_Shortcut_to_WM_E_EMP_STAT_CODE_PRE___MOD_DATE_TIME as MOD_DATE_TIME", \
	"SQ_Shortcut_to_WM_E_EMP_STAT_CODE_PRE___USER_ID as USER_ID", \
	"SQ_Shortcut_to_WM_E_EMP_STAT_CODE_PRE___MISC_TXT_1 as MISC_TXT_1", \
	"SQ_Shortcut_to_WM_E_EMP_STAT_CODE_PRE___MISC_TXT_2 as MISC_TXT_2", \
	"SQ_Shortcut_to_WM_E_EMP_STAT_CODE_PRE___MISC_NUM_1 as MISC_NUM_1", \
	"SQ_Shortcut_to_WM_E_EMP_STAT_CODE_PRE___MISC_NUM_2 as MISC_NUM_2", \
	"SQ_Shortcut_to_WM_E_EMP_STAT_CODE_PRE___VERSION_ID as VERSION_ID", \
	"SQ_Shortcut_to_WM_E_EMP_STAT_CODE_PRE___UNQ_SEED_ID as UNQ_SEED_ID", \
	"SQ_Shortcut_to_WM_E_EMP_STAT_CODE_PRE___CREATED_DTTM as CREATED_DTTM", \
	"SQ_Shortcut_to_WM_E_EMP_STAT_CODE_PRE___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"SQ_Shortcut_to_WM_E_EMP_STAT_CODE_PRE___LOAD_TSTMP as LOAD_TSTMP" \
)

# COMMAND ----------
# Processing node SQ_Shortcut_to_SITE_PROFILE, type SOURCE 
# COLUMN COUNT: 2

SQ_Shortcut_to_SITE_PROFILE = spark.sql(f"""SELECT LOCATION_ID, STORE_NBR FROM {site_profile_table}""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node JNR_SITE_PROFILE, type JOINER 
# COLUMN COUNT: 17

JNR_SITE_PROFILE = EXPTRANS.join(SQ_Shortcut_to_SITE_PROFILE,[EXPTRANS.o_DC_NBR == SQ_Shortcut_to_SITE_PROFILE.STORE_NBR],'inner')

# COMMAND ----------
# Processing node JNR_WM_E_EMP_STATS_CODE, type JOINER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 32

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_WM_E_EMP_STAT_CODE_temp = SQ_Shortcut_to_WM_E_EMP_STAT_CODE.toDF(*["SQ_Shortcut_to_WM_E_EMP_STAT_CODE___" + col for col in SQ_Shortcut_to_WM_E_EMP_STAT_CODE.columns])
JNR_SITE_PROFILE_temp = JNR_SITE_PROFILE.toDF(*["JNR_SITE_PROFILE___" + col for col in JNR_SITE_PROFILE.columns])

JNR_WM_E_EMP_STATS_CODE = SQ_Shortcut_to_WM_E_EMP_STAT_CODE_temp.join(JNR_SITE_PROFILE_temp,[SQ_Shortcut_to_WM_E_EMP_STAT_CODE_temp.SQ_Shortcut_to_WM_E_EMP_STAT_CODE___LOCATION_ID == JNR_SITE_PROFILE_temp.JNR_SITE_PROFILE___LOCATION_ID, SQ_Shortcut_to_WM_E_EMP_STAT_CODE_temp.SQ_Shortcut_to_WM_E_EMP_STAT_CODE___WM_EMP_STAT_ID == JNR_SITE_PROFILE_temp.JNR_SITE_PROFILE___EMP_STAT_ID],'fullouter').selectExpr( \
	"JNR_SITE_PROFILE___LOCATION_ID as LOCATION_ID", \
	"JNR_SITE_PROFILE___EMP_STAT_ID as EMP_STAT_ID", \
	"JNR_SITE_PROFILE___EMP_STAT_CODE as EMP_STAT_CODE", \
	"JNR_SITE_PROFILE___DESCRIPTION as DESCRIPTION", \
	"JNR_SITE_PROFILE___CREATE_DATE_TIME as CREATE_DATE_TIME", \
	"JNR_SITE_PROFILE___MOD_DATE_TIME as MOD_DATE_TIME", \
	"JNR_SITE_PROFILE___USER_ID as USER_ID", \
	"JNR_SITE_PROFILE___MISC_TXT_1 as MISC_TXT_1", \
	"JNR_SITE_PROFILE___MISC_TXT_2 as MISC_TXT_2", \
	"JNR_SITE_PROFILE___MISC_NUM_1 as MISC_NUM_1", \
	"JNR_SITE_PROFILE___MISC_NUM_2 as MISC_NUM_2", \
	"JNR_SITE_PROFILE___VERSION_ID as VERSION_ID", \
	"JNR_SITE_PROFILE___UNQ_SEED_ID as UNQ_SEED_ID", \
	"JNR_SITE_PROFILE___CREATED_DTTM as CREATED_DTTM", \
	"JNR_SITE_PROFILE___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"SQ_Shortcut_to_WM_E_EMP_STAT_CODE___LOCATION_ID as in_LOCATION_ID", \
	"SQ_Shortcut_to_WM_E_EMP_STAT_CODE___WM_EMP_STAT_ID as WM_EMP_STAT_ID", \
	"SQ_Shortcut_to_WM_E_EMP_STAT_CODE___WM_EMP_STAT_CODE as WM_EMP_STAT_CODE", \
	"SQ_Shortcut_to_WM_E_EMP_STAT_CODE___WM_EMP_STAT_DESC as WM_EMP_STAT_DESC", \
	"SQ_Shortcut_to_WM_E_EMP_STAT_CODE___WM_UNQ_SEED_ID as WM_UNQ_SEED_ID", \
	"SQ_Shortcut_to_WM_E_EMP_STAT_CODE___MISC_TXT_1 as in_MISC_TXT_1", \
	"SQ_Shortcut_to_WM_E_EMP_STAT_CODE___MISC_TXT_2 as in_MISC_TXT_2", \
	"SQ_Shortcut_to_WM_E_EMP_STAT_CODE___MISC_NUM_1 as in_MISC_NUM_1", \
	"SQ_Shortcut_to_WM_E_EMP_STAT_CODE___MISC_NUM_2 as in_MISC_NUM_2", \
	"SQ_Shortcut_to_WM_E_EMP_STAT_CODE___WM_USER_ID as WM_USER_ID", \
	"SQ_Shortcut_to_WM_E_EMP_STAT_CODE___WM_VERSION_ID as WM_VERSION_ID", \
	"SQ_Shortcut_to_WM_E_EMP_STAT_CODE___WM_CREATE_TSTMP as WM_CREATE_TSTMP", \
	"SQ_Shortcut_to_WM_E_EMP_STAT_CODE___WM_MOD_TSTMP as WM_MOD_TSTMP", \
	"SQ_Shortcut_to_WM_E_EMP_STAT_CODE___WM_CREATED_TSTMP as WM_CREATED_TSTMP", \
	"SQ_Shortcut_to_WM_E_EMP_STAT_CODE___WM_LAST_UPDATED_TSTMP as WM_LAST_UPDATED_TSTMP", \
	"SQ_Shortcut_to_WM_E_EMP_STAT_CODE___DELETE_FLAG as in_DELETE_FLAG", \
	"SQ_Shortcut_to_WM_E_EMP_STAT_CODE___LOAD_TSTMP as in_LOAD_TSTMP")

# COMMAND ----------
# Processing node FIL_UNCHANGED_REC, type FILTER 
# COLUMN COUNT: 32

# for each involved DataFrame, append the dataframe name to each column
JNR_WM_E_EMP_STATS_CODE_temp = JNR_WM_E_EMP_STATS_CODE.toDF(*["JNR_WM_E_EMP_STATS_CODE___" + col for col in JNR_WM_E_EMP_STATS_CODE.columns])

FIL_UNCHANGED_REC = JNR_WM_E_EMP_STATS_CODE_temp.selectExpr( \
	"JNR_WM_E_EMP_STATS_CODE___LOCATION_ID as LOCATION_ID", \
	"JNR_WM_E_EMP_STATS_CODE___EMP_STAT_ID as EMP_STAT_ID", \
	"JNR_WM_E_EMP_STATS_CODE___EMP_STAT_CODE as EMP_STAT_CODE", \
	"JNR_WM_E_EMP_STATS_CODE___DESCRIPTION as DESCRIPTION", \
	"JNR_WM_E_EMP_STATS_CODE___CREATE_DATE_TIME as CREATE_DATE_TIME", \
	"JNR_WM_E_EMP_STATS_CODE___MOD_DATE_TIME as MOD_DATE_TIME", \
	"JNR_WM_E_EMP_STATS_CODE___USER_ID as USER_ID", \
	"JNR_WM_E_EMP_STATS_CODE___MISC_TXT_1 as MISC_TXT_1", \
	"JNR_WM_E_EMP_STATS_CODE___MISC_TXT_2 as MISC_TXT_2", \
	"JNR_WM_E_EMP_STATS_CODE___MISC_NUM_1 as MISC_NUM_1", \
	"JNR_WM_E_EMP_STATS_CODE___MISC_NUM_2 as MISC_NUM_2", \
	"JNR_WM_E_EMP_STATS_CODE___VERSION_ID as VERSION_ID", \
	"JNR_WM_E_EMP_STATS_CODE___UNQ_SEED_ID as UNQ_SEED_ID", \
	"JNR_WM_E_EMP_STATS_CODE___CREATED_DTTM as CREATED_DTTM", \
	"JNR_WM_E_EMP_STATS_CODE___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"JNR_WM_E_EMP_STATS_CODE___in_LOCATION_ID as in_LOCATION_ID", \
	"JNR_WM_E_EMP_STATS_CODE___WM_EMP_STAT_ID as WM_EMP_STAT_ID", \
	"JNR_WM_E_EMP_STATS_CODE___WM_EMP_STAT_CODE as WM_EMP_STAT_CODE", \
	"JNR_WM_E_EMP_STATS_CODE___WM_EMP_STAT_DESC as WM_EMP_STAT_DESC", \
	"JNR_WM_E_EMP_STATS_CODE___WM_UNQ_SEED_ID as WM_UNQ_SEED_ID", \
	"JNR_WM_E_EMP_STATS_CODE___in_MISC_TXT_1 as in_MISC_TXT_1", \
	"JNR_WM_E_EMP_STATS_CODE___in_MISC_TXT_2 as in_MISC_TXT_2", \
	"JNR_WM_E_EMP_STATS_CODE___in_MISC_NUM_1 as in_MISC_NUM_1", \
	"JNR_WM_E_EMP_STATS_CODE___in_MISC_NUM_2 as in_MISC_NUM_2", \
	"JNR_WM_E_EMP_STATS_CODE___WM_USER_ID as WM_USER_ID", \
	"JNR_WM_E_EMP_STATS_CODE___WM_VERSION_ID as WM_VERSION_ID", \
	"JNR_WM_E_EMP_STATS_CODE___WM_CREATE_TSTMP as WM_CREATE_TSTMP", \
	"JNR_WM_E_EMP_STATS_CODE___WM_MOD_TSTMP as WM_MOD_TSTMP", \
	"JNR_WM_E_EMP_STATS_CODE___WM_CREATED_TSTMP as WM_CREATED_TSTMP", \
	"JNR_WM_E_EMP_STATS_CODE___WM_LAST_UPDATED_TSTMP as WM_LAST_UPDATED_TSTMP", \
	"JNR_WM_E_EMP_STATS_CODE___in_DELETE_FLAG as in_DELETE_FLAG", \
	"JNR_WM_E_EMP_STATS_CODE___in_LOAD_TSTMP as in_LOAD_TSTMP") \
    .filter("WM_EMP_STAT_ID is Null OR EMP_STAT_ID is Null OR (  WM_EMP_STAT_ID is not Null AND \
             ( COALESCE(CREATE_DATE_TIME, date'1900-01-01') != COALESCE(WM_CREATE_TSTMP, date'1900-01-01') \
             OR COALESCE(MOD_DATE_TIME, date'1900-01-01') != COALESCE(WM_MOD_TSTMP, date'1900-01-01') \
             OR COALESCE(CREATED_DTTM, date'1900-01-01') != COALESCE(WM_CREATED_TSTMP, date'1900-01-01') \
             OR COALESCE(LAST_UPDATED_DTTM, date'1900-01-01') != COALESCE(WM_LAST_UPDATED_TSTMP, date'1900-01-01')))").withColumn("sys_row_id", monotonically_increasing_id())



# COMMAND ----------
# Processing node EXP_UPD_VALIDATOR, type EXPRESSION 
# COLUMN COUNT: 36

# for each involved DataFrame, append the dataframe name to each column
FIL_UNCHANGED_REC_temp = FIL_UNCHANGED_REC.toDF(*["FIL_UNCHANGED_REC___" + col for col in FIL_UNCHANGED_REC.columns]) \
.withColumn("FIL_UNCHANGED_REC___v_CREATE_DATE_TIME", expr("""IF(FIL_UNCHANGED_REC___CREATE_DATE_TIME IS NULL, date'1900-01-01', FIL_UNCHANGED_REC___CREATE_DATE_TIME)""")) \
	.withColumn("FIL_UNCHANGED_REC___v_MOD_DATE_TIME", expr("""IF(FIL_UNCHANGED_REC___MOD_DATE_TIME IS NULL, date'1900-01-01', FIL_UNCHANGED_REC___MOD_DATE_TIME)""")) \
	.withColumn("FIL_UNCHANGED_REC___v_CREATED_DTTM", expr("""IF(FIL_UNCHANGED_REC___CREATED_DTTM IS NULL, date'1900-01-01', FIL_UNCHANGED_REC___CREATED_DTTM)""")) \
	.withColumn("FIL_UNCHANGED_REC___v_LAST_UPDATED_DTTM", expr("""IF(FIL_UNCHANGED_REC___LAST_UPDATED_DTTM IS NULL, date'1900-01-01', FIL_UNCHANGED_REC___LAST_UPDATED_DTTM)""")) \
	.withColumn("FIL_UNCHANGED_REC___v_WM_CREATE_TSTMP", expr("""IF(FIL_UNCHANGED_REC___WM_CREATE_TSTMP IS NULL, date'1900-01-01', FIL_UNCHANGED_REC___WM_CREATE_TSTMP)""")) \
	.withColumn("FIL_UNCHANGED_REC___v_WM_MOD_TSTMP", expr("""IF(FIL_UNCHANGED_REC___WM_MOD_TSTMP IS NULL, date'1900-01-01', FIL_UNCHANGED_REC___WM_MOD_TSTMP)""")) \
	.withColumn("FIL_UNCHANGED_REC___v_WM_CREATED_TSTMP", expr("""IF(FIL_UNCHANGED_REC___WM_CREATED_TSTMP IS NULL, date'1900-01-01', FIL_UNCHANGED_REC___WM_CREATED_TSTMP)""")) \
	.withColumn("FIL_UNCHANGED_REC___v_WM_LAST_UPDATED_TSTMP", expr("""IF(FIL_UNCHANGED_REC___WM_LAST_UPDATED_TSTMP IS NULL, date'1900-01-01', FIL_UNCHANGED_REC___WM_LAST_UPDATED_TSTMP)"""))

EXP_UPD_VALIDATOR = FIL_UNCHANGED_REC_temp.selectExpr( \
	"FIL_UNCHANGED_REC___sys_row_id as sys_row_id", \
	"FIL_UNCHANGED_REC___LOCATION_ID as LOCATION_ID", \
	"FIL_UNCHANGED_REC___EMP_STAT_ID as EMP_STAT_ID", \
	"FIL_UNCHANGED_REC___EMP_STAT_CODE as EMP_STAT_CODE", \
	"FIL_UNCHANGED_REC___DESCRIPTION as DESCRIPTION", \
	"FIL_UNCHANGED_REC___CREATE_DATE_TIME as CREATE_DATE_TIME", \
	"FIL_UNCHANGED_REC___MOD_DATE_TIME as MOD_DATE_TIME", \
	"FIL_UNCHANGED_REC___USER_ID as USER_ID", \
	"FIL_UNCHANGED_REC___MISC_TXT_1 as MISC_TXT_1", \
	"FIL_UNCHANGED_REC___MISC_TXT_2 as MISC_TXT_2", \
	"FIL_UNCHANGED_REC___MISC_NUM_1 as MISC_NUM_1", \
	"FIL_UNCHANGED_REC___MISC_NUM_2 as MISC_NUM_2", \
	"FIL_UNCHANGED_REC___VERSION_ID as VERSION_ID", \
	"FIL_UNCHANGED_REC___UNQ_SEED_ID as UNQ_SEED_ID", \
	"FIL_UNCHANGED_REC___CREATED_DTTM as CREATED_DTTM", \
	"FIL_UNCHANGED_REC___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"FIL_UNCHANGED_REC___in_LOCATION_ID as in_LOCATION_ID", \
	"FIL_UNCHANGED_REC___WM_EMP_STAT_ID as WM_EMP_STAT_ID", \
	"FIL_UNCHANGED_REC___WM_EMP_STAT_CODE as WM_EMP_STAT_CODE", \
	"FIL_UNCHANGED_REC___WM_EMP_STAT_DESC as WM_EMP_STAT_DESC", \
	"FIL_UNCHANGED_REC___WM_UNQ_SEED_ID as WM_UNQ_SEED_ID", \
	"FIL_UNCHANGED_REC___in_MISC_TXT_1 as in_MISC_TXT_1", \
	"FIL_UNCHANGED_REC___in_MISC_TXT_2 as in_MISC_TXT_2", \
	"FIL_UNCHANGED_REC___in_MISC_NUM_1 as in_MISC_NUM_1", \
	"FIL_UNCHANGED_REC___in_MISC_NUM_2 as in_MISC_NUM_2", \
	"FIL_UNCHANGED_REC___WM_USER_ID as WM_USER_ID", \
	"FIL_UNCHANGED_REC___WM_VERSION_ID as WM_VERSION_ID", \
	"FIL_UNCHANGED_REC___WM_CREATE_TSTMP as WM_CREATE_TSTMP", \
	"FIL_UNCHANGED_REC___WM_MOD_TSTMP as WM_MOD_TSTMP", \
	"FIL_UNCHANGED_REC___WM_CREATED_TSTMP as WM_CREATED_TSTMP", \
	"FIL_UNCHANGED_REC___WM_LAST_UPDATED_TSTMP as WM_LAST_UPDATED_TSTMP", \
	"FIL_UNCHANGED_REC___in_DELETE_FLAG as in_DELETE_FLAG", \
	"FIL_UNCHANGED_REC___in_LOAD_TSTMP as in_LOAD_TSTMP", \
	"IF(FIL_UNCHANGED_REC___EMP_STAT_ID IS NULL AND FIL_UNCHANGED_REC___WM_EMP_STAT_ID IS NOT NULL, 1, 0) as DELETE_FLAG", \
	"CURRENT_TIMESTAMP as UPDATE_TSTMP", \
	"IF(FIL_UNCHANGED_REC___in_LOAD_TSTMP IS NULL, CURRENT_TIMESTAMP, FIL_UNCHANGED_REC___in_LOAD_TSTMP) as LOAD_TSTMP", \
	f"IF(FIL_UNCHANGED_REC___EMP_STAT_ID IS NOT NULL AND FIL_UNCHANGED_REC___WM_EMP_STAT_ID IS NULL, 'INSERT', IF(FIL_UNCHANGED_REC___EMP_STAT_ID IS NULL AND FIL_UNCHANGED_REC___WM_EMP_STAT_ID IS NOT NULL AND ( FIL_UNCHANGED_REC___v_WM_CREATE_TSTMP >= DATE_ADD('{Prev_Run_Dt}',-14) OR FIL_UNCHANGED_REC___v_WM_MOD_TSTMP >= DATE_ADD('{Prev_Run_Dt}',-14) OR FIL_UNCHANGED_REC___v_WM_CREATED_TSTMP >= DATE_ADD('{Prev_Run_Dt}',-14) OR FIL_UNCHANGED_REC___v_WM_LAST_UPDATED_TSTMP >= DATE_ADD('{Prev_Run_Dt}',-14) ), 'DELETE', IF(FIL_UNCHANGED_REC___EMP_STAT_ID IS NOT NULL AND FIL_UNCHANGED_REC___WM_EMP_STAT_ID IS NOT NULL AND ( FIL_UNCHANGED_REC___v_WM_CREATED_TSTMP <> FIL_UNCHANGED_REC___v_CREATED_DTTM OR FIL_UNCHANGED_REC___v_WM_LAST_UPDATED_TSTMP <> FIL_UNCHANGED_REC___v_LAST_UPDATED_DTTM OR FIL_UNCHANGED_REC___v_WM_CREATE_TSTMP <> FIL_UNCHANGED_REC___v_CREATE_DATE_TIME OR FIL_UNCHANGED_REC___v_WM_MOD_TSTMP <> FIL_UNCHANGED_REC___v_MOD_DATE_TIME ), 'UPDATE', NULL))) as o_UPD_VALIDATOR" \
)

# COMMAND ----------
# Processing node RTR_DELETE, type ROUTER 
# COLUMN COUNT: 36


# Creating output dataframe for RTR_DELETE, output group DELETE
RTR_DELETE_DELETE = EXP_UPD_VALIDATOR.select(EXP_UPD_VALIDATOR.sys_row_id.alias('sys_row_id'), \
	EXP_UPD_VALIDATOR.LOCATION_ID.alias('LOCATION_ID3'), \
	EXP_UPD_VALIDATOR.EMP_STAT_ID.alias('EMP_STAT_ID3'), \
	EXP_UPD_VALIDATOR.EMP_STAT_CODE.alias('EMP_STAT_CODE3'), \
	EXP_UPD_VALIDATOR.DESCRIPTION.alias('DESCRIPTION3'), \
	EXP_UPD_VALIDATOR.CREATE_DATE_TIME.alias('CREATE_DATE_TIME3'), \
	EXP_UPD_VALIDATOR.MOD_DATE_TIME.alias('MOD_DATE_TIME3'), \
	EXP_UPD_VALIDATOR.USER_ID.alias('USER_ID3'), \
	EXP_UPD_VALIDATOR.MISC_TXT_1.alias('MISC_TXT_13'), \
	EXP_UPD_VALIDATOR.MISC_TXT_2.alias('MISC_TXT_23'), \
	EXP_UPD_VALIDATOR.MISC_NUM_1.alias('MISC_NUM_13'), \
	EXP_UPD_VALIDATOR.MISC_NUM_2.alias('MISC_NUM_23'), \
	EXP_UPD_VALIDATOR.VERSION_ID.alias('VERSION_ID3'), \
	EXP_UPD_VALIDATOR.UNQ_SEED_ID.alias('UNQ_SEED_ID3'), \
	EXP_UPD_VALIDATOR.CREATED_DTTM.alias('CREATED_DTTM3'), \
	EXP_UPD_VALIDATOR.LAST_UPDATED_DTTM.alias('LAST_UPDATED_DTTM3'), \
	EXP_UPD_VALIDATOR.in_LOCATION_ID.alias('in_LOCATION_ID3'), \
	EXP_UPD_VALIDATOR.WM_EMP_STAT_ID.alias('WM_EMP_STAT_ID3'), \
	EXP_UPD_VALIDATOR.WM_EMP_STAT_CODE.alias('WM_EMP_STAT_CODE3'), \
	EXP_UPD_VALIDATOR.WM_EMP_STAT_DESC.alias('WM_EMP_STAT_DESC3'), \
	EXP_UPD_VALIDATOR.WM_UNQ_SEED_ID.alias('WM_UNQ_SEED_ID3'), \
	EXP_UPD_VALIDATOR.in_MISC_TXT_1.alias('in_MISC_TXT_13'), \
	EXP_UPD_VALIDATOR.in_MISC_TXT_2.alias('in_MISC_TXT_23'), \
	EXP_UPD_VALIDATOR.in_MISC_NUM_1.alias('in_MISC_NUM_13'), \
	EXP_UPD_VALIDATOR.in_MISC_NUM_2.alias('in_MISC_NUM_23'), \
	EXP_UPD_VALIDATOR.WM_USER_ID.alias('WM_USER_ID3'), \
	EXP_UPD_VALIDATOR.WM_VERSION_ID.alias('WM_VERSION_ID3'), \
	EXP_UPD_VALIDATOR.WM_CREATE_TSTMP.alias('WM_CREATE_TSTMP3'), \
	EXP_UPD_VALIDATOR.WM_MOD_TSTMP.alias('WM_MOD_TSTMP3'), \
	EXP_UPD_VALIDATOR.WM_CREATED_TSTMP.alias('WM_CREATED_TSTMP3'), \
	EXP_UPD_VALIDATOR.WM_LAST_UPDATED_TSTMP.alias('WM_LAST_UPDATED_TSTMP3'), \
	EXP_UPD_VALIDATOR.in_DELETE_FLAG.alias('in_DELETE_FLAG3'), \
	EXP_UPD_VALIDATOR.in_LOAD_TSTMP.alias('in_LOAD_TSTMP3'), \
	EXP_UPD_VALIDATOR.DELETE_FLAG.alias('DELETE_FLAG3'), \
	EXP_UPD_VALIDATOR.UPDATE_TSTMP.alias('UPDATE_TSTMP3'), \
	EXP_UPD_VALIDATOR.LOAD_TSTMP.alias('LOAD_TSTMP3'), \
	EXP_UPD_VALIDATOR.o_UPD_VALIDATOR.alias('o_UPD_VALIDATOR3')).filter("o_UPD_VALIDATOR = 'DELETE'")

# Creating output dataframe for RTR_DELETE, output group INSERT_UPDATE
RTR_DELETE_INSERT_UPDATE = EXP_UPD_VALIDATOR.select(EXP_UPD_VALIDATOR.sys_row_id.alias('sys_row_id'), \
	EXP_UPD_VALIDATOR.LOCATION_ID.alias('LOCATION_ID1'), \
	EXP_UPD_VALIDATOR.EMP_STAT_ID.alias('EMP_STAT_ID1'), \
	EXP_UPD_VALIDATOR.EMP_STAT_CODE.alias('EMP_STAT_CODE1'), \
	EXP_UPD_VALIDATOR.DESCRIPTION.alias('DESCRIPTION1'), \
	EXP_UPD_VALIDATOR.CREATE_DATE_TIME.alias('CREATE_DATE_TIME1'), \
	EXP_UPD_VALIDATOR.MOD_DATE_TIME.alias('MOD_DATE_TIME1'), \
	EXP_UPD_VALIDATOR.USER_ID.alias('USER_ID1'), \
	EXP_UPD_VALIDATOR.MISC_TXT_1.alias('MISC_TXT_11'), \
	EXP_UPD_VALIDATOR.MISC_TXT_2.alias('MISC_TXT_21'), \
	EXP_UPD_VALIDATOR.MISC_NUM_1.alias('MISC_NUM_11'), \
	EXP_UPD_VALIDATOR.MISC_NUM_2.alias('MISC_NUM_21'), \
	EXP_UPD_VALIDATOR.VERSION_ID.alias('VERSION_ID1'), \
	EXP_UPD_VALIDATOR.UNQ_SEED_ID.alias('UNQ_SEED_ID1'), \
	EXP_UPD_VALIDATOR.CREATED_DTTM.alias('CREATED_DTTM1'), \
	EXP_UPD_VALIDATOR.LAST_UPDATED_DTTM.alias('LAST_UPDATED_DTTM1'), \
	EXP_UPD_VALIDATOR.in_LOCATION_ID.alias('in_LOCATION_ID1'), \
	EXP_UPD_VALIDATOR.WM_EMP_STAT_ID.alias('WM_EMP_STAT_ID1'), \
	EXP_UPD_VALIDATOR.WM_EMP_STAT_CODE.alias('WM_EMP_STAT_CODE1'), \
	EXP_UPD_VALIDATOR.WM_EMP_STAT_DESC.alias('WM_EMP_STAT_DESC1'), \
	EXP_UPD_VALIDATOR.WM_UNQ_SEED_ID.alias('WM_UNQ_SEED_ID1'), \
	EXP_UPD_VALIDATOR.in_MISC_TXT_1.alias('in_MISC_TXT_11'), \
	EXP_UPD_VALIDATOR.in_MISC_TXT_2.alias('in_MISC_TXT_21'), \
	EXP_UPD_VALIDATOR.in_MISC_NUM_1.alias('in_MISC_NUM_11'), \
	EXP_UPD_VALIDATOR.in_MISC_NUM_2.alias('in_MISC_NUM_21'), \
	EXP_UPD_VALIDATOR.WM_USER_ID.alias('WM_USER_ID1'), \
	EXP_UPD_VALIDATOR.WM_VERSION_ID.alias('WM_VERSION_ID1'), \
	EXP_UPD_VALIDATOR.WM_CREATE_TSTMP.alias('WM_CREATE_TSTMP1'), \
	EXP_UPD_VALIDATOR.WM_MOD_TSTMP.alias('WM_MOD_TSTMP1'), \
	EXP_UPD_VALIDATOR.WM_CREATED_TSTMP.alias('WM_CREATED_TSTMP1'), \
	EXP_UPD_VALIDATOR.WM_LAST_UPDATED_TSTMP.alias('WM_LAST_UPDATED_TSTMP1'), \
	EXP_UPD_VALIDATOR.in_DELETE_FLAG.alias('in_DELETE_FLAG1'), \
	EXP_UPD_VALIDATOR.in_LOAD_TSTMP.alias('in_LOAD_TSTMP1'), \
	EXP_UPD_VALIDATOR.DELETE_FLAG.alias('DELETE_FLAG1'), \
	EXP_UPD_VALIDATOR.UPDATE_TSTMP.alias('UPDATE_TSTMP1'), \
	EXP_UPD_VALIDATOR.LOAD_TSTMP.alias('LOAD_TSTMP1'), \
	EXP_UPD_VALIDATOR.o_UPD_VALIDATOR.alias('o_UPD_VALIDATOR1')).filter("o_UPD_VALIDATOR = 'INSERT' OR o_UPD_VALIDATOR = 'UPDATE'")


# COMMAND ----------
# Processing node UPD_INS_UPD, type UPDATE_STRATEGY . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 19

# for each involved DataFrame, append the dataframe name to each column
RTR_DELETE_INSERT_UPDATE_temp = RTR_DELETE_INSERT_UPDATE.toDF(*["RTR_DELETE_INSERT_UPDATE___" + col for col in RTR_DELETE_INSERT_UPDATE.columns])

UPD_INS_UPD = RTR_DELETE_INSERT_UPDATE_temp.selectExpr( \
	"RTR_DELETE_INSERT_UPDATE___LOCATION_ID1 as LOCATION_ID1", \
	"RTR_DELETE_INSERT_UPDATE___EMP_STAT_ID1 as EMP_STAT_ID1", \
	"RTR_DELETE_INSERT_UPDATE___EMP_STAT_CODE1 as EMP_STAT_CODE1", \
	"RTR_DELETE_INSERT_UPDATE___DESCRIPTION1 as DESCRIPTION1", \
	"RTR_DELETE_INSERT_UPDATE___UNQ_SEED_ID1 as UNQ_SEED_ID1", \
	"RTR_DELETE_INSERT_UPDATE___MISC_TXT_11 as MISC_TXT_11", \
	"RTR_DELETE_INSERT_UPDATE___MISC_TXT_21 as MISC_TXT_21", \
	"RTR_DELETE_INSERT_UPDATE___MISC_NUM_11 as MISC_NUM_11", \
	"RTR_DELETE_INSERT_UPDATE___MISC_NUM_21 as MISC_NUM_21", \
	"RTR_DELETE_INSERT_UPDATE___USER_ID1 as USER_ID1", \
	"RTR_DELETE_INSERT_UPDATE___VERSION_ID1 as VERSION_ID1", \
	"RTR_DELETE_INSERT_UPDATE___CREATE_DATE_TIME1 as CREATE_DATE_TIME1", \
	"RTR_DELETE_INSERT_UPDATE___MOD_DATE_TIME1 as MOD_DATE_TIME1", \
	"RTR_DELETE_INSERT_UPDATE___CREATED_DTTM1 as CREATED_DTTM1", \
	"RTR_DELETE_INSERT_UPDATE___LAST_UPDATED_DTTM1 as LAST_UPDATED_DTTM1", \
	"RTR_DELETE_INSERT_UPDATE___DELETE_FLAG1 as DELETE_FLAG", \
	"RTR_DELETE_INSERT_UPDATE___UPDATE_TSTMP1 as UPDATE_TSTMP1", \
	"RTR_DELETE_INSERT_UPDATE___LOAD_TSTMP1 as LOAD_TSTMP1", \
	"RTR_DELETE_INSERT_UPDATE___o_UPD_VALIDATOR1 as o_UPD_VALIDATOR1") \
	.withColumn('pyspark_data_action', when(col('o_UPD_VALIDATOR1') ==(lit('INSERT')), lit(0)).when(col('o_UPD_VALIDATOR1') ==(lit('UPDATE')), lit(1)))

# COMMAND ----------
# Processing node UPD_DELETE, type UPDATE_STRATEGY . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 18

# for each involved DataFrame, append the dataframe name to each column
RTR_DELETE_DELETE_temp = RTR_DELETE_DELETE.toDF(*["RTR_DELETE_DELETE___" + col for col in RTR_DELETE_DELETE.columns])

# UPD_DELETE = RTR_DELETE_DELETE_temp.selectExpr( \
# 	"RTR_DELETE_DELETE___in_LOCATION_ID3 as in_LOCATION_ID2", \
# 	"RTR_DELETE_DELETE___WM_EMP_STAT_ID3 as WM_EMP_STAT_ID2", \
# 	"RTR_DELETE_DELETE___WM_EMP_STAT_CODE3 as WM_EMP_STAT_CODE2", \
# 	"RTR_DELETE_DELETE___WM_EMP_STAT_DESC3 as WM_EMP_STAT_DESC2", \
# 	"RTR_DELETE_DELETE___WM_UNQ_SEED_ID3 as WM_UNQ_SEED_ID2", \
# 	"RTR_DELETE_DELETE___in_MISC_TXT_13 as in_MISC_TXT_12", \
# 	"RTR_DELETE_DELETE___in_MISC_TXT_23 as in_MISC_TXT_22", \
# 	"RTR_DELETE_DELETE___in_MISC_NUM_13 as in_MISC_NUM_12", \
# 	"RTR_DELETE_DELETE___in_MISC_NUM_23 as in_MISC_NUM_22", \
# 	"RTR_DELETE_DELETE___WM_USER_ID3 as WM_USER_ID2", \
# 	"RTR_DELETE_DELETE___WM_VERSION_ID3 as WM_VERSION_ID2", \
# 	"RTR_DELETE_DELETE___WM_CREATE_TSTMP3 as WM_CREATE_TSTMP2", \
# 	"RTR_DELETE_DELETE___WM_MOD_TSTMP3 as WM_MOD_TSTMP2", \
# 	"RTR_DELETE_DELETE___WM_CREATED_TSTMP3 as WM_CREATED_TSTMP2", \
# 	"RTR_DELETE_DELETE___WM_LAST_UPDATED_TSTMP3 as WM_LAST_UPDATED_TSTMP2", \
# 	"RTR_DELETE_DELETE___DELETE_FLAG3 as DELETE_FLAG2", \
# 	"RTR_DELETE_DELETE___UPDATE_TSTMP3 as UPDATE_TSTMP2", \
# 	"RTR_DELETE_DELETE___LOAD_TSTMP3 as LOAD_TSTMP2") \
# 	.withColumn('pyspark_data_action', lit(1))


# COMMAND ----------
# Processing node Shortcut_to_WM_E_EMP_STAT_CODE, type TARGET 
# COLUMN COUNT: 18

Shortcut_to_WM_E_EMP_STAT_CODE = UPD_INS_UPD.selectExpr(
	"CAST(LOCATION_ID1 AS BIGINT) as LOCATION_ID",
	"CAST(EMP_STAT_ID1 AS INT) as WM_EMP_STAT_ID",
	"CAST(EMP_STAT_CODE1 AS STRING) as WM_EMP_STAT_CODE",
	"CAST(DESCRIPTION1 AS STRING) as WM_EMP_STAT_DESC",
	"CAST(UNQ_SEED_ID1 AS INT) as WM_UNQ_SEED_ID",
	"CAST(MISC_TXT_11 AS STRING) as MISC_TXT_1",
	"CAST(MISC_TXT_21 AS STRING) as MISC_TXT_2",
	"CAST(MISC_NUM_11 AS DECIMAL(20,7)) as MISC_NUM_1",
	"CAST(MISC_NUM_21 AS DECIMAL(20,7)) as MISC_NUM_2",
	"CAST(USER_ID1 AS STRING) as WM_USER_ID",
	"CAST(VERSION_ID1 AS INT) as WM_VERSION_ID",
	"CAST(CREATE_DATE_TIME1 AS TIMESTAMP) as WM_CREATE_TSTMP",
	"CAST(MOD_DATE_TIME1 AS TIMESTAMP) as WM_MOD_TSTMP",
	"CAST(CREATED_DTTM1 AS TIMESTAMP) as WM_CREATED_TSTMP",
	"CAST(LAST_UPDATED_DTTM1 AS TIMESTAMP) as WM_LAST_UPDATED_TSTMP",
	"CAST(DELETE_FLAG AS TINYINT) as DELETE_FLAG",
	"CAST(UPDATE_TSTMP1 AS TIMESTAMP) as UPDATE_TSTMP",
	"CAST(LOAD_TSTMP1 AS TIMESTAMP) as LOAD_TSTMP", 
    "pyspark_data_action" 
)

try:
  primary_key = """source.LOCATION_ID = target.LOCATION_ID AND source.WM_EMP_STAT_ID = target.WM_EMP_STAT_ID"""
#   refined_perf_table = "WM_E_EMP_STAT_CODE"
  executeMerge(Shortcut_to_WM_E_EMP_STAT_CODE, refined_perf_table, primary_key)
  logger.info(f"Merge with {refined_perf_table} completed]")
  logPrevRunDt("WM_E_EMP_STAT_CODE", "WM_E_EMP_STAT_CODE", "Completed", "N/A", f"{raw}.log_run_details")
except Exception as e:
  logPrevRunDt("WM_E_EMP_STAT_CODE", "WM_E_EMP_STAT_CODE","Failed",str(e), f"{raw}.log_run_details", )
  raise e
	

# COMMAND ----------
# Processing node Shortcut_to_WM_E_EMP_STAT_CODE1, type TARGET 
# COLUMN COUNT: 18


# Shortcut_to_WM_E_EMP_STAT_CODE1 = UPD_DELETE.selectExpr( \
# 	"CAST(in_LOCATION_ID2 AS BIGINT) as LOCATION_ID", \
# 	"CAST(WM_EMP_STAT_ID2 AS BIGINT) as WM_EMP_STAT_ID", \
# 	"CAST(NULL AS STRING) as WM_EMP_STAT_CODE", \
# 	"CAST(NULL AS STRING) as WM_EMP_STAT_DESC", \
# 	"CAST(NULL AS BIGINT) as WM_UNQ_SEED_ID", \
# 	"CAST(NULL AS STRING) as MISC_TXT_1", \
# 	"CAST(NULL AS STRING) as MISC_TXT_2", \
# 	"CAST(NULL AS BIGINT) as MISC_NUM_1", \
# 	"CAST(NULL AS BIGINT) as MISC_NUM_2", \
# 	"CAST(NULL AS STRING) as WM_USER_ID", \
# 	"CAST(NULL AS BIGINT) as WM_VERSION_ID", \
# 	"CAST(NULL AS TIMESTAMP) as WM_CREATE_TSTMP", \
# 	"CAST(NULL AS TIMESTAMP) as WM_MOD_TSTMP", \
# 	"CAST(NULL AS TIMESTAMP) as WM_CREATED_TSTMP", \
# 	"CAST(NULL AS TIMESTAMP) as WM_LAST_UPDATED_TSTMP", \
# 	"CAST(DELETE_FLAG2 AS BIGINT) as DELETE_FLAG", \
# 	"CAST(UPDATE_TSTMP2 AS TIMESTAMP) as UPDATE_TSTMP", \
# 	"CAST(NULL AS TIMESTAMP) as LOAD_TSTMP" \
# )
# Shortcut_to_WM_E_EMP_STAT_CODE1.write.saveAsTable(f'{raw}.WM_E_EMP_STAT_CODE')