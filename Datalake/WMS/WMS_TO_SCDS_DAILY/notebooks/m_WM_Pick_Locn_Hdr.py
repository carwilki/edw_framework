#Code converted on 2023-06-26 17:06:23
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from pyspark.dbutils import DBUtils
from utils.genericUtilities import *
from utils.configs import *
from utils.mergeUtils import *
from utils.logger import *
# COMMAND ----------

parser = argparse.ArgumentParser()
spark = SparkSession.getActiveSession()
dbutils = DBUtils(spark)
parser.add_argument('env', type=str, help='Env Variable')
args = parser.parse_args()
env = args.env

if env is None or env == '':
    raise ValueError('env is not set')

refine = getEnvPrefix(env) + 'refine'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'

# Set global variables
starttime = datetime.now() #start timestamp of the script

# COMMAND ----------
# Variable_declaration_comment
Prev_Run_Dt=args.Prev_Run_Dt
Del_Logic=args.Del_Logic

# COMMAND ----------
# Processing node SQ_Shortcut_to_WM_PICK_LOCN_HDR, type SOURCE 
# COLUMN COUNT: 34

SQ_Shortcut_to_WM_PICK_LOCN_HDR = spark.sql(f"""SELECT
WM_PICK_LOCN_HDR.LOCATION_ID,
WM_PICK_LOCN_HDR.WM_PICK_LOCN_HDR_ID,
WM_PICK_LOCN_HDR.WM_LOCN_ID,
WM_PICK_LOCN_HDR.WM_LOCN_HDR_ID,
WM_PICK_LOCN_HDR.WM_PICK_LOCN_ASSIGN_TYPE,
WM_PICK_LOCN_HDR.WM_LOCN_PUTAWAY_LOCK,
WM_PICK_LOCN_HDR.WM_INVN_LOCK_CD,
WM_PICK_LOCN_HDR.WM_XCESS_WAVE_NEED_PROC_TYPE,
WM_PICK_LOCN_HDR.WM_PUTWY_TYPE,
WM_PICK_LOCN_HDR.WM_PICK_LOCN_ASSIGN_ZONE,
WM_PICK_LOCN_HDR.PICK_TO_LIGHT_FLAG,
WM_PICK_LOCN_HDR.PICK_TO_LIGHT_REPL_FLAG,
WM_PICK_LOCN_HDR.WM_REPL_FLAG,
WM_PICK_LOCN_HDR.WM_REPL_LOCN_BRCD,
WM_PICK_LOCN_HDR.WM_REPL_TRAVEL_AISLE,
WM_PICK_LOCN_HDR.WM_REPL_TRAVEL_ZONE,
WM_PICK_LOCN_HDR.WM_SUPPR_PR40_REPL,
WM_PICK_LOCN_HDR.WM_COMB_4050_REPL,
WM_PICK_LOCN_HDR.WM_REPL_CHECK_DIGIT,
WM_PICK_LOCN_HDR.REPL_X_COORD,
WM_PICK_LOCN_HDR.REPL_Y_COORD,
WM_PICK_LOCN_HDR.REPL_Z_COORD,
WM_PICK_LOCN_HDR.MAX_NBR_OF_SKU,
WM_PICK_LOCN_HDR.MAX_VOL,
WM_PICK_LOCN_HDR.MAX_WT,
WM_PICK_LOCN_HDR.WM_USER_ID,
WM_PICK_LOCN_HDR.WM_VERSION_ID,
WM_PICK_LOCN_HDR.WM_CREATED_TSTMP,
WM_PICK_LOCN_HDR.WM_LAST_UPDATED_TSTMP,
WM_PICK_LOCN_HDR.WM_CREATE_TSTMP,
WM_PICK_LOCN_HDR.WM_MOD_TSTMP,
WM_PICK_LOCN_HDR.DELETE_FLAG,
WM_PICK_LOCN_HDR.UPDATE_TSTMP,
WM_PICK_LOCN_HDR.LOAD_TSTMP
FROM WM_PICK_LOCN_HDR
WHERE {Del_Logic} 1=0 and 

DELETE_FLAG =0""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node SQ_Shortcut_to_WM_PICK_LOCN_HDR_PRE, type SOURCE 
# COLUMN COUNT: 32

SQ_Shortcut_to_WM_PICK_LOCN_HDR_PRE = spark.sql(f"""SELECT
WM_PICK_LOCN_HDR_PRE.DC_NBR,
WM_PICK_LOCN_HDR_PRE.PICK_LOCN_HDR_ID,
WM_PICK_LOCN_HDR_PRE.LOCN_ID,
WM_PICK_LOCN_HDR_PRE.REPL_LOCN_BRCD,
WM_PICK_LOCN_HDR_PRE.PUTWY_TYPE,
WM_PICK_LOCN_HDR_PRE.MAX_NBR_OF_SKU,
WM_PICK_LOCN_HDR_PRE.REPL_FLAG,
WM_PICK_LOCN_HDR_PRE.PICK_LOCN_ASSIGN_ZONE,
WM_PICK_LOCN_HDR_PRE.CREATE_DATE_TIME,
WM_PICK_LOCN_HDR_PRE.MOD_DATE_TIME,
WM_PICK_LOCN_HDR_PRE.USER_ID,
WM_PICK_LOCN_HDR_PRE.REPL_CHECK_DIGIT,
WM_PICK_LOCN_HDR_PRE.MAX_VOL,
WM_PICK_LOCN_HDR_PRE.MAX_WT,
WM_PICK_LOCN_HDR_PRE.REPL_X_COORD,
WM_PICK_LOCN_HDR_PRE.REPL_Y_COORD,
WM_PICK_LOCN_HDR_PRE.REPL_Z_COORD,
WM_PICK_LOCN_HDR_PRE.REPL_TRAVEL_AISLE,
WM_PICK_LOCN_HDR_PRE.REPL_TRAVEL_ZONE,
WM_PICK_LOCN_HDR_PRE.XCESS_WAVE_NEED_PROC_TYPE,
WM_PICK_LOCN_HDR_PRE.PICK_LOCN_ASSIGN_TYPE,
WM_PICK_LOCN_HDR_PRE.SUPPR_PR40_REPL,
WM_PICK_LOCN_HDR_PRE.COMB_4050_REPL,
WM_PICK_LOCN_HDR_PRE.PICK_TO_LIGHT_FLAG,
WM_PICK_LOCN_HDR_PRE.PICK_TO_LIGHT_REPL_FLAG,
WM_PICK_LOCN_HDR_PRE.WM_VERSION_ID,
WM_PICK_LOCN_HDR_PRE.LOCN_HDR_ID,
WM_PICK_LOCN_HDR_PRE.LOCN_PUTAWAY_LOCK,
WM_PICK_LOCN_HDR_PRE.INVN_LOCK_CODE,
WM_PICK_LOCN_HDR_PRE.CREATED_DTTM,
WM_PICK_LOCN_HDR_PRE.LAST_UPDATED_DTTM,
WM_PICK_LOCN_HDR_PRE.LOAD_TSTMP
FROM WM_PICK_LOCN_HDR_PRE""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node EXP_INT_CONVERSION, type EXPRESSION 
# COLUMN COUNT: 32

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_WM_PICK_LOCN_HDR_PRE_temp = SQ_Shortcut_to_WM_PICK_LOCN_HDR_PRE.toDF(*["SQ_Shortcut_to_WM_PICK_LOCN_HDR_PRE___" + col for col in SQ_Shortcut_to_WM_PICK_LOCN_HDR_PRE.columns])

EXP_INT_CONVERSION = SQ_Shortcut_to_WM_PICK_LOCN_HDR_PRE_temp.selectExpr( \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR_PRE___sys_row_id as sys_row_id", \
	"cast(SQ_Shortcut_to_WM_PICK_LOCN_HDR_PRE___DC_NBR as int) as o_DC_NBR", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR_PRE___PICK_LOCN_HDR_ID as PICK_LOCN_HDR_ID", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR_PRE___LOCN_ID as LOCN_ID", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR_PRE___REPL_LOCN_BRCD as REPL_LOCN_BRCD", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR_PRE___PUTWY_TYPE as PUTWY_TYPE", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR_PRE___MAX_NBR_OF_SKU as MAX_NBR_OF_SKU", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR_PRE___REPL_FLAG as REPL_FLAG", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR_PRE___PICK_LOCN_ASSIGN_ZONE as PICK_LOCN_ASSIGN_ZONE", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR_PRE___CREATE_DATE_TIME as CREATE_DATE_TIME", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR_PRE___MOD_DATE_TIME as MOD_DATE_TIME", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR_PRE___USER_ID as USER_ID", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR_PRE___REPL_CHECK_DIGIT as REPL_CHECK_DIGIT", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR_PRE___MAX_VOL as MAX_VOL", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR_PRE___MAX_WT as MAX_WT", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR_PRE___REPL_X_COORD as REPL_X_COORD", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR_PRE___REPL_Y_COORD as REPL_Y_COORD", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR_PRE___REPL_Z_COORD as REPL_Z_COORD", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR_PRE___REPL_TRAVEL_AISLE as REPL_TRAVEL_AISLE", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR_PRE___REPL_TRAVEL_ZONE as REPL_TRAVEL_ZONE", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR_PRE___XCESS_WAVE_NEED_PROC_TYPE as XCESS_WAVE_NEED_PROC_TYPE", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR_PRE___PICK_LOCN_ASSIGN_TYPE as PICK_LOCN_ASSIGN_TYPE", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR_PRE___SUPPR_PR40_REPL as SUPPR_PR40_REPL", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR_PRE___COMB_4050_REPL as COMB_4050_REPL", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR_PRE___PICK_TO_LIGHT_FLAG as PICK_TO_LIGHT_FLAG", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR_PRE___PICK_TO_LIGHT_REPL_FLAG as PICK_TO_LIGHT_REPL_FLAG", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR_PRE___WM_VERSION_ID as WM_VERSION_ID", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR_PRE___LOCN_HDR_ID as LOCN_HDR_ID", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR_PRE___LOCN_PUTAWAY_LOCK as LOCN_PUTAWAY_LOCK", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR_PRE___INVN_LOCK_CODE as INVN_LOCK_CODE", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR_PRE___CREATED_DTTM as CREATED_DTTM", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR_PRE___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR_PRE___LOAD_TSTMP as LOAD_TSTMP" \
)

# COMMAND ----------
# Processing node SQ_Shortcut_to_SITE_PROFILE, type SOURCE 
# COLUMN COUNT: 2

SQ_Shortcut_to_SITE_PROFILE = spark.sql(f"""SELECT
SITE_PROFILE.LOCATION_ID,
SITE_PROFILE.STORE_NBR
FROM SITE_PROFILE""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node JNR_SITE_PROFILE, type JOINER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 34

# for each involved DataFrame, append the dataframe name to each column
EXP_INT_CONVERSION_temp = EXP_INT_CONVERSION.toDF(*["EXP_INT_CONVERSION___" + col for col in EXP_INT_CONVERSION.columns])
SQ_Shortcut_to_SITE_PROFILE_temp = SQ_Shortcut_to_SITE_PROFILE.toDF(*["SQ_Shortcut_to_SITE_PROFILE___" + col for col in SQ_Shortcut_to_SITE_PROFILE.columns])

JNR_SITE_PROFILE = SQ_Shortcut_to_SITE_PROFILE_temp.join(EXP_INT_CONVERSION_temp,[SQ_Shortcut_to_SITE_PROFILE_temp.SQ_Shortcut_to_SITE_PROFILE___STORE_NBR == EXP_INT_CONVERSION_temp.EXP_INT_CONVERSION___o_DC_NBR],'inner').selectExpr( \
	"EXP_INT_CONVERSION___o_DC_NBR as DC_NBR", \
	"EXP_INT_CONVERSION___PICK_LOCN_HDR_ID as PICK_LOCN_HDR_ID", \
	"EXP_INT_CONVERSION___LOCN_ID as LOCN_ID", \
	"EXP_INT_CONVERSION___REPL_LOCN_BRCD as REPL_LOCN_BRCD", \
	"EXP_INT_CONVERSION___PUTWY_TYPE as PUTWY_TYPE", \
	"EXP_INT_CONVERSION___MAX_NBR_OF_SKU as MAX_NBR_OF_SKU", \
	"EXP_INT_CONVERSION___REPL_FLAG as REPL_FLAG", \
	"EXP_INT_CONVERSION___PICK_LOCN_ASSIGN_ZONE as PICK_LOCN_ASSIGN_ZONE", \
	"EXP_INT_CONVERSION___CREATE_DATE_TIME as CREATE_DATE_TIME", \
	"EXP_INT_CONVERSION___MOD_DATE_TIME as MOD_DATE_TIME", \
	"EXP_INT_CONVERSION___USER_ID as USER_ID", \
	"EXP_INT_CONVERSION___REPL_CHECK_DIGIT as REPL_CHECK_DIGIT", \
	"EXP_INT_CONVERSION___MAX_VOL as MAX_VOL", \
	"EXP_INT_CONVERSION___MAX_WT as MAX_WT", \
	"EXP_INT_CONVERSION___REPL_X_COORD as REPL_X_COORD", \
	"EXP_INT_CONVERSION___REPL_Y_COORD as REPL_Y_COORD", \
	"EXP_INT_CONVERSION___REPL_Z_COORD as REPL_Z_COORD", \
	"EXP_INT_CONVERSION___REPL_TRAVEL_AISLE as REPL_TRAVEL_AISLE", \
	"EXP_INT_CONVERSION___REPL_TRAVEL_ZONE as REPL_TRAVEL_ZONE", \
	"EXP_INT_CONVERSION___XCESS_WAVE_NEED_PROC_TYPE as XCESS_WAVE_NEED_PROC_TYPE", \
	"EXP_INT_CONVERSION___PICK_LOCN_ASSIGN_TYPE as PICK_LOCN_ASSIGN_TYPE", \
	"EXP_INT_CONVERSION___SUPPR_PR40_REPL as SUPPR_PR40_REPL", \
	"EXP_INT_CONVERSION___COMB_4050_REPL as COMB_4050_REPL", \
	"EXP_INT_CONVERSION___PICK_TO_LIGHT_FLAG as PICK_TO_LIGHT_FLAG", \
	"EXP_INT_CONVERSION___PICK_TO_LIGHT_REPL_FLAG as PICK_TO_LIGHT_REPL_FLAG", \
	"EXP_INT_CONVERSION___WM_VERSION_ID as WM_VERSION_ID", \
	"EXP_INT_CONVERSION___LOCN_HDR_ID as LOCN_HDR_ID", \
	"EXP_INT_CONVERSION___LOCN_PUTAWAY_LOCK as LOCN_PUTAWAY_LOCK", \
	"EXP_INT_CONVERSION___INVN_LOCK_CODE as INVN_LOCK_CODE", \
	"EXP_INT_CONVERSION___CREATED_DTTM as CREATED_DTTM", \
	"EXP_INT_CONVERSION___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"EXP_INT_CONVERSION___LOAD_TSTMP as LOAD_TSTMP", \
	"SQ_Shortcut_to_SITE_PROFILE___LOCATION_ID as LOCATION_ID", \
	"SQ_Shortcut_to_SITE_PROFILE___STORE_NBR as STORE_NBR")

# COMMAND ----------
# Processing node JNR_WM_PICK_LOCN_HDR, type JOINER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 68

# for each involved DataFrame, append the dataframe name to each column
JNR_SITE_PROFILE_temp = JNR_SITE_PROFILE.toDF(*["JNR_SITE_PROFILE___" + col for col in JNR_SITE_PROFILE.columns])
SQ_Shortcut_to_WM_PICK_LOCN_HDR_temp = SQ_Shortcut_to_WM_PICK_LOCN_HDR.toDF(*["SQ_Shortcut_to_WM_PICK_LOCN_HDR___" + col for col in SQ_Shortcut_to_WM_PICK_LOCN_HDR.columns])

JNR_WM_PICK_LOCN_HDR = SQ_Shortcut_to_WM_PICK_LOCN_HDR_temp.join(JNR_SITE_PROFILE_temp,[SQ_Shortcut_to_WM_PICK_LOCN_HDR_temp.SQ_Shortcut_to_WM_PICK_LOCN_HDR___LOCATION_ID == JNR_SITE_PROFILE_temp.JNR_SITE_PROFILE___LOCATION_ID, SQ_Shortcut_to_WM_PICK_LOCN_HDR_temp.SQ_Shortcut_to_WM_PICK_LOCN_HDR___WM_PICK_LOCN_HDR_ID == JNR_SITE_PROFILE_temp.JNR_SITE_PROFILE___PICK_LOCN_HDR_ID],'fullouter').selectExpr( \
	"JNR_SITE_PROFILE___DC_NBR as DC_NBR", \
	"JNR_SITE_PROFILE___PICK_LOCN_HDR_ID as PICK_LOCN_HDR_ID", \
	"JNR_SITE_PROFILE___LOCN_ID as LOCN_ID", \
	"JNR_SITE_PROFILE___REPL_LOCN_BRCD as REPL_LOCN_BRCD", \
	"JNR_SITE_PROFILE___PUTWY_TYPE as PUTWY_TYPE", \
	"JNR_SITE_PROFILE___MAX_NBR_OF_SKU as MAX_NBR_OF_SKU", \
	"JNR_SITE_PROFILE___REPL_FLAG as REPL_FLAG", \
	"JNR_SITE_PROFILE___PICK_LOCN_ASSIGN_ZONE as PICK_LOCN_ASSIGN_ZONE", \
	"JNR_SITE_PROFILE___CREATE_DATE_TIME as CREATE_DATE_TIME", \
	"JNR_SITE_PROFILE___MOD_DATE_TIME as MOD_DATE_TIME", \
	"JNR_SITE_PROFILE___USER_ID as USER_ID", \
	"JNR_SITE_PROFILE___REPL_CHECK_DIGIT as REPL_CHECK_DIGIT", \
	"JNR_SITE_PROFILE___MAX_VOL as MAX_VOL", \
	"JNR_SITE_PROFILE___MAX_WT as MAX_WT", \
	"JNR_SITE_PROFILE___REPL_X_COORD as REPL_X_COORD", \
	"JNR_SITE_PROFILE___REPL_Y_COORD as REPL_Y_COORD", \
	"JNR_SITE_PROFILE___REPL_Z_COORD as REPL_Z_COORD", \
	"JNR_SITE_PROFILE___REPL_TRAVEL_AISLE as REPL_TRAVEL_AISLE", \
	"JNR_SITE_PROFILE___REPL_TRAVEL_ZONE as REPL_TRAVEL_ZONE", \
	"JNR_SITE_PROFILE___XCESS_WAVE_NEED_PROC_TYPE as XCESS_WAVE_NEED_PROC_TYPE", \
	"JNR_SITE_PROFILE___PICK_LOCN_ASSIGN_TYPE as PICK_LOCN_ASSIGN_TYPE", \
	"JNR_SITE_PROFILE___SUPPR_PR40_REPL as SUPPR_PR40_REPL", \
	"JNR_SITE_PROFILE___COMB_4050_REPL as COMB_4050_REPL", \
	"JNR_SITE_PROFILE___PICK_TO_LIGHT_FLAG as PICK_TO_LIGHT_FLAG", \
	"JNR_SITE_PROFILE___PICK_TO_LIGHT_REPL_FLAG as PICK_TO_LIGHT_REPL_FLAG", \
	"JNR_SITE_PROFILE___WM_VERSION_ID as WM_VERSION_ID", \
	"JNR_SITE_PROFILE___LOCN_HDR_ID as LOCN_HDR_ID", \
	"JNR_SITE_PROFILE___LOCN_PUTAWAY_LOCK as LOCN_PUTAWAY_LOCK", \
	"JNR_SITE_PROFILE___INVN_LOCK_CODE as INVN_LOCK_CODE", \
	"JNR_SITE_PROFILE___CREATED_DTTM as CREATED_DTTM", \
	"JNR_SITE_PROFILE___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"JNR_SITE_PROFILE___LOAD_TSTMP as LOAD_TSTMP", \
	"JNR_SITE_PROFILE___LOCATION_ID as LOCATION_ID", \
	"JNR_SITE_PROFILE___STORE_NBR as STORE_NBR", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR___LOCATION_ID as i_WM_LOCATION_ID", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR___WM_PICK_LOCN_HDR_ID as WM_PICK_LOCN_HDR_ID", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR___WM_LOCN_ID as WM_LOCN_ID", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR___WM_LOCN_HDR_ID as WM_LOCN_HDR_ID", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR___WM_PICK_LOCN_ASSIGN_TYPE as WM_PICK_LOCN_ASSIGN_TYPE", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR___WM_LOCN_PUTAWAY_LOCK as WM_LOCN_PUTAWAY_LOCK", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR___WM_INVN_LOCK_CD as WM_INVN_LOCK_CD", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR___WM_XCESS_WAVE_NEED_PROC_TYPE as WM_XCESS_WAVE_NEED_PROC_TYPE", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR___WM_PUTWY_TYPE as WM_PUTWY_TYPE", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR___WM_PICK_LOCN_ASSIGN_ZONE as WM_PICK_LOCN_ASSIGN_ZONE", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR___PICK_TO_LIGHT_FLAG as i_WM_PICK_TO_LIGHT_FLAG", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR___PICK_TO_LIGHT_REPL_FLAG as i_WM_PICK_TO_LIGHT_REPL_FLAG", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR___WM_REPL_FLAG as WM_REPL_FLAG", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR___WM_REPL_LOCN_BRCD as WM_REPL_LOCN_BRCD", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR___WM_REPL_TRAVEL_AISLE as WM_REPL_TRAVEL_AISLE", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR___WM_REPL_TRAVEL_ZONE as WM_REPL_TRAVEL_ZONE", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR___WM_SUPPR_PR40_REPL as WM_SUPPR_PR40_REPL", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR___WM_COMB_4050_REPL as WM_COMB_4050_REPL", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR___WM_REPL_CHECK_DIGIT as WM_REPL_CHECK_DIGIT", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR___REPL_X_COORD as i_WM_REPL_X_COORD", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR___REPL_Y_COORD as i_WM_REPL_Y_COORD", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR___REPL_Z_COORD as i_WM_REPL_Z_COORD", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR___MAX_NBR_OF_SKU as i_WM_MAX_NBR_OF_SKU", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR___MAX_VOL as i_WM_MAX_VOL", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR___MAX_WT as i_WM_MAX_WT", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR___WM_USER_ID as WM_USER_ID", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR___WM_VERSION_ID as i_WM_WM_VERSION_ID", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR___WM_CREATED_TSTMP as WM_CREATED_TSTMP", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR___WM_LAST_UPDATED_TSTMP as WM_LAST_UPDATED_TSTMP", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR___WM_CREATE_TSTMP as WM_CREATE_TSTMP", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR___WM_MOD_TSTMP as WM_MOD_TSTMP", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR___DELETE_FLAG as i_WM_DELETE_FLAG", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR___UPDATE_TSTMP as UPDATE_TSTMP", \
	"SQ_Shortcut_to_WM_PICK_LOCN_HDR___LOAD_TSTMP as i_WM_LOAD_TSTMP")

# COMMAND ----------
# Processing node FIL_UNCHANGED_RECORDS, type FILTER 
# COLUMN COUNT: 68

# for each involved DataFrame, append the dataframe name to each column
JNR_WM_PICK_LOCN_HDR_temp = JNR_WM_PICK_LOCN_HDR.toDF(*["JNR_WM_PICK_LOCN_HDR___" + col for col in JNR_WM_PICK_LOCN_HDR.columns])

FIL_UNCHANGED_RECORDS = JNR_WM_PICK_LOCN_HDR_temp.selectExpr( \
	"JNR_WM_PICK_LOCN_HDR___DC_NBR as DC_NBR", \
	"JNR_WM_PICK_LOCN_HDR___PICK_LOCN_HDR_ID as PICK_LOCN_HDR_ID", \
	"JNR_WM_PICK_LOCN_HDR___LOCN_ID as LOCN_ID", \
	"JNR_WM_PICK_LOCN_HDR___REPL_LOCN_BRCD as REPL_LOCN_BRCD", \
	"JNR_WM_PICK_LOCN_HDR___PUTWY_TYPE as PUTWY_TYPE", \
	"JNR_WM_PICK_LOCN_HDR___MAX_NBR_OF_SKU as MAX_NBR_OF_SKU", \
	"JNR_WM_PICK_LOCN_HDR___REPL_FLAG as REPL_FLAG", \
	"JNR_WM_PICK_LOCN_HDR___PICK_LOCN_ASSIGN_ZONE as PICK_LOCN_ASSIGN_ZONE", \
	"JNR_WM_PICK_LOCN_HDR___CREATE_DATE_TIME as CREATE_DATE_TIME", \
	"JNR_WM_PICK_LOCN_HDR___MOD_DATE_TIME as MOD_DATE_TIME", \
	"JNR_WM_PICK_LOCN_HDR___USER_ID as USER_ID", \
	"JNR_WM_PICK_LOCN_HDR___REPL_CHECK_DIGIT as REPL_CHECK_DIGIT", \
	"JNR_WM_PICK_LOCN_HDR___MAX_VOL as MAX_VOL", \
	"JNR_WM_PICK_LOCN_HDR___MAX_WT as MAX_WT", \
	"JNR_WM_PICK_LOCN_HDR___REPL_X_COORD as REPL_X_COORD", \
	"JNR_WM_PICK_LOCN_HDR___REPL_Y_COORD as REPL_Y_COORD", \
	"JNR_WM_PICK_LOCN_HDR___REPL_Z_COORD as REPL_Z_COORD", \
	"JNR_WM_PICK_LOCN_HDR___REPL_TRAVEL_AISLE as REPL_TRAVEL_AISLE", \
	"JNR_WM_PICK_LOCN_HDR___REPL_TRAVEL_ZONE as REPL_TRAVEL_ZONE", \
	"JNR_WM_PICK_LOCN_HDR___XCESS_WAVE_NEED_PROC_TYPE as XCESS_WAVE_NEED_PROC_TYPE", \
	"JNR_WM_PICK_LOCN_HDR___PICK_LOCN_ASSIGN_TYPE as PICK_LOCN_ASSIGN_TYPE", \
	"JNR_WM_PICK_LOCN_HDR___SUPPR_PR40_REPL as SUPPR_PR40_REPL", \
	"JNR_WM_PICK_LOCN_HDR___COMB_4050_REPL as COMB_4050_REPL", \
	"JNR_WM_PICK_LOCN_HDR___PICK_TO_LIGHT_FLAG as PICK_TO_LIGHT_FLAG", \
	"JNR_WM_PICK_LOCN_HDR___PICK_TO_LIGHT_REPL_FLAG as PICK_TO_LIGHT_REPL_FLAG", \
	"JNR_WM_PICK_LOCN_HDR___WM_VERSION_ID as WM_VERSION_ID", \
	"JNR_WM_PICK_LOCN_HDR___LOCN_HDR_ID as LOCN_HDR_ID", \
	"JNR_WM_PICK_LOCN_HDR___LOCN_PUTAWAY_LOCK as LOCN_PUTAWAY_LOCK", \
	"JNR_WM_PICK_LOCN_HDR___INVN_LOCK_CODE as INVN_LOCK_CODE", \
	"JNR_WM_PICK_LOCN_HDR___CREATED_DTTM as CREATED_DTTM", \
	"JNR_WM_PICK_LOCN_HDR___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"JNR_WM_PICK_LOCN_HDR___LOAD_TSTMP as LOAD_TSTMP", \
	"JNR_WM_PICK_LOCN_HDR___LOCATION_ID as LOCATION_ID", \
	"JNR_WM_PICK_LOCN_HDR___STORE_NBR as STORE_NBR", \
	"JNR_WM_PICK_LOCN_HDR___i_WM_LOCATION_ID as i_WM_LOCATION_ID", \
	"JNR_WM_PICK_LOCN_HDR___WM_PICK_LOCN_HDR_ID as WM_PICK_LOCN_HDR_ID", \
	"JNR_WM_PICK_LOCN_HDR___WM_LOCN_ID as WM_LOCN_ID", \
	"JNR_WM_PICK_LOCN_HDR___WM_LOCN_HDR_ID as WM_LOCN_HDR_ID", \
	"JNR_WM_PICK_LOCN_HDR___WM_PICK_LOCN_ASSIGN_TYPE as WM_PICK_LOCN_ASSIGN_TYPE", \
	"JNR_WM_PICK_LOCN_HDR___WM_LOCN_PUTAWAY_LOCK as WM_LOCN_PUTAWAY_LOCK", \
	"JNR_WM_PICK_LOCN_HDR___WM_INVN_LOCK_CD as WM_INVN_LOCK_CD", \
	"JNR_WM_PICK_LOCN_HDR___WM_XCESS_WAVE_NEED_PROC_TYPE as WM_XCESS_WAVE_NEED_PROC_TYPE", \
	"JNR_WM_PICK_LOCN_HDR___WM_PUTWY_TYPE as WM_PUTWY_TYPE", \
	"JNR_WM_PICK_LOCN_HDR___WM_PICK_LOCN_ASSIGN_ZONE as WM_PICK_LOCN_ASSIGN_ZONE", \
	"JNR_WM_PICK_LOCN_HDR___i_WM_PICK_TO_LIGHT_FLAG as i_WM_PICK_TO_LIGHT_FLAG", \
	"JNR_WM_PICK_LOCN_HDR___i_WM_PICK_TO_LIGHT_REPL_FLAG as i_WM_PICK_TO_LIGHT_REPL_FLAG", \
	"JNR_WM_PICK_LOCN_HDR___WM_REPL_FLAG as WM_REPL_FLAG", \
	"JNR_WM_PICK_LOCN_HDR___WM_REPL_LOCN_BRCD as WM_REPL_LOCN_BRCD", \
	"JNR_WM_PICK_LOCN_HDR___WM_REPL_TRAVEL_AISLE as WM_REPL_TRAVEL_AISLE", \
	"JNR_WM_PICK_LOCN_HDR___WM_REPL_TRAVEL_ZONE as WM_REPL_TRAVEL_ZONE", \
	"JNR_WM_PICK_LOCN_HDR___WM_SUPPR_PR40_REPL as WM_SUPPR_PR40_REPL", \
	"JNR_WM_PICK_LOCN_HDR___WM_COMB_4050_REPL as WM_COMB_4050_REPL", \
	"JNR_WM_PICK_LOCN_HDR___WM_REPL_CHECK_DIGIT as WM_REPL_CHECK_DIGIT", \
	"JNR_WM_PICK_LOCN_HDR___i_WM_REPL_X_COORD as i_WM_REPL_X_COORD", \
	"JNR_WM_PICK_LOCN_HDR___i_WM_REPL_Y_COORD as i_WM_REPL_Y_COORD", \
	"JNR_WM_PICK_LOCN_HDR___i_WM_REPL_Z_COORD as i_WM_REPL_Z_COORD", \
	"JNR_WM_PICK_LOCN_HDR___i_WM_MAX_NBR_OF_SKU as i_WM_MAX_NBR_OF_SKU", \
	"JNR_WM_PICK_LOCN_HDR___i_WM_MAX_VOL as i_WM_MAX_VOL", \
	"JNR_WM_PICK_LOCN_HDR___i_WM_MAX_WT as i_WM_MAX_WT", \
	"JNR_WM_PICK_LOCN_HDR___WM_USER_ID as WM_USER_ID", \
	"JNR_WM_PICK_LOCN_HDR___i_WM_WM_VERSION_ID as i_WM_WM_VERSION_ID", \
	"JNR_WM_PICK_LOCN_HDR___WM_CREATED_TSTMP as WM_CREATED_TSTMP", \
	"JNR_WM_PICK_LOCN_HDR___WM_LAST_UPDATED_TSTMP as WM_LAST_UPDATED_TSTMP", \
	"JNR_WM_PICK_LOCN_HDR___WM_CREATE_TSTMP as WM_CREATE_TSTMP", \
	"JNR_WM_PICK_LOCN_HDR___WM_MOD_TSTMP as WM_MOD_TSTMP", \
	"JNR_WM_PICK_LOCN_HDR___i_WM_DELETE_FLAG as i_WM_DELETE_FLAG", \
	"JNR_WM_PICK_LOCN_HDR___UPDATE_TSTMP as UPDATE_TSTMP", \
	"JNR_WM_PICK_LOCN_HDR___i_WM_LOAD_TSTMP as i_WM_LOAD_TSTMP")\
    .filter("PICK_LOCN_HDR_ID is Null OR WM_PICK_LOCN_HDR_ID is Null OR (  WM_PICK_LOCN_HDR_ID is NOT Null AND ( COALESCE(CREATE_DATE_TIME, date'1900-01-01') != COALESCE(WM_CREATE_TSTMP, date'1900-01-01') \
             OR COALESCE(MOD_DATE_TIME, date'1900-01-01') != COALESCE(WM_MOD_TSTMP, date'1900-01-01') \
             OR COALESCE(CREATED_DTTM, date'1900-01-01') != COALESCE(WM_CREATED_TSTMP, date'1900-01-01') \
             OR COALESCE(LAST_UPDATED_DTTM, date'1900-01-01') != COALESCE(WM_LAST_UPDATED_TSTMP, date'1900-01-01')))").withColumn("sys_row_id", monotonically_increasing_id())


# COMMAND ----------
# Processing node EXP_UPDATE_VALIDATOR, type EXPRESSION 
# COLUMN COUNT: 72

# for each involved DataFrame, append the dataframe name to each column
FIL_UNCHANGED_RECORDS_temp = FIL_UNCHANGED_RECORDS.toDF(*["FIL_UNCHANGED_RECORDS___" + col for col in FIL_UNCHANGED_RECORDS.columns])\
.withColumn("v_CREATE_DATE_TIME", expr("""IF (CREATE_DATE_TIME IS NULL, TO_DATE ( '01/01/1900' , 'MM/DD/YYYY' ), CREATE_DATE_TIME)""")) \
	.withColumn("v_MOD_DATE_TIME", expr("""IF (MOD_DATE_TIME IS NULL, TO_DATE ( '01/01/1900' , 'MM/DD/YYYY' ), MOD_DATE_TIME)""")) \
	.withColumn("v_CREATED_DTTM", expr("""IF (CREATED_DTTM IS NULL, TO_DATE ( '01/01/1900' , 'MM/DD/YYYY' ), CREATED_DTTM)""")) \
	.withColumn("v_LAST_UPDATED_DTTM", expr("""IF (LAST_UPDATED_DTTM IS NULL, TO_DATE ( '01/01/1900' , 'MM/DD/YYYY' ), LAST_UPDATED_DTTM)""")) \
	.withColumn("v_WM_CREATED_TSTMP", expr("""IF (WM_CREATED_TSTMP IS NULL, TO_DATE ( '01/01/1900' , 'MM/DD/YYYY' ), WM_CREATED_TSTMP)""")) \
	.withColumn("v_WM_LAST_UPDATED_TSTMP", expr("""IF (WM_LAST_UPDATED_TSTMP IS NULL, TO_DATE ( '01/01/1900' , 'MM/DD/YYYY' ), WM_LAST_UPDATED_TSTMP)""")) \
	.withColumn("v_WM_CREATE_TSTMP", expr("""IF (WM_CREATE_TSTMP IS NULL, TO_DATE ( '01/01/1900' , 'MM/DD/YYYY' ), WM_CREATE_TSTMP)""")) \
	.withColumn("v_WM_MOD_TSTMP", expr("""IF (WM_MOD_TSTMP IS NULL, TO_DATE ( '01/01/1900' , 'MM/DD/YYYY' ), WM_MOD_TSTMP)"""))
             
EXP_UPDATE_VALIDATOR = FIL_UNCHANGED_RECORDS_temp.selectExpr( \
	"FIL_UNCHANGED_RECORDS___sys_row_id as sys_row_id", \
	"FIL_UNCHANGED_RECORDS___DC_NBR as DC_NBR", \
	"FIL_UNCHANGED_RECORDS___PICK_LOCN_HDR_ID as PICK_LOCN_HDR_ID", \
	"FIL_UNCHANGED_RECORDS___LOCN_ID as LOCN_ID", \
	"FIL_UNCHANGED_RECORDS___REPL_LOCN_BRCD as REPL_LOCN_BRCD", \
	"FIL_UNCHANGED_RECORDS___PUTWY_TYPE as PUTWY_TYPE", \
	"FIL_UNCHANGED_RECORDS___MAX_NBR_OF_SKU as MAX_NBR_OF_SKU", \
	"DECODE ( LTRIM ( RTRIM ( UPPER ( FIL_UNCHANGED_RECORDS___REPL_FLAG ) ) ) , 'Y','1' , '1','1','0' ) as REPL_FLAG_EXP", \
	"FIL_UNCHANGED_RECORDS___PICK_LOCN_ASSIGN_ZONE as PICK_LOCN_ASSIGN_ZONE", \
	"FIL_UNCHANGED_RECORDS___CREATE_DATE_TIME as CREATE_DATE_TIME", \
	"FIL_UNCHANGED_RECORDS___MOD_DATE_TIME as MOD_DATE_TIME", \
	"FIL_UNCHANGED_RECORDS___USER_ID as USER_ID", \
	"FIL_UNCHANGED_RECORDS___REPL_CHECK_DIGIT as REPL_CHECK_DIGIT", \
	"FIL_UNCHANGED_RECORDS___MAX_VOL as MAX_VOL", \
	"FIL_UNCHANGED_RECORDS___MAX_WT as MAX_WT", \
	"FIL_UNCHANGED_RECORDS___REPL_X_COORD as REPL_X_COORD", \
	"FIL_UNCHANGED_RECORDS___REPL_Y_COORD as REPL_Y_COORD", \
	"FIL_UNCHANGED_RECORDS___REPL_Z_COORD as REPL_Z_COORD", \
	"FIL_UNCHANGED_RECORDS___REPL_TRAVEL_AISLE as REPL_TRAVEL_AISLE", \
	"FIL_UNCHANGED_RECORDS___REPL_TRAVEL_ZONE as REPL_TRAVEL_ZONE", \
	"FIL_UNCHANGED_RECORDS___XCESS_WAVE_NEED_PROC_TYPE as XCESS_WAVE_NEED_PROC_TYPE", \
	"FIL_UNCHANGED_RECORDS___PICK_LOCN_ASSIGN_TYPE as PICK_LOCN_ASSIGN_TYPE", \
	"FIL_UNCHANGED_RECORDS___SUPPR_PR40_REPL as SUPPR_PR40_REPL", \
	"FIL_UNCHANGED_RECORDS___COMB_4050_REPL as COMB_4050_REPL", \
	"DECODE ( LTRIM ( RTRIM ( UPPER ( FIL_UNCHANGED_RECORDS___PICK_TO_LIGHT_FLAG ) ) ) , 'Y','1' , '1','1','0' ) as PICK_TO_LIGHT_FLAG_EXP", \
	"DECODE ( LTRIM ( RTRIM ( UPPER ( FIL_UNCHANGED_RECORDS___PICK_TO_LIGHT_REPL_FLAG ) ) ) , 'Y','1' , '1','1','0' ) as PICK_TO_LIGHT_REPL_FLAG_EXP", \
	"FIL_UNCHANGED_RECORDS___WM_VERSION_ID as WM_VERSION_ID", \
	"FIL_UNCHANGED_RECORDS___LOCN_HDR_ID as LOCN_HDR_ID", \
	"FIL_UNCHANGED_RECORDS___LOCN_PUTAWAY_LOCK as LOCN_PUTAWAY_LOCK", \
	"FIL_UNCHANGED_RECORDS___INVN_LOCK_CODE as INVN_LOCK_CODE", \
	"FIL_UNCHANGED_RECORDS___CREATED_DTTM as CREATED_DTTM", \
	"FIL_UNCHANGED_RECORDS___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"FIL_UNCHANGED_RECORDS___LOAD_TSTMP as LOAD_TSTMP", \
	"FIL_UNCHANGED_RECORDS___LOCATION_ID as LOCATION_ID", \
	"FIL_UNCHANGED_RECORDS___STORE_NBR as STORE_NBR", \
	"FIL_UNCHANGED_RECORDS___i_WM_LOCATION_ID as i_WM_LOCATION_ID", \
	"FIL_UNCHANGED_RECORDS___WM_PICK_LOCN_HDR_ID as WM_PICK_LOCN_HDR_ID", \
	"FIL_UNCHANGED_RECORDS___WM_LOCN_ID as WM_LOCN_ID", \
	"FIL_UNCHANGED_RECORDS___WM_LOCN_HDR_ID as WM_LOCN_HDR_ID", \
	"FIL_UNCHANGED_RECORDS___WM_PICK_LOCN_ASSIGN_TYPE as WM_PICK_LOCN_ASSIGN_TYPE", \
	"FIL_UNCHANGED_RECORDS___WM_LOCN_PUTAWAY_LOCK as WM_LOCN_PUTAWAY_LOCK", \
	"FIL_UNCHANGED_RECORDS___WM_INVN_LOCK_CD as WM_INVN_LOCK_CD", \
	"FIL_UNCHANGED_RECORDS___WM_XCESS_WAVE_NEED_PROC_TYPE as WM_XCESS_WAVE_NEED_PROC_TYPE", \
	"FIL_UNCHANGED_RECORDS___WM_PUTWY_TYPE as WM_PUTWY_TYPE", \
	"FIL_UNCHANGED_RECORDS___WM_PICK_LOCN_ASSIGN_ZONE as WM_PICK_LOCN_ASSIGN_ZONE", \
	"FIL_UNCHANGED_RECORDS___i_WM_PICK_TO_LIGHT_FLAG as i_WM_PICK_TO_LIGHT_FLAG", \
	"FIL_UNCHANGED_RECORDS___i_WM_PICK_TO_LIGHT_REPL_FLAG as i_WM_PICK_TO_LIGHT_REPL_FLAG", \
	"FIL_UNCHANGED_RECORDS___WM_REPL_FLAG as WM_REPL_FLAG", \
	"FIL_UNCHANGED_RECORDS___WM_REPL_LOCN_BRCD as WM_REPL_LOCN_BRCD", \
	"FIL_UNCHANGED_RECORDS___WM_REPL_TRAVEL_AISLE as WM_REPL_TRAVEL_AISLE", \
	"FIL_UNCHANGED_RECORDS___WM_REPL_TRAVEL_ZONE as WM_REPL_TRAVEL_ZONE", \
	"FIL_UNCHANGED_RECORDS___WM_SUPPR_PR40_REPL as WM_SUPPR_PR40_REPL", \
	"FIL_UNCHANGED_RECORDS___WM_COMB_4050_REPL as WM_COMB_4050_REPL", \
	"FIL_UNCHANGED_RECORDS___WM_REPL_CHECK_DIGIT as WM_REPL_CHECK_DIGIT", \
	"FIL_UNCHANGED_RECORDS___i_WM_REPL_X_COORD as i_WM_REPL_X_COORD", \
	"FIL_UNCHANGED_RECORDS___i_WM_REPL_Y_COORD as i_WM_REPL_Y_COORD", \
	"FIL_UNCHANGED_RECORDS___i_WM_REPL_Z_COORD as i_WM_REPL_Z_COORD", \
	"FIL_UNCHANGED_RECORDS___i_WM_MAX_NBR_OF_SKU as i_WM_MAX_NBR_OF_SKU", \
	"FIL_UNCHANGED_RECORDS___i_WM_MAX_VOL as i_WM_MAX_VOL", \
	"FIL_UNCHANGED_RECORDS___i_WM_MAX_WT as i_WM_MAX_WT", \
	"FIL_UNCHANGED_RECORDS___WM_USER_ID as WM_USER_ID", \
	"FIL_UNCHANGED_RECORDS___i_WM_WM_VERSION_ID as i_WM_WM_VERSION_ID", \
	"FIL_UNCHANGED_RECORDS___WM_CREATED_TSTMP as WM_CREATED_TSTMP", \
	"FIL_UNCHANGED_RECORDS___WM_LAST_UPDATED_TSTMP as WM_LAST_UPDATED_TSTMP", \
	"FIL_UNCHANGED_RECORDS___WM_CREATE_TSTMP as WM_CREATE_TSTMP", \
	"FIL_UNCHANGED_RECORDS___WM_MOD_TSTMP as WM_MOD_TSTMP", \
	"FIL_UNCHANGED_RECORDS___UPDATE_TSTMP as UPDATE_TSTMP", \
	"FIL_UNCHANGED_RECORDS___i_WM_LOAD_TSTMP as i_WM_LOAD_TSTMP", \
	"FIL_UNCHANGED_RECORDS___i_WM_DELETE_FLAG as i_WM_DELETE_FLAG", \
	"IF (FIL_UNCHANGED_RECORDS___PICK_LOCN_HDR_ID IS NULL AND FIL_UNCHANGED_RECORDS___WM_PICK_LOCN_HDR_ID IS NOT NULL, 1, 0) as DELETE_FLAG_EXP", \
	"CURRENT_TIMESTAMP as UPDATE_TSTMP_EXP", \
	"IF (FIL_UNCHANGED_RECORDS___i_WM_LOAD_TSTMP IS NULL, CURRENT_TIMESTAMP, FIL_UNCHANGED_RECORDS___i_WM_LOAD_TSTMP) as LOAD_TSTMP_EXP", \
	"IF (FIL_UNCHANGED_RECORDS___PICK_LOCN_HDR_ID IS NOT NULL AND FIL_UNCHANGED_RECORDS___WM_PICK_LOCN_HDR_ID IS NULL, 'INSERT', IF (FIL_UNCHANGED_RECORDS___PICK_LOCN_HDR_ID IS NULL AND FIL_UNCHANGED_RECORDS___WM_PICK_LOCN_HDR_ID IS NOT NULL AND ( FIL_UNCHANGED_RECORDS___v_WM_CREATE_TSTMP >= DATE_ADD(- 14, {Prev_Run_Dt}) OR FIL_UNCHANGED_RECORDS___v_WM_MOD_TSTMP >= DATE_ADD(- 14, {Prev_Run_Dt}) OR FIL_UNCHANGED_RECORDS___v_WM_CREATED_TSTMP >= DATE_ADD(- 14, {Prev_Run_Dt}) OR FIL_UNCHANGED_RECORDS___v_WM_LAST_UPDATED_TSTMP >= DATE_ADD(- 14, {Prev_Run_Dt}) ), 'DELETE', IF (FIL_UNCHANGED_RECORDS___PICK_LOCN_HDR_ID IS NOT NULL AND FIL_UNCHANGED_RECORDS___WM_PICK_LOCN_HDR_ID IS NOT NULL AND ( FIL_UNCHANGED_RECORDS___v_WM_CREATED_TSTMP <> FIL_UNCHANGED_RECORDS___v_CREATED_DTTM OR FIL_UNCHANGED_RECORDS___v_WM_LAST_UPDATED_TSTMP <> FIL_UNCHANGED_RECORDS___v_LAST_UPDATED_DTTM OR FIL_UNCHANGED_RECORDS___v_WM_CREATE_TSTMP <> FIL_UNCHANGED_RECORDS___v_CREATE_DATE_TIME OR FIL_UNCHANGED_RECORDS___v_WM_MOD_TSTMP <> FIL_UNCHANGED_RECORDS___v_MOD_DATE_TIME ), 'UPDATE', NULL))) as o_UPDATE_VALIDATOR" \
)

# COMMAND ----------
# Processing node RTR_DELETE, type ROUTER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 72


# Creating output dataframe for RTR_DELETE, output group DELETE
RTR_DELETE_DELETE = EXP_UPDATE_VALIDATOR.selectExpr( \
	"EXP_UPDATE_VALIDATOR.DC_NBR as DC_NBR", \
	"EXP_UPDATE_VALIDATOR.PICK_LOCN_HDR_ID as PICK_LOCN_HDR_ID", \
	"EXP_UPDATE_VALIDATOR.LOCN_ID as LOCN_ID", \
	"EXP_UPDATE_VALIDATOR.REPL_LOCN_BRCD as REPL_LOCN_BRCD", \
	"EXP_UPDATE_VALIDATOR.PUTWY_TYPE as PUTWY_TYPE", \
	"EXP_UPDATE_VALIDATOR.MAX_NBR_OF_SKU as MAX_NBR_OF_SKU", \
	"EXP_UPDATE_VALIDATOR.REPL_FLAG_EXP as REPL_FLAG", \
	"EXP_UPDATE_VALIDATOR.PICK_LOCN_ASSIGN_ZONE as PICK_LOCN_ASSIGN_ZONE", \
	"EXP_UPDATE_VALIDATOR.CREATE_DATE_TIME as CREATE_DATE_TIME", \
	"EXP_UPDATE_VALIDATOR.MOD_DATE_TIME as MOD_DATE_TIME", \
	"EXP_UPDATE_VALIDATOR.USER_ID as USER_ID", \
	"EXP_UPDATE_VALIDATOR.REPL_CHECK_DIGIT as REPL_CHECK_DIGIT", \
	"EXP_UPDATE_VALIDATOR.MAX_VOL as MAX_VOL", \
	"EXP_UPDATE_VALIDATOR.MAX_WT as MAX_WT", \
	"EXP_UPDATE_VALIDATOR.REPL_X_COORD as REPL_X_COORD", \
	"EXP_UPDATE_VALIDATOR.REPL_Y_COORD as REPL_Y_COORD", \
	"EXP_UPDATE_VALIDATOR.REPL_Z_COORD as REPL_Z_COORD", \
	"EXP_UPDATE_VALIDATOR.REPL_TRAVEL_AISLE as REPL_TRAVEL_AISLE", \
	"EXP_UPDATE_VALIDATOR.REPL_TRAVEL_ZONE as REPL_TRAVEL_ZONE", \
	"EXP_UPDATE_VALIDATOR.XCESS_WAVE_NEED_PROC_TYPE as XCESS_WAVE_NEED_PROC_TYPE", \
	"EXP_UPDATE_VALIDATOR.PICK_LOCN_ASSIGN_TYPE as PICK_LOCN_ASSIGN_TYPE", \
	"EXP_UPDATE_VALIDATOR.SUPPR_PR40_REPL as SUPPR_PR40_REPL", \
	"EXP_UPDATE_VALIDATOR.COMB_4050_REPL as COMB_4050_REPL", \
	"EXP_UPDATE_VALIDATOR.PICK_TO_LIGHT_FLAG_EXP as PICK_TO_LIGHT_FLAG", \
	"EXP_UPDATE_VALIDATOR.PICK_TO_LIGHT_REPL_FLAG_EXP as PICK_TO_LIGHT_REPL_FLAG", \
	"EXP_UPDATE_VALIDATOR.WM_VERSION_ID as WM_VERSION_ID", \
	"EXP_UPDATE_VALIDATOR.LOCN_HDR_ID as LOCN_HDR_ID", \
	"EXP_UPDATE_VALIDATOR.LOCN_PUTAWAY_LOCK as LOCN_PUTAWAY_LOCK", \
	"EXP_UPDATE_VALIDATOR.INVN_LOCK_CODE as INVN_LOCK_CODE", \
	"EXP_UPDATE_VALIDATOR.CREATED_DTTM as CREATED_DTTM", \
	"EXP_UPDATE_VALIDATOR.LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"EXP_UPDATE_VALIDATOR.LOAD_TSTMP as LOAD_TSTMP", \
	"EXP_UPDATE_VALIDATOR.LOCATION_ID as LOCATION_ID", \
	"EXP_UPDATE_VALIDATOR.STORE_NBR as STORE_NBR", \
	"EXP_UPDATE_VALIDATOR.i_WM_LOCATION_ID as i_WM_LOCATION_ID", \
	"EXP_UPDATE_VALIDATOR.WM_PICK_LOCN_HDR_ID as WM_PICK_LOCN_HDR_ID", \
	"EXP_UPDATE_VALIDATOR.WM_LOCN_ID as WM_LOCN_ID", \
	"EXP_UPDATE_VALIDATOR.WM_LOCN_HDR_ID as WM_LOCN_HDR_ID", \
	"EXP_UPDATE_VALIDATOR.WM_PICK_LOCN_ASSIGN_TYPE as WM_PICK_LOCN_ASSIGN_TYPE", \
	"EXP_UPDATE_VALIDATOR.WM_LOCN_PUTAWAY_LOCK as WM_LOCN_PUTAWAY_LOCK", \
	"EXP_UPDATE_VALIDATOR.WM_INVN_LOCK_CD as WM_INVN_LOCK_CD", \
	"EXP_UPDATE_VALIDATOR.WM_XCESS_WAVE_NEED_PROC_TYPE as WM_XCESS_WAVE_NEED_PROC_TYPE", \
	"EXP_UPDATE_VALIDATOR.WM_PUTWY_TYPE as WM_PUTWY_TYPE", \
	"EXP_UPDATE_VALIDATOR.WM_PICK_LOCN_ASSIGN_ZONE as WM_PICK_LOCN_ASSIGN_ZONE", \
	"EXP_UPDATE_VALIDATOR.i_WM_PICK_TO_LIGHT_FLAG as i_WM_PICK_TO_LIGHT_FLAG", \
	"EXP_UPDATE_VALIDATOR.i_WM_PICK_TO_LIGHT_REPL_FLAG as i_WM_PICK_TO_LIGHT_REPL_FLAG", \
	"EXP_UPDATE_VALIDATOR.WM_REPL_FLAG as WM_REPL_FLAG", \
	"EXP_UPDATE_VALIDATOR.WM_REPL_LOCN_BRCD as WM_REPL_LOCN_BRCD", \
	"EXP_UPDATE_VALIDATOR.WM_REPL_TRAVEL_AISLE as WM_REPL_TRAVEL_AISLE", \
	"EXP_UPDATE_VALIDATOR.WM_REPL_TRAVEL_ZONE as WM_REPL_TRAVEL_ZONE", \
	"EXP_UPDATE_VALIDATOR.WM_SUPPR_PR40_REPL as WM_SUPPR_PR40_REPL", \
	"EXP_UPDATE_VALIDATOR.WM_COMB_4050_REPL as WM_COMB_4050_REPL", \
	"EXP_UPDATE_VALIDATOR.WM_REPL_CHECK_DIGIT as WM_REPL_CHECK_DIGIT", \
	"EXP_UPDATE_VALIDATOR.i_WM_REPL_X_COORD as i_WM_REPL_X_COORD", \
	"EXP_UPDATE_VALIDATOR.i_WM_REPL_Y_COORD as i_WM_REPL_Y_COORD", \
	"EXP_UPDATE_VALIDATOR.i_WM_REPL_Z_COORD as i_WM_REPL_Z_COORD", \
	"EXP_UPDATE_VALIDATOR.i_WM_MAX_NBR_OF_SKU as i_WM_MAX_NBR_OF_SKU", \
	"EXP_UPDATE_VALIDATOR.i_WM_MAX_VOL as i_WM_MAX_VOL", \
	"EXP_UPDATE_VALIDATOR.i_WM_MAX_WT as i_WM_MAX_WT", \
	"EXP_UPDATE_VALIDATOR.WM_USER_ID as WM_USER_ID", \
	"EXP_UPDATE_VALIDATOR.i_WM_WM_VERSION_ID as i_WM_WM_VERSION_ID", \
	"EXP_UPDATE_VALIDATOR.WM_CREATED_TSTMP as WM_CREATED_TSTMP", \
	"EXP_UPDATE_VALIDATOR.WM_LAST_UPDATED_TSTMP as WM_LAST_UPDATED_TSTMP", \
	"EXP_UPDATE_VALIDATOR.WM_CREATE_TSTMP as WM_CREATE_TSTMP", \
	"EXP_UPDATE_VALIDATOR.WM_MOD_TSTMP as WM_MOD_TSTMP", \
	"EXP_UPDATE_VALIDATOR.UPDATE_TSTMP as UPDATE_TSTMP", \
	"EXP_UPDATE_VALIDATOR.i_WM_LOAD_TSTMP as i_WM_LOAD_TSTMP", \
	"EXP_UPDATE_VALIDATOR.DELETE_FLAG_EXP as DELETE_FLAG_EXP", \
	"EXP_UPDATE_VALIDATOR.UPDATE_TSTMP_EXP as UPDATE_TSTMP_EXP", \
	"EXP_UPDATE_VALIDATOR.LOAD_TSTMP_EXP as LOAD_TSTMP_EXP", \
	"EXP_UPDATE_VALIDATOR.o_UPDATE_VALIDATOR as o_UPDATE_VALIDATOR", \
	"EXP_UPDATE_VALIDATOR.i_WM_DELETE_FLAG as i_WM_DELETE_FLAG").select(col('sys_row_id'), \
	col('DC_NBR').alias('DC_NBR3'), \
	col('PICK_LOCN_HDR_ID').alias('PICK_LOCN_HDR_ID3'), \
	col('LOCN_ID').alias('LOCN_ID3'), \
	col('REPL_LOCN_BRCD').alias('REPL_LOCN_BRCD3'), \
	col('PUTWY_TYPE').alias('PUTWY_TYPE3'), \
	col('MAX_NBR_OF_SKU').alias('MAX_NBR_OF_SKU3'), \
	col('REPL_FLAG').alias('REPL_FLAG3'), \
	col('PICK_LOCN_ASSIGN_ZONE').alias('PICK_LOCN_ASSIGN_ZONE3'), \
	col('CREATE_DATE_TIME').alias('CREATE_DATE_TIME3'), \
	col('MOD_DATE_TIME').alias('MOD_DATE_TIME3'), \
	col('USER_ID').alias('USER_ID3'), \
	col('REPL_CHECK_DIGIT').alias('REPL_CHECK_DIGIT3'), \
	col('MAX_VOL').alias('MAX_VOL3'), \
	col('MAX_WT').alias('MAX_WT3'), \
	col('REPL_X_COORD').alias('REPL_X_COORD3'), \
	col('REPL_Y_COORD').alias('REPL_Y_COORD3'), \
	col('REPL_Z_COORD').alias('REPL_Z_COORD3'), \
	col('REPL_TRAVEL_AISLE').alias('REPL_TRAVEL_AISLE3'), \
	col('REPL_TRAVEL_ZONE').alias('REPL_TRAVEL_ZONE3'), \
	col('XCESS_WAVE_NEED_PROC_TYPE').alias('XCESS_WAVE_NEED_PROC_TYPE3'), \
	col('PICK_LOCN_ASSIGN_TYPE').alias('PICK_LOCN_ASSIGN_TYPE3'), \
	col('SUPPR_PR40_REPL').alias('SUPPR_PR40_REPL3'), \
	col('COMB_4050_REPL').alias('COMB_4050_REPL3'), \
	col('PICK_TO_LIGHT_FLAG').alias('PICK_TO_LIGHT_FLAG3'), \
	col('PICK_TO_LIGHT_REPL_FLAG').alias('PICK_TO_LIGHT_REPL_FLAG3'), \
	col('WM_VERSION_ID').alias('WM_VERSION_ID3'), \
	col('LOCN_HDR_ID').alias('LOCN_HDR_ID3'), \
	col('LOCN_PUTAWAY_LOCK').alias('LOCN_PUTAWAY_LOCK3'), \
	col('INVN_LOCK_CODE').alias('INVN_LOCK_CODE3'), \
	col('CREATED_DTTM').alias('CREATED_DTTM3'), \
	col('LAST_UPDATED_DTTM').alias('LAST_UPDATED_DTTM3'), \
	col('LOAD_TSTMP').alias('LOAD_TSTMP3'), \
	col('LOCATION_ID').alias('LOCATION_ID3'), \
	col('STORE_NBR').alias('STORE_NBR3'), \
	col('i_WM_LOCATION_ID').alias('i_WM_LOCATION_ID3'), \
	col('WM_PICK_LOCN_HDR_ID').alias('WM_PICK_LOCN_HDR_ID3'), \
	col('WM_LOCN_ID').alias('WM_LOCN_ID3'), \
	col('WM_LOCN_HDR_ID').alias('WM_LOCN_HDR_ID3'), \
	col('WM_PICK_LOCN_ASSIGN_TYPE').alias('WM_PICK_LOCN_ASSIGN_TYPE3'), \
	col('WM_LOCN_PUTAWAY_LOCK').alias('WM_LOCN_PUTAWAY_LOCK3'), \
	col('WM_INVN_LOCK_CD').alias('WM_INVN_LOCK_CD3'), \
	col('WM_XCESS_WAVE_NEED_PROC_TYPE').alias('WM_XCESS_WAVE_NEED_PROC_TYPE3'), \
	col('WM_PUTWY_TYPE').alias('WM_PUTWY_TYPE3'), \
	col('WM_PICK_LOCN_ASSIGN_ZONE').alias('WM_PICK_LOCN_ASSIGN_ZONE3'), \
	col('i_WM_PICK_TO_LIGHT_FLAG').alias('i_WM_PICK_TO_LIGHT_FLAG3'), \
	col('i_WM_PICK_TO_LIGHT_REPL_FLAG').alias('i_WM_PICK_TO_LIGHT_REPL_FLAG3'), \
	col('WM_REPL_FLAG').alias('WM_REPL_FLAG3'), \
	col('WM_REPL_LOCN_BRCD').alias('WM_REPL_LOCN_BRCD3'), \
	col('WM_REPL_TRAVEL_AISLE').alias('WM_REPL_TRAVEL_AISLE3'), \
	col('WM_REPL_TRAVEL_ZONE').alias('WM_REPL_TRAVEL_ZONE3'), \
	col('WM_SUPPR_PR40_REPL').alias('WM_SUPPR_PR40_REPL3'), \
	col('WM_COMB_4050_REPL').alias('WM_COMB_4050_REPL3'), \
	col('WM_REPL_CHECK_DIGIT').alias('WM_REPL_CHECK_DIGIT3'), \
	col('i_WM_REPL_X_COORD').alias('i_WM_REPL_X_COORD3'), \
	col('i_WM_REPL_Y_COORD').alias('i_WM_REPL_Y_COORD3'), \
	col('i_WM_REPL_Z_COORD').alias('i_WM_REPL_Z_COORD3'), \
	col('i_WM_MAX_NBR_OF_SKU').alias('i_WM_MAX_NBR_OF_SKU3'), \
	col('i_WM_MAX_VOL').alias('i_WM_MAX_VOL3'), \
	col('i_WM_MAX_WT').alias('i_WM_MAX_WT3'), \
	col('WM_USER_ID').alias('WM_USER_ID3'), \
	col('i_WM_WM_VERSION_ID').alias('i_WM_WM_VERSION_ID3'), \
	col('WM_CREATED_TSTMP').alias('WM_CREATED_TSTMP3'), \
	col('WM_LAST_UPDATED_TSTMP').alias('WM_LAST_UPDATED_TSTMP3'), \
	col('WM_CREATE_TSTMP').alias('WM_CREATE_TSTMP3'), \
	col('WM_MOD_TSTMP').alias('WM_MOD_TSTMP3'), \
	col('UPDATE_TSTMP').alias('UPDATE_TSTMP3'), \
	col('i_WM_LOAD_TSTMP').alias('i_WM_LOAD_TSTMP3'), \
	col('DELETE_FLAG_EXP').alias('DELETE_FLAG_EXP3'), \
	col('UPDATE_TSTMP_EXP').alias('UPDATE_TSTMP_EXP3'), \
	col('LOAD_TSTMP_EXP').alias('LOAD_TSTMP_EXP3'), \
	col('o_UPDATE_VALIDATOR').alias('o_UPDATE_VALIDATOR3'), \
	col('i_WM_DELETE_FLAG').alias('i_WM_DELETE_FLAG3')).filter("o_UPDATE_VALIDATOR = 'DELETE'")

# Creating output dataframe for RTR_DELETE, output group INSERT_UPDATE
RTR_DELETE_INSERT_UPDATE = EXP_UPDATE_VALIDATOR.selectExpr( \
	"EXP_UPDATE_VALIDATOR.DC_NBR as DC_NBR", \
	"EXP_UPDATE_VALIDATOR.PICK_LOCN_HDR_ID as PICK_LOCN_HDR_ID", \
	"EXP_UPDATE_VALIDATOR.LOCN_ID as LOCN_ID", \
	"EXP_UPDATE_VALIDATOR.REPL_LOCN_BRCD as REPL_LOCN_BRCD", \
	"EXP_UPDATE_VALIDATOR.PUTWY_TYPE as PUTWY_TYPE", \
	"EXP_UPDATE_VALIDATOR.MAX_NBR_OF_SKU as MAX_NBR_OF_SKU", \
	"EXP_UPDATE_VALIDATOR.REPL_FLAG_EXP as REPL_FLAG", \
	"EXP_UPDATE_VALIDATOR.PICK_LOCN_ASSIGN_ZONE as PICK_LOCN_ASSIGN_ZONE", \
	"EXP_UPDATE_VALIDATOR.CREATE_DATE_TIME as CREATE_DATE_TIME", \
	"EXP_UPDATE_VALIDATOR.MOD_DATE_TIME as MOD_DATE_TIME", \
	"EXP_UPDATE_VALIDATOR.USER_ID as USER_ID", \
	"EXP_UPDATE_VALIDATOR.REPL_CHECK_DIGIT as REPL_CHECK_DIGIT", \
	"EXP_UPDATE_VALIDATOR.MAX_VOL as MAX_VOL", \
	"EXP_UPDATE_VALIDATOR.MAX_WT as MAX_WT", \
	"EXP_UPDATE_VALIDATOR.REPL_X_COORD as REPL_X_COORD", \
	"EXP_UPDATE_VALIDATOR.REPL_Y_COORD as REPL_Y_COORD", \
	"EXP_UPDATE_VALIDATOR.REPL_Z_COORD as REPL_Z_COORD", \
	"EXP_UPDATE_VALIDATOR.REPL_TRAVEL_AISLE as REPL_TRAVEL_AISLE", \
	"EXP_UPDATE_VALIDATOR.REPL_TRAVEL_ZONE as REPL_TRAVEL_ZONE", \
	"EXP_UPDATE_VALIDATOR.XCESS_WAVE_NEED_PROC_TYPE as XCESS_WAVE_NEED_PROC_TYPE", \
	"EXP_UPDATE_VALIDATOR.PICK_LOCN_ASSIGN_TYPE as PICK_LOCN_ASSIGN_TYPE", \
	"EXP_UPDATE_VALIDATOR.SUPPR_PR40_REPL as SUPPR_PR40_REPL", \
	"EXP_UPDATE_VALIDATOR.COMB_4050_REPL as COMB_4050_REPL", \
	"EXP_UPDATE_VALIDATOR.PICK_TO_LIGHT_FLAG_EXP as PICK_TO_LIGHT_FLAG", \
	"EXP_UPDATE_VALIDATOR.PICK_TO_LIGHT_REPL_FLAG_EXP as PICK_TO_LIGHT_REPL_FLAG", \
	"EXP_UPDATE_VALIDATOR.WM_VERSION_ID as WM_VERSION_ID", \
	"EXP_UPDATE_VALIDATOR.LOCN_HDR_ID as LOCN_HDR_ID", \
	"EXP_UPDATE_VALIDATOR.LOCN_PUTAWAY_LOCK as LOCN_PUTAWAY_LOCK", \
	"EXP_UPDATE_VALIDATOR.INVN_LOCK_CODE as INVN_LOCK_CODE", \
	"EXP_UPDATE_VALIDATOR.CREATED_DTTM as CREATED_DTTM", \
	"EXP_UPDATE_VALIDATOR.LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"EXP_UPDATE_VALIDATOR.LOAD_TSTMP as LOAD_TSTMP", \
	"EXP_UPDATE_VALIDATOR.LOCATION_ID as LOCATION_ID", \
	"EXP_UPDATE_VALIDATOR.STORE_NBR as STORE_NBR", \
	"EXP_UPDATE_VALIDATOR.i_WM_LOCATION_ID as i_WM_LOCATION_ID", \
	"EXP_UPDATE_VALIDATOR.WM_PICK_LOCN_HDR_ID as WM_PICK_LOCN_HDR_ID", \
	"EXP_UPDATE_VALIDATOR.WM_LOCN_ID as WM_LOCN_ID", \
	"EXP_UPDATE_VALIDATOR.WM_LOCN_HDR_ID as WM_LOCN_HDR_ID", \
	"EXP_UPDATE_VALIDATOR.WM_PICK_LOCN_ASSIGN_TYPE as WM_PICK_LOCN_ASSIGN_TYPE", \
	"EXP_UPDATE_VALIDATOR.WM_LOCN_PUTAWAY_LOCK as WM_LOCN_PUTAWAY_LOCK", \
	"EXP_UPDATE_VALIDATOR.WM_INVN_LOCK_CD as WM_INVN_LOCK_CD", \
	"EXP_UPDATE_VALIDATOR.WM_XCESS_WAVE_NEED_PROC_TYPE as WM_XCESS_WAVE_NEED_PROC_TYPE", \
	"EXP_UPDATE_VALIDATOR.WM_PUTWY_TYPE as WM_PUTWY_TYPE", \
	"EXP_UPDATE_VALIDATOR.WM_PICK_LOCN_ASSIGN_ZONE as WM_PICK_LOCN_ASSIGN_ZONE", \
	"EXP_UPDATE_VALIDATOR.i_WM_PICK_TO_LIGHT_FLAG as i_WM_PICK_TO_LIGHT_FLAG", \
	"EXP_UPDATE_VALIDATOR.i_WM_PICK_TO_LIGHT_REPL_FLAG as i_WM_PICK_TO_LIGHT_REPL_FLAG", \
	"EXP_UPDATE_VALIDATOR.WM_REPL_FLAG as WM_REPL_FLAG", \
	"EXP_UPDATE_VALIDATOR.WM_REPL_LOCN_BRCD as WM_REPL_LOCN_BRCD", \
	"EXP_UPDATE_VALIDATOR.WM_REPL_TRAVEL_AISLE as WM_REPL_TRAVEL_AISLE", \
	"EXP_UPDATE_VALIDATOR.WM_REPL_TRAVEL_ZONE as WM_REPL_TRAVEL_ZONE", \
	"EXP_UPDATE_VALIDATOR.WM_SUPPR_PR40_REPL as WM_SUPPR_PR40_REPL", \
	"EXP_UPDATE_VALIDATOR.WM_COMB_4050_REPL as WM_COMB_4050_REPL", \
	"EXP_UPDATE_VALIDATOR.WM_REPL_CHECK_DIGIT as WM_REPL_CHECK_DIGIT", \
	"EXP_UPDATE_VALIDATOR.i_WM_REPL_X_COORD as i_WM_REPL_X_COORD", \
	"EXP_UPDATE_VALIDATOR.i_WM_REPL_Y_COORD as i_WM_REPL_Y_COORD", \
	"EXP_UPDATE_VALIDATOR.i_WM_REPL_Z_COORD as i_WM_REPL_Z_COORD", \
	"EXP_UPDATE_VALIDATOR.i_WM_MAX_NBR_OF_SKU as i_WM_MAX_NBR_OF_SKU", \
	"EXP_UPDATE_VALIDATOR.i_WM_MAX_VOL as i_WM_MAX_VOL", \
	"EXP_UPDATE_VALIDATOR.i_WM_MAX_WT as i_WM_MAX_WT", \
	"EXP_UPDATE_VALIDATOR.WM_USER_ID as WM_USER_ID", \
	"EXP_UPDATE_VALIDATOR.i_WM_WM_VERSION_ID as i_WM_WM_VERSION_ID", \
	"EXP_UPDATE_VALIDATOR.WM_CREATED_TSTMP as WM_CREATED_TSTMP", \
	"EXP_UPDATE_VALIDATOR.WM_LAST_UPDATED_TSTMP as WM_LAST_UPDATED_TSTMP", \
	"EXP_UPDATE_VALIDATOR.WM_CREATE_TSTMP as WM_CREATE_TSTMP", \
	"EXP_UPDATE_VALIDATOR.WM_MOD_TSTMP as WM_MOD_TSTMP", \
	"EXP_UPDATE_VALIDATOR.UPDATE_TSTMP as UPDATE_TSTMP", \
	"EXP_UPDATE_VALIDATOR.i_WM_LOAD_TSTMP as i_WM_LOAD_TSTMP", \
	"EXP_UPDATE_VALIDATOR.DELETE_FLAG_EXP as DELETE_FLAG_EXP", \
	"EXP_UPDATE_VALIDATOR.UPDATE_TSTMP_EXP as UPDATE_TSTMP_EXP", \
	"EXP_UPDATE_VALIDATOR.LOAD_TSTMP_EXP as LOAD_TSTMP_EXP", \
	"EXP_UPDATE_VALIDATOR.o_UPDATE_VALIDATOR as o_UPDATE_VALIDATOR", \
	"EXP_UPDATE_VALIDATOR.i_WM_DELETE_FLAG as i_WM_DELETE_FLAG").select(col('sys_row_id'), \
	col('DC_NBR').alias('DC_NBR1'), \
	col('PICK_LOCN_HDR_ID').alias('PICK_LOCN_HDR_ID1'), \
	col('LOCN_ID').alias('LOCN_ID1'), \
	col('REPL_LOCN_BRCD').alias('REPL_LOCN_BRCD1'), \
	col('PUTWY_TYPE').alias('PUTWY_TYPE1'), \
	col('MAX_NBR_OF_SKU').alias('MAX_NBR_OF_SKU1'), \
	col('REPL_FLAG').alias('REPL_FLAG1'), \
	col('PICK_LOCN_ASSIGN_ZONE').alias('PICK_LOCN_ASSIGN_ZONE1'), \
	col('CREATE_DATE_TIME').alias('CREATE_DATE_TIME1'), \
	col('MOD_DATE_TIME').alias('MOD_DATE_TIME1'), \
	col('USER_ID').alias('USER_ID1'), \
	col('REPL_CHECK_DIGIT').alias('REPL_CHECK_DIGIT1'), \
	col('MAX_VOL').alias('MAX_VOL1'), \
	col('MAX_WT').alias('MAX_WT1'), \
	col('REPL_X_COORD').alias('REPL_X_COORD1'), \
	col('REPL_Y_COORD').alias('REPL_Y_COORD1'), \
	col('REPL_Z_COORD').alias('REPL_Z_COORD1'), \
	col('REPL_TRAVEL_AISLE').alias('REPL_TRAVEL_AISLE1'), \
	col('REPL_TRAVEL_ZONE').alias('REPL_TRAVEL_ZONE1'), \
	col('XCESS_WAVE_NEED_PROC_TYPE').alias('XCESS_WAVE_NEED_PROC_TYPE1'), \
	col('PICK_LOCN_ASSIGN_TYPE').alias('PICK_LOCN_ASSIGN_TYPE1'), \
	col('SUPPR_PR40_REPL').alias('SUPPR_PR40_REPL1'), \
	col('COMB_4050_REPL').alias('COMB_4050_REPL1'), \
	col('PICK_TO_LIGHT_FLAG').alias('PICK_TO_LIGHT_FLAG1'), \
	col('PICK_TO_LIGHT_REPL_FLAG').alias('PICK_TO_LIGHT_REPL_FLAG1'), \
	col('WM_VERSION_ID').alias('WM_VERSION_ID1'), \
	col('LOCN_HDR_ID').alias('LOCN_HDR_ID1'), \
	col('LOCN_PUTAWAY_LOCK').alias('LOCN_PUTAWAY_LOCK1'), \
	col('INVN_LOCK_CODE').alias('INVN_LOCK_CODE1'), \
	col('CREATED_DTTM').alias('CREATED_DTTM1'), \
	col('LAST_UPDATED_DTTM').alias('LAST_UPDATED_DTTM1'), \
	col('LOAD_TSTMP').alias('LOAD_TSTMP1'), \
	col('LOCATION_ID').alias('LOCATION_ID1'), \
	col('STORE_NBR').alias('STORE_NBR1'), \
	col('i_WM_LOCATION_ID').alias('i_WM_LOCATION_ID1'), \
	col('WM_PICK_LOCN_HDR_ID').alias('WM_PICK_LOCN_HDR_ID1'), \
	col('WM_LOCN_ID').alias('WM_LOCN_ID1'), \
	col('WM_LOCN_HDR_ID').alias('WM_LOCN_HDR_ID1'), \
	col('WM_PICK_LOCN_ASSIGN_TYPE').alias('WM_PICK_LOCN_ASSIGN_TYPE1'), \
	col('WM_LOCN_PUTAWAY_LOCK').alias('WM_LOCN_PUTAWAY_LOCK1'), \
	col('WM_INVN_LOCK_CD').alias('WM_INVN_LOCK_CD1'), \
	col('WM_XCESS_WAVE_NEED_PROC_TYPE').alias('WM_XCESS_WAVE_NEED_PROC_TYPE1'), \
	col('WM_PUTWY_TYPE').alias('WM_PUTWY_TYPE1'), \
	col('WM_PICK_LOCN_ASSIGN_ZONE').alias('WM_PICK_LOCN_ASSIGN_ZONE1'), \
	col('i_WM_PICK_TO_LIGHT_FLAG').alias('i_WM_PICK_TO_LIGHT_FLAG1'), \
	col('i_WM_PICK_TO_LIGHT_REPL_FLAG').alias('i_WM_PICK_TO_LIGHT_REPL_FLAG1'), \
	col('WM_REPL_FLAG').alias('WM_REPL_FLAG1'), \
	col('WM_REPL_LOCN_BRCD').alias('WM_REPL_LOCN_BRCD1'), \
	col('WM_REPL_TRAVEL_AISLE').alias('WM_REPL_TRAVEL_AISLE1'), \
	col('WM_REPL_TRAVEL_ZONE').alias('WM_REPL_TRAVEL_ZONE1'), \
	col('WM_SUPPR_PR40_REPL').alias('WM_SUPPR_PR40_REPL1'), \
	col('WM_COMB_4050_REPL').alias('WM_COMB_4050_REPL1'), \
	col('WM_REPL_CHECK_DIGIT').alias('WM_REPL_CHECK_DIGIT1'), \
	col('i_WM_REPL_X_COORD').alias('i_WM_REPL_X_COORD1'), \
	col('i_WM_REPL_Y_COORD').alias('i_WM_REPL_Y_COORD1'), \
	col('i_WM_REPL_Z_COORD').alias('i_WM_REPL_Z_COORD1'), \
	col('i_WM_MAX_NBR_OF_SKU').alias('i_WM_MAX_NBR_OF_SKU1'), \
	col('i_WM_MAX_VOL').alias('i_WM_MAX_VOL1'), \
	col('i_WM_MAX_WT').alias('i_WM_MAX_WT1'), \
	col('WM_USER_ID').alias('WM_USER_ID1'), \
	col('i_WM_WM_VERSION_ID').alias('i_WM_WM_VERSION_ID1'), \
	col('WM_CREATED_TSTMP').alias('WM_CREATED_TSTMP1'), \
	col('WM_LAST_UPDATED_TSTMP').alias('WM_LAST_UPDATED_TSTMP1'), \
	col('WM_CREATE_TSTMP').alias('WM_CREATE_TSTMP1'), \
	col('WM_MOD_TSTMP').alias('WM_MOD_TSTMP1'), \
	col('UPDATE_TSTMP').alias('UPDATE_TSTMP1'), \
	col('i_WM_LOAD_TSTMP').alias('i_WM_LOAD_TSTMP1'), \
	col('DELETE_FLAG_EXP').alias('DELETE_FLAG_EXP1'), \
	col('UPDATE_TSTMP_EXP').alias('UPDATE_TSTMP_EXP1'), \
	col('LOAD_TSTMP_EXP').alias('LOAD_TSTMP_EXP1'), \
	col('o_UPDATE_VALIDATOR').alias('o_UPDATE_VALIDATOR1'), \
	col('i_WM_DELETE_FLAG').alias('i_WM_DELETE_FLAG1')).filter("o_UPDATE_VALIDATOR = 'INSERT' OR o_UPDATE_VALIDATOR = 'UPDATE'")


# COMMAND ----------
# Processing node UPD_DELETE, type UPDATE_STRATEGY 
# COLUMN COUNT: 4

# for each involved DataFrame, append the dataframe name to each column
RTR_DELETE_DELETE_temp = RTR_DELETE_DELETE.toDF(*["RTR_DELETE_DELETE___" + col for col in RTR_DELETE_DELETE.columns])

UPD_DELETE = RTR_DELETE_DELETE_temp.selectExpr( \
	"RTR_DELETE_DELETE___i_WM_LOCATION_ID3 as i_WM_LOCATION_ID3", \
	"RTR_DELETE_DELETE___WM_PICK_LOCN_HDR_ID3 as WM_PICK_LOCN_HDR_ID3", \
	"RTR_DELETE_DELETE___DELETE_FLAG_EXP3 as DELETE_FLAG_EXP3", \
	"RTR_DELETE_DELETE___UPDATE_TSTMP_EXP3 as UPDATE_TSTMP_EXP3") \
	.withColumn('pyspark_data_action', lit(1))

# COMMAND ----------
# Processing node Shortcut_to_WM_PICK_LOCN_HDR2, type TARGET 
# COLUMN COUNT: 34


Shortcut_to_WM_PICK_LOCN_HDR2 = UPD_DELETE.selectExpr( \
	"CAST(i_WM_LOCATION_ID3 AS BIGINT) as LOCATION_ID", \
	"CAST(WM_PICK_LOCN_HDR_ID3 AS BIGINT) as WM_PICK_LOCN_HDR_ID", \
	"CAST(lit(None) AS STRING) as WM_LOCN_ID", \
	"CAST(lit(None) AS BIGINT) as WM_LOCN_HDR_ID", \
	"CAST(lit(None) AS STRING) as WM_PICK_LOCN_ASSIGN_TYPE", \
	"CAST(lit(None) AS STRING) as WM_LOCN_PUTAWAY_LOCK", \
	"CAST(lit(None) AS STRING) as WM_INVN_LOCK_CD", \
	"CAST(lit(None) AS BIGINT) as WM_XCESS_WAVE_NEED_PROC_TYPE", \
	"CAST(lit(None) AS STRING) as WM_PUTWY_TYPE", \
	"CAST(lit(None) AS STRING) as WM_PICK_LOCN_ASSIGN_ZONE", \
	"CAST(lit(None) AS BIGINT) as PICK_TO_LIGHT_FLAG", \
	"CAST(lit(None) AS BIGINT) as PICK_TO_LIGHT_REPL_FLAG", \
	"CAST(lit(None) AS BIGINT) as WM_REPL_FLAG", \
	"CAST(lit(None) AS STRING) as WM_REPL_LOCN_BRCD", \
	"CAST(lit(None) AS STRING) as WM_REPL_TRAVEL_AISLE", \
	"CAST(lit(None) AS STRING) as WM_REPL_TRAVEL_ZONE", \
	"CAST(lit(None) AS BIGINT) as WM_SUPPR_PR40_REPL", \
	"CAST(lit(None) AS BIGINT) as WM_COMB_4050_REPL", \
	"CAST(lit(None) AS STRING) as WM_REPL_CHECK_DIGIT", \
	"CAST(lit(None) AS BIGINT) as REPL_X_COORD", \
	"CAST(lit(None) AS BIGINT) as REPL_Y_COORD", \
	"CAST(lit(None) AS BIGINT) as REPL_Z_COORD", \
	"CAST(lit(None) AS BIGINT) as MAX_NBR_OF_SKU", \
	"CAST(lit(None) AS BIGINT) as MAX_VOL", \
	"CAST(lit(None) AS BIGINT) as MAX_WT", \
	"CAST(lit(None) AS STRING) as WM_USER_ID", \
	"CAST(lit(None) AS BIGINT) as WM_VERSION_ID", \
	"CAST(lit(None) AS TIMESTAMP) as WM_CREATED_TSTMP", \
	"CAST(lit(None) AS TIMESTAMP) as WM_LAST_UPDATED_TSTMP", \
	"CAST(lit(None) AS TIMESTAMP) as WM_CREATE_TSTMP", \
	"CAST(lit(None) AS TIMESTAMP) as WM_MOD_TSTMP", \
	"CAST(DELETE_FLAG_EXP3 AS BIGINT) as DELETE_FLAG", \
	"CAST(UPDATE_TSTMP_EXP3 AS TIMESTAMP) as UPDATE_TSTMP", \
	"CAST(lit(None) AS TIMESTAMP) as LOAD_TSTMP" \
)
Shortcut_to_WM_PICK_LOCN_HDR2.write.saveAsTable(f'{raw}.WM_PICK_LOCN_HDR')

# COMMAND ----------
# Processing node UPD_INSERT_UPDATE, type UPDATE_STRATEGY . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 35

# for each involved DataFrame, append the dataframe name to each column
RTR_DELETE_INSERT_UPDATE_temp = RTR_DELETE_INSERT_UPDATE.toDF(*["RTR_DELETE_INSERT_UPDATE___" + col for col in RTR_DELETE_INSERT_UPDATE.columns])

UPD_INSERT_UPDATE = RTR_DELETE_INSERT_UPDATE_temp.selectExpr( \
	"RTR_DELETE_INSERT_UPDATE___LOCATION_ID1 as LOCATION_ID1", \
	"RTR_DELETE_INSERT_UPDATE___PICK_LOCN_HDR_ID1 as PICK_LOCN_HDR_ID1", \
	"RTR_DELETE_INSERT_UPDATE___LOCN_ID1 as LOCN_ID1", \
	"RTR_DELETE_INSERT_UPDATE___LOCN_HDR_ID1 as LOCN_HDR_ID1", \
	"RTR_DELETE_INSERT_UPDATE___PICK_LOCN_ASSIGN_TYPE1 as PICK_LOCN_ASSIGN_TYPE1", \
	"RTR_DELETE_INSERT_UPDATE___LOCN_PUTAWAY_LOCK1 as LOCN_PUTAWAY_LOCK1", \
	"RTR_DELETE_INSERT_UPDATE___INVN_LOCK_CODE1 as INVN_LOCK_CODE1", \
	"RTR_DELETE_INSERT_UPDATE___XCESS_WAVE_NEED_PROC_TYPE1 as XCESS_WAVE_NEED_PROC_TYPE1", \
	"RTR_DELETE_INSERT_UPDATE___PUTWY_TYPE1 as PUTWY_TYPE1", \
	"RTR_DELETE_INSERT_UPDATE___PICK_LOCN_ASSIGN_ZONE1 as PICK_LOCN_ASSIGN_ZONE1", \
	"RTR_DELETE_INSERT_UPDATE___PICK_TO_LIGHT_FLAG1 as PICK_TO_LIGHT_FLAG1", \
	"RTR_DELETE_INSERT_UPDATE___PICK_TO_LIGHT_REPL_FLAG1 as PICK_TO_LIGHT_REPL_FLAG1", \
	"RTR_DELETE_INSERT_UPDATE___REPL_FLAG1 as REPL_FLAG1", \
	"RTR_DELETE_INSERT_UPDATE___REPL_LOCN_BRCD1 as REPL_LOCN_BRCD1", \
	"RTR_DELETE_INSERT_UPDATE___REPL_TRAVEL_AISLE1 as REPL_TRAVEL_AISLE1", \
	"RTR_DELETE_INSERT_UPDATE___REPL_TRAVEL_ZONE1 as REPL_TRAVEL_ZONE1", \
	"RTR_DELETE_INSERT_UPDATE___SUPPR_PR40_REPL1 as SUPPR_PR40_REPL1", \
	"RTR_DELETE_INSERT_UPDATE___COMB_4050_REPL1 as COMB_4050_REPL1", \
	"RTR_DELETE_INSERT_UPDATE___REPL_CHECK_DIGIT1 as REPL_CHECK_DIGIT1", \
	"RTR_DELETE_INSERT_UPDATE___REPL_X_COORD1 as REPL_X_COORD1", \
	"RTR_DELETE_INSERT_UPDATE___REPL_Y_COORD1 as REPL_Y_COORD1", \
	"RTR_DELETE_INSERT_UPDATE___REPL_Z_COORD1 as REPL_Z_COORD1", \
	"RTR_DELETE_INSERT_UPDATE___MAX_NBR_OF_SKU1 as MAX_NBR_OF_SKU1", \
	"RTR_DELETE_INSERT_UPDATE___MAX_VOL1 as MAX_VOL1", \
	"RTR_DELETE_INSERT_UPDATE___MAX_WT1 as MAX_WT1", \
	"RTR_DELETE_INSERT_UPDATE___USER_ID1 as USER_ID1", \
	"RTR_DELETE_INSERT_UPDATE___WM_VERSION_ID1 as WM_VERSION_ID1", \
	"RTR_DELETE_INSERT_UPDATE___CREATED_DTTM1 as CREATED_DTTM1", \
	"RTR_DELETE_INSERT_UPDATE___LAST_UPDATED_DTTM1 as LAST_UPDATED_DTTM1", \
	"RTR_DELETE_INSERT_UPDATE___CREATE_DATE_TIME1 as CREATE_DATE_TIME1", \
	"RTR_DELETE_INSERT_UPDATE___MOD_DATE_TIME1 as MOD_DATE_TIME1", \
	"RTR_DELETE_INSERT_UPDATE___DELETE_FLAG_EXP1 as DELETE_FLAG_EXP", \
	"RTR_DELETE_INSERT_UPDATE___UPDATE_TSTMP_EXP1 as UPDATE_TSTMP_EXP1", \
	"RTR_DELETE_INSERT_UPDATE___LOAD_TSTMP_EXP1 as LOAD_TSTMP_EXP1", \
	"RTR_DELETE_INSERT_UPDATE___o_UPDATE_VALIDATOR1 as o_UPDATE_VALIDATOR1") \
	.withColumn('pyspark_data_action', when(RTR_DELETE_INSERT_UPDATE.o_UPDATE_VALIDATOR1 ==(lit('INSERT')) , lit(0)) .when(RTR_DELETE_INSERT_UPDATE.o_UPDATE_VALIDATOR1 ==(lit('UPDATE')) , lit(1)))

# COMMAND ----------
# Processing node Shortcut_to_WM_PICK_LOCN_HDR3, type TARGET 
# COLUMN COUNT: 34

try:
  primary_key = """source.LOCATION_ID = target.LOCATION_ID AND source.WM_PICK_LOCN_HDR_ID = target.WM_PICK_LOCN_HDR_ID"""
  refined_perf_table = "WM_PICK_LOCN_HDR"
  executeMerge(UPD_INSERT_UPDATE, refined_perf_table, primary_key)
  logger.info(f"Merge with {refined_perf_table} completed]")
  logPrevRunDt("WM_PICK_LOCN_HDR", "WM_PICK_LOCN_HDR", "Completed", "N/A", f"{raw}.log_run_details")
except Exception as e:
  logPrevRunDt("WM_PICK_LOCN_HDR", "WM_PICK_LOCN_HDR","Failed",str(e), f"{raw}.log_run_details", )
  raise e
	