#Code converted on 2023-06-22 11:02:33
import os
import argparse
from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.types import *
from datetime import datetime
from pyspark.dbutils import DBUtils
from Datalake.utils.genericUtilities import *
from Datalake.utils.configs import *
from Datalake.utils.mergeUtils import *
from Datalake.utils.logger import *
# COMMAND ----------

parser = argparse.ArgumentParser()
spark = SparkSession.getActiveSession()
dbutils = DBUtils(spark)

parser.add_argument('env', type=str, help='Env Variable')
# args = parser.parse_args()
# env = args.env
env = 'dev'

if env is None or env == '':
    raise ValueError('env is not set')

refine = getEnvPrefix(env) + 'refine'
raw = getEnvPrefix(env) + 'raw'
legacy = getEnvPrefix(env) + 'legacy'

# Set global variables
starttime = datetime.now() #start timestamp of the scriptraw_perf_table = f"{raw}.WM_LABOR_ACTIVITY_PRE"
refined_perf_table = f"{refine}.WM_LABOR_ACTIVITY"
site_profile_table = f"{legacy}.SITE_PROFILE"

Prev_Run_Dt=genPrevRunDt(refined_perf_table.split(".")[1], refine,raw)
Del_Logic=' -- ' #args.Del_Logic

# COMMAND ----------
# Processing node SQ_Shortcut_to_WM_LABOR_ACTIVITY_PRE, type SOURCE 
# COLUMN COUNT: 20

SQ_Shortcut_to_WM_LABOR_ACTIVITY_PRE = spark.sql(f"""SELECT
DC_NBR,
LABOR_ACTIVITY_ID,
NAME,
DESCRIPTION,
AIL_ACT,
ACT_TYPE,
CREATED_SOURCE_TYPE,
CREATED_SOURCE,
CREATED_DTTM,
LAST_UPDATED_SOURCE_TYPE,
LAST_UPDATED_SOURCE,
LAST_UPDATED_DTTM,
HIBERNATE_VERSION,
PROMPT_LOCN,
DISPL_EPP,
INCLD_TRVL,
CRIT_RULE_TYPE,
PERMISSION_ID,
COMPANY_ID,
LOAD_TSTMP
FROM {raw_perf_table}""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node EXPTRANS, type EXPRESSION 
# COLUMN COUNT: 20

# for each involved DataFrame, append the dataframe name to each column
SQ_Shortcut_to_WM_LABOR_ACTIVITY_PRE_temp = SQ_Shortcut_to_WM_LABOR_ACTIVITY_PRE.toDF(*["SQ_Shortcut_to_WM_LABOR_ACTIVITY_PRE___" + col for col in SQ_Shortcut_to_WM_LABOR_ACTIVITY_PRE.columns])

EXPTRANS = SQ_Shortcut_to_WM_LABOR_ACTIVITY_PRE_temp.selectExpr( \
	"SQ_Shortcut_to_WM_LABOR_ACTIVITY_PRE___sys_row_id as sys_row_id", \
	"cast(SQ_Shortcut_to_WM_LABOR_ACTIVITY_PRE___DC_NBR as int) as o_DC_NBR", \
	"SQ_Shortcut_to_WM_LABOR_ACTIVITY_PRE___LABOR_ACTIVITY_ID as LABOR_ACTIVITY_ID", \
	"SQ_Shortcut_to_WM_LABOR_ACTIVITY_PRE___NAME as NAME", \
	"SQ_Shortcut_to_WM_LABOR_ACTIVITY_PRE___DESCRIPTION as DESCRIPTION", \
	"SQ_Shortcut_to_WM_LABOR_ACTIVITY_PRE___AIL_ACT as AIL_ACT", \
	"SQ_Shortcut_to_WM_LABOR_ACTIVITY_PRE___ACT_TYPE as ACT_TYPE", \
	"SQ_Shortcut_to_WM_LABOR_ACTIVITY_PRE___CREATED_SOURCE_TYPE as CREATED_SOURCE_TYPE", \
	"SQ_Shortcut_to_WM_LABOR_ACTIVITY_PRE___CREATED_SOURCE as CREATED_SOURCE", \
	"SQ_Shortcut_to_WM_LABOR_ACTIVITY_PRE___CREATED_DTTM as CREATED_DTTM", \
	"SQ_Shortcut_to_WM_LABOR_ACTIVITY_PRE___LAST_UPDATED_SOURCE_TYPE as LAST_UPDATED_SOURCE_TYPE", \
	"SQ_Shortcut_to_WM_LABOR_ACTIVITY_PRE___LAST_UPDATED_SOURCE as LAST_UPDATED_SOURCE", \
	"SQ_Shortcut_to_WM_LABOR_ACTIVITY_PRE___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"SQ_Shortcut_to_WM_LABOR_ACTIVITY_PRE___HIBERNATE_VERSION as HIBERNATE_VERSION", \
	"SQ_Shortcut_to_WM_LABOR_ACTIVITY_PRE___PROMPT_LOCN as PROMPT_LOCN", \
	"SQ_Shortcut_to_WM_LABOR_ACTIVITY_PRE___DISPL_EPP as DISPL_EPP", \
	"SQ_Shortcut_to_WM_LABOR_ACTIVITY_PRE___INCLD_TRVL as INCLD_TRVL", \
	"SQ_Shortcut_to_WM_LABOR_ACTIVITY_PRE___CRIT_RULE_TYPE as CRIT_RULE_TYPE", \
	"SQ_Shortcut_to_WM_LABOR_ACTIVITY_PRE___PERMISSION_ID as PERMISSION_ID", \
	"SQ_Shortcut_to_WM_LABOR_ACTIVITY_PRE___COMPANY_ID as COMPANY_ID", \
	"SQ_Shortcut_to_WM_LABOR_ACTIVITY_PRE___LOAD_TSTMP as LOAD_TSTMP" \
)

# COMMAND ----------
# Processing node SQ_Shortcut_to_WM_LABOR_ACTIVITY, type SOURCE 
# COLUMN COUNT: 22

SQ_Shortcut_to_WM_LABOR_ACTIVITY = spark.sql(f"""SELECT
LOCATION_ID,
WM_LABOR_ACTIVITY_ID,
WM_LABOR_ACTIVITY_NAME,
WM_LABOR_ACTIVITY_DESC,
WM_ACTIVITY_TYPE,
WM_CRIT_RULE_TYPE,
WM_PERMISSION_ID,
WM_COMPANY_ID,
WM_AIL_ACTIVITY_FLAG,
WM_PROMPT_LOCN_FLAG,
WM_DISPLAY_EPP_FLAG,
WM_INCLUDE_TRAVEL_FLAG,
WM_HIBERNATE_VERSION,
WM_CREATED_SOURCE_TYPE,
WM_CREATED_SOURCE,
WM_CREATED_TSTMP,
LAST_UPDATED_SOURCE_TYPE,
LAST_UPDATED_SOURCE,
WM_LAST_UPDATED_TSTMP,
DELETE_FLAG,
UPDATE_TSTMP,
LOAD_TSTMP
FROM {refined_perf_table}
WHERE {Del_Logic} 1=0 and 
DELETE_FLAG = 0""").withColumn("sys_row_id", monotonically_increasing_id()).withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node SQ_Shortcut_to_SITE_PROFILE, type SOURCE 
# COLUMN COUNT: 2

SQ_Shortcut_to_SITE_PROFILE = spark.sql(f"""SELECT LOCATION_ID, STORE_NBR FROM {site_profile_table}""").withColumn("sys_row_id", monotonically_increasing_id())

# COMMAND ----------
# Processing node JNR_SITE_PROFILE, type JOINER 
# COLUMN COUNT: 21

JNR_SITE_PROFILE = EXPTRANS.join(SQ_Shortcut_to_SITE_PROFILE,[EXPTRANS.o_DC_NBR == SQ_Shortcut_to_SITE_PROFILE.STORE_NBR],'inner')

# COMMAND ----------
# Processing node JNR_WM_LABOR_ACTIVITY, type JOINER . Note: using additional SELECT to rename incoming columns
# COLUMN COUNT: 41

# for each involved DataFrame, append the dataframe name to each column
JNR_SITE_PROFILE_temp = JNR_SITE_PROFILE.toDF(*["JNR_SITE_PROFILE___" + col for col in JNR_SITE_PROFILE.columns])
SQ_Shortcut_to_WM_LABOR_ACTIVITY_temp = SQ_Shortcut_to_WM_LABOR_ACTIVITY.toDF(*["SQ_Shortcut_to_WM_LABOR_ACTIVITY___" + col for col in SQ_Shortcut_to_WM_LABOR_ACTIVITY.columns])

JNR_WM_LABOR_ACTIVITY = SQ_Shortcut_to_WM_LABOR_ACTIVITY_temp.join(JNR_SITE_PROFILE_temp,[SQ_Shortcut_to_WM_LABOR_ACTIVITY_temp.SQ_Shortcut_to_WM_LABOR_ACTIVITY___LOCATION_ID == JNR_SITE_PROFILE_temp.JNR_SITE_PROFILE___LOCATION_ID, SQ_Shortcut_to_WM_LABOR_ACTIVITY_temp.SQ_Shortcut_to_WM_LABOR_ACTIVITY___WM_LABOR_ACTIVITY_ID == JNR_SITE_PROFILE_temp.JNR_SITE_PROFILE___LABOR_ACTIVITY_ID],'fullouter').selectExpr( \
	"JNR_SITE_PROFILE___LOCATION_ID as LOCATION_ID", \
	"JNR_SITE_PROFILE___LABOR_ACTIVITY_ID as LABOR_ACTIVITY_ID", \
	"JNR_SITE_PROFILE___NAME as NAME", \
	"JNR_SITE_PROFILE___DESCRIPTION as DESCRIPTION", \
	"JNR_SITE_PROFILE___AIL_ACT as AIL_ACT", \
	"JNR_SITE_PROFILE___ACT_TYPE as ACT_TYPE", \
	"JNR_SITE_PROFILE___CREATED_SOURCE_TYPE as CREATED_SOURCE_TYPE", \
	"JNR_SITE_PROFILE___CREATED_SOURCE as CREATED_SOURCE", \
	"JNR_SITE_PROFILE___CREATED_DTTM as CREATED_DTTM", \
	"JNR_SITE_PROFILE___LAST_UPDATED_SOURCE_TYPE as LAST_UPDATED_SOURCE_TYPE", \
	"JNR_SITE_PROFILE___LAST_UPDATED_SOURCE as LAST_UPDATED_SOURCE", \
	"JNR_SITE_PROFILE___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"JNR_SITE_PROFILE___HIBERNATE_VERSION as HIBERNATE_VERSION", \
	"JNR_SITE_PROFILE___PROMPT_LOCN as PROMPT_LOCN", \
	"JNR_SITE_PROFILE___DISPL_EPP as DISPL_EPP", \
	"JNR_SITE_PROFILE___INCLD_TRVL as INCLD_TRVL", \
	"JNR_SITE_PROFILE___CRIT_RULE_TYPE as CRIT_RULE_TYPE", \
	"JNR_SITE_PROFILE___PERMISSION_ID as PERMISSION_ID", \
	"JNR_SITE_PROFILE___COMPANY_ID as COMPANY_ID", \
	"SQ_Shortcut_to_WM_LABOR_ACTIVITY___LOCATION_ID as in_LOCATION_ID", \
	"SQ_Shortcut_to_WM_LABOR_ACTIVITY___WM_LABOR_ACTIVITY_ID as WM_LABOR_ACTIVITY_ID", \
	"SQ_Shortcut_to_WM_LABOR_ACTIVITY___WM_LABOR_ACTIVITY_NAME as WM_LABOR_ACTIVITY_NAME", \
	"SQ_Shortcut_to_WM_LABOR_ACTIVITY___WM_LABOR_ACTIVITY_DESC as WM_LABOR_ACTIVITY_DESC", \
	"SQ_Shortcut_to_WM_LABOR_ACTIVITY___WM_ACTIVITY_TYPE as WM_ACTIVITY_TYPE", \
	"SQ_Shortcut_to_WM_LABOR_ACTIVITY___WM_CRIT_RULE_TYPE as WM_CRIT_RULE_TYPE", \
	"SQ_Shortcut_to_WM_LABOR_ACTIVITY___WM_PERMISSION_ID as WM_PERMISSION_ID", \
	"SQ_Shortcut_to_WM_LABOR_ACTIVITY___WM_COMPANY_ID as WM_COMPANY_ID", \
	"SQ_Shortcut_to_WM_LABOR_ACTIVITY___WM_AIL_ACTIVITY_FLAG as WM_AIL_ACTIVITY_FLAG", \
	"SQ_Shortcut_to_WM_LABOR_ACTIVITY___WM_PROMPT_LOCN_FLAG as WM_PROMPT_LOCN_FLAG", \
	"SQ_Shortcut_to_WM_LABOR_ACTIVITY___WM_DISPLAY_EPP_FLAG as WM_DISPLAY_EPP_FLAG", \
	"SQ_Shortcut_to_WM_LABOR_ACTIVITY___WM_INCLUDE_TRAVEL_FLAG as WM_INCLUDE_TRAVEL_FLAG", \
	"SQ_Shortcut_to_WM_LABOR_ACTIVITY___WM_HIBERNATE_VERSION as WM_HIBERNATE_VERSION", \
	"SQ_Shortcut_to_WM_LABOR_ACTIVITY___WM_CREATED_SOURCE_TYPE as WM_CREATED_SOURCE_TYPE", \
	"SQ_Shortcut_to_WM_LABOR_ACTIVITY___WM_CREATED_SOURCE as WM_CREATED_SOURCE", \
	"SQ_Shortcut_to_WM_LABOR_ACTIVITY___WM_CREATED_TSTMP as WM_CREATED_TSTMP", \
	"SQ_Shortcut_to_WM_LABOR_ACTIVITY___LAST_UPDATED_SOURCE_TYPE as in_LAST_UPDATED_SOURCE_TYPE", \
	"SQ_Shortcut_to_WM_LABOR_ACTIVITY___LAST_UPDATED_SOURCE as in_LAST_UPDATED_SOURCE", \
	"SQ_Shortcut_to_WM_LABOR_ACTIVITY___WM_LAST_UPDATED_TSTMP as WM_LAST_UPDATED_TSTMP", \
	"SQ_Shortcut_to_WM_LABOR_ACTIVITY___DELETE_FLAG as in_DELETE_FLAG", \
	"SQ_Shortcut_to_WM_LABOR_ACTIVITY___UPDATE_TSTMP as in_UPDATE_TSTMP", \
	"SQ_Shortcut_to_WM_LABOR_ACTIVITY___LOAD_TSTMP as in_LOAD_TSTMP")

# COMMAND ----------
# Processing node FIL_UNCHANGED_REC, type FILTER 
# COLUMN COUNT: 41

# for each involved DataFrame, append the dataframe name to each column
JNR_WM_LABOR_ACTIVITY_temp = JNR_WM_LABOR_ACTIVITY.toDF(*["JNR_WM_LABOR_ACTIVITY___" + col for col in JNR_WM_LABOR_ACTIVITY.columns])

FIL_UNCHANGED_REC = JNR_WM_LABOR_ACTIVITY_temp.selectExpr( \
	"JNR_WM_LABOR_ACTIVITY___LOCATION_ID as LOCATION_ID", \
	"JNR_WM_LABOR_ACTIVITY___LABOR_ACTIVITY_ID as LABOR_ACTIVITY_ID", \
	"JNR_WM_LABOR_ACTIVITY___NAME as NAME", \
	"JNR_WM_LABOR_ACTIVITY___DESCRIPTION as DESCRIPTION", \
	"JNR_WM_LABOR_ACTIVITY___AIL_ACT as AIL_ACT", \
	"JNR_WM_LABOR_ACTIVITY___ACT_TYPE as ACT_TYPE", \
	"JNR_WM_LABOR_ACTIVITY___CREATED_SOURCE_TYPE as CREATED_SOURCE_TYPE", \
	"JNR_WM_LABOR_ACTIVITY___CREATED_SOURCE as CREATED_SOURCE", \
	"JNR_WM_LABOR_ACTIVITY___CREATED_DTTM as CREATED_DTTM", \
	"JNR_WM_LABOR_ACTIVITY___LAST_UPDATED_SOURCE_TYPE as LAST_UPDATED_SOURCE_TYPE", \
	"JNR_WM_LABOR_ACTIVITY___LAST_UPDATED_SOURCE as LAST_UPDATED_SOURCE", \
	"JNR_WM_LABOR_ACTIVITY___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"JNR_WM_LABOR_ACTIVITY___HIBERNATE_VERSION as HIBERNATE_VERSION", \
	"JNR_WM_LABOR_ACTIVITY___PROMPT_LOCN as PROMPT_LOCN", \
	"JNR_WM_LABOR_ACTIVITY___DISPL_EPP as DISPL_EPP", \
	"JNR_WM_LABOR_ACTIVITY___INCLD_TRVL as INCLD_TRVL", \
	"JNR_WM_LABOR_ACTIVITY___CRIT_RULE_TYPE as CRIT_RULE_TYPE", \
	"JNR_WM_LABOR_ACTIVITY___PERMISSION_ID as PERMISSION_ID", \
	"JNR_WM_LABOR_ACTIVITY___COMPANY_ID as COMPANY_ID", \
	"JNR_WM_LABOR_ACTIVITY___in_LOCATION_ID as in_LOCATION_ID", \
	"JNR_WM_LABOR_ACTIVITY___WM_LABOR_ACTIVITY_ID as WM_LABOR_ACTIVITY_ID", \
	"JNR_WM_LABOR_ACTIVITY___WM_LABOR_ACTIVITY_NAME as WM_LABOR_ACTIVITY_NAME", \
	"JNR_WM_LABOR_ACTIVITY___WM_LABOR_ACTIVITY_DESC as WM_LABOR_ACTIVITY_DESC", \
	"JNR_WM_LABOR_ACTIVITY___WM_ACTIVITY_TYPE as WM_ACTIVITY_TYPE", \
	"JNR_WM_LABOR_ACTIVITY___WM_CRIT_RULE_TYPE as WM_CRIT_RULE_TYPE", \
	"JNR_WM_LABOR_ACTIVITY___WM_PERMISSION_ID as WM_PERMISSION_ID", \
	"JNR_WM_LABOR_ACTIVITY___WM_COMPANY_ID as WM_COMPANY_ID", \
	"JNR_WM_LABOR_ACTIVITY___WM_AIL_ACTIVITY_FLAG as WM_AIL_ACTIVITY_FLAG", \
	"JNR_WM_LABOR_ACTIVITY___WM_PROMPT_LOCN_FLAG as WM_PROMPT_LOCN_FLAG", \
	"JNR_WM_LABOR_ACTIVITY___WM_DISPLAY_EPP_FLAG as WM_DISPLAY_EPP_FLAG", \
	"JNR_WM_LABOR_ACTIVITY___WM_INCLUDE_TRAVEL_FLAG as WM_INCLUDE_TRAVEL_FLAG", \
	"JNR_WM_LABOR_ACTIVITY___WM_HIBERNATE_VERSION as WM_HIBERNATE_VERSION", \
	"JNR_WM_LABOR_ACTIVITY___WM_CREATED_SOURCE_TYPE as WM_CREATED_SOURCE_TYPE", \
	"JNR_WM_LABOR_ACTIVITY___WM_CREATED_SOURCE as WM_CREATED_SOURCE", \
	"JNR_WM_LABOR_ACTIVITY___WM_CREATED_TSTMP as WM_CREATED_TSTMP", \
	"JNR_WM_LABOR_ACTIVITY___in_LAST_UPDATED_SOURCE_TYPE as in_LAST_UPDATED_SOURCE_TYPE", \
	"JNR_WM_LABOR_ACTIVITY___in_LAST_UPDATED_SOURCE as in_LAST_UPDATED_SOURCE", \
	"JNR_WM_LABOR_ACTIVITY___WM_LAST_UPDATED_TSTMP as WM_LAST_UPDATED_TSTMP", \
	"JNR_WM_LABOR_ACTIVITY___in_DELETE_FLAG as in_DELETE_FLAG", \
	"JNR_WM_LABOR_ACTIVITY___in_UPDATE_TSTMP as in_UPDATE_TSTMP", \
	"JNR_WM_LABOR_ACTIVITY___in_LOAD_TSTMP as in_LOAD_TSTMP") \
    .filter("WM_LABOR_ACTIVITY_ID is Null OR LABOR_ACTIVITY_ID is Null OR ( WM_LABOR_ACTIVITY_ID is not Null AND \
     ( COALESCE(CREATED_DTTM, date'1900-01-01') != COALESCE(WM_CREATED_TSTMP, date'1900-01-01') \
    OR COALESCE(LAST_UPDATED_DTTM, date'1900-01-01') != COALESCE(WM_LAST_UPDATED_TSTMP, date'1900-01-01')))").withColumn("sys_row_id", monotonically_increasing_id())


# COMMAND ----------
# Processing node EXP_UPD_VALIDATOR, type EXPRESSION 
# COLUMN COUNT: 42

# for each involved DataFrame, append the dataframe name to each column
FIL_UNCHANGED_REC_temp = FIL_UNCHANGED_REC.toDF(*["FIL_UNCHANGED_REC___" + col for col in FIL_UNCHANGED_REC.columns]) \
.withColumn("FIL_UNCHANGED_REC___v_CREATED_DTTM", expr("""IF(FIL_UNCHANGED_REC___CREATED_DTTM IS NULL, date'1900-01-01', FIL_UNCHANGED_REC___CREATED_DTTM)""")) \
	.withColumn("FIL_UNCHANGED_REC___v_LAST_UPDATED_DTTM", expr("""IF(FIL_UNCHANGED_REC___LAST_UPDATED_DTTM IS NULL, date'1900-01-01', FIL_UNCHANGED_REC___LAST_UPDATED_DTTM)""")) \
	.withColumn("FIL_UNCHANGED_REC___v_WM_CREATED_TSTMP", expr("""IF(FIL_UNCHANGED_REC___WM_CREATED_TSTMP IS NULL, date'1900-01-01', FIL_UNCHANGED_REC___WM_CREATED_TSTMP)""")) \
	.withColumn("FIL_UNCHANGED_REC___v_WM_LAST_UPDATED_TSTMP", expr("""IF(FIL_UNCHANGED_REC___WM_LAST_UPDATED_TSTMP IS NULL, date'1900-01-01', FIL_UNCHANGED_REC___WM_LAST_UPDATED_TSTMP)"""))

EXP_UPD_VALIDATOR = FIL_UNCHANGED_REC_temp.selectExpr( \
	"FIL_UNCHANGED_REC___sys_row_id as sys_row_id", \
	"FIL_UNCHANGED_REC___LOCATION_ID as LOCATION_ID", \
	"FIL_UNCHANGED_REC___LABOR_ACTIVITY_ID as LABOR_ACTIVITY_ID", \
	"FIL_UNCHANGED_REC___NAME as NAME", \
	"FIL_UNCHANGED_REC___DESCRIPTION as DESCRIPTION", \
	"FIL_UNCHANGED_REC___AIL_ACT as AIL_ACT", \
	"FIL_UNCHANGED_REC___ACT_TYPE as ACT_TYPE", \
	"FIL_UNCHANGED_REC___CREATED_SOURCE_TYPE as CREATED_SOURCE_TYPE", \
	"FIL_UNCHANGED_REC___CREATED_SOURCE as CREATED_SOURCE", \
	"FIL_UNCHANGED_REC___CREATED_DTTM as CREATED_DTTM", \
	"FIL_UNCHANGED_REC___LAST_UPDATED_SOURCE_TYPE as LAST_UPDATED_SOURCE_TYPE", \
	"FIL_UNCHANGED_REC___LAST_UPDATED_SOURCE as LAST_UPDATED_SOURCE", \
	"FIL_UNCHANGED_REC___LAST_UPDATED_DTTM as LAST_UPDATED_DTTM", \
	"FIL_UNCHANGED_REC___HIBERNATE_VERSION as HIBERNATE_VERSION", \
	"FIL_UNCHANGED_REC___PROMPT_LOCN as PROMPT_LOCN", \
	"FIL_UNCHANGED_REC___DISPL_EPP as DISPL_EPP", \
	"FIL_UNCHANGED_REC___INCLD_TRVL as INCLD_TRVL", \
	"FIL_UNCHANGED_REC___CRIT_RULE_TYPE as CRIT_RULE_TYPE", \
	"FIL_UNCHANGED_REC___PERMISSION_ID as PERMISSION_ID", \
	"FIL_UNCHANGED_REC___COMPANY_ID as COMPANY_ID", \
	"FIL_UNCHANGED_REC___in_LOCATION_ID as in_LOCATION_ID", \
	"FIL_UNCHANGED_REC___WM_LABOR_ACTIVITY_ID as WM_LABOR_ACTIVITY_ID", \
	"FIL_UNCHANGED_REC___WM_LABOR_ACTIVITY_NAME as WM_LABOR_ACTIVITY_NAME", \
	"FIL_UNCHANGED_REC___WM_LABOR_ACTIVITY_DESC as WM_LABOR_ACTIVITY_DESC", \
	"FIL_UNCHANGED_REC___WM_ACTIVITY_TYPE as WM_ACTIVITY_TYPE", \
	"FIL_UNCHANGED_REC___WM_CRIT_RULE_TYPE as WM_CRIT_RULE_TYPE", \
	"FIL_UNCHANGED_REC___WM_PERMISSION_ID as WM_PERMISSION_ID", \
	"FIL_UNCHANGED_REC___WM_COMPANY_ID as WM_COMPANY_ID", \
	"FIL_UNCHANGED_REC___WM_AIL_ACTIVITY_FLAG as WM_AIL_ACTIVITY_FLAG", \
	"FIL_UNCHANGED_REC___WM_PROMPT_LOCN_FLAG as WM_PROMPT_LOCN_FLAG", \
	"FIL_UNCHANGED_REC___WM_DISPLAY_EPP_FLAG as WM_DISPLAY_EPP_FLAG", \
	"FIL_UNCHANGED_REC___WM_INCLUDE_TRAVEL_FLAG as WM_INCLUDE_TRAVEL_FLAG", \
	"FIL_UNCHANGED_REC___WM_HIBERNATE_VERSION as WM_HIBERNATE_VERSION", \
	"FIL_UNCHANGED_REC___WM_CREATED_SOURCE_TYPE as WM_CREATED_SOURCE_TYPE", \
	"FIL_UNCHANGED_REC___WM_CREATED_SOURCE as WM_CREATED_SOURCE", \
	"FIL_UNCHANGED_REC___WM_CREATED_TSTMP as WM_CREATED_TSTMP", \
	"FIL_UNCHANGED_REC___in_LAST_UPDATED_SOURCE_TYPE as in_LAST_UPDATED_SOURCE_TYPE", \
	"FIL_UNCHANGED_REC___in_LAST_UPDATED_SOURCE as in_LAST_UPDATED_SOURCE", \
	"FIL_UNCHANGED_REC___WM_LAST_UPDATED_TSTMP as WM_LAST_UPDATED_TSTMP", \
	"IF(FIL_UNCHANGED_REC___LABOR_ACTIVITY_ID IS NULL AND FIL_UNCHANGED_REC___WM_LABOR_ACTIVITY_ID IS NOT NULL, 1, 0) as DELETE_FLAG", \
	"CURRENT_TIMESTAMP as UPDATE_TSTMP", \
	"IF(FIL_UNCHANGED_REC___in_LOAD_TSTMP IS NULL, CURRENT_TIMESTAMP, FIL_UNCHANGED_REC___in_LOAD_TSTMP) as LOAD_TSTMP", \
	f"IF(FIL_UNCHANGED_REC___LABOR_ACTIVITY_ID IS NOT NULL AND FIL_UNCHANGED_REC___WM_LABOR_ACTIVITY_ID IS NULL, 'INSERT', IF(FIL_UNCHANGED_REC___LABOR_ACTIVITY_ID IS NULL AND FIL_UNCHANGED_REC___WM_LABOR_ACTIVITY_ID IS NOT NULL AND ( FIL_UNCHANGED_REC___v_WM_CREATED_TSTMP >= DATE_ADD('{Prev_Run_Dt}',-14) OR FIL_UNCHANGED_REC___v_WM_LAST_UPDATED_TSTMP >= DATE_ADD('{Prev_Run_Dt}',-14) ), 'DELETE', IF(FIL_UNCHANGED_REC___LABOR_ACTIVITY_ID IS NOT NULL AND FIL_UNCHANGED_REC___WM_LABOR_ACTIVITY_ID IS NOT NULL AND ( FIL_UNCHANGED_REC___v_WM_CREATED_TSTMP <> FIL_UNCHANGED_REC___v_CREATED_DTTM OR FIL_UNCHANGED_REC___v_WM_LAST_UPDATED_TSTMP <> FIL_UNCHANGED_REC___v_LAST_UPDATED_DTTM ), 'UPDATE', NULL))) as o_UPD_VALIDATOR" \
)

# COMMAND ----------
# Processing node RTR_DELETE, type ROUTER 
# COLUMN COUNT: 42


# Creating output dataframe for RTR_DELETE, output group DELETE
RTR_DELETE_DELETE = EXP_UPD_VALIDATOR.select(EXP_UPD_VALIDATOR.sys_row_id.alias('sys_row_id'), \
	EXP_UPD_VALIDATOR.LOCATION_ID.alias('LOCATION_ID3'), \
	EXP_UPD_VALIDATOR.LABOR_ACTIVITY_ID.alias('LABOR_ACTIVITY_ID3'), \
	EXP_UPD_VALIDATOR.NAME.alias('NAME3'), \
	EXP_UPD_VALIDATOR.DESCRIPTION.alias('DESCRIPTION3'), \
	EXP_UPD_VALIDATOR.AIL_ACT.alias('AIL_ACT3'), \
	EXP_UPD_VALIDATOR.ACT_TYPE.alias('ACT_TYPE3'), \
	EXP_UPD_VALIDATOR.CREATED_SOURCE_TYPE.alias('CREATED_SOURCE_TYPE3'), \
	EXP_UPD_VALIDATOR.CREATED_SOURCE.alias('CREATED_SOURCE3'), \
	EXP_UPD_VALIDATOR.CREATED_DTTM.alias('CREATED_DTTM3'), \
	EXP_UPD_VALIDATOR.LAST_UPDATED_SOURCE_TYPE.alias('LAST_UPDATED_SOURCE_TYPE3'), \
	EXP_UPD_VALIDATOR.LAST_UPDATED_SOURCE.alias('LAST_UPDATED_SOURCE3'), \
	EXP_UPD_VALIDATOR.LAST_UPDATED_DTTM.alias('LAST_UPDATED_DTTM3'), \
	EXP_UPD_VALIDATOR.HIBERNATE_VERSION.alias('HIBERNATE_VERSION3'), \
	EXP_UPD_VALIDATOR.PROMPT_LOCN.alias('PROMPT_LOCN3'), \
	EXP_UPD_VALIDATOR.DISPL_EPP.alias('DISPL_EPP3'), \
	EXP_UPD_VALIDATOR.INCLD_TRVL.alias('INCLD_TRVL3'), \
	EXP_UPD_VALIDATOR.CRIT_RULE_TYPE.alias('CRIT_RULE_TYPE3'), \
	EXP_UPD_VALIDATOR.PERMISSION_ID.alias('PERMISSION_ID3'), \
	EXP_UPD_VALIDATOR.COMPANY_ID.alias('COMPANY_ID3'), \
	EXP_UPD_VALIDATOR.in_LOCATION_ID.alias('in_LOCATION_ID3'), \
	EXP_UPD_VALIDATOR.WM_LABOR_ACTIVITY_ID.alias('WM_LABOR_ACTIVITY_ID3'), \
	EXP_UPD_VALIDATOR.WM_LABOR_ACTIVITY_NAME.alias('WM_LABOR_ACTIVITY_NAME3'), \
	EXP_UPD_VALIDATOR.WM_LABOR_ACTIVITY_DESC.alias('WM_LABOR_ACTIVITY_DESC3'), \
	EXP_UPD_VALIDATOR.WM_ACTIVITY_TYPE.alias('WM_ACTIVITY_TYPE3'), \
	EXP_UPD_VALIDATOR.WM_CRIT_RULE_TYPE.alias('WM_CRIT_RULE_TYPE3'), \
	EXP_UPD_VALIDATOR.WM_PERMISSION_ID.alias('WM_PERMISSION_ID3'), \
	EXP_UPD_VALIDATOR.WM_COMPANY_ID.alias('WM_COMPANY_ID3'), \
	EXP_UPD_VALIDATOR.WM_AIL_ACTIVITY_FLAG.alias('WM_AIL_ACTIVITY_FLAG3'), \
	EXP_UPD_VALIDATOR.WM_PROMPT_LOCN_FLAG.alias('WM_PROMPT_LOCN_FLAG3'), \
	EXP_UPD_VALIDATOR.WM_DISPLAY_EPP_FLAG.alias('WM_DISPLAY_EPP_FLAG3'), \
	EXP_UPD_VALIDATOR.WM_INCLUDE_TRAVEL_FLAG.alias('WM_INCLUDE_TRAVEL_FLAG3'), \
	EXP_UPD_VALIDATOR.WM_HIBERNATE_VERSION.alias('WM_HIBERNATE_VERSION3'), \
	EXP_UPD_VALIDATOR.WM_CREATED_SOURCE_TYPE.alias('WM_CREATED_SOURCE_TYPE3'), \
	EXP_UPD_VALIDATOR.WM_CREATED_SOURCE.alias('WM_CREATED_SOURCE3'), \
	EXP_UPD_VALIDATOR.WM_CREATED_TSTMP.alias('WM_CREATED_TSTMP3'), \
	EXP_UPD_VALIDATOR.in_LAST_UPDATED_SOURCE_TYPE.alias('in_LAST_UPDATED_SOURCE_TYPE3'), \
	EXP_UPD_VALIDATOR.in_LAST_UPDATED_SOURCE.alias('in_LAST_UPDATED_SOURCE3'), \
	EXP_UPD_VALIDATOR.WM_LAST_UPDATED_TSTMP.alias('WM_LAST_UPDATED_TSTMP3'), \
	EXP_UPD_VALIDATOR.DELETE_FLAG.alias('DELETE_FLAG3'), \
	EXP_UPD_VALIDATOR.UPDATE_TSTMP.alias('UPDATE_TSTMP3'), \
	EXP_UPD_VALIDATOR.LOAD_TSTMP.alias('LOAD_TSTMP3'), \
	EXP_UPD_VALIDATOR.o_UPDATE_VALIDATOR.alias('o_UPD_VALIDATOR3')).filter("o_UPD_VALIDATOR = 'DELETE'")

# Creating output dataframe for RTR_DELETE, output group INSERT_UPDATE
RTR_DELETE_INSERT_UPDATE = EXP_UPD_VALIDATOR.select(EXP_UPD_VALIDATOR.sys_row_id.alias('sys_row_id'), \
	EXP_UPD_VALIDATOR.LOCATION_ID.alias('LOCATION_ID1'), \
	EXP_UPD_VALIDATOR.LABOR_ACTIVITY_ID.alias('LABOR_ACTIVITY_ID1'), \
	EXP_UPD_VALIDATOR.NAME.alias('NAME1'), \
	EXP_UPD_VALIDATOR.DESCRIPTION.alias('DESCRIPTION1'), \
	EXP_UPD_VALIDATOR.AIL_ACT.alias('AIL_ACT1'), \
	EXP_UPD_VALIDATOR.ACT_TYPE.alias('ACT_TYPE1'), \
	EXP_UPD_VALIDATOR.CREATED_SOURCE_TYPE.alias('CREATED_SOURCE_TYPE1'), \
	EXP_UPD_VALIDATOR.CREATED_SOURCE.alias('CREATED_SOURCE1'), \
	EXP_UPD_VALIDATOR.CREATED_DTTM.alias('CREATED_DTTM1'), \
	EXP_UPD_VALIDATOR.LAST_UPDATED_SOURCE_TYPE.alias('LAST_UPDATED_SOURCE_TYPE1'), \
	EXP_UPD_VALIDATOR.LAST_UPDATED_SOURCE.alias('LAST_UPDATED_SOURCE1'), \
	EXP_UPD_VALIDATOR.LAST_UPDATED_DTTM.alias('LAST_UPDATED_DTTM1'), \
	EXP_UPD_VALIDATOR.HIBERNATE_VERSION.alias('HIBERNATE_VERSION1'), \
	EXP_UPD_VALIDATOR.PROMPT_LOCN.alias('PROMPT_LOCN1'), \
	EXP_UPD_VALIDATOR.DISPL_EPP.alias('DISPL_EPP1'), \
	EXP_UPD_VALIDATOR.INCLD_TRVL.alias('INCLD_TRVL1'), \
	EXP_UPD_VALIDATOR.CRIT_RULE_TYPE.alias('CRIT_RULE_TYPE1'), \
	EXP_UPD_VALIDATOR.PERMISSION_ID.alias('PERMISSION_ID1'), \
	EXP_UPD_VALIDATOR.COMPANY_ID.alias('COMPANY_ID1'), \
	EXP_UPD_VALIDATOR.in_LOCATION_ID.alias('in_LOCATION_ID1'), \
	EXP_UPD_VALIDATOR.WM_LABOR_ACTIVITY_ID.alias('WM_LABOR_ACTIVITY_ID1'), \
	EXP_UPD_VALIDATOR.WM_LABOR_ACTIVITY_NAME.alias('WM_LABOR_ACTIVITY_NAME1'), \
	EXP_UPD_VALIDATOR.WM_LABOR_ACTIVITY_DESC.alias('WM_LABOR_ACTIVITY_DESC1'), \
	EXP_UPD_VALIDATOR.WM_ACTIVITY_TYPE.alias('WM_ACTIVITY_TYPE1'), \
	EXP_UPD_VALIDATOR.WM_CRIT_RULE_TYPE.alias('WM_CRIT_RULE_TYPE1'), \
	EXP_UPD_VALIDATOR.WM_PERMISSION_ID.alias('WM_PERMISSION_ID1'), \
	EXP_UPD_VALIDATOR.WM_COMPANY_ID.alias('WM_COMPANY_ID1'), \
	EXP_UPD_VALIDATOR.WM_AIL_ACTIVITY_FLAG.alias('WM_AIL_ACTIVITY_FLAG1'), \
	EXP_UPD_VALIDATOR.WM_PROMPT_LOCN_FLAG.alias('WM_PROMPT_LOCN_FLAG1'), \
	EXP_UPD_VALIDATOR.WM_DISPLAY_EPP_FLAG.alias('WM_DISPLAY_EPP_FLAG1'), \
	EXP_UPD_VALIDATOR.WM_INCLUDE_TRAVEL_FLAG.alias('WM_INCLUDE_TRAVEL_FLAG1'), \
	EXP_UPD_VALIDATOR.WM_HIBERNATE_VERSION.alias('WM_HIBERNATE_VERSION1'), \
	EXP_UPD_VALIDATOR.WM_CREATED_SOURCE_TYPE.alias('WM_CREATED_SOURCE_TYPE1'), \
	EXP_UPD_VALIDATOR.WM_CREATED_SOURCE.alias('WM_CREATED_SOURCE1'), \
	EXP_UPD_VALIDATOR.WM_CREATED_TSTMP.alias('WM_CREATED_TSTMP1'), \
	EXP_UPD_VALIDATOR.in_LAST_UPDATED_SOURCE_TYPE.alias('in_LAST_UPDATED_SOURCE_TYPE1'), \
	EXP_UPD_VALIDATOR.in_LAST_UPDATED_SOURCE.alias('in_LAST_UPDATED_SOURCE1'), \
	EXP_UPD_VALIDATOR.WM_LAST_UPDATED_TSTMP.alias('WM_LAST_UPDATED_TSTMP1'), \
	EXP_UPD_VALIDATOR.DELETE_FLAG.alias('DELETE_FLAG1'), \
	EXP_UPD_VALIDATOR.UPDATE_TSTMP.alias('UPDATE_TSTMP1'), \
	EXP_UPD_VALIDATOR.LOAD_TSTMP.alias('LOAD_TSTMP1'), \
	EXP_UPD_VALIDATOR.o_UPDATE_VALIDATOR.alias('o_UPD_VALIDATOR1')).filter("o_UPD_VALIDATOR = 'INSERT' OR o_UPD_VALIDATOR = 'UPDATE'")


# COMMAND ----------
# Processing node UPD_INS_UPD, type UPDATE_STRATEGY 
# COLUMN COUNT: 23

# for each involved DataFrame, append the dataframe name to each column
RTR_DELETE_INSERT_UPDATE_temp = RTR_DELETE_INSERT_UPDATE.toDF(*["RTR_DELETE_INSERT_UPDATE___" + col for col in RTR_DELETE_INSERT_UPDATE.columns])

UPD_INS_UPD = RTR_DELETE_INSERT_UPDATE_temp.selectExpr( \
	"RTR_DELETE_INSERT_UPDATE___LOCATION_ID1 as LOCATION_ID1", \
	"RTR_DELETE_INSERT_UPDATE___LABOR_ACTIVITY_ID1 as LABOR_ACTIVITY_ID1", \
	"RTR_DELETE_INSERT_UPDATE___NAME1 as NAME1", \
	"RTR_DELETE_INSERT_UPDATE___DESCRIPTION1 as DESCRIPTION1", \
	"RTR_DELETE_INSERT_UPDATE___ACT_TYPE1 as ACT_TYPE1", \
	"RTR_DELETE_INSERT_UPDATE___CRIT_RULE_TYPE1 as CRIT_RULE_TYPE1", \
	"RTR_DELETE_INSERT_UPDATE___PERMISSION_ID1 as PERMISSION_ID1", \
	"RTR_DELETE_INSERT_UPDATE___COMPANY_ID1 as COMPANY_ID1", \
	"RTR_DELETE_INSERT_UPDATE___AIL_ACT1 as AIL_ACT1", \
	"RTR_DELETE_INSERT_UPDATE___PROMPT_LOCN1 as PROMPT_LOCN1", \
	"RTR_DELETE_INSERT_UPDATE___DISPL_EPP1 as DISPL_EPP1", \
	"RTR_DELETE_INSERT_UPDATE___INCLD_TRVL1 as INCLD_TRVL1", \
	"RTR_DELETE_INSERT_UPDATE___HIBERNATE_VERSION1 as HIBERNATE_VERSION1", \
	"RTR_DELETE_INSERT_UPDATE___CREATED_SOURCE_TYPE1 as CREATED_SOURCE_TYPE1", \
	"RTR_DELETE_INSERT_UPDATE___CREATED_SOURCE1 as CREATED_SOURCE1", \
	"RTR_DELETE_INSERT_UPDATE___CREATED_DTTM1 as CREATED_DTTM1", \
	"RTR_DELETE_INSERT_UPDATE___LAST_UPDATED_SOURCE_TYPE1 as LAST_UPDATED_SOURCE_TYPE1", \
	"RTR_DELETE_INSERT_UPDATE___LAST_UPDATED_SOURCE1 as LAST_UPDATED_SOURCE1", \
	"RTR_DELETE_INSERT_UPDATE___LAST_UPDATED_DTTM1 as LAST_UPDATED_DTTM1", \
	"RTR_DELETE_INSERT_UPDATE___DELETE_FLAG1 as DELETE_FLAG1", \
	"RTR_DELETE_INSERT_UPDATE___UPDATE_TSTMP1 as UPDATE_TSTMP1", \
	"RTR_DELETE_INSERT_UPDATE___LOAD_TSTMP1 as LOAD_TSTMP1", \
	"RTR_DELETE_INSERT_UPDATE___o_UPD_VALIDATOR1 as o_UPD_VALIDATOR1") \
	.withColumn('pyspark_data_action', when(col('o_UPD_VALIDATOR1') ==(lit('INSERT')), lit(0)).when(col('o_UPD_VALIDATOR1') ==(lit('UPDATE')), lit(1)))

# COMMAND ----------
# Processing node UPD_DELETE, type UPDATE_STRATEGY 
# COLUMN COUNT: 23

# for each involved DataFrame, append the dataframe name to each column
RTR_DELETE_DELETE_temp = RTR_DELETE_DELETE.toDF(*["RTR_DELETE_DELETE___" + col for col in RTR_DELETE_DELETE.columns])

UPD_DELETE = RTR_DELETE_DELETE_temp.selectExpr( \
	"RTR_DELETE_DELETE___in_LOCATION_ID3 as in_LOCATION_ID3", \
	"RTR_DELETE_DELETE___WM_LABOR_ACTIVITY_ID3 as WM_LABOR_ACTIVITY_ID3", \
	"RTR_DELETE_DELETE___WM_LABOR_ACTIVITY_NAME3 as WM_LABOR_ACTIVITY_NAME3", \
	"RTR_DELETE_DELETE___WM_LABOR_ACTIVITY_DESC3 as WM_LABOR_ACTIVITY_DESC3", \
	"RTR_DELETE_DELETE___WM_ACTIVITY_TYPE3 as WM_ACTIVITY_TYPE3", \
	"RTR_DELETE_DELETE___WM_CRIT_RULE_TYPE3 as WM_CRIT_RULE_TYPE3", \
	"RTR_DELETE_DELETE___WM_PERMISSION_ID3 as WM_PERMISSION_ID3", \
	"RTR_DELETE_DELETE___WM_COMPANY_ID3 as WM_COMPANY_ID3", \
	"RTR_DELETE_DELETE___WM_AIL_ACTIVITY_FLAG3 as WM_AIL_ACTIVITY_FLAG3", \
	"RTR_DELETE_DELETE___WM_PROMPT_LOCN_FLAG3 as WM_PROMPT_LOCN_FLAG3", \
	"RTR_DELETE_DELETE___WM_DISPLAY_EPP_FLAG3 as WM_DISPLAY_EPP_FLAG3", \
	"RTR_DELETE_DELETE___WM_INCLUDE_TRAVEL_FLAG3 as WM_INCLUDE_TRAVEL_FLAG3", \
	"RTR_DELETE_DELETE___WM_HIBERNATE_VERSION3 as WM_HIBERNATE_VERSION3", \
	"RTR_DELETE_DELETE___WM_CREATED_SOURCE_TYPE3 as WM_CREATED_SOURCE_TYPE3", \
	"RTR_DELETE_DELETE___WM_CREATED_SOURCE3 as WM_CREATED_SOURCE3", \
	"RTR_DELETE_DELETE___WM_CREATED_TSTMP3 as WM_CREATED_TSTMP3", \
	"RTR_DELETE_DELETE___in_LAST_UPDATED_SOURCE_TYPE3 as in_LAST_UPDATED_SOURCE_TYPE3", \
	"RTR_DELETE_DELETE___in_LAST_UPDATED_SOURCE3 as in_LAST_UPDATED_SOURCE3", \
	"RTR_DELETE_DELETE___WM_LAST_UPDATED_TSTMP3 as WM_LAST_UPDATED_TSTMP3", \
	"RTR_DELETE_DELETE___DELETE_FLAG3 as DELETE_FLAG3", \
	"RTR_DELETE_DELETE___UPDATE_TSTMP3 as UPDATE_TSTMP3", \
	"RTR_DELETE_DELETE___LOAD_TSTMP3 as LOAD_TSTMP3", \
	"RTR_DELETE_DELETE___o_UPD_VALIDATOR3 as o_UPD_VALIDATOR3") \
	.withColumn('pyspark_data_action', lit(1))

# COMMAND ----------
# Processing node Shortcut_to_WM_LABOR_ACTIVITY2, type TARGET 
# COLUMN COUNT: 22


# Shortcut_to_WM_LABOR_ACTIVITY2 = UPD_DELETE.selectExpr( \
# 	"CAST(in_LOCATION_ID3 AS BIGINT) as LOCATION_ID", \
# 	"CAST(WM_LABOR_ACTIVITY_ID3 AS BIGINT) as WM_LABOR_ACTIVITY_ID", \
# 	"CAST(WM_LABOR_ACTIVITY_NAME3 AS STRING) as WM_LABOR_ACTIVITY_NAME", \
# 	"CAST(WM_LABOR_ACTIVITY_DESC3 AS STRING) as WM_LABOR_ACTIVITY_DESC", \
# 	"CAST(WM_ACTIVITY_TYPE3 AS STRING) as WM_ACTIVITY_TYPE", \
# 	"CAST(WM_CRIT_RULE_TYPE3 AS STRING) as WM_CRIT_RULE_TYPE", \
# 	"CAST(WM_PERMISSION_ID3 AS BIGINT) as WM_PERMISSION_ID", \
# 	"CAST(WM_COMPANY_ID3 AS BIGINT) as WM_COMPANY_ID", \
# 	"CAST(WM_AIL_ACTIVITY_FLAG3 AS STRING) as WM_AIL_ACTIVITY_FLAG", \
# 	"CAST(WM_PROMPT_LOCN_FLAG3 AS BIGINT) as WM_PROMPT_LOCN_FLAG", \
# 	"CAST(WM_DISPLAY_EPP_FLAG3 AS BIGINT) as WM_DISPLAY_EPP_FLAG", \
# 	"CAST(WM_INCLUDE_TRAVEL_FLAG3 AS BIGINT) as WM_INCLUDE_TRAVEL_FLAG", \
# 	"CAST(WM_HIBERNATE_VERSION3 AS BIGINT) as WM_HIBERNATE_VERSION", \
# 	"CAST(WM_CREATED_SOURCE_TYPE3 AS BIGINT) as WM_CREATED_SOURCE_TYPE", \
# 	"CAST(WM_CREATED_SOURCE3 AS STRING) as WM_CREATED_SOURCE", \
# 	"CAST(WM_CREATED_TSTMP3 AS TIMESTAMP) as WM_CREATED_TSTMP", \
# 	"CAST(in_LAST_UPDATED_SOURCE_TYPE3 AS BIGINT) as LAST_UPDATED_SOURCE_TYPE", \
# 	"CAST(in_LAST_UPDATED_SOURCE3 AS STRING) as LAST_UPDATED_SOURCE", \
# 	"CAST(WM_LAST_UPDATED_TSTMP3 AS TIMESTAMP) as WM_LAST_UPDATED_TSTMP", \
# 	"CAST(DELETE_FLAG3 AS BIGINT) as DELETE_FLAG", \
# 	"CAST(UPDATE_TSTMP3 AS TIMESTAMP) as UPDATE_TSTMP", \
# 	"CAST(LOAD_TSTMP3 AS TIMESTAMP) as LOAD_TSTMP" \
# )
# Shortcut_to_WM_LABOR_ACTIVITY2.write.saveAsTable(f'{raw}.WM_LABOR_ACTIVITY')

# COMMAND ----------
# Processing node Shortcut_to_WM_LABOR_ACTIVITY1, type TARGET 
# COLUMN COUNT: 22

Shortcut_to_WM_LABOR_ACTIVITY1 = UPD_INS_UPD.selectExpr(
	"CAST(LOCATION_ID1 AS BIGINT) as LOCATION_ID",
	"CAST(LABOR_ACTIVITY_ID1 AS DECIMAL(9,0)) as WM_LABOR_ACTIVITY_ID",
	"CAST(NAME1 AS STRING) as WM_LABOR_ACTIVITY_NAME",
	"CAST(DESCRIPTION1 AS STRING) as WM_LABOR_ACTIVITY_DESC",
	"CAST(ACT_TYPE1 AS STRING) as WM_ACTIVITY_TYPE",
	"CAST(CRIT_RULE_TYPE1 AS STRING) as WM_CRIT_RULE_TYPE",
	"CAST(PERMISSION_ID1 AS DECIMAL(9,0)) as WM_PERMISSION_ID",
	"CAST(COMPANY_ID1 AS DECIMAL(9,0)) as WM_COMPANY_ID",
	"CAST(AIL_ACT1 AS STRING) as WM_AIL_ACTIVITY_FLAG",
	"CAST(PROMPT_LOCN1 AS DECIMAL(1,0)) as WM_PROMPT_LOCN_FLAG",
	"CAST(DISPL_EPP1 AS DECIMAL(1,0)) as WM_DISPLAY_EPP_FLAG",
	"CAST(INCLD_TRVL1 AS DECIMAL(1,0)) as WM_INCLUDE_TRAVEL_FLAG",
	"CAST(HIBERNATE_VERSION1 AS DECIMAL(10,0)) as WM_HIBERNATE_VERSION",
	"CAST(CREATED_SOURCE_TYPE1 AS DECIMAL(2,0)) as WM_CREATED_SOURCE_TYPE",
	"CAST(CREATED_SOURCE1 AS STRING) as WM_CREATED_SOURCE",
	"CAST(CREATED_DTTM1 AS TIMESTAMP) as WM_CREATED_TSTMP",
	"CAST(LAST_UPDATED_SOURCE_TYPE1 AS DECIMAL(2,0)) as LAST_UPDATED_SOURCE_TYPE",
	"CAST(LAST_UPDATED_SOURCE1 AS STRING) as LAST_UPDATED_SOURCE",
	"CAST(LAST_UPDATED_DTTM1 AS TIMESTAMP) as WM_LAST_UPDATED_TSTMP",
	"CAST(DELETE_FLAG1 AS DECIMAL(1,0)) as DELETE_FLAG",
	"CAST(UPDATE_TSTMP1 AS TIMESTAMP) as UPDATE_TSTMP",
	"CAST(LOAD_TSTMP1 AS TIMESTAMP) as LOAD_TSTMP", 
    "pyspark_data_action" 
)

try:
  primary_key = """source.LOCATION_ID = target.LOCATION_ID AND source.WM_LABOR_ACTIVITY_ID = target.WM_LABOR_ACTIVITY_ID"""
#   refined_perf_table = "WM_LABOR_ACTIVITY"
  executeMerge(Shortcut_to_WM_LABOR_ACTIVITY1, refined_perf_table, primary_key)
  logger.info(f"Merge with {refined_perf_table} completed]")
  logPrevRunDt("WM_LABOR_ACTIVITY", "WM_LABOR_ACTIVITY", "Completed", "N/A", f"{raw}.log_run_details")
except Exception as e:
  logPrevRunDt("WM_LABOR_ACTIVITY", "WM_LABOR_ACTIVITY","Failed",str(e), f"{raw}.log_run_details", )
  raise e
	